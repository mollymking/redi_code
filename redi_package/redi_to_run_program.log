--------------------------------------------------------------------------------
      name:  redi_to_run_program
       log:  /Users/mollymking/Documents/SocResearch/Dissertation/redi/redi_pack
> age/redi_to_run_program.log
  log type:  text
 opened on:  13 Oct 2021, 13:01:47

. display "$S_DATE  $S_TIME"
13 Oct 2021  13:01:47

. 
. ***--------------------------***
. // # PROGRAM SETUP
. ***--------------------------***
. 
. version 16 // keeps program consistent for future replications

. set linesize 80

. clear all

. set more off

. set seed 1

. 
. ***--------------------------***
. // # REDI
. ***--------------------------***
. 
. *for debugging:
. noisily

. set trace on 

. program drop _all

. discard

. 
. use $deriv/redi13_ACS2019sample.dta, clear
(Streamlined ACS data, 2019)

. cd $redi/redi_package/
/Users/mollymking/Documents/SocResearch/Dissertation/redi/redi_package

. 
. redi acs_hhinc year, generate(ca_redi_inc19) cpstype(household)
  --------------------------------------------------------------- begin redi ---
  - syntax varlist(min=2 max=2), Generate(name) [cpstype(string)]
  - tempfile research_data
  - save `research_data'
  = save /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.000001
file /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.000001 saved
  - local inc_cat_var : word 1 of `varlist'
  = local inc_cat_var : word 1 of acs_hhinc year
  - local research_year : word 2 of `varlist'
  = local research_year : word 2 of acs_hhinc year
  - local new_variable "`generate'"
  = local new_variable "ca_redi_inc19"
  - if `"`using'"' == "" {
  = if `""' == "" {
  - local reference_dataset $temp/redi13_cps_state_ca.dta
  = local reference_dataset ~/Documents/SocResearch/Dissertation/data/data_temp/
> redi13_cps_state_ca.dta
  - }
  - else {
    local reference_dataset `"`using'"'
    }
  - if `"`using'"' == "" {
  = if `""' == "" {
  - local ref_year "year"
  - }
  - else {
    local ref_income_var : word 1 of `refvars'
    local ref_year : word 2 of `refvars'
    if "`ref_year'" == "" {
    local ref_year "nys"
    }
    }
  - if "`cpstype'" == "family" & `"`using'"' == "" {
  = if "household" == "family" & `""' == "" {
    use `reference_dataset', clear
    keep if pernum == 1
    svyset [pweight=asecwt]
    compress
    tempfile ref_data
    save `ref_data'
    local ref_income_var "ftotval"
    di "Income type set as `inc_var' income; " "Calculating family income using 
> ftotval CPS-ASEC variable."
    }
  - else if "`cpstype'" == "household" & `"`using'"' == "" {
  = else if "household" == "household" & `""' == "" {
  - use `reference_dataset', clear
  = use ~/Documents/SocResearch/Dissertation/data/data_temp/redi13_cps_state_ca.
> dta, clear
(Streamlined CPS ASEC data, CA 2019)
  - keep if pernum == 1
(0 observations deleted)
  - svyset [pweight=asecwth]
    ----------------------------------------------------------- begin svyset ---
    - if _caller() < 9 {
      svyset_8 `0'
      exit
      }
    - capture Display
      ------------------------------------------------- begin svyset.Display ---
      - syntax [, eclass ]
      - Get, `eclass'
      = Get, 
        --------------------------------------------------- begin svyset.Get ---
        - syntax [, eclass]
        - if "`eclass'" != "" {
        = if "" != "" {
          if "`e(prefix)'" != "svy" {
          di as err "svy estimation results not found"
          exit 301
          }
          GetEclass
          return add
          exit
          }
        - local version : char _dta[_svy_version]
        - capture confirm integer number `version'
        = capture confirm integer number 2
        - if c(rc) {
          GetOld
          return add
          exit
          }
        - local is_set 0
        - _svyset get wvar
          ---------------------------------------------------- begin _svyset ---
          - version 9
          - gettoken cmd 0 : 0
          - if "`cmd'" == "clear" {
          = if "get" == "clear" {
            Clear `0'
            exit
            }
          - if "`cmd'" == "set" {
          = if "get" == "set" {
            Set `0'
            exit
            }
          - if "`cmd'" == "get" {
          = if "get" == "get" {
          - Get `0'
          = Get  wvar
            ---------------------------------------------- begin _svyset.Get ---
            - if `:word count `0'' > 2 {
            = if 1 > 2 {
              di as err "too many arguments"
              exit 103
              }
            - args name i
            - CheckName `name'
            = CheckName wvar
              -------------------------------------- begin _svyset.CheckName ---
              - local 0 `", `0'"'
              = local 0 `", wvar"'
              - capture syntax [, WTYPE WEXP WVAR PWeight IWeight VCE MSE BRRwei
> ght FAY BSRweight BSN JKRweight SDRweight SDRFPC DOF POSTStrata POSTWeight CAL
> Method CALMOdel CALOpts SINGLEunit SU STRata FPC Weight STAGES stages_wt ]
              - if c(rc) {
                di as err "invalid survey characteristic"
                exit 198
                }
              - local gname `stages' `stages_wt' `pweight' `iweight' `wtype' `wv
> ar' `wexp' `vce' `mse' `brrweight' `fay' `bsrweight' `bsn' `jkrweight' `sdrwei
> ght' `sdrfpc' `dof' `poststrata' `postweight' `calmethod' `calmodel' `calopts'
>  `singleunit'
              = local gname      wvar                 
              - local sname `su' `strata' `fpc' `weight'
              = local sname    
              - local k : word count `gname' `sname'
              = local k : word count wvar 
              - if `k' > 1 {
              = if 1 > 1 {
                di as err "too many names"
                exit 103
                }
              - if `k' == 0 {
              = if 1 == 0 {
                di as err "name required"
                exit 100
                }
              - sreturn local gname `gname'
              = sreturn local gname wvar
              - sreturn local sname `sname'
              = sreturn local sname 
              ---------------------------------------- end _svyset.CheckName ---
            - if "`s(sname)'" != "" {
            = if "" != "" {
              local name `s(sname)'
              CheckPosInt `i'
              }
            - else local name `s(gname)'
            = else local name wvar
            - if inlist("`name'", "wtype", "wvar", "wexp") {
            = if inlist("wvar", "wtype", "wvar", "wexp") {
            - local wtype : char _dta[_svy_wtype]
            - local wvar : char _dta[_svy_wvar]
            - if `"`wtype'`wvar'"' != "" {
            = if `"pweightasecwth"' != "" {
            - if `"`wtype'"' == "" {
            = if `"pweight"' == "" {
              di as err "error in svy settings; weight variable set without weig
> ht type"
              exit 459
              }
            - if `"`wvar'"' == "" {
            = if `"asecwth"' == "" {
              "error in svy settings; weight type set without weight variable"
              exit 459
              }
            - CheckName `wtype'
            = CheckName pweight
              -------------------------------------- begin _svyset.CheckName ---
              - local 0 `", `0'"'
              = local 0 `", pweight"'
              - capture syntax [, WTYPE WEXP WVAR PWeight IWeight VCE MSE BRRwei
> ght FAY BSRweight BSN JKRweight SDRweight SDRFPC DOF POSTStrata POSTWeight CAL
> Method CALMOdel CALOpts SINGLEunit SU STRata FPC Weight STAGES stages_wt ]
              - if c(rc) {
                di as err "invalid survey characteristic"
                exit 198
                }
              - local gname `stages' `stages_wt' `pweight' `iweight' `wtype' `wv
> ar' `wexp' `vce' `mse' `brrweight' `fay' `bsrweight' `bsn' `jkrweight' `sdrwei
> ght' `sdrfpc' `dof' `poststrata' `postweight' `calmethod' `calmodel' `calopts'
>  `singleunit'
              = local gname   pweight                    
              - local sname `su' `strata' `fpc' `weight'
              = local sname    
              - local k : word count `gname' `sname'
              = local k : word count pweight 
              - if `k' > 1 {
              = if 1 > 1 {
                di as err "too many names"
                exit 103
                }
              - if `k' == 0 {
              = if 1 == 0 {
                di as err "name required"
                exit 100
                }
              - sreturn local gname `gname'
              = sreturn local gname pweight
              - sreturn local sname `sname'
              = sreturn local sname 
              ---------------------------------------- end _svyset.CheckName ---
            - local wtype `s(gname)' `s(sname)'
            = local wtype pweight 
            - if !inlist("`wtype'", "pweight", "iweight") {
            = if !inlist("pweight", "pweight", "iweight") {
              "error in svy settings; invalid weight type"
              exit 459
              }
            - CheckNumVar `wvar'
            = CheckNumVar asecwth
              ------------------------------------ begin _svyset.CheckNumVar ---
              - syntax varname(numeric)
              - sreturn local varname `varlist'
              = sreturn local varname asecwth
              -------------------------------------- end _svyset.CheckNumVar ---
            - local wvar `s(varname)'
            = local wvar asecwth
            - local wexp "= `wvar'"
            = local wexp "= asecwth"
            - return local wtype `"`wtype'"'
            = return local wtype `"pweight"'
            - return local wvar `"`wvar'"'
            = return local wvar `"asecwth"'
            - return local wexp `"`wexp'"'
            = return local wexp `"= asecwth"'
            - }
            - exit
            ------------------------------------------------ end _svyset.Get ---
          - exit
          ------------------------------------------------------ end _svyset ---
        - if `"`r(wvar)'"' != "" {
        = if `"asecwth"' != "" {
        - local wt `"[`r(wtype)'`r(wexp)']"'
        = local wt `"[pweight= asecwth]"'
        - return add
        - local is_set 1
        - }
        - _svyset get brr
          ---------------------------------------------------- begin _svyset ---
          - version 9
          - gettoken cmd 0 : 0
          - if "`cmd'" == "clear" {
          = if "get" == "clear" {
            Clear `0'
            exit
            }
          - if "`cmd'" == "set" {
          = if "get" == "set" {
            Set `0'
            exit
            }
          - if "`cmd'" == "get" {
          = if "get" == "get" {
          - Get `0'
          = Get  brr
            ---------------------------------------------- begin _svyset.Get ---
            - if `:word count `0'' > 2 {
            = if 1 > 2 {
              di as err "too many arguments"
              exit 103
              }
            - args name i
            - CheckName `name'
            = CheckName brr
              -------------------------------------- begin _svyset.CheckName ---
              - local 0 `", `0'"'
              = local 0 `", brr"'
              - capture syntax [, WTYPE WEXP WVAR PWeight IWeight VCE MSE BRRwei
> ght FAY BSRweight BSN JKRweight SDRweight SDRFPC DOF POSTStrata POSTWeight CAL
> Method CALMOdel CALOpts SINGLEunit SU STRata FPC Weight STAGES stages_wt ]
              - if c(rc) {
                di as err "invalid survey characteristic"
                exit 198
                }
              - local gname `stages' `stages_wt' `pweight' `iweight' `wtype' `wv
> ar' `wexp' `vce' `mse' `brrweight' `fay' `bsrweight' `bsn' `jkrweight' `sdrwei
> ght' `sdrfpc' `dof' `poststrata' `postweight' `calmethod' `calmodel' `calopts'
>  `singleunit'
              = local gname          brrweight             
              - local sname `su' `strata' `fpc' `weight'
              = local sname    
              - local k : word count `gname' `sname'
              = local k : word count brrweight 
              - if `k' > 1 {
              = if 1 > 1 {
                di as err "too many names"
                exit 103
                }
              - if `k' == 0 {
              = if 1 == 0 {
                di as err "name required"
                exit 100
                }
              - sreturn local gname `gname'
              = sreturn local gname brrweight
              - sreturn local sname `sname'
              = sreturn local sname 
              ---------------------------------------- end _svyset.CheckName ---
            - if "`s(sname)'" != "" {
            = if "" != "" {
              local name `s(sname)'
              CheckPosInt `i'
              }
            - else local name `s(gname)'
            = else local name brrweight
            - if inlist("`name'", "wtype", "wvar", "wexp") {
            = if inlist("brrweight", "wtype", "wvar", "wexp") {
              local wtype : char _dta[_svy_wtype]
              local wvar : char _dta[_svy_wvar]
              if `"`wtype'`wvar'"' != "" {
              if `"`wtype'"' == "" {
              di as err "error in svy settings; weight variable set without weig
> ht type"
              exit 459
              }
              if `"`wvar'"' == "" {
              "error in svy settings; weight type set without weight variable"
              exit 459
              }
              CheckName `wtype'
              local wtype `s(gname)' `s(sname)'
              if !inlist("`wtype'", "pweight", "iweight") {
              "error in svy settings; invalid weight type"
              exit 459
              }
              CheckNumVar `wvar'
              local wvar `s(varname)'
              local wexp "= `wvar'"
              return local wtype `"`wtype'"'
              return local wvar `"`wvar'"'
              return local wexp `"`wexp'"'
              }
              exit
              }
            - if "`name'" == "stages" {
            = if "brrweight" == "stages" {
              local stages : char _dta[_svy_stages]
              capture CheckPosInt `stages'
              if c(rc) {
              return scalar stages = 0
              }
              return scalar stages = `stages'
              exit
              }
            - if "`name'" == "stages_wt" {
            = if "brrweight" == "stages_wt" {
              local stages_wt : char _dta[_svy_stages_wt]
              capture CheckPosInt `stages_wt'
              if c(rc) {
              return scalar stages_wt = 0
              }
              else {
              return scalar stages_wt = `stages_wt'
              }
              exit
              }
            - if inlist("`name'", "vce", "mse") {
            = if inlist("brrweight", "vce", "mse") {
              local vce : char _dta[_svy_vce]
              local mse : char _dta[_svy_mse]
              if `"`vce'`mse'"' != "" {
              _svy_check_vce `vce', `mse'
              return local vce `s(vce)'
              return local mse `s(mse)'
              }
              exit
              }
            - if "`name'" == "brrweight" {
            = if "brrweight" == "brrweight" {
            - local brr : char _dta[_svy_brrweight]
            - if `"`brr'"' != "" {
            = if `""' != "" {
              CheckNumVarlist `brr'
              return local brrweight `s(varlist)'
              }
            - exit
            ------------------------------------------------ end _svyset.Get ---
          - exit
          ------------------------------------------------------ end _svyset ---
        - if "`r(brrweight)'" != "" {
        = if "" != "" {
          local gsets `"`gsets' brrweight(`r(brrweight)')"'
          return add
          local is_set 1
          }
        - _svyset get fay
          ---------------------------------------------------- begin _svyset ---
          - version 9
          - gettoken cmd 0 : 0
          - if "`cmd'" == "clear" {
          = if "get" == "clear" {
            Clear `0'
            exit
            }
          - if "`cmd'" == "set" {
          = if "get" == "set" {
            Set `0'
            exit
            }
          - if "`cmd'" == "get" {
          = if "get" == "get" {
          - Get `0'
          = Get  fay
            ---------------------------------------------- begin _svyset.Get ---
            - if `:word count `0'' > 2 {
            = if 1 > 2 {
              di as err "too many arguments"
              exit 103
              }
            - args name i
            - CheckName `name'
            = CheckName fay
              -------------------------------------- begin _svyset.CheckName ---
              - local 0 `", `0'"'
              = local 0 `", fay"'
              - capture syntax [, WTYPE WEXP WVAR PWeight IWeight VCE MSE BRRwei
> ght FAY BSRweight BSN JKRweight SDRweight SDRFPC DOF POSTStrata POSTWeight CAL
> Method CALMOdel CALOpts SINGLEunit SU STRata FPC Weight STAGES stages_wt ]
              - if c(rc) {
                di as err "invalid survey characteristic"
                exit 198
                }
              - local gname `stages' `stages_wt' `pweight' `iweight' `wtype' `wv
> ar' `wexp' `vce' `mse' `brrweight' `fay' `bsrweight' `bsn' `jkrweight' `sdrwei
> ght' `sdrfpc' `dof' `poststrata' `postweight' `calmethod' `calmodel' `calopts'
>  `singleunit'
              = local gname           fay            
              - local sname `su' `strata' `fpc' `weight'
              = local sname    
              - local k : word count `gname' `sname'
              = local k : word count fay 
              - if `k' > 1 {
              = if 1 > 1 {
                di as err "too many names"
                exit 103
                }
              - if `k' == 0 {
              = if 1 == 0 {
                di as err "name required"
                exit 100
                }
              - sreturn local gname `gname'
              = sreturn local gname fay
              - sreturn local sname `sname'
              = sreturn local sname 
              ---------------------------------------- end _svyset.CheckName ---
            - if "`s(sname)'" != "" {
            = if "" != "" {
              local name `s(sname)'
              CheckPosInt `i'
              }
            - else local name `s(gname)'
            = else local name fay
            - if inlist("`name'", "wtype", "wvar", "wexp") {
            = if inlist("fay", "wtype", "wvar", "wexp") {
              local wtype : char _dta[_svy_wtype]
              local wvar : char _dta[_svy_wvar]
              if `"`wtype'`wvar'"' != "" {
              if `"`wtype'"' == "" {
              di as err "error in svy settings; weight variable set without weig
> ht type"
              exit 459
              }
              if `"`wvar'"' == "" {
              "error in svy settings; weight type set without weight variable"
              exit 459
              }
              CheckName `wtype'
              local wtype `s(gname)' `s(sname)'
              if !inlist("`wtype'", "pweight", "iweight") {
              "error in svy settings; invalid weight type"
              exit 459
              }
              CheckNumVar `wvar'
              local wvar `s(varname)'
              local wexp "= `wvar'"
              return local wtype `"`wtype'"'
              return local wvar `"`wvar'"'
              return local wexp `"`wexp'"'
              }
              exit
              }
            - if "`name'" == "stages" {
            = if "fay" == "stages" {
              local stages : char _dta[_svy_stages]
              capture CheckPosInt `stages'
              if c(rc) {
              return scalar stages = 0
              }
              return scalar stages = `stages'
              exit
              }
            - if "`name'" == "stages_wt" {
            = if "fay" == "stages_wt" {
              local stages_wt : char _dta[_svy_stages_wt]
              capture CheckPosInt `stages_wt'
              if c(rc) {
              return scalar stages_wt = 0
              }
              else {
              return scalar stages_wt = `stages_wt'
              }
              exit
              }
            - if inlist("`name'", "vce", "mse") {
            = if inlist("fay", "vce", "mse") {
              local vce : char _dta[_svy_vce]
              local mse : char _dta[_svy_mse]
              if `"`vce'`mse'"' != "" {
              _svy_check_vce `vce', `mse'
              return local vce `s(vce)'
              return local mse `s(mse)'
              }
              exit
              }
            - if "`name'" == "brrweight" {
            = if "fay" == "brrweight" {
              local brr : char _dta[_svy_brrweight]
              if `"`brr'"' != "" {
              CheckNumVarlist `brr'
              return local brrweight `s(varlist)'
              }
              exit
              }
            - if "`name'" == "fay" {
            = if "fay" == "fay" {
            - local fay : char _dta[_svy_fay]
            - if `"`fay'"' != "" {
            = if `""' != "" {
              CheckFay `fay'
              return scalar fay = `s(value)'
              }
            - exit
            ------------------------------------------------ end _svyset.Get ---
          - exit
          ------------------------------------------------------ end _svyset ---
        - if !inlist("`r(fay)'", "", "0") {
        = if !inlist("", "", "0") {
          local gsets `"`gsets' fay(`r(fay)')"'
          return add
          local is_set 1
          }
        - _svyset get bsr
          ---------------------------------------------------- begin _svyset ---
          - version 9
          - gettoken cmd 0 : 0
          - if "`cmd'" == "clear" {
          = if "get" == "clear" {
            Clear `0'
            exit
            }
          - if "`cmd'" == "set" {
          = if "get" == "set" {
            Set `0'
            exit
            }
          - if "`cmd'" == "get" {
          = if "get" == "get" {
          - Get `0'
          = Get  bsr
            ---------------------------------------------- begin _svyset.Get ---
            - if `:word count `0'' > 2 {
            = if 1 > 2 {
              di as err "too many arguments"
              exit 103
              }
            - args name i
            - CheckName `name'
            = CheckName bsr
              -------------------------------------- begin _svyset.CheckName ---
              - local 0 `", `0'"'
              = local 0 `", bsr"'
              - capture syntax [, WTYPE WEXP WVAR PWeight IWeight VCE MSE BRRwei
> ght FAY BSRweight BSN JKRweight SDRweight SDRFPC DOF POSTStrata POSTWeight CAL
> Method CALMOdel CALOpts SINGLEunit SU STRata FPC Weight STAGES stages_wt ]
              - if c(rc) {
                di as err "invalid survey characteristic"
                exit 198
                }
              - local gname `stages' `stages_wt' `pweight' `iweight' `wtype' `wv
> ar' `wexp' `vce' `mse' `brrweight' `fay' `bsrweight' `bsn' `jkrweight' `sdrwei
> ght' `sdrfpc' `dof' `poststrata' `postweight' `calmethod' `calmodel' `calopts'
>  `singleunit'
              = local gname            bsrweight           
              - local sname `su' `strata' `fpc' `weight'
              = local sname    
              - local k : word count `gname' `sname'
              = local k : word count bsrweight 
              - if `k' > 1 {
              = if 1 > 1 {
                di as err "too many names"
                exit 103
                }
              - if `k' == 0 {
              = if 1 == 0 {
                di as err "name required"
                exit 100
                }
              - sreturn local gname `gname'
              = sreturn local gname bsrweight
              - sreturn local sname `sname'
              = sreturn local sname 
              ---------------------------------------- end _svyset.CheckName ---
            - if "`s(sname)'" != "" {
            = if "" != "" {
              local name `s(sname)'
              CheckPosInt `i'
              }
            - else local name `s(gname)'
            = else local name bsrweight
            - if inlist("`name'", "wtype", "wvar", "wexp") {
            = if inlist("bsrweight", "wtype", "wvar", "wexp") {
              local wtype : char _dta[_svy_wtype]
              local wvar : char _dta[_svy_wvar]
              if `"`wtype'`wvar'"' != "" {
              if `"`wtype'"' == "" {
              di as err "error in svy settings; weight variable set without weig
> ht type"
              exit 459
              }
              if `"`wvar'"' == "" {
              "error in svy settings; weight type set without weight variable"
              exit 459
              }
              CheckName `wtype'
              local wtype `s(gname)' `s(sname)'
              if !inlist("`wtype'", "pweight", "iweight") {
              "error in svy settings; invalid weight type"
              exit 459
              }
              CheckNumVar `wvar'
              local wvar `s(varname)'
              local wexp "= `wvar'"
              return local wtype `"`wtype'"'
              return local wvar `"`wvar'"'
              return local wexp `"`wexp'"'
              }
              exit
              }
            - if "`name'" == "stages" {
            = if "bsrweight" == "stages" {
              local stages : char _dta[_svy_stages]
              capture CheckPosInt `stages'
              if c(rc) {
              return scalar stages = 0
              }
              return scalar stages = `stages'
              exit
              }
            - if "`name'" == "stages_wt" {
            = if "bsrweight" == "stages_wt" {
              local stages_wt : char _dta[_svy_stages_wt]
              capture CheckPosInt `stages_wt'
              if c(rc) {
              return scalar stages_wt = 0
              }
              else {
              return scalar stages_wt = `stages_wt'
              }
              exit
              }
            - if inlist("`name'", "vce", "mse") {
            = if inlist("bsrweight", "vce", "mse") {
              local vce : char _dta[_svy_vce]
              local mse : char _dta[_svy_mse]
              if `"`vce'`mse'"' != "" {
              _svy_check_vce `vce', `mse'
              return local vce `s(vce)'
              return local mse `s(mse)'
              }
              exit
              }
            - if "`name'" == "brrweight" {
            = if "bsrweight" == "brrweight" {
              local brr : char _dta[_svy_brrweight]
              if `"`brr'"' != "" {
              CheckNumVarlist `brr'
              return local brrweight `s(varlist)'
              }
              exit
              }
            - if "`name'" == "fay" {
            = if "bsrweight" == "fay" {
              local fay : char _dta[_svy_fay]
              if `"`fay'"' != "" {
              CheckFay `fay'
              return scalar fay = `s(value)'
              }
              exit
              }
            - if "`name'" == "bsrweight" {
            = if "bsrweight" == "bsrweight" {
            - local bsr : char _dta[_svy_bsrweight]
            - if `"`bsr'"' != "" {
            = if `""' != "" {
              CheckNumVarlist `bsr'
              return local bsrweight `s(varlist)'
              }
            - exit
            ------------------------------------------------ end _svyset.Get ---
          - exit
          ------------------------------------------------------ end _svyset ---
        - if "`r(bsrweight)'" != "" {
        = if "" != "" {
          local gsets `"`gsets' bsrweight(`r(bsrweight)')"'
          return add
          local is_set 1
          }
        - _svyset get bsn
          ---------------------------------------------------- begin _svyset ---
          - version 9
          - gettoken cmd 0 : 0
          - if "`cmd'" == "clear" {
          = if "get" == "clear" {
            Clear `0'
            exit
            }
          - if "`cmd'" == "set" {
          = if "get" == "set" {
            Set `0'
            exit
            }
          - if "`cmd'" == "get" {
          = if "get" == "get" {
          - Get `0'
          = Get  bsn
            ---------------------------------------------- begin _svyset.Get ---
            - if `:word count `0'' > 2 {
            = if 1 > 2 {
              di as err "too many arguments"
              exit 103
              }
            - args name i
            - CheckName `name'
            = CheckName bsn
              -------------------------------------- begin _svyset.CheckName ---
              - local 0 `", `0'"'
              = local 0 `", bsn"'
              - capture syntax [, WTYPE WEXP WVAR PWeight IWeight VCE MSE BRRwei
> ght FAY BSRweight BSN JKRweight SDRweight SDRFPC DOF POSTStrata POSTWeight CAL
> Method CALMOdel CALOpts SINGLEunit SU STRata FPC Weight STAGES stages_wt ]
              - if c(rc) {
                di as err "invalid survey characteristic"
                exit 198
                }
              - local gname `stages' `stages_wt' `pweight' `iweight' `wtype' `wv
> ar' `wexp' `vce' `mse' `brrweight' `fay' `bsrweight' `bsn' `jkrweight' `sdrwei
> ght' `sdrfpc' `dof' `poststrata' `postweight' `calmethod' `calmodel' `calopts'
>  `singleunit'
              = local gname             bsn          
              - local sname `su' `strata' `fpc' `weight'
              = local sname    
              - local k : word count `gname' `sname'
              = local k : word count bsn 
              - if `k' > 1 {
              = if 1 > 1 {
                di as err "too many names"
                exit 103
                }
              - if `k' == 0 {
              = if 1 == 0 {
                di as err "name required"
                exit 100
                }
              - sreturn local gname `gname'
              = sreturn local gname bsn
              - sreturn local sname `sname'
              = sreturn local sname 
              ---------------------------------------- end _svyset.CheckName ---
            - if "`s(sname)'" != "" {
            = if "" != "" {
              local name `s(sname)'
              CheckPosInt `i'
              }
            - else local name `s(gname)'
            = else local name bsn
            - if inlist("`name'", "wtype", "wvar", "wexp") {
            = if inlist("bsn", "wtype", "wvar", "wexp") {
              local wtype : char _dta[_svy_wtype]
              local wvar : char _dta[_svy_wvar]
              if `"`wtype'`wvar'"' != "" {
              if `"`wtype'"' == "" {
              di as err "error in svy settings; weight variable set without weig
> ht type"
              exit 459
              }
              if `"`wvar'"' == "" {
              "error in svy settings; weight type set without weight variable"
              exit 459
              }
              CheckName `wtype'
              local wtype `s(gname)' `s(sname)'
              if !inlist("`wtype'", "pweight", "iweight") {
              "error in svy settings; invalid weight type"
              exit 459
              }
              CheckNumVar `wvar'
              local wvar `s(varname)'
              local wexp "= `wvar'"
              return local wtype `"`wtype'"'
              return local wvar `"`wvar'"'
              return local wexp `"`wexp'"'
              }
              exit
              }
            - if "`name'" == "stages" {
            = if "bsn" == "stages" {
              local stages : char _dta[_svy_stages]
              capture CheckPosInt `stages'
              if c(rc) {
              return scalar stages = 0
              }
              return scalar stages = `stages'
              exit
              }
            - if "`name'" == "stages_wt" {
            = if "bsn" == "stages_wt" {
              local stages_wt : char _dta[_svy_stages_wt]
              capture CheckPosInt `stages_wt'
              if c(rc) {
              return scalar stages_wt = 0
              }
              else {
              return scalar stages_wt = `stages_wt'
              }
              exit
              }
            - if inlist("`name'", "vce", "mse") {
            = if inlist("bsn", "vce", "mse") {
              local vce : char _dta[_svy_vce]
              local mse : char _dta[_svy_mse]
              if `"`vce'`mse'"' != "" {
              _svy_check_vce `vce', `mse'
              return local vce `s(vce)'
              return local mse `s(mse)'
              }
              exit
              }
            - if "`name'" == "brrweight" {
            = if "bsn" == "brrweight" {
              local brr : char _dta[_svy_brrweight]
              if `"`brr'"' != "" {
              CheckNumVarlist `brr'
              return local brrweight `s(varlist)'
              }
              exit
              }
            - if "`name'" == "fay" {
            = if "bsn" == "fay" {
              local fay : char _dta[_svy_fay]
              if `"`fay'"' != "" {
              CheckFay `fay'
              return scalar fay = `s(value)'
              }
              exit
              }
            - if "`name'" == "bsrweight" {
            = if "bsn" == "bsrweight" {
              local bsr : char _dta[_svy_bsrweight]
              if `"`bsr'"' != "" {
              CheckNumVarlist `bsr'
              return local bsrweight `s(varlist)'
              }
              exit
              }
            - if "`name'" == "bsn" {
            = if "bsn" == "bsn" {
            - local bsn : char _dta[_svy_bsn]
            - if `"`bsn'"' != "" {
            = if `""' != "" {
              CheckBSN `bsn'
              return scalar bsn = `s(value)'
              }
            - exit
            ------------------------------------------------ end _svyset.Get ---
          - exit
          ------------------------------------------------------ end _svyset ---
        - if !inlist("`r(bsn)'", "", "1") {
        = if !inlist("", "", "1") {
          local gsets `"`gsets' bsn(`r(bsn)')"'
          return add
          local is_set 1
          }
        - _svyset get jkr
          ---------------------------------------------------- begin _svyset ---
          - version 9
          - gettoken cmd 0 : 0
          - if "`cmd'" == "clear" {
          = if "get" == "clear" {
            Clear `0'
            exit
            }
          - if "`cmd'" == "set" {
          = if "get" == "set" {
            Set `0'
            exit
            }
          - if "`cmd'" == "get" {
          = if "get" == "get" {
          - Get `0'
          = Get  jkr
            ---------------------------------------------- begin _svyset.Get ---
            - if `:word count `0'' > 2 {
            = if 1 > 2 {
              di as err "too many arguments"
              exit 103
              }
            - args name i
            - CheckName `name'
            = CheckName jkr
              -------------------------------------- begin _svyset.CheckName ---
              - local 0 `", `0'"'
              = local 0 `", jkr"'
              - capture syntax [, WTYPE WEXP WVAR PWeight IWeight VCE MSE BRRwei
> ght FAY BSRweight BSN JKRweight SDRweight SDRFPC DOF POSTStrata POSTWeight CAL
> Method CALMOdel CALOpts SINGLEunit SU STRata FPC Weight STAGES stages_wt ]
              - if c(rc) {
                di as err "invalid survey characteristic"
                exit 198
                }
              - local gname `stages' `stages_wt' `pweight' `iweight' `wtype' `wv
> ar' `wexp' `vce' `mse' `brrweight' `fay' `bsrweight' `bsn' `jkrweight' `sdrwei
> ght' `sdrfpc' `dof' `poststrata' `postweight' `calmethod' `calmodel' `calopts'
>  `singleunit'
              = local gname              jkrweight         
              - local sname `su' `strata' `fpc' `weight'
              = local sname    
              - local k : word count `gname' `sname'
              = local k : word count jkrweight 
              - if `k' > 1 {
              = if 1 > 1 {
                di as err "too many names"
                exit 103
                }
              - if `k' == 0 {
              = if 1 == 0 {
                di as err "name required"
                exit 100
                }
              - sreturn local gname `gname'
              = sreturn local gname jkrweight
              - sreturn local sname `sname'
              = sreturn local sname 
              ---------------------------------------- end _svyset.CheckName ---
            - if "`s(sname)'" != "" {
            = if "" != "" {
              local name `s(sname)'
              CheckPosInt `i'
              }
            - else local name `s(gname)'
            = else local name jkrweight
            - if inlist("`name'", "wtype", "wvar", "wexp") {
            = if inlist("jkrweight", "wtype", "wvar", "wexp") {
              local wtype : char _dta[_svy_wtype]
              local wvar : char _dta[_svy_wvar]
              if `"`wtype'`wvar'"' != "" {
              if `"`wtype'"' == "" {
              di as err "error in svy settings; weight variable set without weig
> ht type"
              exit 459
              }
              if `"`wvar'"' == "" {
              "error in svy settings; weight type set without weight variable"
              exit 459
              }
              CheckName `wtype'
              local wtype `s(gname)' `s(sname)'
              if !inlist("`wtype'", "pweight", "iweight") {
              "error in svy settings; invalid weight type"
              exit 459
              }
              CheckNumVar `wvar'
              local wvar `s(varname)'
              local wexp "= `wvar'"
              return local wtype `"`wtype'"'
              return local wvar `"`wvar'"'
              return local wexp `"`wexp'"'
              }
              exit
              }
            - if "`name'" == "stages" {
            = if "jkrweight" == "stages" {
              local stages : char _dta[_svy_stages]
              capture CheckPosInt `stages'
              if c(rc) {
              return scalar stages = 0
              }
              return scalar stages = `stages'
              exit
              }
            - if "`name'" == "stages_wt" {
            = if "jkrweight" == "stages_wt" {
              local stages_wt : char _dta[_svy_stages_wt]
              capture CheckPosInt `stages_wt'
              if c(rc) {
              return scalar stages_wt = 0
              }
              else {
              return scalar stages_wt = `stages_wt'
              }
              exit
              }
            - if inlist("`name'", "vce", "mse") {
            = if inlist("jkrweight", "vce", "mse") {
              local vce : char _dta[_svy_vce]
              local mse : char _dta[_svy_mse]
              if `"`vce'`mse'"' != "" {
              _svy_check_vce `vce', `mse'
              return local vce `s(vce)'
              return local mse `s(mse)'
              }
              exit
              }
            - if "`name'" == "brrweight" {
            = if "jkrweight" == "brrweight" {
              local brr : char _dta[_svy_brrweight]
              if `"`brr'"' != "" {
              CheckNumVarlist `brr'
              return local brrweight `s(varlist)'
              }
              exit
              }
            - if "`name'" == "fay" {
            = if "jkrweight" == "fay" {
              local fay : char _dta[_svy_fay]
              if `"`fay'"' != "" {
              CheckFay `fay'
              return scalar fay = `s(value)'
              }
              exit
              }
            - if "`name'" == "bsrweight" {
            = if "jkrweight" == "bsrweight" {
              local bsr : char _dta[_svy_bsrweight]
              if `"`bsr'"' != "" {
              CheckNumVarlist `bsr'
              return local bsrweight `s(varlist)'
              }
              exit
              }
            - if "`name'" == "bsn" {
            = if "jkrweight" == "bsn" {
              local bsn : char _dta[_svy_bsn]
              if `"`bsn'"' != "" {
              CheckBSN `bsn'
              return scalar bsn = `s(value)'
              }
              exit
              }
            - if "`name'" == "jkrweight" {
            = if "jkrweight" == "jkrweight" {
            - local jkr : char _dta[_svy_jkrweight]
            - if `"`jkr'"' != "" {
            = if `""' != "" {
              CheckNumVarlist `jkr'
              return local jkrweight `s(varlist)'
              }
            - exit
            ------------------------------------------------ end _svyset.Get ---
          - exit
          ------------------------------------------------------ end _svyset ---
        - if "`r(jkrweight)'" != "" {
        = if "" != "" {
          local gsets `"`gsets' jkrweight(`r(jkrweight)')"'
          return add
          local is_set 1
          }
        - _svyset get sdr
          ---------------------------------------------------- begin _svyset ---
          - version 9
          - gettoken cmd 0 : 0
          - if "`cmd'" == "clear" {
          = if "get" == "clear" {
            Clear `0'
            exit
            }
          - if "`cmd'" == "set" {
          = if "get" == "set" {
            Set `0'
            exit
            }
          - if "`cmd'" == "get" {
          = if "get" == "get" {
          - Get `0'
          = Get  sdr
            ---------------------------------------------- begin _svyset.Get ---
            - if `:word count `0'' > 2 {
            = if 1 > 2 {
              di as err "too many arguments"
              exit 103
              }
            - args name i
            - CheckName `name'
            = CheckName sdr
              -------------------------------------- begin _svyset.CheckName ---
              - local 0 `", `0'"'
              = local 0 `", sdr"'
              - capture syntax [, WTYPE WEXP WVAR PWeight IWeight VCE MSE BRRwei
> ght FAY BSRweight BSN JKRweight SDRweight SDRFPC DOF POSTStrata POSTWeight CAL
> Method CALMOdel CALOpts SINGLEunit SU STRata FPC Weight STAGES stages_wt ]
              - if c(rc) {
                di as err "invalid survey characteristic"
                exit 198
                }
              - local gname `stages' `stages_wt' `pweight' `iweight' `wtype' `wv
> ar' `wexp' `vce' `mse' `brrweight' `fay' `bsrweight' `bsn' `jkrweight' `sdrwei
> ght' `sdrfpc' `dof' `poststrata' `postweight' `calmethod' `calmodel' `calopts'
>  `singleunit'
              = local gname               sdrweight        
              - local sname `su' `strata' `fpc' `weight'
              = local sname    
              - local k : word count `gname' `sname'
              = local k : word count sdrweight 
              - if `k' > 1 {
              = if 1 > 1 {
                di as err "too many names"
                exit 103
                }
              - if `k' == 0 {
              = if 1 == 0 {
                di as err "name required"
                exit 100
                }
              - sreturn local gname `gname'
              = sreturn local gname sdrweight
              - sreturn local sname `sname'
              = sreturn local sname 
              ---------------------------------------- end _svyset.CheckName ---
            - if "`s(sname)'" != "" {
            = if "" != "" {
              local name `s(sname)'
              CheckPosInt `i'
              }
            - else local name `s(gname)'
            = else local name sdrweight
            - if inlist("`name'", "wtype", "wvar", "wexp") {
            = if inlist("sdrweight", "wtype", "wvar", "wexp") {
              local wtype : char _dta[_svy_wtype]
              local wvar : char _dta[_svy_wvar]
              if `"`wtype'`wvar'"' != "" {
              if `"`wtype'"' == "" {
              di as err "error in svy settings; weight variable set without weig
> ht type"
              exit 459
              }
              if `"`wvar'"' == "" {
              "error in svy settings; weight type set without weight variable"
              exit 459
              }
              CheckName `wtype'
              local wtype `s(gname)' `s(sname)'
              if !inlist("`wtype'", "pweight", "iweight") {
              "error in svy settings; invalid weight type"
              exit 459
              }
              CheckNumVar `wvar'
              local wvar `s(varname)'
              local wexp "= `wvar'"
              return local wtype `"`wtype'"'
              return local wvar `"`wvar'"'
              return local wexp `"`wexp'"'
              }
              exit
              }
            - if "`name'" == "stages" {
            = if "sdrweight" == "stages" {
              local stages : char _dta[_svy_stages]
              capture CheckPosInt `stages'
              if c(rc) {
              return scalar stages = 0
              }
              return scalar stages = `stages'
              exit
              }
            - if "`name'" == "stages_wt" {
            = if "sdrweight" == "stages_wt" {
              local stages_wt : char _dta[_svy_stages_wt]
              capture CheckPosInt `stages_wt'
              if c(rc) {
              return scalar stages_wt = 0
              }
              else {
              return scalar stages_wt = `stages_wt'
              }
              exit
              }
            - if inlist("`name'", "vce", "mse") {
            = if inlist("sdrweight", "vce", "mse") {
              local vce : char _dta[_svy_vce]
              local mse : char _dta[_svy_mse]
              if `"`vce'`mse'"' != "" {
              _svy_check_vce `vce', `mse'
              return local vce `s(vce)'
              return local mse `s(mse)'
              }
              exit
              }
            - if "`name'" == "brrweight" {
            = if "sdrweight" == "brrweight" {
              local brr : char _dta[_svy_brrweight]
              if `"`brr'"' != "" {
              CheckNumVarlist `brr'
              return local brrweight `s(varlist)'
              }
              exit
              }
            - if "`name'" == "fay" {
            = if "sdrweight" == "fay" {
              local fay : char _dta[_svy_fay]
              if `"`fay'"' != "" {
              CheckFay `fay'
              return scalar fay = `s(value)'
              }
              exit
              }
            - if "`name'" == "bsrweight" {
            = if "sdrweight" == "bsrweight" {
              local bsr : char _dta[_svy_bsrweight]
              if `"`bsr'"' != "" {
              CheckNumVarlist `bsr'
              return local bsrweight `s(varlist)'
              }
              exit
              }
            - if "`name'" == "bsn" {
            = if "sdrweight" == "bsn" {
              local bsn : char _dta[_svy_bsn]
              if `"`bsn'"' != "" {
              CheckBSN `bsn'
              return scalar bsn = `s(value)'
              }
              exit
              }
            - if "`name'" == "jkrweight" {
            = if "sdrweight" == "jkrweight" {
              local jkr : char _dta[_svy_jkrweight]
              if `"`jkr'"' != "" {
              CheckNumVarlist `jkr'
              return local jkrweight `s(varlist)'
              }
              exit
              }
            - if "`name'" == "sdrweight" {
            = if "sdrweight" == "sdrweight" {
            - local sdr : char _dta[_svy_sdrweight]
            - if `"`sdr'"' != "" {
            = if `""' != "" {
              CheckNumVarlist `sdr'
              return local sdrweight `s(varlist)'
              local fpc : char _dta[_svy_sdrfpc]
              if `"`fpc'"' != "" {
              return local sdrfpc `"`fpc'"'
              }
              }
            - exit
            ------------------------------------------------ end _svyset.Get ---
          - exit
          ------------------------------------------------------ end _svyset ---
        - if "`r(sdrweight)'" != "" {
        = if "" != "" {
          local sdrw "`r(sdrweight)'"
          if "`r(sdrfpc)'" != "" {
          local fpc ", fpc(`r(sdrfpc)')"
          }
          local gsets `"`gsets' sdrweight(`sdrw'`fpc')"'
          return add
          local is_set 1
          }
        - _svyset get dof
          ---------------------------------------------------- begin _svyset ---
          - version 9
          - gettoken cmd 0 : 0
          - if "`cmd'" == "clear" {
          = if "get" == "clear" {
            Clear `0'
            exit
            }
          - if "`cmd'" == "set" {
          = if "get" == "set" {
            Set `0'
            exit
            }
          - if "`cmd'" == "get" {
          = if "get" == "get" {
          - Get `0'
          = Get  dof
            ---------------------------------------------- begin _svyset.Get ---
            - if `:word count `0'' > 2 {
            = if 1 > 2 {
              di as err "too many arguments"
              exit 103
              }
            - args name i
            - CheckName `name'
            = CheckName dof
              -------------------------------------- begin _svyset.CheckName ---
              - local 0 `", `0'"'
              = local 0 `", dof"'
              - capture syntax [, WTYPE WEXP WVAR PWeight IWeight VCE MSE BRRwei
> ght FAY BSRweight BSN JKRweight SDRweight SDRFPC DOF POSTStrata POSTWeight CAL
> Method CALMOdel CALOpts SINGLEunit SU STRata FPC Weight STAGES stages_wt ]
              - if c(rc) {
                di as err "invalid survey characteristic"
                exit 198
                }
              - local gname `stages' `stages_wt' `pweight' `iweight' `wtype' `wv
> ar' `wexp' `vce' `mse' `brrweight' `fay' `bsrweight' `bsn' `jkrweight' `sdrwei
> ght' `sdrfpc' `dof' `poststrata' `postweight' `calmethod' `calmodel' `calopts'
>  `singleunit'
              = local gname                 dof      
              - local sname `su' `strata' `fpc' `weight'
              = local sname    
              - local k : word count `gname' `sname'
              = local k : word count dof 
              - if `k' > 1 {
              = if 1 > 1 {
                di as err "too many names"
                exit 103
                }
              - if `k' == 0 {
              = if 1 == 0 {
                di as err "name required"
                exit 100
                }
              - sreturn local gname `gname'
              = sreturn local gname dof
              - sreturn local sname `sname'
              = sreturn local sname 
              ---------------------------------------- end _svyset.CheckName ---
            - if "`s(sname)'" != "" {
            = if "" != "" {
              local name `s(sname)'
              CheckPosInt `i'
              }
            - else local name `s(gname)'
            = else local name dof
            - if inlist("`name'", "wtype", "wvar", "wexp") {
            = if inlist("dof", "wtype", "wvar", "wexp") {
              local wtype : char _dta[_svy_wtype]
              local wvar : char _dta[_svy_wvar]
              if `"`wtype'`wvar'"' != "" {
              if `"`wtype'"' == "" {
              di as err "error in svy settings; weight variable set without weig
> ht type"
              exit 459
              }
              if `"`wvar'"' == "" {
              "error in svy settings; weight type set without weight variable"
              exit 459
              }
              CheckName `wtype'
              local wtype `s(gname)' `s(sname)'
              if !inlist("`wtype'", "pweight", "iweight") {
              "error in svy settings; invalid weight type"
              exit 459
              }
              CheckNumVar `wvar'
              local wvar `s(varname)'
              local wexp "= `wvar'"
              return local wtype `"`wtype'"'
              return local wvar `"`wvar'"'
              return local wexp `"`wexp'"'
              }
              exit
              }
            - if "`name'" == "stages" {
            = if "dof" == "stages" {
              local stages : char _dta[_svy_stages]
              capture CheckPosInt `stages'
              if c(rc) {
              return scalar stages = 0
              }
              return scalar stages = `stages'
              exit
              }
            - if "`name'" == "stages_wt" {
            = if "dof" == "stages_wt" {
              local stages_wt : char _dta[_svy_stages_wt]
              capture CheckPosInt `stages_wt'
              if c(rc) {
              return scalar stages_wt = 0
              }
              else {
              return scalar stages_wt = `stages_wt'
              }
              exit
              }
            - if inlist("`name'", "vce", "mse") {
            = if inlist("dof", "vce", "mse") {
              local vce : char _dta[_svy_vce]
              local mse : char _dta[_svy_mse]
              if `"`vce'`mse'"' != "" {
              _svy_check_vce `vce', `mse'
              return local vce `s(vce)'
              return local mse `s(mse)'
              }
              exit
              }
            - if "`name'" == "brrweight" {
            = if "dof" == "brrweight" {
              local brr : char _dta[_svy_brrweight]
              if `"`brr'"' != "" {
              CheckNumVarlist `brr'
              return local brrweight `s(varlist)'
              }
              exit
              }
            - if "`name'" == "fay" {
            = if "dof" == "fay" {
              local fay : char _dta[_svy_fay]
              if `"`fay'"' != "" {
              CheckFay `fay'
              return scalar fay = `s(value)'
              }
              exit
              }
            - if "`name'" == "bsrweight" {
            = if "dof" == "bsrweight" {
              local bsr : char _dta[_svy_bsrweight]
              if `"`bsr'"' != "" {
              CheckNumVarlist `bsr'
              return local bsrweight `s(varlist)'
              }
              exit
              }
            - if "`name'" == "bsn" {
            = if "dof" == "bsn" {
              local bsn : char _dta[_svy_bsn]
              if `"`bsn'"' != "" {
              CheckBSN `bsn'
              return scalar bsn = `s(value)'
              }
              exit
              }
            - if "`name'" == "jkrweight" {
            = if "dof" == "jkrweight" {
              local jkr : char _dta[_svy_jkrweight]
              if `"`jkr'"' != "" {
              CheckNumVarlist `jkr'
              return local jkrweight `s(varlist)'
              }
              exit
              }
            - if "`name'" == "sdrweight" {
            = if "dof" == "sdrweight" {
              local sdr : char _dta[_svy_sdrweight]
              if `"`sdr'"' != "" {
              CheckNumVarlist `sdr'
              return local sdrweight `s(varlist)'
              local fpc : char _dta[_svy_sdrfpc]
              if `"`fpc'"' != "" {
              return local sdrfpc `"`fpc'"'
              }
              }
              exit
              }
            - if "`name'" == "dof" {
            = if "dof" == "dof" {
            - local dof : char _dta[_svy_dof]
            - if `"`dof'"' != "" {
            = if `""' != "" {
              CheckDOF `dof'
              return scalar dof = `s(value)'
              }
            - exit
            ------------------------------------------------ end _svyset.Get ---
          - exit
          ------------------------------------------------------ end _svyset ---
        - if "`r(dof)'" != "" {
        = if "" != "" {
          local gsets `"`gsets' dof(`r(dof)')"'
          return add
          local is_set 1
          }
        - _svyset get posts
          ---------------------------------------------------- begin _svyset ---
          - version 9
          - gettoken cmd 0 : 0
          - if "`cmd'" == "clear" {
          = if "get" == "clear" {
            Clear `0'
            exit
            }
          - if "`cmd'" == "set" {
          = if "get" == "set" {
            Set `0'
            exit
            }
          - if "`cmd'" == "get" {
          = if "get" == "get" {
          - Get `0'
          = Get  posts
            ---------------------------------------------- begin _svyset.Get ---
            - if `:word count `0'' > 2 {
            = if 1 > 2 {
              di as err "too many arguments"
              exit 103
              }
            - args name i
            - CheckName `name'
            = CheckName posts
              -------------------------------------- begin _svyset.CheckName ---
              - local 0 `", `0'"'
              = local 0 `", posts"'
              - capture syntax [, WTYPE WEXP WVAR PWeight IWeight VCE MSE BRRwei
> ght FAY BSRweight BSN JKRweight SDRweight SDRFPC DOF POSTStrata POSTWeight CAL
> Method CALMOdel CALOpts SINGLEunit SU STRata FPC Weight STAGES stages_wt ]
              - if c(rc) {
                di as err "invalid survey characteristic"
                exit 198
                }
              - local gname `stages' `stages_wt' `pweight' `iweight' `wtype' `wv
> ar' `wexp' `vce' `mse' `brrweight' `fay' `bsrweight' `bsn' `jkrweight' `sdrwei
> ght' `sdrfpc' `dof' `poststrata' `postweight' `calmethod' `calmodel' `calopts'
>  `singleunit'
              = local gname                  poststrata     
              - local sname `su' `strata' `fpc' `weight'
              = local sname    
              - local k : word count `gname' `sname'
              = local k : word count poststrata 
              - if `k' > 1 {
              = if 1 > 1 {
                di as err "too many names"
                exit 103
                }
              - if `k' == 0 {
              = if 1 == 0 {
                di as err "name required"
                exit 100
                }
              - sreturn local gname `gname'
              = sreturn local gname poststrata
              - sreturn local sname `sname'
              = sreturn local sname 
              ---------------------------------------- end _svyset.CheckName ---
            - if "`s(sname)'" != "" {
            = if "" != "" {
              local name `s(sname)'
              CheckPosInt `i'
              }
            - else local name `s(gname)'
            = else local name poststrata
            - if inlist("`name'", "wtype", "wvar", "wexp") {
            = if inlist("poststrata", "wtype", "wvar", "wexp") {
              local wtype : char _dta[_svy_wtype]
              local wvar : char _dta[_svy_wvar]
              if `"`wtype'`wvar'"' != "" {
              if `"`wtype'"' == "" {
              di as err "error in svy settings; weight variable set without weig
> ht type"
              exit 459
              }
              if `"`wvar'"' == "" {
              "error in svy settings; weight type set without weight variable"
              exit 459
              }
              CheckName `wtype'
              local wtype `s(gname)' `s(sname)'
              if !inlist("`wtype'", "pweight", "iweight") {
              "error in svy settings; invalid weight type"
              exit 459
              }
              CheckNumVar `wvar'
              local wvar `s(varname)'
              local wexp "= `wvar'"
              return local wtype `"`wtype'"'
              return local wvar `"`wvar'"'
              return local wexp `"`wexp'"'
              }
              exit
              }
            - if "`name'" == "stages" {
            = if "poststrata" == "stages" {
              local stages : char _dta[_svy_stages]
              capture CheckPosInt `stages'
              if c(rc) {
              return scalar stages = 0
              }
              return scalar stages = `stages'
              exit
              }
            - if "`name'" == "stages_wt" {
            = if "poststrata" == "stages_wt" {
              local stages_wt : char _dta[_svy_stages_wt]
              capture CheckPosInt `stages_wt'
              if c(rc) {
              return scalar stages_wt = 0
              }
              else {
              return scalar stages_wt = `stages_wt'
              }
              exit
              }
            - if inlist("`name'", "vce", "mse") {
            = if inlist("poststrata", "vce", "mse") {
              local vce : char _dta[_svy_vce]
              local mse : char _dta[_svy_mse]
              if `"`vce'`mse'"' != "" {
              _svy_check_vce `vce', `mse'
              return local vce `s(vce)'
              return local mse `s(mse)'
              }
              exit
              }
            - if "`name'" == "brrweight" {
            = if "poststrata" == "brrweight" {
              local brr : char _dta[_svy_brrweight]
              if `"`brr'"' != "" {
              CheckNumVarlist `brr'
              return local brrweight `s(varlist)'
              }
              exit
              }
            - if "`name'" == "fay" {
            = if "poststrata" == "fay" {
              local fay : char _dta[_svy_fay]
              if `"`fay'"' != "" {
              CheckFay `fay'
              return scalar fay = `s(value)'
              }
              exit
              }
            - if "`name'" == "bsrweight" {
            = if "poststrata" == "bsrweight" {
              local bsr : char _dta[_svy_bsrweight]
              if `"`bsr'"' != "" {
              CheckNumVarlist `bsr'
              return local bsrweight `s(varlist)'
              }
              exit
              }
            - if "`name'" == "bsn" {
            = if "poststrata" == "bsn" {
              local bsn : char _dta[_svy_bsn]
              if `"`bsn'"' != "" {
              CheckBSN `bsn'
              return scalar bsn = `s(value)'
              }
              exit
              }
            - if "`name'" == "jkrweight" {
            = if "poststrata" == "jkrweight" {
              local jkr : char _dta[_svy_jkrweight]
              if `"`jkr'"' != "" {
              CheckNumVarlist `jkr'
              return local jkrweight `s(varlist)'
              }
              exit
              }
            - if "`name'" == "sdrweight" {
            = if "poststrata" == "sdrweight" {
              local sdr : char _dta[_svy_sdrweight]
              if `"`sdr'"' != "" {
              CheckNumVarlist `sdr'
              return local sdrweight `s(varlist)'
              local fpc : char _dta[_svy_sdrfpc]
              if `"`fpc'"' != "" {
              return local sdrfpc `"`fpc'"'
              }
              }
              exit
              }
            - if "`name'" == "dof" {
            = if "poststrata" == "dof" {
              local dof : char _dta[_svy_dof]
              if `"`dof'"' != "" {
              CheckDOF `dof'
              return scalar dof = `s(value)'
              }
              exit
              }
            - if "`name'" == "poststrata" {
            = if "poststrata" == "poststrata" {
            - local poststrata : char _dta[_svy_poststrata]
            - local postweight : char _dta[_svy_postweight]
            - if `"`poststrata'`postweight'"' != "" {
            = if `""' != "" {
              if "`postweight'" == "" {
              di as err "error in svy settings; poststrata set without postweigh
> t"
              exit 459
              }
              if "`poststrata'" == "" {
              di as err "error in svy settings; postweight set without poststrat
> a"
              exit 459
              }
              CheckVar `poststrata'
              return local poststrata `s(varname)'
              CheckPostW `postweight'
              return local postweight `s(varname)'
              }
            - exit
            ------------------------------------------------ end _svyset.Get ---
          - exit
          ------------------------------------------------------ end _svyset ---
        - if `"`r(poststrata)'`r(postweight)'"' != "" {
        = if `""' != "" {
          local gsets `"`gsets' poststrata(`r(poststrata)')"'
          local gsets `"`gsets' postweight(`r(postweight)')"'
          return add
          local is_set 1
          }
        - _svyset get calmethod
          ---------------------------------------------------- begin _svyset ---
          - version 9
          - gettoken cmd 0 : 0
          - if "`cmd'" == "clear" {
          = if "get" == "clear" {
            Clear `0'
            exit
            }
          - if "`cmd'" == "set" {
          = if "get" == "set" {
            Set `0'
            exit
            }
          - if "`cmd'" == "get" {
          = if "get" == "get" {
          - Get `0'
          = Get  calmethod
            ---------------------------------------------- begin _svyset.Get ---
            - if `:word count `0'' > 2 {
            = if 1 > 2 {
              di as err "too many arguments"
              exit 103
              }
            - args name i
            - CheckName `name'
            = CheckName calmethod
              -------------------------------------- begin _svyset.CheckName ---
              - local 0 `", `0'"'
              = local 0 `", calmethod"'
              - capture syntax [, WTYPE WEXP WVAR PWeight IWeight VCE MSE BRRwei
> ght FAY BSRweight BSN JKRweight SDRweight SDRFPC DOF POSTStrata POSTWeight CAL
> Method CALMOdel CALOpts SINGLEunit SU STRata FPC Weight STAGES stages_wt ]
              - if c(rc) {
                di as err "invalid survey characteristic"
                exit 198
                }
              - local gname `stages' `stages_wt' `pweight' `iweight' `wtype' `wv
> ar' `wexp' `vce' `mse' `brrweight' `fay' `bsrweight' `bsn' `jkrweight' `sdrwei
> ght' `sdrfpc' `dof' `poststrata' `postweight' `calmethod' `calmodel' `calopts'
>  `singleunit'
              = local gname                    calmethod   
              - local sname `su' `strata' `fpc' `weight'
              = local sname    
              - local k : word count `gname' `sname'
              = local k : word count calmethod 
              - if `k' > 1 {
              = if 1 > 1 {
                di as err "too many names"
                exit 103
                }
              - if `k' == 0 {
              = if 1 == 0 {
                di as err "name required"
                exit 100
                }
              - sreturn local gname `gname'
              = sreturn local gname calmethod
              - sreturn local sname `sname'
              = sreturn local sname 
              ---------------------------------------- end _svyset.CheckName ---
            - if "`s(sname)'" != "" {
            = if "" != "" {
              local name `s(sname)'
              CheckPosInt `i'
              }
            - else local name `s(gname)'
            = else local name calmethod
            - if inlist("`name'", "wtype", "wvar", "wexp") {
            = if inlist("calmethod", "wtype", "wvar", "wexp") {
              local wtype : char _dta[_svy_wtype]
              local wvar : char _dta[_svy_wvar]
              if `"`wtype'`wvar'"' != "" {
              if `"`wtype'"' == "" {
              di as err "error in svy settings; weight variable set without weig
> ht type"
              exit 459
              }
              if `"`wvar'"' == "" {
              "error in svy settings; weight type set without weight variable"
              exit 459
              }
              CheckName `wtype'
              local wtype `s(gname)' `s(sname)'
              if !inlist("`wtype'", "pweight", "iweight") {
              "error in svy settings; invalid weight type"
              exit 459
              }
              CheckNumVar `wvar'
              local wvar `s(varname)'
              local wexp "= `wvar'"
              return local wtype `"`wtype'"'
              return local wvar `"`wvar'"'
              return local wexp `"`wexp'"'
              }
              exit
              }
            - if "`name'" == "stages" {
            = if "calmethod" == "stages" {
              local stages : char _dta[_svy_stages]
              capture CheckPosInt `stages'
              if c(rc) {
              return scalar stages = 0
              }
              return scalar stages = `stages'
              exit
              }
            - if "`name'" == "stages_wt" {
            = if "calmethod" == "stages_wt" {
              local stages_wt : char _dta[_svy_stages_wt]
              capture CheckPosInt `stages_wt'
              if c(rc) {
              return scalar stages_wt = 0
              }
              else {
              return scalar stages_wt = `stages_wt'
              }
              exit
              }
            - if inlist("`name'", "vce", "mse") {
            = if inlist("calmethod", "vce", "mse") {
              local vce : char _dta[_svy_vce]
              local mse : char _dta[_svy_mse]
              if `"`vce'`mse'"' != "" {
              _svy_check_vce `vce', `mse'
              return local vce `s(vce)'
              return local mse `s(mse)'
              }
              exit
              }
            - if "`name'" == "brrweight" {
            = if "calmethod" == "brrweight" {
              local brr : char _dta[_svy_brrweight]
              if `"`brr'"' != "" {
              CheckNumVarlist `brr'
              return local brrweight `s(varlist)'
              }
              exit
              }
            - if "`name'" == "fay" {
            = if "calmethod" == "fay" {
              local fay : char _dta[_svy_fay]
              if `"`fay'"' != "" {
              CheckFay `fay'
              return scalar fay = `s(value)'
              }
              exit
              }
            - if "`name'" == "bsrweight" {
            = if "calmethod" == "bsrweight" {
              local bsr : char _dta[_svy_bsrweight]
              if `"`bsr'"' != "" {
              CheckNumVarlist `bsr'
              return local bsrweight `s(varlist)'
              }
              exit
              }
            - if "`name'" == "bsn" {
            = if "calmethod" == "bsn" {
              local bsn : char _dta[_svy_bsn]
              if `"`bsn'"' != "" {
              CheckBSN `bsn'
              return scalar bsn = `s(value)'
              }
              exit
              }
            - if "`name'" == "jkrweight" {
            = if "calmethod" == "jkrweight" {
              local jkr : char _dta[_svy_jkrweight]
              if `"`jkr'"' != "" {
              CheckNumVarlist `jkr'
              return local jkrweight `s(varlist)'
              }
              exit
              }
            - if "`name'" == "sdrweight" {
            = if "calmethod" == "sdrweight" {
              local sdr : char _dta[_svy_sdrweight]
              if `"`sdr'"' != "" {
              CheckNumVarlist `sdr'
              return local sdrweight `s(varlist)'
              local fpc : char _dta[_svy_sdrfpc]
              if `"`fpc'"' != "" {
              return local sdrfpc `"`fpc'"'
              }
              }
              exit
              }
            - if "`name'" == "dof" {
            = if "calmethod" == "dof" {
              local dof : char _dta[_svy_dof]
              if `"`dof'"' != "" {
              CheckDOF `dof'
              return scalar dof = `s(value)'
              }
              exit
              }
            - if "`name'" == "poststrata" {
            = if "calmethod" == "poststrata" {
              local poststrata : char _dta[_svy_poststrata]
              local postweight : char _dta[_svy_postweight]
              if `"`poststrata'`postweight'"' != "" {
              if "`postweight'" == "" {
              di as err "error in svy settings; poststrata set without postweigh
> t"
              exit 459
              }
              if "`poststrata'" == "" {
              di as err "error in svy settings; postweight set without poststrat
> a"
              exit 459
              }
              CheckVar `poststrata'
              return local poststrata `s(varname)'
              CheckPostW `postweight'
              return local postweight `s(varname)'
              }
              exit
              }
            - if "`name'" == "calmethod" {
            = if "calmethod" == "calmethod" {
            - local calmethod : char _dta[_svy_calmethod]
            - local calmodel : char _dta[_svy_calmodel]
            - local calopts : char _dta[_svy_calopts]
            - if `"`calmethod'`calmodel'`calopts'"' != "" {
            = if `""' != "" {
              if "`calmethod'" == "" {
              di as err "error in svy settings; calibration method not properly 
> set"
              exit 459
              }
              if "`calmodel'" == "" {
              di as err "error in svy settings; calibration model not properly s
> et"
              exit 459
              }
              if "`calopts'" == "" {
              di as err "error in svy settings; calibration options not properly
>  set"
              exit 459
              }
              CheckCalMethod `calmethod'
              return hidden local calmethod `"`s(method)'"'
              return hidden local calmodel `"`calmodel'"'
              return hidden local calopts `"`calopts'"'
              }
            - exit
            ------------------------------------------------ end _svyset.Get ---
          - exit
          ------------------------------------------------------ end _svyset ---
        - if `"`r(calmethod)'"' != "" {
        = if `""' != "" {
          local spec `"`r(calmodel)', `r(calopts)'"'
          local gsets `"`gsets' `r(calmethod)'(`spec')"'
          return local `r(calmethod)' `"`spec'"'
          return add
          local is_set 1
          }
        - _svyset get singleunit
          ---------------------------------------------------- begin _svyset ---
          - version 9
          - gettoken cmd 0 : 0
          - if "`cmd'" == "clear" {
          = if "get" == "clear" {
            Clear `0'
            exit
            }
          - if "`cmd'" == "set" {
          = if "get" == "set" {
            Set `0'
            exit
            }
          - if "`cmd'" == "get" {
          = if "get" == "get" {
          - Get `0'
          = Get  singleunit
            ---------------------------------------------- begin _svyset.Get ---
            - if `:word count `0'' > 2 {
            = if 1 > 2 {
              di as err "too many arguments"
              exit 103
              }
            - args name i
            - CheckName `name'
            = CheckName singleunit
              -------------------------------------- begin _svyset.CheckName ---
              - local 0 `", `0'"'
              = local 0 `", singleunit"'
              - capture syntax [, WTYPE WEXP WVAR PWeight IWeight VCE MSE BRRwei
> ght FAY BSRweight BSN JKRweight SDRweight SDRFPC DOF POSTStrata POSTWeight CAL
> Method CALMOdel CALOpts SINGLEunit SU STRata FPC Weight STAGES stages_wt ]
              - if c(rc) {
                di as err "invalid survey characteristic"
                exit 198
                }
              - local gname `stages' `stages_wt' `pweight' `iweight' `wtype' `wv
> ar' `wexp' `vce' `mse' `brrweight' `fay' `bsrweight' `bsn' `jkrweight' `sdrwei
> ght' `sdrfpc' `dof' `poststrata' `postweight' `calmethod' `calmodel' `calopts'
>  `singleunit'
              = local gname                       singleunit
              - local sname `su' `strata' `fpc' `weight'
              = local sname    
              - local k : word count `gname' `sname'
              = local k : word count singleunit 
              - if `k' > 1 {
              = if 1 > 1 {
                di as err "too many names"
                exit 103
                }
              - if `k' == 0 {
              = if 1 == 0 {
                di as err "name required"
                exit 100
                }
              - sreturn local gname `gname'
              = sreturn local gname singleunit
              - sreturn local sname `sname'
              = sreturn local sname 
              ---------------------------------------- end _svyset.CheckName ---
            - if "`s(sname)'" != "" {
            = if "" != "" {
              local name `s(sname)'
              CheckPosInt `i'
              }
            - else local name `s(gname)'
            = else local name singleunit
            - if inlist("`name'", "wtype", "wvar", "wexp") {
            = if inlist("singleunit", "wtype", "wvar", "wexp") {
              local wtype : char _dta[_svy_wtype]
              local wvar : char _dta[_svy_wvar]
              if `"`wtype'`wvar'"' != "" {
              if `"`wtype'"' == "" {
              di as err "error in svy settings; weight variable set without weig
> ht type"
              exit 459
              }
              if `"`wvar'"' == "" {
              "error in svy settings; weight type set without weight variable"
              exit 459
              }
              CheckName `wtype'
              local wtype `s(gname)' `s(sname)'
              if !inlist("`wtype'", "pweight", "iweight") {
              "error in svy settings; invalid weight type"
              exit 459
              }
              CheckNumVar `wvar'
              local wvar `s(varname)'
              local wexp "= `wvar'"
              return local wtype `"`wtype'"'
              return local wvar `"`wvar'"'
              return local wexp `"`wexp'"'
              }
              exit
              }
            - if "`name'" == "stages" {
            = if "singleunit" == "stages" {
              local stages : char _dta[_svy_stages]
              capture CheckPosInt `stages'
              if c(rc) {
              return scalar stages = 0
              }
              return scalar stages = `stages'
              exit
              }
            - if "`name'" == "stages_wt" {
            = if "singleunit" == "stages_wt" {
              local stages_wt : char _dta[_svy_stages_wt]
              capture CheckPosInt `stages_wt'
              if c(rc) {
              return scalar stages_wt = 0
              }
              else {
              return scalar stages_wt = `stages_wt'
              }
              exit
              }
            - if inlist("`name'", "vce", "mse") {
            = if inlist("singleunit", "vce", "mse") {
              local vce : char _dta[_svy_vce]
              local mse : char _dta[_svy_mse]
              if `"`vce'`mse'"' != "" {
              _svy_check_vce `vce', `mse'
              return local vce `s(vce)'
              return local mse `s(mse)'
              }
              exit
              }
            - if "`name'" == "brrweight" {
            = if "singleunit" == "brrweight" {
              local brr : char _dta[_svy_brrweight]
              if `"`brr'"' != "" {
              CheckNumVarlist `brr'
              return local brrweight `s(varlist)'
              }
              exit
              }
            - if "`name'" == "fay" {
            = if "singleunit" == "fay" {
              local fay : char _dta[_svy_fay]
              if `"`fay'"' != "" {
              CheckFay `fay'
              return scalar fay = `s(value)'
              }
              exit
              }
            - if "`name'" == "bsrweight" {
            = if "singleunit" == "bsrweight" {
              local bsr : char _dta[_svy_bsrweight]
              if `"`bsr'"' != "" {
              CheckNumVarlist `bsr'
              return local bsrweight `s(varlist)'
              }
              exit
              }
            - if "`name'" == "bsn" {
            = if "singleunit" == "bsn" {
              local bsn : char _dta[_svy_bsn]
              if `"`bsn'"' != "" {
              CheckBSN `bsn'
              return scalar bsn = `s(value)'
              }
              exit
              }
            - if "`name'" == "jkrweight" {
            = if "singleunit" == "jkrweight" {
              local jkr : char _dta[_svy_jkrweight]
              if `"`jkr'"' != "" {
              CheckNumVarlist `jkr'
              return local jkrweight `s(varlist)'
              }
              exit
              }
            - if "`name'" == "sdrweight" {
            = if "singleunit" == "sdrweight" {
              local sdr : char _dta[_svy_sdrweight]
              if `"`sdr'"' != "" {
              CheckNumVarlist `sdr'
              return local sdrweight `s(varlist)'
              local fpc : char _dta[_svy_sdrfpc]
              if `"`fpc'"' != "" {
              return local sdrfpc `"`fpc'"'
              }
              }
              exit
              }
            - if "`name'" == "dof" {
            = if "singleunit" == "dof" {
              local dof : char _dta[_svy_dof]
              if `"`dof'"' != "" {
              CheckDOF `dof'
              return scalar dof = `s(value)'
              }
              exit
              }
            - if "`name'" == "poststrata" {
            = if "singleunit" == "poststrata" {
              local poststrata : char _dta[_svy_poststrata]
              local postweight : char _dta[_svy_postweight]
              if `"`poststrata'`postweight'"' != "" {
              if "`postweight'" == "" {
              di as err "error in svy settings; poststrata set without postweigh
> t"
              exit 459
              }
              if "`poststrata'" == "" {
              di as err "error in svy settings; postweight set without poststrat
> a"
              exit 459
              }
              CheckVar `poststrata'
              return local poststrata `s(varname)'
              CheckPostW `postweight'
              return local postweight `s(varname)'
              }
              exit
              }
            - if "`name'" == "calmethod" {
            = if "singleunit" == "calmethod" {
              local calmethod : char _dta[_svy_calmethod]
              local calmodel : char _dta[_svy_calmodel]
              local calopts : char _dta[_svy_calopts]
              if `"`calmethod'`calmodel'`calopts'"' != "" {
              if "`calmethod'" == "" {
              di as err "error in svy settings; calibration method not properly 
> set"
              exit 459
              }
              if "`calmodel'" == "" {
              di as err "error in svy settings; calibration model not properly s
> et"
              exit 459
              }
              if "`calopts'" == "" {
              di as err "error in svy settings; calibration options not properly
>  set"
              exit 459
              }
              CheckCalMethod `calmethod'
              return hidden local calmethod `"`s(method)'"'
              return hidden local calmodel `"`calmodel'"'
              return hidden local calopts `"`calopts'"'
              }
              exit
              }
            - if "`name'" == "su" {
            = if "singleunit" == "su" {
              CheckPosInt `i'
              local su : char _dta[_svy_su`i']
              if !inlist("`su'", "", "_n") {
              CheckVar `su'
              return local su`i' `s(varname)'
              }
              else return local su`i' `su'
              exit
              }
            - if "`name'" == "weight" {
            = if "singleunit" == "weight" {
              CheckPosInt `i'
              local weight : char _dta[_svy_weight`i']
              if "`weight'" != "" {
              CheckVar `weight'
              return local weight`i' `s(varname)'
              }
              exit
              }
            - if "`name'" == "strata" {
            = if "singleunit" == "strata" {
              CheckPosInt `i'
              local strata : char _dta[_svy_strata`i']
              if "`strata'" != "" {
              CheckVar `strata'
              return local strata`i' `s(varname)'
              }
              exit
              }
            - if "`name'" == "fpc" {
            = if "singleunit" == "fpc" {
              CheckPosInt `i'
              local fpc : char _dta[_svy_fpc`i']
              if "`fpc'" != "" {
              CheckVar `fpc'
              return local fpc`i' `s(varname)'
              }
              exit
              }
            - if "`name'" == "singleunit" {
            = if "singleunit" == "singleunit" {
            - local singleunit : char _dta[_svy_singleunit]
            - CheckSingle `singleunit'
            = CheckSingle 
              ------------------------------------ begin _svyset.CheckSingle ---
              - local zero `"`0'"'
              = local zero `""'
              - local 0 `", `zero'"'
              = local 0 `", "'
              - capture syntax [, MISsing CERtainty SCAled CENtered ]
              - if c(rc) {
                di as err `"singleunit(`zero') invalid"'
                exit 198
                }
              - if `:list sizeof zero' == 0 {
              = if 0 == 0 {
              - local missing missing
              - }
              - sreturn local singleunit `missing' `scaled' `certainty' `centere
> d'
              = sreturn local singleunit missing   
              -------------------------------------- end _svyset.CheckSingle ---
            - return local singleunit `s(singleunit)'
            = return local singleunit missing
            - exit
            ------------------------------------------------ end _svyset.Get ---
          - exit
          ------------------------------------------------------ end _svyset ---
        - if `"`r(singleunit)'"' != "" {
        = if `"missing"' != "" {
        - local gsets `"`gsets' singleunit(`r(singleunit)')"'
        = local gsets `" singleunit(missing)"'
        - return add
        - local is_set 1
        - }
        - else local gsets `"`gsets' singleunit(missing)"'
        = else local gsets `" singleunit(missing) singleunit(missing)"'
        - _svyset get vce
          ---------------------------------------------------- begin _svyset ---
          - version 9
          - gettoken cmd 0 : 0
          - if "`cmd'" == "clear" {
          = if "get" == "clear" {
            Clear `0'
            exit
            }
          - if "`cmd'" == "set" {
          = if "get" == "set" {
            Set `0'
            exit
            }
          - if "`cmd'" == "get" {
          = if "get" == "get" {
          - Get `0'
          = Get  vce
            ---------------------------------------------- begin _svyset.Get ---
            - if `:word count `0'' > 2 {
            = if 1 > 2 {
              di as err "too many arguments"
              exit 103
              }
            - args name i
            - CheckName `name'
            = CheckName vce
              -------------------------------------- begin _svyset.CheckName ---
              - local 0 `", `0'"'
              = local 0 `", vce"'
              - capture syntax [, WTYPE WEXP WVAR PWeight IWeight VCE MSE BRRwei
> ght FAY BSRweight BSN JKRweight SDRweight SDRFPC DOF POSTStrata POSTWeight CAL
> Method CALMOdel CALOpts SINGLEunit SU STRata FPC Weight STAGES stages_wt ]
              - if c(rc) {
                di as err "invalid survey characteristic"
                exit 198
                }
              - local gname `stages' `stages_wt' `pweight' `iweight' `wtype' `wv
> ar' `wexp' `vce' `mse' `brrweight' `fay' `bsrweight' `bsn' `jkrweight' `sdrwei
> ght' `sdrfpc' `dof' `poststrata' `postweight' `calmethod' `calmodel' `calopts'
>  `singleunit'
              = local gname        vce               
              - local sname `su' `strata' `fpc' `weight'
              = local sname    
              - local k : word count `gname' `sname'
              = local k : word count vce 
              - if `k' > 1 {
              = if 1 > 1 {
                di as err "too many names"
                exit 103
                }
              - if `k' == 0 {
              = if 1 == 0 {
                di as err "name required"
                exit 100
                }
              - sreturn local gname `gname'
              = sreturn local gname vce
              - sreturn local sname `sname'
              = sreturn local sname 
              ---------------------------------------- end _svyset.CheckName ---
            - if "`s(sname)'" != "" {
            = if "" != "" {
              local name `s(sname)'
              CheckPosInt `i'
              }
            - else local name `s(gname)'
            = else local name vce
            - if inlist("`name'", "wtype", "wvar", "wexp") {
            = if inlist("vce", "wtype", "wvar", "wexp") {
              local wtype : char _dta[_svy_wtype]
              local wvar : char _dta[_svy_wvar]
              if `"`wtype'`wvar'"' != "" {
              if `"`wtype'"' == "" {
              di as err "error in svy settings; weight variable set without weig
> ht type"
              exit 459
              }
              if `"`wvar'"' == "" {
              "error in svy settings; weight type set without weight variable"
              exit 459
              }
              CheckName `wtype'
              local wtype `s(gname)' `s(sname)'
              if !inlist("`wtype'", "pweight", "iweight") {
              "error in svy settings; invalid weight type"
              exit 459
              }
              CheckNumVar `wvar'
              local wvar `s(varname)'
              local wexp "= `wvar'"
              return local wtype `"`wtype'"'
              return local wvar `"`wvar'"'
              return local wexp `"`wexp'"'
              }
              exit
              }
            - if "`name'" == "stages" {
            = if "vce" == "stages" {
              local stages : char _dta[_svy_stages]
              capture CheckPosInt `stages'
              if c(rc) {
              return scalar stages = 0
              }
              return scalar stages = `stages'
              exit
              }
            - if "`name'" == "stages_wt" {
            = if "vce" == "stages_wt" {
              local stages_wt : char _dta[_svy_stages_wt]
              capture CheckPosInt `stages_wt'
              if c(rc) {
              return scalar stages_wt = 0
              }
              else {
              return scalar stages_wt = `stages_wt'
              }
              exit
              }
            - if inlist("`name'", "vce", "mse") {
            = if inlist("vce", "vce", "mse") {
            - local vce : char _dta[_svy_vce]
            - local mse : char _dta[_svy_mse]
            - if `"`vce'`mse'"' != "" {
            = if `""' != "" {
              _svy_check_vce `vce', `mse'
              return local vce `s(vce)'
              return local mse `s(mse)'
              }
            - exit
            ------------------------------------------------ end _svyset.Get ---
          - exit
          ------------------------------------------------------ end _svyset ---
        - if `"`r(vce)'"' != "" {
        = if `""' != "" {
          local gsets `"`gsets' vce(`r(vce)')"'
          if "`r(mse)'" != "" {
          local gsets `"`gsets' mse"'
          }
          return add
          local is_set 1
          }
        - else {
        - local gsets `"`gsets' vce(linearized)"'
        = local gsets `" singleunit(missing) vce(linearized)"'
        - return local vce linearized
        - }
        - local stages : char _dta[_svy_stages]
        - capture confirm integer number `stages'
        = capture confirm integer number 1
        - if c(rc) {
          local stages 0
          }
        - else local is_set 1
        - local stages_wt : char _dta[_svy_stages_wt]
        - capture confirm integer number `stages_wt'
        = capture confirm integer number 
        - if c(rc) {
        - local stages_wt 0
        - }
        - if `stages_wt' {
        = if 0 {
          if "`return(wtype)'" != "" {
          di as err "invalid weight specification;"
          di as err "`return(wtype)'s not allowed with stage-level {bf:weight()}
>  options"
          exit 198
          }
          if "`return(brrweight)'" != "" {
          di as err "invalid weight specification;"
          di as err "option {bf:brrweight()} not allowed with stage-level {bf:we
> ight()} options"
          exit 198
          }
          if "`return(bsrweight)'" != "" {
          di as err "invalid weight specification;"
          di as err "option {bf:bsrweight()} not allowed with stage-level {bf:we
> ight()} options"
          exit 198
          }
          if "`return(jkrweight)'" != "" {
          di as err "invalid weight specification;"
          di as err "option {bf:jkrweight()} not allowed with stage-level {bf:we
> ight()} options"
          exit 198
          }
          if "`return(sdrweight)'" != "" {
          di as err "invalid weight specification;"
          di as err "option {bf:sdrweight}() not allowed with stage-level {bf:we
> ight()} options"
          exit 198
          }
          }
        - if `stages_wt' > `stages' {
        = if 0 > 1 {
          local I = `stages_wt'
          }
        - else local I = `stages'
        = else local I = 1
        - local comma ","
        - forval i = 1/`I' {
        = forval i = 1/1 {
        - local comma ","
        - _svyset get su `i'
        = _svyset get su 1
          ---------------------------------------------------- begin _svyset ---
          - version 9
          - gettoken cmd 0 : 0
          - if "`cmd'" == "clear" {
          = if "get" == "clear" {
            Clear `0'
            exit
            }
          - if "`cmd'" == "set" {
          = if "get" == "set" {
            Set `0'
            exit
            }
          - if "`cmd'" == "get" {
          = if "get" == "get" {
          - Get `0'
          = Get  su 1
            ---------------------------------------------- begin _svyset.Get ---
            - if `:word count `0'' > 2 {
            = if 2 > 2 {
              di as err "too many arguments"
              exit 103
              }
            - args name i
            - CheckName `name'
            = CheckName su
              -------------------------------------- begin _svyset.CheckName ---
              - local 0 `", `0'"'
              = local 0 `", su"'
              - capture syntax [, WTYPE WEXP WVAR PWeight IWeight VCE MSE BRRwei
> ght FAY BSRweight BSN JKRweight SDRweight SDRFPC DOF POSTStrata POSTWeight CAL
> Method CALMOdel CALOpts SINGLEunit SU STRata FPC Weight STAGES stages_wt ]
              - if c(rc) {
                di as err "invalid survey characteristic"
                exit 198
                }
              - local gname `stages' `stages_wt' `pweight' `iweight' `wtype' `wv
> ar' `wexp' `vce' `mse' `brrweight' `fay' `bsrweight' `bsn' `jkrweight' `sdrwei
> ght' `sdrfpc' `dof' `poststrata' `postweight' `calmethod' `calmodel' `calopts'
>  `singleunit'
              = local gname                       
              - local sname `su' `strata' `fpc' `weight'
              = local sname su   
              - local k : word count `gname' `sname'
              = local k : word count  su
              - if `k' > 1 {
              = if 1 > 1 {
                di as err "too many names"
                exit 103
                }
              - if `k' == 0 {
              = if 1 == 0 {
                di as err "name required"
                exit 100
                }
              - sreturn local gname `gname'
              = sreturn local gname 
              - sreturn local sname `sname'
              = sreturn local sname su
              ---------------------------------------- end _svyset.CheckName ---
            - if "`s(sname)'" != "" {
            = if "su" != "" {
            - local name `s(sname)'
            = local name su
            - CheckPosInt `i'
            = CheckPosInt 1
              ------------------------------------ begin _svyset.CheckPosInt ---
              - confirm integer number `0'
              = confirm integer number 1
              - if `0' < 1 {
              = if 1 < 1 {
                di as err "'`0'' found where positive integer required"
                exit 7
                }
              -------------------------------------- end _svyset.CheckPosInt ---
            - }
            - else local name `s(gname)'
            = else local name 
            - if inlist("`name'", "wtype", "wvar", "wexp") {
            = if inlist("su", "wtype", "wvar", "wexp") {
              local wtype : char _dta[_svy_wtype]
              local wvar : char _dta[_svy_wvar]
              if `"`wtype'`wvar'"' != "" {
              if `"`wtype'"' == "" {
              di as err "error in svy settings; weight variable set without weig
> ht type"
              exit 459
              }
              if `"`wvar'"' == "" {
              "error in svy settings; weight type set without weight variable"
              exit 459
              }
              CheckName `wtype'
              local wtype `s(gname)' `s(sname)'
              if !inlist("`wtype'", "pweight", "iweight") {
              "error in svy settings; invalid weight type"
              exit 459
              }
              CheckNumVar `wvar'
              local wvar `s(varname)'
              local wexp "= `wvar'"
              return local wtype `"`wtype'"'
              return local wvar `"`wvar'"'
              return local wexp `"`wexp'"'
              }
              exit
              }
            - if "`name'" == "stages" {
            = if "su" == "stages" {
              local stages : char _dta[_svy_stages]
              capture CheckPosInt `stages'
              if c(rc) {
              return scalar stages = 0
              }
              return scalar stages = `stages'
              exit
              }
            - if "`name'" == "stages_wt" {
            = if "su" == "stages_wt" {
              local stages_wt : char _dta[_svy_stages_wt]
              capture CheckPosInt `stages_wt'
              if c(rc) {
              return scalar stages_wt = 0
              }
              else {
              return scalar stages_wt = `stages_wt'
              }
              exit
              }
            - if inlist("`name'", "vce", "mse") {
            = if inlist("su", "vce", "mse") {
              local vce : char _dta[_svy_vce]
              local mse : char _dta[_svy_mse]
              if `"`vce'`mse'"' != "" {
              _svy_check_vce `vce', `mse'
              return local vce `s(vce)'
              return local mse `s(mse)'
              }
              exit
              }
            - if "`name'" == "brrweight" {
            = if "su" == "brrweight" {
              local brr : char _dta[_svy_brrweight]
              if `"`brr'"' != "" {
              CheckNumVarlist `brr'
              return local brrweight `s(varlist)'
              }
              exit
              }
            - if "`name'" == "fay" {
            = if "su" == "fay" {
              local fay : char _dta[_svy_fay]
              if `"`fay'"' != "" {
              CheckFay `fay'
              return scalar fay = `s(value)'
              }
              exit
              }
            - if "`name'" == "bsrweight" {
            = if "su" == "bsrweight" {
              local bsr : char _dta[_svy_bsrweight]
              if `"`bsr'"' != "" {
              CheckNumVarlist `bsr'
              return local bsrweight `s(varlist)'
              }
              exit
              }
            - if "`name'" == "bsn" {
            = if "su" == "bsn" {
              local bsn : char _dta[_svy_bsn]
              if `"`bsn'"' != "" {
              CheckBSN `bsn'
              return scalar bsn = `s(value)'
              }
              exit
              }
            - if "`name'" == "jkrweight" {
            = if "su" == "jkrweight" {
              local jkr : char _dta[_svy_jkrweight]
              if `"`jkr'"' != "" {
              CheckNumVarlist `jkr'
              return local jkrweight `s(varlist)'
              }
              exit
              }
            - if "`name'" == "sdrweight" {
            = if "su" == "sdrweight" {
              local sdr : char _dta[_svy_sdrweight]
              if `"`sdr'"' != "" {
              CheckNumVarlist `sdr'
              return local sdrweight `s(varlist)'
              local fpc : char _dta[_svy_sdrfpc]
              if `"`fpc'"' != "" {
              return local sdrfpc `"`fpc'"'
              }
              }
              exit
              }
            - if "`name'" == "dof" {
            = if "su" == "dof" {
              local dof : char _dta[_svy_dof]
              if `"`dof'"' != "" {
              CheckDOF `dof'
              return scalar dof = `s(value)'
              }
              exit
              }
            - if "`name'" == "poststrata" {
            = if "su" == "poststrata" {
              local poststrata : char _dta[_svy_poststrata]
              local postweight : char _dta[_svy_postweight]
              if `"`poststrata'`postweight'"' != "" {
              if "`postweight'" == "" {
              di as err "error in svy settings; poststrata set without postweigh
> t"
              exit 459
              }
              if "`poststrata'" == "" {
              di as err "error in svy settings; postweight set without poststrat
> a"
              exit 459
              }
              CheckVar `poststrata'
              return local poststrata `s(varname)'
              CheckPostW `postweight'
              return local postweight `s(varname)'
              }
              exit
              }
            - if "`name'" == "calmethod" {
            = if "su" == "calmethod" {
              local calmethod : char _dta[_svy_calmethod]
              local calmodel : char _dta[_svy_calmodel]
              local calopts : char _dta[_svy_calopts]
              if `"`calmethod'`calmodel'`calopts'"' != "" {
              if "`calmethod'" == "" {
              di as err "error in svy settings; calibration method not properly 
> set"
              exit 459
              }
              if "`calmodel'" == "" {
              di as err "error in svy settings; calibration model not properly s
> et"
              exit 459
              }
              if "`calopts'" == "" {
              di as err "error in svy settings; calibration options not properly
>  set"
              exit 459
              }
              CheckCalMethod `calmethod'
              return hidden local calmethod `"`s(method)'"'
              return hidden local calmodel `"`calmodel'"'
              return hidden local calopts `"`calopts'"'
              }
              exit
              }
            - if "`name'" == "su" {
            = if "su" == "su" {
            - CheckPosInt `i'
            = CheckPosInt 1
              ------------------------------------ begin _svyset.CheckPosInt ---
              - confirm integer number `0'
              = confirm integer number 1
              - if `0' < 1 {
              = if 1 < 1 {
                di as err "'`0'' found where positive integer required"
                exit 7
                }
              -------------------------------------- end _svyset.CheckPosInt ---
            - local su : char _dta[_svy_su`i']
            = local su : char _dta[_svy_su1]
            - if !inlist("`su'", "", "_n") {
            = if !inlist("_n", "", "_n") {
              CheckVar `su'
              return local su`i' `s(varname)'
              }
            - else return local su`i' `su'
            = else return local su1 _n
            - exit
            ------------------------------------------------ end _svyset.Get ---
          - exit
          ------------------------------------------------------ end _svyset ---
        - local su `r(su`i')'
        = local su _n
        - if `"`su'"' != "" {
        = if `"_n"' != "" {
        - local sets "`sets'`oror'`su'"
        = local sets "_n"
        - if `"`su'"' == "_n" {
        = if `"_n"' == "_n" {
        - if `i' < `stages' {
        = if 1 < 1 {
          di as err "invalid use of _n; " "observations can only be sampled in t
> he final stage"
          exit 198
          }
        - local su
        - }
        - else return add
        - }
        - else if `i' < `I' {
        = else if 1 < 1 {
          di as err "invalid survey characteristics;" _n "sampling unit variable
>  is not set for stage `i' of `I' stages"
          exit 459
          }
        - if "`wt'" != "" {
        = if "[pweight= asecwth]" != "" {
        - local sets "`sets' `wt'"
        = local sets "_n [pweight= asecwth]"
        - local wt
        - }
        - _svyset get strata `i'
        = _svyset get strata 1
          ---------------------------------------------------- begin _svyset ---
          - version 9
          - gettoken cmd 0 : 0
          - if "`cmd'" == "clear" {
          = if "get" == "clear" {
            Clear `0'
            exit
            }
          - if "`cmd'" == "set" {
          = if "get" == "set" {
            Set `0'
            exit
            }
          - if "`cmd'" == "get" {
          = if "get" == "get" {
          - Get `0'
          = Get  strata 1
            ---------------------------------------------- begin _svyset.Get ---
            - if `:word count `0'' > 2 {
            = if 2 > 2 {
              di as err "too many arguments"
              exit 103
              }
            - args name i
            - CheckName `name'
            = CheckName strata
              -------------------------------------- begin _svyset.CheckName ---
              - local 0 `", `0'"'
              = local 0 `", strata"'
              - capture syntax [, WTYPE WEXP WVAR PWeight IWeight VCE MSE BRRwei
> ght FAY BSRweight BSN JKRweight SDRweight SDRFPC DOF POSTStrata POSTWeight CAL
> Method CALMOdel CALOpts SINGLEunit SU STRata FPC Weight STAGES stages_wt ]
              - if c(rc) {
                di as err "invalid survey characteristic"
                exit 198
                }
              - local gname `stages' `stages_wt' `pweight' `iweight' `wtype' `wv
> ar' `wexp' `vce' `mse' `brrweight' `fay' `bsrweight' `bsn' `jkrweight' `sdrwei
> ght' `sdrfpc' `dof' `poststrata' `postweight' `calmethod' `calmodel' `calopts'
>  `singleunit'
              = local gname                       
              - local sname `su' `strata' `fpc' `weight'
              = local sname  strata  
              - local k : word count `gname' `sname'
              = local k : word count  strata
              - if `k' > 1 {
              = if 1 > 1 {
                di as err "too many names"
                exit 103
                }
              - if `k' == 0 {
              = if 1 == 0 {
                di as err "name required"
                exit 100
                }
              - sreturn local gname `gname'
              = sreturn local gname 
              - sreturn local sname `sname'
              = sreturn local sname strata
              ---------------------------------------- end _svyset.CheckName ---
            - if "`s(sname)'" != "" {
            = if "strata" != "" {
            - local name `s(sname)'
            = local name strata
            - CheckPosInt `i'
            = CheckPosInt 1
              ------------------------------------ begin _svyset.CheckPosInt ---
              - confirm integer number `0'
              = confirm integer number 1
              - if `0' < 1 {
              = if 1 < 1 {
                di as err "'`0'' found where positive integer required"
                exit 7
                }
              -------------------------------------- end _svyset.CheckPosInt ---
            - }
            - else local name `s(gname)'
            = else local name 
            - if inlist("`name'", "wtype", "wvar", "wexp") {
            = if inlist("strata", "wtype", "wvar", "wexp") {
              local wtype : char _dta[_svy_wtype]
              local wvar : char _dta[_svy_wvar]
              if `"`wtype'`wvar'"' != "" {
              if `"`wtype'"' == "" {
              di as err "error in svy settings; weight variable set without weig
> ht type"
              exit 459
              }
              if `"`wvar'"' == "" {
              "error in svy settings; weight type set without weight variable"
              exit 459
              }
              CheckName `wtype'
              local wtype `s(gname)' `s(sname)'
              if !inlist("`wtype'", "pweight", "iweight") {
              "error in svy settings; invalid weight type"
              exit 459
              }
              CheckNumVar `wvar'
              local wvar `s(varname)'
              local wexp "= `wvar'"
              return local wtype `"`wtype'"'
              return local wvar `"`wvar'"'
              return local wexp `"`wexp'"'
              }
              exit
              }
            - if "`name'" == "stages" {
            = if "strata" == "stages" {
              local stages : char _dta[_svy_stages]
              capture CheckPosInt `stages'
              if c(rc) {
              return scalar stages = 0
              }
              return scalar stages = `stages'
              exit
              }
            - if "`name'" == "stages_wt" {
            = if "strata" == "stages_wt" {
              local stages_wt : char _dta[_svy_stages_wt]
              capture CheckPosInt `stages_wt'
              if c(rc) {
              return scalar stages_wt = 0
              }
              else {
              return scalar stages_wt = `stages_wt'
              }
              exit
              }
            - if inlist("`name'", "vce", "mse") {
            = if inlist("strata", "vce", "mse") {
              local vce : char _dta[_svy_vce]
              local mse : char _dta[_svy_mse]
              if `"`vce'`mse'"' != "" {
              _svy_check_vce `vce', `mse'
              return local vce `s(vce)'
              return local mse `s(mse)'
              }
              exit
              }
            - if "`name'" == "brrweight" {
            = if "strata" == "brrweight" {
              local brr : char _dta[_svy_brrweight]
              if `"`brr'"' != "" {
              CheckNumVarlist `brr'
              return local brrweight `s(varlist)'
              }
              exit
              }
            - if "`name'" == "fay" {
            = if "strata" == "fay" {
              local fay : char _dta[_svy_fay]
              if `"`fay'"' != "" {
              CheckFay `fay'
              return scalar fay = `s(value)'
              }
              exit
              }
            - if "`name'" == "bsrweight" {
            = if "strata" == "bsrweight" {
              local bsr : char _dta[_svy_bsrweight]
              if `"`bsr'"' != "" {
              CheckNumVarlist `bsr'
              return local bsrweight `s(varlist)'
              }
              exit
              }
            - if "`name'" == "bsn" {
            = if "strata" == "bsn" {
              local bsn : char _dta[_svy_bsn]
              if `"`bsn'"' != "" {
              CheckBSN `bsn'
              return scalar bsn = `s(value)'
              }
              exit
              }
            - if "`name'" == "jkrweight" {
            = if "strata" == "jkrweight" {
              local jkr : char _dta[_svy_jkrweight]
              if `"`jkr'"' != "" {
              CheckNumVarlist `jkr'
              return local jkrweight `s(varlist)'
              }
              exit
              }
            - if "`name'" == "sdrweight" {
            = if "strata" == "sdrweight" {
              local sdr : char _dta[_svy_sdrweight]
              if `"`sdr'"' != "" {
              CheckNumVarlist `sdr'
              return local sdrweight `s(varlist)'
              local fpc : char _dta[_svy_sdrfpc]
              if `"`fpc'"' != "" {
              return local sdrfpc `"`fpc'"'
              }
              }
              exit
              }
            - if "`name'" == "dof" {
            = if "strata" == "dof" {
              local dof : char _dta[_svy_dof]
              if `"`dof'"' != "" {
              CheckDOF `dof'
              return scalar dof = `s(value)'
              }
              exit
              }
            - if "`name'" == "poststrata" {
            = if "strata" == "poststrata" {
              local poststrata : char _dta[_svy_poststrata]
              local postweight : char _dta[_svy_postweight]
              if `"`poststrata'`postweight'"' != "" {
              if "`postweight'" == "" {
              di as err "error in svy settings; poststrata set without postweigh
> t"
              exit 459
              }
              if "`poststrata'" == "" {
              di as err "error in svy settings; postweight set without poststrat
> a"
              exit 459
              }
              CheckVar `poststrata'
              return local poststrata `s(varname)'
              CheckPostW `postweight'
              return local postweight `s(varname)'
              }
              exit
              }
            - if "`name'" == "calmethod" {
            = if "strata" == "calmethod" {
              local calmethod : char _dta[_svy_calmethod]
              local calmodel : char _dta[_svy_calmodel]
              local calopts : char _dta[_svy_calopts]
              if `"`calmethod'`calmodel'`calopts'"' != "" {
              if "`calmethod'" == "" {
              di as err "error in svy settings; calibration method not properly 
> set"
              exit 459
              }
              if "`calmodel'" == "" {
              di as err "error in svy settings; calibration model not properly s
> et"
              exit 459
              }
              if "`calopts'" == "" {
              di as err "error in svy settings; calibration options not properly
>  set"
              exit 459
              }
              CheckCalMethod `calmethod'
              return hidden local calmethod `"`s(method)'"'
              return hidden local calmodel `"`calmodel'"'
              return hidden local calopts `"`calopts'"'
              }
              exit
              }
            - if "`name'" == "su" {
            = if "strata" == "su" {
              CheckPosInt `i'
              local su : char _dta[_svy_su`i']
              if !inlist("`su'", "", "_n") {
              CheckVar `su'
              return local su`i' `s(varname)'
              }
              else return local su`i' `su'
              exit
              }
            - if "`name'" == "weight" {
            = if "strata" == "weight" {
              CheckPosInt `i'
              local weight : char _dta[_svy_weight`i']
              if "`weight'" != "" {
              CheckVar `weight'
              return local weight`i' `s(varname)'
              }
              exit
              }
            - if "`name'" == "strata" {
            = if "strata" == "strata" {
            - CheckPosInt `i'
            = CheckPosInt 1
              ------------------------------------ begin _svyset.CheckPosInt ---
              - confirm integer number `0'
              = confirm integer number 1
              - if `0' < 1 {
              = if 1 < 1 {
                di as err "'`0'' found where positive integer required"
                exit 7
                }
              -------------------------------------- end _svyset.CheckPosInt ---
            - local strata : char _dta[_svy_strata`i']
            = local strata : char _dta[_svy_strata1]
            - if "`strata'" != "" {
            = if "" != "" {
              CheckVar `strata'
              return local strata`i' `s(varname)'
              }
            - exit
            ------------------------------------------------ end _svyset.Get ---
          - exit
          ------------------------------------------------------ end _svyset ---
        - local strata `r(strata`i')'
        = local strata 
        - if `"`strata'"' != "" {
        = if `""' != "" {
          return add
          local sets `"`sets'`comma' strata(`strata')"'
          local comma
          }
        - _svyset get weight `i'
        = _svyset get weight 1
          ---------------------------------------------------- begin _svyset ---
          - version 9
          - gettoken cmd 0 : 0
          - if "`cmd'" == "clear" {
          = if "get" == "clear" {
            Clear `0'
            exit
            }
          - if "`cmd'" == "set" {
          = if "get" == "set" {
            Set `0'
            exit
            }
          - if "`cmd'" == "get" {
          = if "get" == "get" {
          - Get `0'
          = Get  weight 1
            ---------------------------------------------- begin _svyset.Get ---
            - if `:word count `0'' > 2 {
            = if 2 > 2 {
              di as err "too many arguments"
              exit 103
              }
            - args name i
            - CheckName `name'
            = CheckName weight
              -------------------------------------- begin _svyset.CheckName ---
              - local 0 `", `0'"'
              = local 0 `", weight"'
              - capture syntax [, WTYPE WEXP WVAR PWeight IWeight VCE MSE BRRwei
> ght FAY BSRweight BSN JKRweight SDRweight SDRFPC DOF POSTStrata POSTWeight CAL
> Method CALMOdel CALOpts SINGLEunit SU STRata FPC Weight STAGES stages_wt ]
              - if c(rc) {
                di as err "invalid survey characteristic"
                exit 198
                }
              - local gname `stages' `stages_wt' `pweight' `iweight' `wtype' `wv
> ar' `wexp' `vce' `mse' `brrweight' `fay' `bsrweight' `bsn' `jkrweight' `sdrwei
> ght' `sdrfpc' `dof' `poststrata' `postweight' `calmethod' `calmodel' `calopts'
>  `singleunit'
              = local gname                       
              - local sname `su' `strata' `fpc' `weight'
              = local sname    weight
              - local k : word count `gname' `sname'
              = local k : word count  weight
              - if `k' > 1 {
              = if 1 > 1 {
                di as err "too many names"
                exit 103
                }
              - if `k' == 0 {
              = if 1 == 0 {
                di as err "name required"
                exit 100
                }
              - sreturn local gname `gname'
              = sreturn local gname 
              - sreturn local sname `sname'
              = sreturn local sname weight
              ---------------------------------------- end _svyset.CheckName ---
            - if "`s(sname)'" != "" {
            = if "weight" != "" {
            - local name `s(sname)'
            = local name weight
            - CheckPosInt `i'
            = CheckPosInt 1
              ------------------------------------ begin _svyset.CheckPosInt ---
              - confirm integer number `0'
              = confirm integer number 1
              - if `0' < 1 {
              = if 1 < 1 {
                di as err "'`0'' found where positive integer required"
                exit 7
                }
              -------------------------------------- end _svyset.CheckPosInt ---
            - }
            - else local name `s(gname)'
            = else local name 
            - if inlist("`name'", "wtype", "wvar", "wexp") {
            = if inlist("weight", "wtype", "wvar", "wexp") {
              local wtype : char _dta[_svy_wtype]
              local wvar : char _dta[_svy_wvar]
              if `"`wtype'`wvar'"' != "" {
              if `"`wtype'"' == "" {
              di as err "error in svy settings; weight variable set without weig
> ht type"
              exit 459
              }
              if `"`wvar'"' == "" {
              "error in svy settings; weight type set without weight variable"
              exit 459
              }
              CheckName `wtype'
              local wtype `s(gname)' `s(sname)'
              if !inlist("`wtype'", "pweight", "iweight") {
              "error in svy settings; invalid weight type"
              exit 459
              }
              CheckNumVar `wvar'
              local wvar `s(varname)'
              local wexp "= `wvar'"
              return local wtype `"`wtype'"'
              return local wvar `"`wvar'"'
              return local wexp `"`wexp'"'
              }
              exit
              }
            - if "`name'" == "stages" {
            = if "weight" == "stages" {
              local stages : char _dta[_svy_stages]
              capture CheckPosInt `stages'
              if c(rc) {
              return scalar stages = 0
              }
              return scalar stages = `stages'
              exit
              }
            - if "`name'" == "stages_wt" {
            = if "weight" == "stages_wt" {
              local stages_wt : char _dta[_svy_stages_wt]
              capture CheckPosInt `stages_wt'
              if c(rc) {
              return scalar stages_wt = 0
              }
              else {
              return scalar stages_wt = `stages_wt'
              }
              exit
              }
            - if inlist("`name'", "vce", "mse") {
            = if inlist("weight", "vce", "mse") {
              local vce : char _dta[_svy_vce]
              local mse : char _dta[_svy_mse]
              if `"`vce'`mse'"' != "" {
              _svy_check_vce `vce', `mse'
              return local vce `s(vce)'
              return local mse `s(mse)'
              }
              exit
              }
            - if "`name'" == "brrweight" {
            = if "weight" == "brrweight" {
              local brr : char _dta[_svy_brrweight]
              if `"`brr'"' != "" {
              CheckNumVarlist `brr'
              return local brrweight `s(varlist)'
              }
              exit
              }
            - if "`name'" == "fay" {
            = if "weight" == "fay" {
              local fay : char _dta[_svy_fay]
              if `"`fay'"' != "" {
              CheckFay `fay'
              return scalar fay = `s(value)'
              }
              exit
              }
            - if "`name'" == "bsrweight" {
            = if "weight" == "bsrweight" {
              local bsr : char _dta[_svy_bsrweight]
              if `"`bsr'"' != "" {
              CheckNumVarlist `bsr'
              return local bsrweight `s(varlist)'
              }
              exit
              }
            - if "`name'" == "bsn" {
            = if "weight" == "bsn" {
              local bsn : char _dta[_svy_bsn]
              if `"`bsn'"' != "" {
              CheckBSN `bsn'
              return scalar bsn = `s(value)'
              }
              exit
              }
            - if "`name'" == "jkrweight" {
            = if "weight" == "jkrweight" {
              local jkr : char _dta[_svy_jkrweight]
              if `"`jkr'"' != "" {
              CheckNumVarlist `jkr'
              return local jkrweight `s(varlist)'
              }
              exit
              }
            - if "`name'" == "sdrweight" {
            = if "weight" == "sdrweight" {
              local sdr : char _dta[_svy_sdrweight]
              if `"`sdr'"' != "" {
              CheckNumVarlist `sdr'
              return local sdrweight `s(varlist)'
              local fpc : char _dta[_svy_sdrfpc]
              if `"`fpc'"' != "" {
              return local sdrfpc `"`fpc'"'
              }
              }
              exit
              }
            - if "`name'" == "dof" {
            = if "weight" == "dof" {
              local dof : char _dta[_svy_dof]
              if `"`dof'"' != "" {
              CheckDOF `dof'
              return scalar dof = `s(value)'
              }
              exit
              }
            - if "`name'" == "poststrata" {
            = if "weight" == "poststrata" {
              local poststrata : char _dta[_svy_poststrata]
              local postweight : char _dta[_svy_postweight]
              if `"`poststrata'`postweight'"' != "" {
              if "`postweight'" == "" {
              di as err "error in svy settings; poststrata set without postweigh
> t"
              exit 459
              }
              if "`poststrata'" == "" {
              di as err "error in svy settings; postweight set without poststrat
> a"
              exit 459
              }
              CheckVar `poststrata'
              return local poststrata `s(varname)'
              CheckPostW `postweight'
              return local postweight `s(varname)'
              }
              exit
              }
            - if "`name'" == "calmethod" {
            = if "weight" == "calmethod" {
              local calmethod : char _dta[_svy_calmethod]
              local calmodel : char _dta[_svy_calmodel]
              local calopts : char _dta[_svy_calopts]
              if `"`calmethod'`calmodel'`calopts'"' != "" {
              if "`calmethod'" == "" {
              di as err "error in svy settings; calibration method not properly 
> set"
              exit 459
              }
              if "`calmodel'" == "" {
              di as err "error in svy settings; calibration model not properly s
> et"
              exit 459
              }
              if "`calopts'" == "" {
              di as err "error in svy settings; calibration options not properly
>  set"
              exit 459
              }
              CheckCalMethod `calmethod'
              return hidden local calmethod `"`s(method)'"'
              return hidden local calmodel `"`calmodel'"'
              return hidden local calopts `"`calopts'"'
              }
              exit
              }
            - if "`name'" == "su" {
            = if "weight" == "su" {
              CheckPosInt `i'
              local su : char _dta[_svy_su`i']
              if !inlist("`su'", "", "_n") {
              CheckVar `su'
              return local su`i' `s(varname)'
              }
              else return local su`i' `su'
              exit
              }
            - if "`name'" == "weight" {
            = if "weight" == "weight" {
            - CheckPosInt `i'
            = CheckPosInt 1
              ------------------------------------ begin _svyset.CheckPosInt ---
              - confirm integer number `0'
              = confirm integer number 1
              - if `0' < 1 {
              = if 1 < 1 {
                di as err "'`0'' found where positive integer required"
                exit 7
                }
              -------------------------------------- end _svyset.CheckPosInt ---
            - local weight : char _dta[_svy_weight`i']
            = local weight : char _dta[_svy_weight1]
            - if "`weight'" != "" {
            = if "" != "" {
              CheckVar `weight'
              return local weight`i' `s(varname)'
              }
            - exit
            ------------------------------------------------ end _svyset.Get ---
          - exit
          ------------------------------------------------------ end _svyset ---
        - local weight `r(weight`i')'
        = local weight 
        - if `"`weight'"' != "" {
        = if `""' != "" {
          local wlist `wlist' `weight'
          return add
          local sets `"`sets'`comma' weight(`weight')"'
          local comma
          }
        - _svyset get fpc `i'
        = _svyset get fpc 1
          ---------------------------------------------------- begin _svyset ---
          - version 9
          - gettoken cmd 0 : 0
          - if "`cmd'" == "clear" {
          = if "get" == "clear" {
            Clear `0'
            exit
            }
          - if "`cmd'" == "set" {
          = if "get" == "set" {
            Set `0'
            exit
            }
          - if "`cmd'" == "get" {
          = if "get" == "get" {
          - Get `0'
          = Get  fpc 1
            ---------------------------------------------- begin _svyset.Get ---
            - if `:word count `0'' > 2 {
            = if 2 > 2 {
              di as err "too many arguments"
              exit 103
              }
            - args name i
            - CheckName `name'
            = CheckName fpc
              -------------------------------------- begin _svyset.CheckName ---
              - local 0 `", `0'"'
              = local 0 `", fpc"'
              - capture syntax [, WTYPE WEXP WVAR PWeight IWeight VCE MSE BRRwei
> ght FAY BSRweight BSN JKRweight SDRweight SDRFPC DOF POSTStrata POSTWeight CAL
> Method CALMOdel CALOpts SINGLEunit SU STRata FPC Weight STAGES stages_wt ]
              - if c(rc) {
                di as err "invalid survey characteristic"
                exit 198
                }
              - local gname `stages' `stages_wt' `pweight' `iweight' `wtype' `wv
> ar' `wexp' `vce' `mse' `brrweight' `fay' `bsrweight' `bsn' `jkrweight' `sdrwei
> ght' `sdrfpc' `dof' `poststrata' `postweight' `calmethod' `calmodel' `calopts'
>  `singleunit'
              = local gname                       
              - local sname `su' `strata' `fpc' `weight'
              = local sname   fpc 
              - local k : word count `gname' `sname'
              = local k : word count  fpc
              - if `k' > 1 {
              = if 1 > 1 {
                di as err "too many names"
                exit 103
                }
              - if `k' == 0 {
              = if 1 == 0 {
                di as err "name required"
                exit 100
                }
              - sreturn local gname `gname'
              = sreturn local gname 
              - sreturn local sname `sname'
              = sreturn local sname fpc
              ---------------------------------------- end _svyset.CheckName ---
            - if "`s(sname)'" != "" {
            = if "fpc" != "" {
            - local name `s(sname)'
            = local name fpc
            - CheckPosInt `i'
            = CheckPosInt 1
              ------------------------------------ begin _svyset.CheckPosInt ---
              - confirm integer number `0'
              = confirm integer number 1
              - if `0' < 1 {
              = if 1 < 1 {
                di as err "'`0'' found where positive integer required"
                exit 7
                }
              -------------------------------------- end _svyset.CheckPosInt ---
            - }
            - else local name `s(gname)'
            = else local name 
            - if inlist("`name'", "wtype", "wvar", "wexp") {
            = if inlist("fpc", "wtype", "wvar", "wexp") {
              local wtype : char _dta[_svy_wtype]
              local wvar : char _dta[_svy_wvar]
              if `"`wtype'`wvar'"' != "" {
              if `"`wtype'"' == "" {
              di as err "error in svy settings; weight variable set without weig
> ht type"
              exit 459
              }
              if `"`wvar'"' == "" {
              "error in svy settings; weight type set without weight variable"
              exit 459
              }
              CheckName `wtype'
              local wtype `s(gname)' `s(sname)'
              if !inlist("`wtype'", "pweight", "iweight") {
              "error in svy settings; invalid weight type"
              exit 459
              }
              CheckNumVar `wvar'
              local wvar `s(varname)'
              local wexp "= `wvar'"
              return local wtype `"`wtype'"'
              return local wvar `"`wvar'"'
              return local wexp `"`wexp'"'
              }
              exit
              }
            - if "`name'" == "stages" {
            = if "fpc" == "stages" {
              local stages : char _dta[_svy_stages]
              capture CheckPosInt `stages'
              if c(rc) {
              return scalar stages = 0
              }
              return scalar stages = `stages'
              exit
              }
            - if "`name'" == "stages_wt" {
            = if "fpc" == "stages_wt" {
              local stages_wt : char _dta[_svy_stages_wt]
              capture CheckPosInt `stages_wt'
              if c(rc) {
              return scalar stages_wt = 0
              }
              else {
              return scalar stages_wt = `stages_wt'
              }
              exit
              }
            - if inlist("`name'", "vce", "mse") {
            = if inlist("fpc", "vce", "mse") {
              local vce : char _dta[_svy_vce]
              local mse : char _dta[_svy_mse]
              if `"`vce'`mse'"' != "" {
              _svy_check_vce `vce', `mse'
              return local vce `s(vce)'
              return local mse `s(mse)'
              }
              exit
              }
            - if "`name'" == "brrweight" {
            = if "fpc" == "brrweight" {
              local brr : char _dta[_svy_brrweight]
              if `"`brr'"' != "" {
              CheckNumVarlist `brr'
              return local brrweight `s(varlist)'
              }
              exit
              }
            - if "`name'" == "fay" {
            = if "fpc" == "fay" {
              local fay : char _dta[_svy_fay]
              if `"`fay'"' != "" {
              CheckFay `fay'
              return scalar fay = `s(value)'
              }
              exit
              }
            - if "`name'" == "bsrweight" {
            = if "fpc" == "bsrweight" {
              local bsr : char _dta[_svy_bsrweight]
              if `"`bsr'"' != "" {
              CheckNumVarlist `bsr'
              return local bsrweight `s(varlist)'
              }
              exit
              }
            - if "`name'" == "bsn" {
            = if "fpc" == "bsn" {
              local bsn : char _dta[_svy_bsn]
              if `"`bsn'"' != "" {
              CheckBSN `bsn'
              return scalar bsn = `s(value)'
              }
              exit
              }
            - if "`name'" == "jkrweight" {
            = if "fpc" == "jkrweight" {
              local jkr : char _dta[_svy_jkrweight]
              if `"`jkr'"' != "" {
              CheckNumVarlist `jkr'
              return local jkrweight `s(varlist)'
              }
              exit
              }
            - if "`name'" == "sdrweight" {
            = if "fpc" == "sdrweight" {
              local sdr : char _dta[_svy_sdrweight]
              if `"`sdr'"' != "" {
              CheckNumVarlist `sdr'
              return local sdrweight `s(varlist)'
              local fpc : char _dta[_svy_sdrfpc]
              if `"`fpc'"' != "" {
              return local sdrfpc `"`fpc'"'
              }
              }
              exit
              }
            - if "`name'" == "dof" {
            = if "fpc" == "dof" {
              local dof : char _dta[_svy_dof]
              if `"`dof'"' != "" {
              CheckDOF `dof'
              return scalar dof = `s(value)'
              }
              exit
              }
            - if "`name'" == "poststrata" {
            = if "fpc" == "poststrata" {
              local poststrata : char _dta[_svy_poststrata]
              local postweight : char _dta[_svy_postweight]
              if `"`poststrata'`postweight'"' != "" {
              if "`postweight'" == "" {
              di as err "error in svy settings; poststrata set without postweigh
> t"
              exit 459
              }
              if "`poststrata'" == "" {
              di as err "error in svy settings; postweight set without poststrat
> a"
              exit 459
              }
              CheckVar `poststrata'
              return local poststrata `s(varname)'
              CheckPostW `postweight'
              return local postweight `s(varname)'
              }
              exit
              }
            - if "`name'" == "calmethod" {
            = if "fpc" == "calmethod" {
              local calmethod : char _dta[_svy_calmethod]
              local calmodel : char _dta[_svy_calmodel]
              local calopts : char _dta[_svy_calopts]
              if `"`calmethod'`calmodel'`calopts'"' != "" {
              if "`calmethod'" == "" {
              di as err "error in svy settings; calibration method not properly 
> set"
              exit 459
              }
              if "`calmodel'" == "" {
              di as err "error in svy settings; calibration model not properly s
> et"
              exit 459
              }
              if "`calopts'" == "" {
              di as err "error in svy settings; calibration options not properly
>  set"
              exit 459
              }
              CheckCalMethod `calmethod'
              return hidden local calmethod `"`s(method)'"'
              return hidden local calmodel `"`calmodel'"'
              return hidden local calopts `"`calopts'"'
              }
              exit
              }
            - if "`name'" == "su" {
            = if "fpc" == "su" {
              CheckPosInt `i'
              local su : char _dta[_svy_su`i']
              if !inlist("`su'", "", "_n") {
              CheckVar `su'
              return local su`i' `s(varname)'
              }
              else return local su`i' `su'
              exit
              }
            - if "`name'" == "weight" {
            = if "fpc" == "weight" {
              CheckPosInt `i'
              local weight : char _dta[_svy_weight`i']
              if "`weight'" != "" {
              CheckVar `weight'
              return local weight`i' `s(varname)'
              }
              exit
              }
            - if "`name'" == "strata" {
            = if "fpc" == "strata" {
              CheckPosInt `i'
              local strata : char _dta[_svy_strata`i']
              if "`strata'" != "" {
              CheckVar `strata'
              return local strata`i' `s(varname)'
              }
              exit
              }
            - if "`name'" == "fpc" {
            = if "fpc" == "fpc" {
            - CheckPosInt `i'
            = CheckPosInt 1
              ------------------------------------ begin _svyset.CheckPosInt ---
              - confirm integer number `0'
              = confirm integer number 1
              - if `0' < 1 {
              = if 1 < 1 {
                di as err "'`0'' found where positive integer required"
                exit 7
                }
              -------------------------------------- end _svyset.CheckPosInt ---
            - local fpc : char _dta[_svy_fpc`i']
            = local fpc : char _dta[_svy_fpc1]
            - if "`fpc'" != "" {
            = if "" != "" {
              CheckVar `fpc'
              return local fpc`i' `s(varname)'
              }
            - exit
            ------------------------------------------------ end _svyset.Get ---
          - exit
          ------------------------------------------------------ end _svyset ---
        - local fpc `r(fpc`i')'
        = local fpc 
        - if `"`fpc'"' != "" {
        = if `""' != "" {
          return add
          local sets `"`sets'`comma' fpc(`fpc')"'
          local comma
          }
        - else if `i' < `stages' {
        = else if 1 < 1 {
          di as err "invalid survey characteristics;" _n "FPC variable is not se
> t for stage `i' of `stages' stages"
          exit 459
          }
        - local oror " || "
        - }
        - if `is_set' == 0 {
        = if 1 == 0 {
          return clear
          local sets ", clear"
          }
        - else {
        - if `"`gsets'"' != "" {
        = if `" singleunit(missing) vce(linearized)"' != "" {
        - local sets `"`sets'`comma' `:list retok gsets'"'
        = local sets `"_n [pweight= asecwth], singleunit(missing) vce(linearized
> )"'
        - }
        - if `"`return(singleunit)'"' == "" {
        = if `"missing"' == "" {
          return local singleunit missing
          }
        - }
        - return local settings `"`sets'"'
        = return local settings `"_n [pweight= asecwth], singleunit(missing) vce
> (linearized)"'
        - if `stages' {
        = if 1 {
        - return scalar stages = `stages'
        = return scalar stages = 1
        - }
        - if `stages_wt' {
        = if 0 {
          return scalar stages_wt = `stages_wt'
          }
        - else return hidden scalar stages_wt = 0
        - return hidden local wlist `"`wlist'"'
        = return hidden local wlist `""'
        ----------------------------------------------------- end svyset.Get ---
      - if `"`r(settings)'"' == ", clear" {
      = if `"_n [pweight= asecwth], singleunit(missing) vce(linearized)"' == ", 
> clear" {
        di as txt "no survey characteristics are set"
        exit
        }
      - di
      - local c2 16
      - local sfmt %13s
      - if `"`r(wtype)'"' != "" {
      = if `"pweight"' != "" {
      - local wvar `"`r(wvar)'"'
      = local wvar `"asecwth"'
      - di as txt `sfmt' "`r(wtype)'" ":" _col(`c2') as res "`wvar'"
      = di as txt %13s "pweight" ":" _col(16) as res "asecwth"
      - }
      - else {
        di as txt `sfmt' "pweight" ":" _col(`c2') "<none>"
        }
      - if `"`r(vce)'"' != "" {
      = if `"linearized"' != "" {
      - di as txt `sfmt' "VCE" ":" _col(`c2') as res "`r(vce)'"
      = di as txt %13s "VCE" ":" _col(16) as res "linearized"
      - if !inlist("`r(vce)'", "", "linearized") {
      = if !inlist("linearized", "", "linearized") {
        if "`r(mse)'" == "" {
        local mseas as txt
        local onoff off
        }
        else {
        local mseas as res
        local onoff on
        }
        di as txt `sfmt' "MSE" ":" _col(`c2') `mseas' "`onoff'"
        }
      - }
      - else {
        di as txt `sfmt' "VCE" ":" _col(`c2') "linearized"
        }
      - local colsets 1 `c2' `c2' 2
      = local colsets 1 16 16 2
      - if `"`r(brrweight)'"' != "" {
      = if `""' != "" {
        FirstLast result `r(brrweight)'
        di "{p2colset `colsets'}{...}"
        di as txt "{p2col:{space 4}brrweight:}" as res "`result'{p_end}"
        di "{p2colreset}{...}"
        }
      - if `"`r(fay)'"' != "" {
      = if `""' != "" {
        di "{p2colset `colsets'}{...}"
        di as txt "{p2col:{space 10}fay:}" as res `r(fay)' "{p_end}"
        di "{p2colreset}{...}"
        }
      - if `"`r(bsrweight)'"' != "" {
      = if `""' != "" {
        FirstLast result `r(bsrweight)'
        di "{p2colset `colsets'}{...}"
        di as txt "{p2col:{space 4}bsrweight:}" as res "`result'{p_end}"
        di "{p2colreset}{...}"
        }
      - if `"`r(bsn)'"' != "" {
      = if `""' != "" {
        di "{p2colset `colsets'}{...}"
        di as txt "{p2col:{space 10}bsn:}" as res `r(bsn)' "{p_end}"
        di "{p2colreset}{...}"
        }
      - if `"`r(jkrweight)'"' != "" {
      = if `""' != "" {
        FirstLast result `r(jkrweight)'
        di "{p2colset `colsets'}{...}"
        di as txt "{p2col:{space 4}jkrweight:}" as res "`result'{p_end}"
        di "{p2colreset}{...}"
        }
      - if `"`r(sdrweight)'"' != "" {
      = if `""' != "" {
        FirstLast result `r(sdrweight)'
        di "{p2colset `colsets'}{...}"
        di as txt "{p2col:{space 4}sdrweight:}" as res "`result'{p_end}"
        di "{p2colreset}{...}"
        }
      - if `"`r(dof)'"' != "" {
      = if `""' != "" {
        di "{p2colset `colsets'}{...}"
        di as txt "{p2col:{space 4}Design df:}" as res `r(dof)' "{p_end}"
        di "{p2colreset}{...}"
        }
      - if `"`r(poststrata)'"' != "" {
      = if `""' != "" {
        di as txt `sfmt' "Poststrata" ":" _col(`c2') as res "`r(poststrata)'"
        }
      - if `"`r(postweight)'"' != "" {
      = if `""' != "" {
        di as txt `sfmt' "Postweight" ":" _col(`c2') as res "`r(postweight)'"
        }
      - if `"`r(calmethod)'"' != "" {
      = if `""' != "" {
        di as txt `sfmt' "Calibration" ":" _col(`c2') as res "`r(calmethod)'"
        }
      - if `"`r(singleunit)'"' != "" {
      = if `"missing"' != "" {
      - di as txt `sfmt' "Single unit" ":" _col(`c2') as res "`r(singleunit)'"
      = di as txt %13s "Single unit" ":" _col(16) as res "missing"
      - }
      - if !missing(r(stages)) {
      - local stages = r(stages)
      - }
      - else {
        local stages = 0
        }
      - if !missing(r(stages_wt)) {
      - local stages_wt = r(stages_wt)
      - }
      - else {
        local stages_wt = 0
        }
      - if `stages_wt' > `stages' {
      = if 0 > 1 {
        local I = `stages_wt'
        }
      - else {
      - local I = `stages'
      = local I = 1
      - }
      - forval i = 1/`I' {
      = forval i = 1/1 {
      - if `"`r(strata`i')'"' != "" {
      = if `""' != "" {
        di as txt `sfmt' "Strata `i'" ":" _col(`c2') as res "`r(strata`i')'"
        }
      - else {
      - di as txt `sfmt' "Strata `i'" ":" _col(`c2') "<one>"
      = di as txt %13s "Strata 1" ":" _col(16) "<one>"
      - }
      - if !inlist(`"`r(su`i')'"', "", "_n") {
      = if !inlist(`""', "", "_n") {
        di as txt `sfmt' "SU `i'" ":" _col(`c2') as res "`r(su`i')'"
        }
      - else {
      - di as txt `sfmt' "SU `i'" ":" _col(`c2') "<observations>"
      = di as txt %13s "SU 1" ":" _col(16) "<observations>"
      - }
      - if `"`r(fpc`i')'"' != "" {
      = if `""' != "" {
        di as txt `sfmt' "FPC `i'" ":" _col(`c2') as res "`r(fpc`i')'"
        }
      - else {
      - di as txt `sfmt' "FPC `i'" ":" _col(`c2') as txt "<zero>"
      = di as txt %13s "FPC 1" ":" _col(16) as txt "<zero>"
      - }
      - if `"`r(weight`i')'"' != "" {
      = if `""' != "" {
        di as txt `sfmt' "Weight `i'" ":" _col(`c2') as res "`r(weight`i')'"
        }
      - else if `stages_wt' {
      = else if 0 {
        di as txt `sfmt' "Weight `i'" ":" _col(`c2') "<none>"
        }
      - }
      - di as txt "{p2colreset}{...}"
      --------------------------------------------------- end svyset.Display ---
    - if !c(rc) {
    - local oldset `"`r(settings)'"'
    = local oldset `"_n [pweight= asecwth], singleunit(missing) vce(linearized)"
> '
    - }
    - capture noisily SvySet `0'
    = capture noisily SvySet [pweight=asecwth]
      -------------------------------------------------- begin svyset.SvySet ---
      - version 9
      - capture syntax [, ECLASS CLEAR MI]
      - if !c(rc) {
        if "`mi'" == "" {
        u_mi_not_mi_set svyset
        }
        if "`clear'" != "" {
        Clear
        Get
        }
        else Display, `eclass'
        exit
        }
      - if _N == 0 {
        di as err "no variables defined"
        exit 111
        }
      - local commopts VCE(passthru) MSE BRRweight(passthru) FAY(passthru) BSRwe
> ight(passthru) BSN(passthru) JKRweight(passthru) SDRweight(passthru) SINGLEuni
> t(passthru) DOF(passthru) POSTstrata(passthru) POSTWeight(passthru) RAKE(passt
> hru) REGress(passthru) CLEAR1(passthru) CLEAR NOCLEAR MI
      - _parse expand stage global : 0, common(`commopts')
      = _parse expand stage global : 0, common(VCE(passthru) MSE BRRweight(passt
> hru) FAY(passthru) BSRweight(passthru) BSN(passthru) JKRweight(passthru) SDRwe
> ight(passthru) SINGLEunit(passthru) DOF(passthru) POSTstrata(passthru) POSTWei
> ght(passthru) RAKE(passthru) REGress(passthru) CLEAR1(passthru) CLEAR NOCLEAR 
> MI)
      - if `"`global_if'`global_in'"' != "" {
      = if `""' != "" {
        local 0 `"`global_if' `global_in'"'
        syntax [, NOOPTIONS ]
        }
      - if `"`global_op'"' != "" {
      = if `""' != "" {
        ParseGlobals `stage_n' , `global_op'
        if "`s(noclear)'" != "" & `stage_n' {
        local 0 `"`stage_1'"'
        capture syntax [pw iw/]
        if c(rc) {
        di as err "option {bf:noclear} is not allowed with {help svyset##design_
> options:design_options}"
        exit 198
        }
        _svyset set `weight' `exp'
        local stage_n 0
        }
        local noclear `s(noclear)'
        local mi `s(mi)'
        }
      - else {
      - u_mi_not_mi_set svyset
        ---------------------------------------------- begin u_mi_not_mi_set ---
        - version 11
        - args name other
        - if ("`_dta[_mi_marker]'"=="") {
        = if (""=="") {
        - exit
        ------------------------------------------------ end u_mi_not_mi_set ---
      - Clear
        ------------------------------------------------- begin svyset.Clear ---
        - syntax [, noCLEAR PWeight IWeight Weight vce mse BRRweight FAY BSRweig
> ht BSN JKRweight SDRweight DOF POSTstrata POSTweight RAKE REGress SINGLEunit ]
        - if "`clear'" == "" {
        = if "" == "" {
        - quietly svyset_8, clear
          --------------------------------------------------- begin svyset_8 ---
          - version 8, missing
          - if _caller() < 8 {
            svyset_7 `0'
            Clear
            exit
            }
          - syntax [pweight iweight/] [, STRata(varname) psu(varname) fpc(varnam
> e) SRS * ]
          - local wtype `weight'
          = local wtype 
          - local wexp `exp'
          = local wexp 
          - local 0 , `options'
          = local 0 , clear
          - capture syntax [, clear ]
          - if _rc {
            syntax [, clear(string) ]
            }
          - if _N == 0 {
            di as err "no variables defined"
            exit 111
            }
          - if `"`clear'"' != "" {
          = if `"clear"' != "" {
          - Clear , `clear'
          = Clear , clear
            ------------------------------------------- begin svyset_8.Clear ---
            - syntax , [IWeight PWeight STRata psu fpc SRS all clear]
            - if `"`iweight'`pweight'"' != "" {
            = if `""' != "" {
              local svysets iweight pweight
              }
            - if `"`all'"' != "" | `"`clear'"' != "" {
            = if `""' != "" | `"clear"' != "" {
            - local svysets iweight pweight strata psu fpc srs
            - }
            - else local svysets `svysets' `strata' `psu' `fpc' `srs'
            = else local svysets iweight pweight strata psu fpc srs    
            - foreach name of local svysets {
            - char _dta[`name']
            = char _dta[iweight]
            - }
            - char _dta[`name']
            = char _dta[pweight]
            - }
            - char _dta[`name']
            = char _dta[strata]
            - }
            - char _dta[`name']
            = char _dta[psu]
            - }
            - char _dta[`name']
            = char _dta[fpc]
            - }
            - char _dta[`name']
            = char _dta[srs]
            - }
            - Get
              ------------------------------------------- begin svyset_8.Get ---
              - local iweight : char _dta[iweight]
              - local pweight : char _dta[pweight]
              - if `"`iweight'"' != "" & `"`pweight'"' != "" {
              = if `""' != "" & `""' != "" {
                di as error "error in setting of weights," " both pweights and i
> weights are currently set"
                exit 198
                }
              - if `"`iweight'"' != "" {
              = if `""' != "" {
                quietly Check_weight iweight `iweight'
                return local wtype iweight
                return local iweight `iweight'
                return local wexp "= `iweight'"
                local settings "[iweight=`iweight']"
                }
              - if `"`pweight'"' != "" {
              = if `""' != "" {
                quietly Check_weight pweight `pweight'
                return local wtype pweight
                return local pweight `pweight'
                return local wexp "= `pweight'"
                local settings "[pweight=`pweight']"
                }
              - local comma ","
              - local strata : char _dta[strata]
              - if `"`strata'"' != "" {
              = if `""' != "" {
                Check_var `strata'
                return local strata `strata'
                local settings "`settings'`comma' strata(`strata')"
                local comma
                }
              - local psu : char _dta[psu]
              - if `"`psu'"' != "" {
              = if `""' != "" {
                Check_var `psu'
                return local psu `psu'
                local settings "`settings'`comma' psu(`psu')"
                local comma
                }
              - local fpc : char _dta[fpc]
              - if `"`fpc'"' != "" {
              = if `""' != "" {
                Check_fpc `fpc'
                return local fpc `fpc'
                local settings "`settings'`comma' fpc(`fpc')"
                local comma
                }
              - local srs : char _dta[srs]
              - if `"`srs'"' != "" {
              = if `""' != "" {
                Check_srs "`strata'" "`psu'"
                return local srs `srs'
                local settings "`settings'`comma' srs"
                local comma
                }
              - if `"`iweight'`pweight'`strata'`psu'`fpc'`srs'"' != "" {
              = if `""' != "" {
                SVYFlag 1
                return add
                }
              - else {
              - SVYFlag 0
                ------------------------------------- begin svyset_8.SVYFlag ---
                - args set
                - if `"`set'"' == "?" {
                = if `"0"' == "?" {
                  local set : char _dta[_svy]
                  return local _svy `set'
                  }
                - else if `set' {
                = else if 0 {
                  char _dta[_svy] set
                  return local _svy set
                  }
                - else char _dta[_svy]
                --------------------------------------- end svyset_8.SVYFlag ---
              - }
              - return local settings "`settings'`comma' clear(all)"
              = return local settings ", clear(all)"
              --------------------------------------------- end svyset_8.Get ---
            --------------------------------------------- end svyset_8.Clear ---
          - }
          - if `"`wtype'"' != "" {
          = if `""' != "" {
            Check_weight `wtype' `wexp'
            Set `wtype' `wexp'
            }
          - if `"`strata'"' != "" {
          = if `""' != "" {
            Check_var `strata'
            Set strata `strata'
            }
          - if `"`psu'"' != "" {
          = if `""' != "" {
            Check_var `psu'
            Set psu `psu'
            }
          - if `"`fpc'"' != "" {
          = if `""' != "" {
            Check_fpc `fpc'
            Set fpc `fpc'
            }
          - if `"`srs'"' != "" {
          = if `""' != "" {
            Set srs __srs__
            }
          - Display
            ----------------------------------------- begin svyset_8.Display ---
            - Get
              ------------------------------------------- begin svyset_8.Get ---
              - local iweight : char _dta[iweight]
              - local pweight : char _dta[pweight]
              - if `"`iweight'"' != "" & `"`pweight'"' != "" {
              = if `""' != "" & `""' != "" {
                di as error "error in setting of weights," " both pweights and i
> weights are currently set"
                exit 198
                }
              - if `"`iweight'"' != "" {
              = if `""' != "" {
                quietly Check_weight iweight `iweight'
                return local wtype iweight
                return local iweight `iweight'
                return local wexp "= `iweight'"
                local settings "[iweight=`iweight']"
                }
              - if `"`pweight'"' != "" {
              = if `""' != "" {
                quietly Check_weight pweight `pweight'
                return local wtype pweight
                return local pweight `pweight'
                return local wexp "= `pweight'"
                local settings "[pweight=`pweight']"
                }
              - local comma ","
              - local strata : char _dta[strata]
              - if `"`strata'"' != "" {
              = if `""' != "" {
                Check_var `strata'
                return local strata `strata'
                local settings "`settings'`comma' strata(`strata')"
                local comma
                }
              - local psu : char _dta[psu]
              - if `"`psu'"' != "" {
              = if `""' != "" {
                Check_var `psu'
                return local psu `psu'
                local settings "`settings'`comma' psu(`psu')"
                local comma
                }
              - local fpc : char _dta[fpc]
              - if `"`fpc'"' != "" {
              = if `""' != "" {
                Check_fpc `fpc'
                return local fpc `fpc'
                local settings "`settings'`comma' fpc(`fpc')"
                local comma
                }
              - local srs : char _dta[srs]
              - if `"`srs'"' != "" {
              = if `""' != "" {
                Check_srs "`strata'" "`psu'"
                return local srs `srs'
                local settings "`settings'`comma' srs"
                local comma
                }
              - if `"`iweight'`pweight'`strata'`psu'`fpc'`srs'"' != "" {
              = if `""' != "" {
                SVYFlag 1
                return add
                }
              - else {
              - SVYFlag 0
                ------------------------------------- begin svyset_8.SVYFlag ---
                - args set
                - if `"`set'"' == "?" {
                = if `"0"' == "?" {
                  local set : char _dta[_svy]
                  return local _svy `set'
                  }
                - else if `set' {
                = else if 0 {
                  char _dta[_svy] set
                  return local _svy set
                  }
                - else char _dta[_svy]
                --------------------------------------- end svyset_8.SVYFlag ---
              - }
              - return local settings "`settings'`comma' clear(all)"
              = return local settings ", clear(all)"
              --------------------------------------------- end svyset_8.Get ---
            - if `"`r(wtype)'"' != "" {
            = if `""' != "" {
              di as txt "`r(wtype)' is `r(`r(wtype)')'"
              }
            - if `"`r(strata)'"' != "" {
            = if `""' != "" {
              di as txt "strata is `r(strata)'"
              }
            - if `"`r(psu)'"' != "" {
            = if `""' != "" {
              di as txt "psu is `r(psu)'"
              }
            - if `"`r(fpc)'"' != "" {
            = if `""' != "" {
              di as txt "fpc is `r(fpc)'"
              }
            - if `"`r(srs)'"' != "" {
            = if `""' != "" {
              di as txt "simple random sample (SRS)"
              }
            - else if `"`r(_svy)'"' == "" {
            = else if `""' == "" {
            - Clear , all
              ----------------------------------------- begin svyset_8.Clear ---
              - syntax , [IWeight PWeight STRata psu fpc SRS all clear]
              - if `"`iweight'`pweight'"' != "" {
              = if `""' != "" {
                local svysets iweight pweight
                }
              - if `"`all'"' != "" | `"`clear'"' != "" {
              = if `"all"' != "" | `""' != "" {
              - local svysets iweight pweight strata psu fpc srs
              - }
              - else local svysets `svysets' `strata' `psu' `fpc' `srs'
              = else local svysets iweight pweight strata psu fpc srs    
              - foreach name of local svysets {
              - char _dta[`name']
              = char _dta[iweight]
              - }
              - char _dta[`name']
              = char _dta[pweight]
              - }
              - char _dta[`name']
              = char _dta[strata]
              - }
              - char _dta[`name']
              = char _dta[psu]
              - }
              - char _dta[`name']
              = char _dta[fpc]
              - }
              - char _dta[`name']
              = char _dta[srs]
              - }
              - Get
                ----------------------------------------- begin svyset_8.Get ---
                - local iweight : char _dta[iweight]
                - local pweight : char _dta[pweight]
                - if `"`iweight'"' != "" & `"`pweight'"' != "" {
                = if `""' != "" & `""' != "" {
                  di as error "error in setting of weights," " both pweights and
>  iweights are currently set"
                  exit 198
                  }
                - if `"`iweight'"' != "" {
                = if `""' != "" {
                  quietly Check_weight iweight `iweight'
                  return local wtype iweight
                  return local iweight `iweight'
                  return local wexp "= `iweight'"
                  local settings "[iweight=`iweight']"
                  }
                - if `"`pweight'"' != "" {
                = if `""' != "" {
                  quietly Check_weight pweight `pweight'
                  return local wtype pweight
                  return local pweight `pweight'
                  return local wexp "= `pweight'"
                  local settings "[pweight=`pweight']"
                  }
                - local comma ","
                - local strata : char _dta[strata]
                - if `"`strata'"' != "" {
                = if `""' != "" {
                  Check_var `strata'
                  return local strata `strata'
                  local settings "`settings'`comma' strata(`strata')"
                  local comma
                  }
                - local psu : char _dta[psu]
                - if `"`psu'"' != "" {
                = if `""' != "" {
                  Check_var `psu'
                  return local psu `psu'
                  local settings "`settings'`comma' psu(`psu')"
                  local comma
                  }
                - local fpc : char _dta[fpc]
                - if `"`fpc'"' != "" {
                = if `""' != "" {
                  Check_fpc `fpc'
                  return local fpc `fpc'
                  local settings "`settings'`comma' fpc(`fpc')"
                  local comma
                  }
                - local srs : char _dta[srs]
                - if `"`srs'"' != "" {
                = if `""' != "" {
                  Check_srs "`strata'" "`psu'"
                  return local srs `srs'
                  local settings "`settings'`comma' srs"
                  local comma
                  }
                - if `"`iweight'`pweight'`strata'`psu'`fpc'`srs'"' != "" {
                = if `""' != "" {
                  SVYFlag 1
                  return add
                  }
                - else {
                - SVYFlag 0
                  ----------------------------------- begin svyset_8.SVYFlag ---
                  - args set
                  - if `"`set'"' == "?" {
                  = if `"0"' == "?" {
                    local set : char _dta[_svy]
                    return local _svy `set'
                    }
                  - else if `set' {
                  = else if 0 {
                    char _dta[_svy] set
                    return local _svy set
                    }
                  - else char _dta[_svy]
                  ------------------------------------- end svyset_8.SVYFlag ---
                - }
                - return local settings "`settings'`comma' clear(all)"
                = return local settings ", clear(all)"
                ------------------------------------------- end svyset_8.Get ---
              ------------------------------------------- end svyset_8.Clear ---
            - di as txt "no variables are set"
            - exit
            ------------------------------------------- end svyset_8.Display ---
          ----------------------------------------------------- end svyset_8 ---
        - _svyset clear wtype
          ---------------------------------------------------- begin _svyset ---
          - version 9
          - gettoken cmd 0 : 0
          - if "`cmd'" == "clear" {
          = if "clear" == "clear" {
          - Clear `0'
          = Clear  wtype
            -------------------------------------------- begin _svyset.Clear ---
            - if `:word count `0'' > 2 {
            = if 1 > 2 {
              di as err "too many arguments"
              exit 103
              }
            - args name i
            - if "`name'" == "stages" {
            = if "wtype" == "stages" {
              confirm integer number `i'
              if `i' <= 1 {
              local i 1
              }
              local stages : char _dta[_svy_stages]
              capture CheckPosInt `stages'
              if c(rc) {
              local stages = `i' - 1
              }
              forval j = `i'/`stages' {
              char _dta[_svy_su`j']
              char _dta[_svy_strata`j']
              char _dta[_svy_fpc`j']
              }
              local --i
              if `i' > 0 {
              char _dta[_svy_stages] `i'
              }
              else char _dta[_svy_stages]
              exit
              }
            - if "`name'" == "stages_wt" {
            = if "wtype" == "stages_wt" {
              confirm integer number `i'
              if `i' <= 1 {
              local i 1
              }
              local stages_wt : char _dta[_svy_stages_wt]
              capture CheckPosInt `stages_wt'
              if c(rc) {
              local stages_wt = `i' - 1
              }
              forval j = `i'/`stages_wt' {
              char _dta[_svy_su`j']
              char _dta[_svy_weight`j']
              }
              local --i
              if `i' > 0 {
              char _dta[_svy_stages_wt] `i'
              }
              else char _dta[_svy_stages_wt]
              exit
              }
            - if "`name'" == "version" {
            = if "wtype" == "version" {
              char _dta[_svy_version]
              }
            - CheckName `name'
            = CheckName wtype
              -------------------------------------- begin _svyset.CheckName ---
              - local 0 `", `0'"'
              = local 0 `", wtype"'
              - capture syntax [, WTYPE WEXP WVAR PWeight IWeight VCE MSE BRRwei
> ght FAY BSRweight BSN JKRweight SDRweight SDRFPC DOF POSTStrata POSTWeight CAL
> Method CALMOdel CALOpts SINGLEunit SU STRata FPC Weight STAGES stages_wt ]
              - if c(rc) {
                di as err "invalid survey characteristic"
                exit 198
                }
              - local gname `stages' `stages_wt' `pweight' `iweight' `wtype' `wv
> ar' `wexp' `vce' `mse' `brrweight' `fay' `bsrweight' `bsn' `jkrweight' `sdrwei
> ght' `sdrfpc' `dof' `poststrata' `postweight' `calmethod' `calmodel' `calopts'
>  `singleunit'
              = local gname     wtype                  
              - local sname `su' `strata' `fpc' `weight'
              = local sname    
              - local k : word count `gname' `sname'
              = local k : word count wtype 
              - if `k' > 1 {
              = if 1 > 1 {
                di as err "too many names"
                exit 103
                }
              - if `k' == 0 {
              = if 1 == 0 {
                di as err "name required"
                exit 100
                }
              - sreturn local gname `gname'
              = sreturn local gname wtype
              - sreturn local sname `sname'
              = sreturn local sname 
              ---------------------------------------- end _svyset.CheckName ---
            - if "`s(sname)'" != "" {
            = if "" != "" {
              local name `s(sname)'
              CheckPosInt `i'
              }
            - else local name `s(gname)'
            = else local name wtype
            - if inlist("`name'","pweight","iweight","wtype","wexp","wvar") {
            = if inlist("wtype","pweight","iweight","wtype","wexp","wvar") {
            - char _dta[_svy_wtype]
            - char _dta[_svy_wvar]
            - exit
            ---------------------------------------------- end _svyset.Clear ---
          - exit
          ------------------------------------------------------ end _svyset ---
        - _svyset clear vce
          ---------------------------------------------------- begin _svyset ---
          - version 9
          - gettoken cmd 0 : 0
          - if "`cmd'" == "clear" {
          = if "clear" == "clear" {
          - Clear `0'
          = Clear  vce
            -------------------------------------------- begin _svyset.Clear ---
            - if `:word count `0'' > 2 {
            = if 1 > 2 {
              di as err "too many arguments"
              exit 103
              }
            - args name i
            - if "`name'" == "stages" {
            = if "vce" == "stages" {
              confirm integer number `i'
              if `i' <= 1 {
              local i 1
              }
              local stages : char _dta[_svy_stages]
              capture CheckPosInt `stages'
              if c(rc) {
              local stages = `i' - 1
              }
              forval j = `i'/`stages' {
              char _dta[_svy_su`j']
              char _dta[_svy_strata`j']
              char _dta[_svy_fpc`j']
              }
              local --i
              if `i' > 0 {
              char _dta[_svy_stages] `i'
              }
              else char _dta[_svy_stages]
              exit
              }
            - if "`name'" == "stages_wt" {
            = if "vce" == "stages_wt" {
              confirm integer number `i'
              if `i' <= 1 {
              local i 1
              }
              local stages_wt : char _dta[_svy_stages_wt]
              capture CheckPosInt `stages_wt'
              if c(rc) {
              local stages_wt = `i' - 1
              }
              forval j = `i'/`stages_wt' {
              char _dta[_svy_su`j']
              char _dta[_svy_weight`j']
              }
              local --i
              if `i' > 0 {
              char _dta[_svy_stages_wt] `i'
              }
              else char _dta[_svy_stages_wt]
              exit
              }
            - if "`name'" == "version" {
            = if "vce" == "version" {
              char _dta[_svy_version]
              }
            - CheckName `name'
            = CheckName vce
              -------------------------------------- begin _svyset.CheckName ---
              - local 0 `", `0'"'
              = local 0 `", vce"'
              - capture syntax [, WTYPE WEXP WVAR PWeight IWeight VCE MSE BRRwei
> ght FAY BSRweight BSN JKRweight SDRweight SDRFPC DOF POSTStrata POSTWeight CAL
> Method CALMOdel CALOpts SINGLEunit SU STRata FPC Weight STAGES stages_wt ]
              - if c(rc) {
                di as err "invalid survey characteristic"
                exit 198
                }
              - local gname `stages' `stages_wt' `pweight' `iweight' `wtype' `wv
> ar' `wexp' `vce' `mse' `brrweight' `fay' `bsrweight' `bsn' `jkrweight' `sdrwei
> ght' `sdrfpc' `dof' `poststrata' `postweight' `calmethod' `calmodel' `calopts'
>  `singleunit'
              = local gname        vce               
              - local sname `su' `strata' `fpc' `weight'
              = local sname    
              - local k : word count `gname' `sname'
              = local k : word count vce 
              - if `k' > 1 {
              = if 1 > 1 {
                di as err "too many names"
                exit 103
                }
              - if `k' == 0 {
              = if 1 == 0 {
                di as err "name required"
                exit 100
                }
              - sreturn local gname `gname'
              = sreturn local gname vce
              - sreturn local sname `sname'
              = sreturn local sname 
              ---------------------------------------- end _svyset.CheckName ---
            - if "`s(sname)'" != "" {
            = if "" != "" {
              local name `s(sname)'
              CheckPosInt `i'
              }
            - else local name `s(gname)'
            = else local name vce
            - if inlist("`name'","pweight","iweight","wtype","wexp","wvar") {
            = if inlist("vce","pweight","iweight","wtype","wexp","wvar") {
              char _dta[_svy_wtype]
              char _dta[_svy_wvar]
              exit
              }
            - if "`name'" == "vce" {
            = if "vce" == "vce" {
            - char _dta[_svy_vce]
            - char _dta[_svy_mse]
            - exit
            ---------------------------------------------- end _svyset.Clear ---
          - exit
          ------------------------------------------------------ end _svyset ---
        - _svyset clear brrweight
          ---------------------------------------------------- begin _svyset ---
          - version 9
          - gettoken cmd 0 : 0
          - if "`cmd'" == "clear" {
          = if "clear" == "clear" {
          - Clear `0'
          = Clear  brrweight
            -------------------------------------------- begin _svyset.Clear ---
            - if `:word count `0'' > 2 {
            = if 1 > 2 {
              di as err "too many arguments"
              exit 103
              }
            - args name i
            - if "`name'" == "stages" {
            = if "brrweight" == "stages" {
              confirm integer number `i'
              if `i' <= 1 {
              local i 1
              }
              local stages : char _dta[_svy_stages]
              capture CheckPosInt `stages'
              if c(rc) {
              local stages = `i' - 1
              }
              forval j = `i'/`stages' {
              char _dta[_svy_su`j']
              char _dta[_svy_strata`j']
              char _dta[_svy_fpc`j']
              }
              local --i
              if `i' > 0 {
              char _dta[_svy_stages] `i'
              }
              else char _dta[_svy_stages]
              exit
              }
            - if "`name'" == "stages_wt" {
            = if "brrweight" == "stages_wt" {
              confirm integer number `i'
              if `i' <= 1 {
              local i 1
              }
              local stages_wt : char _dta[_svy_stages_wt]
              capture CheckPosInt `stages_wt'
              if c(rc) {
              local stages_wt = `i' - 1
              }
              forval j = `i'/`stages_wt' {
              char _dta[_svy_su`j']
              char _dta[_svy_weight`j']
              }
              local --i
              if `i' > 0 {
              char _dta[_svy_stages_wt] `i'
              }
              else char _dta[_svy_stages_wt]
              exit
              }
            - if "`name'" == "version" {
            = if "brrweight" == "version" {
              char _dta[_svy_version]
              }
            - CheckName `name'
            = CheckName brrweight
              -------------------------------------- begin _svyset.CheckName ---
              - local 0 `", `0'"'
              = local 0 `", brrweight"'
              - capture syntax [, WTYPE WEXP WVAR PWeight IWeight VCE MSE BRRwei
> ght FAY BSRweight BSN JKRweight SDRweight SDRFPC DOF POSTStrata POSTWeight CAL
> Method CALMOdel CALOpts SINGLEunit SU STRata FPC Weight STAGES stages_wt ]
              - if c(rc) {
                di as err "invalid survey characteristic"
                exit 198
                }
              - local gname `stages' `stages_wt' `pweight' `iweight' `wtype' `wv
> ar' `wexp' `vce' `mse' `brrweight' `fay' `bsrweight' `bsn' `jkrweight' `sdrwei
> ght' `sdrfpc' `dof' `poststrata' `postweight' `calmethod' `calmodel' `calopts'
>  `singleunit'
              = local gname          brrweight             
              - local sname `su' `strata' `fpc' `weight'
              = local sname    
              - local k : word count `gname' `sname'
              = local k : word count brrweight 
              - if `k' > 1 {
              = if 1 > 1 {
                di as err "too many names"
                exit 103
                }
              - if `k' == 0 {
              = if 1 == 0 {
                di as err "name required"
                exit 100
                }
              - sreturn local gname `gname'
              = sreturn local gname brrweight
              - sreturn local sname `sname'
              = sreturn local sname 
              ---------------------------------------- end _svyset.CheckName ---
            - if "`s(sname)'" != "" {
            = if "" != "" {
              local name `s(sname)'
              CheckPosInt `i'
              }
            - else local name `s(gname)'
            = else local name brrweight
            - if inlist("`name'","pweight","iweight","wtype","wexp","wvar") {
            = if inlist("brrweight","pweight","iweight","wtype","wexp","wvar") {
              char _dta[_svy_wtype]
              char _dta[_svy_wvar]
              exit
              }
            - if "`name'" == "vce" {
            = if "brrweight" == "vce" {
              char _dta[_svy_vce]
              char _dta[_svy_mse]
              exit
              }
            - if bsubstr("`name'",1,4) == "post" {
            = if bsubstr("brrweight",1,4) == "post" {
              char _dta[_svy_poststrata]
              char _dta[_svy_postweight]
              exit
              }
            - if bsubstr("`name'",1,3) == "cal" {
            = if bsubstr("brrweight",1,3) == "cal" {
              char _dta[_svy_calmethod]
              char _dta[_svy_calmodel]
              char _dta[_svy_calopts]
              exit
              }
            - if "`name'" == "sdrweight" {
            = if "brrweight" == "sdrweight" {
              char _dta[_svy_sdrfpc]
              }
            - char _dta[_svy_`name'`i']
            = char _dta[_svy_brrweight]
            ---------------------------------------------- end _svyset.Clear ---
          - exit
          ------------------------------------------------------ end _svyset ---
        - _svyset clear fay
          ---------------------------------------------------- begin _svyset ---
          - version 9
          - gettoken cmd 0 : 0
          - if "`cmd'" == "clear" {
          = if "clear" == "clear" {
          - Clear `0'
          = Clear  fay
            -------------------------------------------- begin _svyset.Clear ---
            - if `:word count `0'' > 2 {
            = if 1 > 2 {
              di as err "too many arguments"
              exit 103
              }
            - args name i
            - if "`name'" == "stages" {
            = if "fay" == "stages" {
              confirm integer number `i'
              if `i' <= 1 {
              local i 1
              }
              local stages : char _dta[_svy_stages]
              capture CheckPosInt `stages'
              if c(rc) {
              local stages = `i' - 1
              }
              forval j = `i'/`stages' {
              char _dta[_svy_su`j']
              char _dta[_svy_strata`j']
              char _dta[_svy_fpc`j']
              }
              local --i
              if `i' > 0 {
              char _dta[_svy_stages] `i'
              }
              else char _dta[_svy_stages]
              exit
              }
            - if "`name'" == "stages_wt" {
            = if "fay" == "stages_wt" {
              confirm integer number `i'
              if `i' <= 1 {
              local i 1
              }
              local stages_wt : char _dta[_svy_stages_wt]
              capture CheckPosInt `stages_wt'
              if c(rc) {
              local stages_wt = `i' - 1
              }
              forval j = `i'/`stages_wt' {
              char _dta[_svy_su`j']
              char _dta[_svy_weight`j']
              }
              local --i
              if `i' > 0 {
              char _dta[_svy_stages_wt] `i'
              }
              else char _dta[_svy_stages_wt]
              exit
              }
            - if "`name'" == "version" {
            = if "fay" == "version" {
              char _dta[_svy_version]
              }
            - CheckName `name'
            = CheckName fay
              -------------------------------------- begin _svyset.CheckName ---
              - local 0 `", `0'"'
              = local 0 `", fay"'
              - capture syntax [, WTYPE WEXP WVAR PWeight IWeight VCE MSE BRRwei
> ght FAY BSRweight BSN JKRweight SDRweight SDRFPC DOF POSTStrata POSTWeight CAL
> Method CALMOdel CALOpts SINGLEunit SU STRata FPC Weight STAGES stages_wt ]
              - if c(rc) {
                di as err "invalid survey characteristic"
                exit 198
                }
              - local gname `stages' `stages_wt' `pweight' `iweight' `wtype' `wv
> ar' `wexp' `vce' `mse' `brrweight' `fay' `bsrweight' `bsn' `jkrweight' `sdrwei
> ght' `sdrfpc' `dof' `poststrata' `postweight' `calmethod' `calmodel' `calopts'
>  `singleunit'
              = local gname           fay            
              - local sname `su' `strata' `fpc' `weight'
              = local sname    
              - local k : word count `gname' `sname'
              = local k : word count fay 
              - if `k' > 1 {
              = if 1 > 1 {
                di as err "too many names"
                exit 103
                }
              - if `k' == 0 {
              = if 1 == 0 {
                di as err "name required"
                exit 100
                }
              - sreturn local gname `gname'
              = sreturn local gname fay
              - sreturn local sname `sname'
              = sreturn local sname 
              ---------------------------------------- end _svyset.CheckName ---
            - if "`s(sname)'" != "" {
            = if "" != "" {
              local name `s(sname)'
              CheckPosInt `i'
              }
            - else local name `s(gname)'
            = else local name fay
            - if inlist("`name'","pweight","iweight","wtype","wexp","wvar") {
            = if inlist("fay","pweight","iweight","wtype","wexp","wvar") {
              char _dta[_svy_wtype]
              char _dta[_svy_wvar]
              exit
              }
            - if "`name'" == "vce" {
            = if "fay" == "vce" {
              char _dta[_svy_vce]
              char _dta[_svy_mse]
              exit
              }
            - if bsubstr("`name'",1,4) == "post" {
            = if bsubstr("fay",1,4) == "post" {
              char _dta[_svy_poststrata]
              char _dta[_svy_postweight]
              exit
              }
            - if bsubstr("`name'",1,3) == "cal" {
            = if bsubstr("fay",1,3) == "cal" {
              char _dta[_svy_calmethod]
              char _dta[_svy_calmodel]
              char _dta[_svy_calopts]
              exit
              }
            - if "`name'" == "sdrweight" {
            = if "fay" == "sdrweight" {
              char _dta[_svy_sdrfpc]
              }
            - char _dta[_svy_`name'`i']
            = char _dta[_svy_fay]
            ---------------------------------------------- end _svyset.Clear ---
          - exit
          ------------------------------------------------------ end _svyset ---
        - _svyset clear bsrweight
          ---------------------------------------------------- begin _svyset ---
          - version 9
          - gettoken cmd 0 : 0
          - if "`cmd'" == "clear" {
          = if "clear" == "clear" {
          - Clear `0'
          = Clear  bsrweight
            -------------------------------------------- begin _svyset.Clear ---
            - if `:word count `0'' > 2 {
            = if 1 > 2 {
              di as err "too many arguments"
              exit 103
              }
            - args name i
            - if "`name'" == "stages" {
            = if "bsrweight" == "stages" {
              confirm integer number `i'
              if `i' <= 1 {
              local i 1
              }
              local stages : char _dta[_svy_stages]
              capture CheckPosInt `stages'
              if c(rc) {
              local stages = `i' - 1
              }
              forval j = `i'/`stages' {
              char _dta[_svy_su`j']
              char _dta[_svy_strata`j']
              char _dta[_svy_fpc`j']
              }
              local --i
              if `i' > 0 {
              char _dta[_svy_stages] `i'
              }
              else char _dta[_svy_stages]
              exit
              }
            - if "`name'" == "stages_wt" {
            = if "bsrweight" == "stages_wt" {
              confirm integer number `i'
              if `i' <= 1 {
              local i 1
              }
              local stages_wt : char _dta[_svy_stages_wt]
              capture CheckPosInt `stages_wt'
              if c(rc) {
              local stages_wt = `i' - 1
              }
              forval j = `i'/`stages_wt' {
              char _dta[_svy_su`j']
              char _dta[_svy_weight`j']
              }
              local --i
              if `i' > 0 {
              char _dta[_svy_stages_wt] `i'
              }
              else char _dta[_svy_stages_wt]
              exit
              }
            - if "`name'" == "version" {
            = if "bsrweight" == "version" {
              char _dta[_svy_version]
              }
            - CheckName `name'
            = CheckName bsrweight
              -------------------------------------- begin _svyset.CheckName ---
              - local 0 `", `0'"'
              = local 0 `", bsrweight"'
              - capture syntax [, WTYPE WEXP WVAR PWeight IWeight VCE MSE BRRwei
> ght FAY BSRweight BSN JKRweight SDRweight SDRFPC DOF POSTStrata POSTWeight CAL
> Method CALMOdel CALOpts SINGLEunit SU STRata FPC Weight STAGES stages_wt ]
              - if c(rc) {
                di as err "invalid survey characteristic"
                exit 198
                }
              - local gname `stages' `stages_wt' `pweight' `iweight' `wtype' `wv
> ar' `wexp' `vce' `mse' `brrweight' `fay' `bsrweight' `bsn' `jkrweight' `sdrwei
> ght' `sdrfpc' `dof' `poststrata' `postweight' `calmethod' `calmodel' `calopts'
>  `singleunit'
              = local gname            bsrweight           
              - local sname `su' `strata' `fpc' `weight'
              = local sname    
              - local k : word count `gname' `sname'
              = local k : word count bsrweight 
              - if `k' > 1 {
              = if 1 > 1 {
                di as err "too many names"
                exit 103
                }
              - if `k' == 0 {
              = if 1 == 0 {
                di as err "name required"
                exit 100
                }
              - sreturn local gname `gname'
              = sreturn local gname bsrweight
              - sreturn local sname `sname'
              = sreturn local sname 
              ---------------------------------------- end _svyset.CheckName ---
            - if "`s(sname)'" != "" {
            = if "" != "" {
              local name `s(sname)'
              CheckPosInt `i'
              }
            - else local name `s(gname)'
            = else local name bsrweight
            - if inlist("`name'","pweight","iweight","wtype","wexp","wvar") {
            = if inlist("bsrweight","pweight","iweight","wtype","wexp","wvar") {
              char _dta[_svy_wtype]
              char _dta[_svy_wvar]
              exit
              }
            - if "`name'" == "vce" {
            = if "bsrweight" == "vce" {
              char _dta[_svy_vce]
              char _dta[_svy_mse]
              exit
              }
            - if bsubstr("`name'",1,4) == "post" {
            = if bsubstr("bsrweight",1,4) == "post" {
              char _dta[_svy_poststrata]
              char _dta[_svy_postweight]
              exit
              }
            - if bsubstr("`name'",1,3) == "cal" {
            = if bsubstr("bsrweight",1,3) == "cal" {
              char _dta[_svy_calmethod]
              char _dta[_svy_calmodel]
              char _dta[_svy_calopts]
              exit
              }
            - if "`name'" == "sdrweight" {
            = if "bsrweight" == "sdrweight" {
              char _dta[_svy_sdrfpc]
              }
            - char _dta[_svy_`name'`i']
            = char _dta[_svy_bsrweight]
            ---------------------------------------------- end _svyset.Clear ---
          - exit
          ------------------------------------------------------ end _svyset ---
        - _svyset clear bsn
          ---------------------------------------------------- begin _svyset ---
          - version 9
          - gettoken cmd 0 : 0
          - if "`cmd'" == "clear" {
          = if "clear" == "clear" {
          - Clear `0'
          = Clear  bsn
            -------------------------------------------- begin _svyset.Clear ---
            - if `:word count `0'' > 2 {
            = if 1 > 2 {
              di as err "too many arguments"
              exit 103
              }
            - args name i
            - if "`name'" == "stages" {
            = if "bsn" == "stages" {
              confirm integer number `i'
              if `i' <= 1 {
              local i 1
              }
              local stages : char _dta[_svy_stages]
              capture CheckPosInt `stages'
              if c(rc) {
              local stages = `i' - 1
              }
              forval j = `i'/`stages' {
              char _dta[_svy_su`j']
              char _dta[_svy_strata`j']
              char _dta[_svy_fpc`j']
              }
              local --i
              if `i' > 0 {
              char _dta[_svy_stages] `i'
              }
              else char _dta[_svy_stages]
              exit
              }
            - if "`name'" == "stages_wt" {
            = if "bsn" == "stages_wt" {
              confirm integer number `i'
              if `i' <= 1 {
              local i 1
              }
              local stages_wt : char _dta[_svy_stages_wt]
              capture CheckPosInt `stages_wt'
              if c(rc) {
              local stages_wt = `i' - 1
              }
              forval j = `i'/`stages_wt' {
              char _dta[_svy_su`j']
              char _dta[_svy_weight`j']
              }
              local --i
              if `i' > 0 {
              char _dta[_svy_stages_wt] `i'
              }
              else char _dta[_svy_stages_wt]
              exit
              }
            - if "`name'" == "version" {
            = if "bsn" == "version" {
              char _dta[_svy_version]
              }
            - CheckName `name'
            = CheckName bsn
              -------------------------------------- begin _svyset.CheckName ---
              - local 0 `", `0'"'
              = local 0 `", bsn"'
              - capture syntax [, WTYPE WEXP WVAR PWeight IWeight VCE MSE BRRwei
> ght FAY BSRweight BSN JKRweight SDRweight SDRFPC DOF POSTStrata POSTWeight CAL
> Method CALMOdel CALOpts SINGLEunit SU STRata FPC Weight STAGES stages_wt ]
              - if c(rc) {
                di as err "invalid survey characteristic"
                exit 198
                }
              - local gname `stages' `stages_wt' `pweight' `iweight' `wtype' `wv
> ar' `wexp' `vce' `mse' `brrweight' `fay' `bsrweight' `bsn' `jkrweight' `sdrwei
> ght' `sdrfpc' `dof' `poststrata' `postweight' `calmethod' `calmodel' `calopts'
>  `singleunit'
              = local gname             bsn          
              - local sname `su' `strata' `fpc' `weight'
              = local sname    
              - local k : word count `gname' `sname'
              = local k : word count bsn 
              - if `k' > 1 {
              = if 1 > 1 {
                di as err "too many names"
                exit 103
                }
              - if `k' == 0 {
              = if 1 == 0 {
                di as err "name required"
                exit 100
                }
              - sreturn local gname `gname'
              = sreturn local gname bsn
              - sreturn local sname `sname'
              = sreturn local sname 
              ---------------------------------------- end _svyset.CheckName ---
            - if "`s(sname)'" != "" {
            = if "" != "" {
              local name `s(sname)'
              CheckPosInt `i'
              }
            - else local name `s(gname)'
            = else local name bsn
            - if inlist("`name'","pweight","iweight","wtype","wexp","wvar") {
            = if inlist("bsn","pweight","iweight","wtype","wexp","wvar") {
              char _dta[_svy_wtype]
              char _dta[_svy_wvar]
              exit
              }
            - if "`name'" == "vce" {
            = if "bsn" == "vce" {
              char _dta[_svy_vce]
              char _dta[_svy_mse]
              exit
              }
            - if bsubstr("`name'",1,4) == "post" {
            = if bsubstr("bsn",1,4) == "post" {
              char _dta[_svy_poststrata]
              char _dta[_svy_postweight]
              exit
              }
            - if bsubstr("`name'",1,3) == "cal" {
            = if bsubstr("bsn",1,3) == "cal" {
              char _dta[_svy_calmethod]
              char _dta[_svy_calmodel]
              char _dta[_svy_calopts]
              exit
              }
            - if "`name'" == "sdrweight" {
            = if "bsn" == "sdrweight" {
              char _dta[_svy_sdrfpc]
              }
            - char _dta[_svy_`name'`i']
            = char _dta[_svy_bsn]
            ---------------------------------------------- end _svyset.Clear ---
          - exit
          ------------------------------------------------------ end _svyset ---
        - _svyset clear jkrweight
          ---------------------------------------------------- begin _svyset ---
          - version 9
          - gettoken cmd 0 : 0
          - if "`cmd'" == "clear" {
          = if "clear" == "clear" {
          - Clear `0'
          = Clear  jkrweight
            -------------------------------------------- begin _svyset.Clear ---
            - if `:word count `0'' > 2 {
            = if 1 > 2 {
              di as err "too many arguments"
              exit 103
              }
            - args name i
            - if "`name'" == "stages" {
            = if "jkrweight" == "stages" {
              confirm integer number `i'
              if `i' <= 1 {
              local i 1
              }
              local stages : char _dta[_svy_stages]
              capture CheckPosInt `stages'
              if c(rc) {
              local stages = `i' - 1
              }
              forval j = `i'/`stages' {
              char _dta[_svy_su`j']
              char _dta[_svy_strata`j']
              char _dta[_svy_fpc`j']
              }
              local --i
              if `i' > 0 {
              char _dta[_svy_stages] `i'
              }
              else char _dta[_svy_stages]
              exit
              }
            - if "`name'" == "stages_wt" {
            = if "jkrweight" == "stages_wt" {
              confirm integer number `i'
              if `i' <= 1 {
              local i 1
              }
              local stages_wt : char _dta[_svy_stages_wt]
              capture CheckPosInt `stages_wt'
              if c(rc) {
              local stages_wt = `i' - 1
              }
              forval j = `i'/`stages_wt' {
              char _dta[_svy_su`j']
              char _dta[_svy_weight`j']
              }
              local --i
              if `i' > 0 {
              char _dta[_svy_stages_wt] `i'
              }
              else char _dta[_svy_stages_wt]
              exit
              }
            - if "`name'" == "version" {
            = if "jkrweight" == "version" {
              char _dta[_svy_version]
              }
            - CheckName `name'
            = CheckName jkrweight
              -------------------------------------- begin _svyset.CheckName ---
              - local 0 `", `0'"'
              = local 0 `", jkrweight"'
              - capture syntax [, WTYPE WEXP WVAR PWeight IWeight VCE MSE BRRwei
> ght FAY BSRweight BSN JKRweight SDRweight SDRFPC DOF POSTStrata POSTWeight CAL
> Method CALMOdel CALOpts SINGLEunit SU STRata FPC Weight STAGES stages_wt ]
              - if c(rc) {
                di as err "invalid survey characteristic"
                exit 198
                }
              - local gname `stages' `stages_wt' `pweight' `iweight' `wtype' `wv
> ar' `wexp' `vce' `mse' `brrweight' `fay' `bsrweight' `bsn' `jkrweight' `sdrwei
> ght' `sdrfpc' `dof' `poststrata' `postweight' `calmethod' `calmodel' `calopts'
>  `singleunit'
              = local gname              jkrweight         
              - local sname `su' `strata' `fpc' `weight'
              = local sname    
              - local k : word count `gname' `sname'
              = local k : word count jkrweight 
              - if `k' > 1 {
              = if 1 > 1 {
                di as err "too many names"
                exit 103
                }
              - if `k' == 0 {
              = if 1 == 0 {
                di as err "name required"
                exit 100
                }
              - sreturn local gname `gname'
              = sreturn local gname jkrweight
              - sreturn local sname `sname'
              = sreturn local sname 
              ---------------------------------------- end _svyset.CheckName ---
            - if "`s(sname)'" != "" {
            = if "" != "" {
              local name `s(sname)'
              CheckPosInt `i'
              }
            - else local name `s(gname)'
            = else local name jkrweight
            - if inlist("`name'","pweight","iweight","wtype","wexp","wvar") {
            = if inlist("jkrweight","pweight","iweight","wtype","wexp","wvar") {
              char _dta[_svy_wtype]
              char _dta[_svy_wvar]
              exit
              }
            - if "`name'" == "vce" {
            = if "jkrweight" == "vce" {
              char _dta[_svy_vce]
              char _dta[_svy_mse]
              exit
              }
            - if bsubstr("`name'",1,4) == "post" {
            = if bsubstr("jkrweight",1,4) == "post" {
              char _dta[_svy_poststrata]
              char _dta[_svy_postweight]
              exit
              }
            - if bsubstr("`name'",1,3) == "cal" {
            = if bsubstr("jkrweight",1,3) == "cal" {
              char _dta[_svy_calmethod]
              char _dta[_svy_calmodel]
              char _dta[_svy_calopts]
              exit
              }
            - if "`name'" == "sdrweight" {
            = if "jkrweight" == "sdrweight" {
              char _dta[_svy_sdrfpc]
              }
            - char _dta[_svy_`name'`i']
            = char _dta[_svy_jkrweight]
            ---------------------------------------------- end _svyset.Clear ---
          - exit
          ------------------------------------------------------ end _svyset ---
        - _svyset clear sdrweight
          ---------------------------------------------------- begin _svyset ---
          - version 9
          - gettoken cmd 0 : 0
          - if "`cmd'" == "clear" {
          = if "clear" == "clear" {
          - Clear `0'
          = Clear  sdrweight
            -------------------------------------------- begin _svyset.Clear ---
            - if `:word count `0'' > 2 {
            = if 1 > 2 {
              di as err "too many arguments"
              exit 103
              }
            - args name i
            - if "`name'" == "stages" {
            = if "sdrweight" == "stages" {
              confirm integer number `i'
              if `i' <= 1 {
              local i 1
              }
              local stages : char _dta[_svy_stages]
              capture CheckPosInt `stages'
              if c(rc) {
              local stages = `i' - 1
              }
              forval j = `i'/`stages' {
              char _dta[_svy_su`j']
              char _dta[_svy_strata`j']
              char _dta[_svy_fpc`j']
              }
              local --i
              if `i' > 0 {
              char _dta[_svy_stages] `i'
              }
              else char _dta[_svy_stages]
              exit
              }
            - if "`name'" == "stages_wt" {
            = if "sdrweight" == "stages_wt" {
              confirm integer number `i'
              if `i' <= 1 {
              local i 1
              }
              local stages_wt : char _dta[_svy_stages_wt]
              capture CheckPosInt `stages_wt'
              if c(rc) {
              local stages_wt = `i' - 1
              }
              forval j = `i'/`stages_wt' {
              char _dta[_svy_su`j']
              char _dta[_svy_weight`j']
              }
              local --i
              if `i' > 0 {
              char _dta[_svy_stages_wt] `i'
              }
              else char _dta[_svy_stages_wt]
              exit
              }
            - if "`name'" == "version" {
            = if "sdrweight" == "version" {
              char _dta[_svy_version]
              }
            - CheckName `name'
            = CheckName sdrweight
              -------------------------------------- begin _svyset.CheckName ---
              - local 0 `", `0'"'
              = local 0 `", sdrweight"'
              - capture syntax [, WTYPE WEXP WVAR PWeight IWeight VCE MSE BRRwei
> ght FAY BSRweight BSN JKRweight SDRweight SDRFPC DOF POSTStrata POSTWeight CAL
> Method CALMOdel CALOpts SINGLEunit SU STRata FPC Weight STAGES stages_wt ]
              - if c(rc) {
                di as err "invalid survey characteristic"
                exit 198
                }
              - local gname `stages' `stages_wt' `pweight' `iweight' `wtype' `wv
> ar' `wexp' `vce' `mse' `brrweight' `fay' `bsrweight' `bsn' `jkrweight' `sdrwei
> ght' `sdrfpc' `dof' `poststrata' `postweight' `calmethod' `calmodel' `calopts'
>  `singleunit'
              = local gname               sdrweight        
              - local sname `su' `strata' `fpc' `weight'
              = local sname    
              - local k : word count `gname' `sname'
              = local k : word count sdrweight 
              - if `k' > 1 {
              = if 1 > 1 {
                di as err "too many names"
                exit 103
                }
              - if `k' == 0 {
              = if 1 == 0 {
                di as err "name required"
                exit 100
                }
              - sreturn local gname `gname'
              = sreturn local gname sdrweight
              - sreturn local sname `sname'
              = sreturn local sname 
              ---------------------------------------- end _svyset.CheckName ---
            - if "`s(sname)'" != "" {
            = if "" != "" {
              local name `s(sname)'
              CheckPosInt `i'
              }
            - else local name `s(gname)'
            = else local name sdrweight
            - if inlist("`name'","pweight","iweight","wtype","wexp","wvar") {
            = if inlist("sdrweight","pweight","iweight","wtype","wexp","wvar") {
              char _dta[_svy_wtype]
              char _dta[_svy_wvar]
              exit
              }
            - if "`name'" == "vce" {
            = if "sdrweight" == "vce" {
              char _dta[_svy_vce]
              char _dta[_svy_mse]
              exit
              }
            - if bsubstr("`name'",1,4) == "post" {
            = if bsubstr("sdrweight",1,4) == "post" {
              char _dta[_svy_poststrata]
              char _dta[_svy_postweight]
              exit
              }
            - if bsubstr("`name'",1,3) == "cal" {
            = if bsubstr("sdrweight",1,3) == "cal" {
              char _dta[_svy_calmethod]
              char _dta[_svy_calmodel]
              char _dta[_svy_calopts]
              exit
              }
            - if "`name'" == "sdrweight" {
            = if "sdrweight" == "sdrweight" {
            - char _dta[_svy_sdrfpc]
            - }
            - char _dta[_svy_`name'`i']
            = char _dta[_svy_sdrweight]
            ---------------------------------------------- end _svyset.Clear ---
          - exit
          ------------------------------------------------------ end _svyset ---
        - _svyset clear dof
          ---------------------------------------------------- begin _svyset ---
          - version 9
          - gettoken cmd 0 : 0
          - if "`cmd'" == "clear" {
          = if "clear" == "clear" {
          - Clear `0'
          = Clear  dof
            -------------------------------------------- begin _svyset.Clear ---
            - if `:word count `0'' > 2 {
            = if 1 > 2 {
              di as err "too many arguments"
              exit 103
              }
            - args name i
            - if "`name'" == "stages" {
            = if "dof" == "stages" {
              confirm integer number `i'
              if `i' <= 1 {
              local i 1
              }
              local stages : char _dta[_svy_stages]
              capture CheckPosInt `stages'
              if c(rc) {
              local stages = `i' - 1
              }
              forval j = `i'/`stages' {
              char _dta[_svy_su`j']
              char _dta[_svy_strata`j']
              char _dta[_svy_fpc`j']
              }
              local --i
              if `i' > 0 {
              char _dta[_svy_stages] `i'
              }
              else char _dta[_svy_stages]
              exit
              }
            - if "`name'" == "stages_wt" {
            = if "dof" == "stages_wt" {
              confirm integer number `i'
              if `i' <= 1 {
              local i 1
              }
              local stages_wt : char _dta[_svy_stages_wt]
              capture CheckPosInt `stages_wt'
              if c(rc) {
              local stages_wt = `i' - 1
              }
              forval j = `i'/`stages_wt' {
              char _dta[_svy_su`j']
              char _dta[_svy_weight`j']
              }
              local --i
              if `i' > 0 {
              char _dta[_svy_stages_wt] `i'
              }
              else char _dta[_svy_stages_wt]
              exit
              }
            - if "`name'" == "version" {
            = if "dof" == "version" {
              char _dta[_svy_version]
              }
            - CheckName `name'
            = CheckName dof
              -------------------------------------- begin _svyset.CheckName ---
              - local 0 `", `0'"'
              = local 0 `", dof"'
              - capture syntax [, WTYPE WEXP WVAR PWeight IWeight VCE MSE BRRwei
> ght FAY BSRweight BSN JKRweight SDRweight SDRFPC DOF POSTStrata POSTWeight CAL
> Method CALMOdel CALOpts SINGLEunit SU STRata FPC Weight STAGES stages_wt ]
              - if c(rc) {
                di as err "invalid survey characteristic"
                exit 198
                }
              - local gname `stages' `stages_wt' `pweight' `iweight' `wtype' `wv
> ar' `wexp' `vce' `mse' `brrweight' `fay' `bsrweight' `bsn' `jkrweight' `sdrwei
> ght' `sdrfpc' `dof' `poststrata' `postweight' `calmethod' `calmodel' `calopts'
>  `singleunit'
              = local gname                 dof      
              - local sname `su' `strata' `fpc' `weight'
              = local sname    
              - local k : word count `gname' `sname'
              = local k : word count dof 
              - if `k' > 1 {
              = if 1 > 1 {
                di as err "too many names"
                exit 103
                }
              - if `k' == 0 {
              = if 1 == 0 {
                di as err "name required"
                exit 100
                }
              - sreturn local gname `gname'
              = sreturn local gname dof
              - sreturn local sname `sname'
              = sreturn local sname 
              ---------------------------------------- end _svyset.CheckName ---
            - if "`s(sname)'" != "" {
            = if "" != "" {
              local name `s(sname)'
              CheckPosInt `i'
              }
            - else local name `s(gname)'
            = else local name dof
            - if inlist("`name'","pweight","iweight","wtype","wexp","wvar") {
            = if inlist("dof","pweight","iweight","wtype","wexp","wvar") {
              char _dta[_svy_wtype]
              char _dta[_svy_wvar]
              exit
              }
            - if "`name'" == "vce" {
            = if "dof" == "vce" {
              char _dta[_svy_vce]
              char _dta[_svy_mse]
              exit
              }
            - if bsubstr("`name'",1,4) == "post" {
            = if bsubstr("dof",1,4) == "post" {
              char _dta[_svy_poststrata]
              char _dta[_svy_postweight]
              exit
              }
            - if bsubstr("`name'",1,3) == "cal" {
            = if bsubstr("dof",1,3) == "cal" {
              char _dta[_svy_calmethod]
              char _dta[_svy_calmodel]
              char _dta[_svy_calopts]
              exit
              }
            - if "`name'" == "sdrweight" {
            = if "dof" == "sdrweight" {
              char _dta[_svy_sdrfpc]
              }
            - char _dta[_svy_`name'`i']
            = char _dta[_svy_dof]
            ---------------------------------------------- end _svyset.Clear ---
          - exit
          ------------------------------------------------------ end _svyset ---
        - _svyset clear poststrata
          ---------------------------------------------------- begin _svyset ---
          - version 9
          - gettoken cmd 0 : 0
          - if "`cmd'" == "clear" {
          = if "clear" == "clear" {
          - Clear `0'
          = Clear  poststrata
            -------------------------------------------- begin _svyset.Clear ---
            - if `:word count `0'' > 2 {
            = if 1 > 2 {
              di as err "too many arguments"
              exit 103
              }
            - args name i
            - if "`name'" == "stages" {
            = if "poststrata" == "stages" {
              confirm integer number `i'
              if `i' <= 1 {
              local i 1
              }
              local stages : char _dta[_svy_stages]
              capture CheckPosInt `stages'
              if c(rc) {
              local stages = `i' - 1
              }
              forval j = `i'/`stages' {
              char _dta[_svy_su`j']
              char _dta[_svy_strata`j']
              char _dta[_svy_fpc`j']
              }
              local --i
              if `i' > 0 {
              char _dta[_svy_stages] `i'
              }
              else char _dta[_svy_stages]
              exit
              }
            - if "`name'" == "stages_wt" {
            = if "poststrata" == "stages_wt" {
              confirm integer number `i'
              if `i' <= 1 {
              local i 1
              }
              local stages_wt : char _dta[_svy_stages_wt]
              capture CheckPosInt `stages_wt'
              if c(rc) {
              local stages_wt = `i' - 1
              }
              forval j = `i'/`stages_wt' {
              char _dta[_svy_su`j']
              char _dta[_svy_weight`j']
              }
              local --i
              if `i' > 0 {
              char _dta[_svy_stages_wt] `i'
              }
              else char _dta[_svy_stages_wt]
              exit
              }
            - if "`name'" == "version" {
            = if "poststrata" == "version" {
              char _dta[_svy_version]
              }
            - CheckName `name'
            = CheckName poststrata
              -------------------------------------- begin _svyset.CheckName ---
              - local 0 `", `0'"'
              = local 0 `", poststrata"'
              - capture syntax [, WTYPE WEXP WVAR PWeight IWeight VCE MSE BRRwei
> ght FAY BSRweight BSN JKRweight SDRweight SDRFPC DOF POSTStrata POSTWeight CAL
> Method CALMOdel CALOpts SINGLEunit SU STRata FPC Weight STAGES stages_wt ]
              - if c(rc) {
                di as err "invalid survey characteristic"
                exit 198
                }
              - local gname `stages' `stages_wt' `pweight' `iweight' `wtype' `wv
> ar' `wexp' `vce' `mse' `brrweight' `fay' `bsrweight' `bsn' `jkrweight' `sdrwei
> ght' `sdrfpc' `dof' `poststrata' `postweight' `calmethod' `calmodel' `calopts'
>  `singleunit'
              = local gname                  poststrata     
              - local sname `su' `strata' `fpc' `weight'
              = local sname    
              - local k : word count `gname' `sname'
              = local k : word count poststrata 
              - if `k' > 1 {
              = if 1 > 1 {
                di as err "too many names"
                exit 103
                }
              - if `k' == 0 {
              = if 1 == 0 {
                di as err "name required"
                exit 100
                }
              - sreturn local gname `gname'
              = sreturn local gname poststrata
              - sreturn local sname `sname'
              = sreturn local sname 
              ---------------------------------------- end _svyset.CheckName ---
            - if "`s(sname)'" != "" {
            = if "" != "" {
              local name `s(sname)'
              CheckPosInt `i'
              }
            - else local name `s(gname)'
            = else local name poststrata
            - if inlist("`name'","pweight","iweight","wtype","wexp","wvar") {
            = if inlist("poststrata","pweight","iweight","wtype","wexp","wvar") 
> {
              char _dta[_svy_wtype]
              char _dta[_svy_wvar]
              exit
              }
            - if "`name'" == "vce" {
            = if "poststrata" == "vce" {
              char _dta[_svy_vce]
              char _dta[_svy_mse]
              exit
              }
            - if bsubstr("`name'",1,4) == "post" {
            = if bsubstr("poststrata",1,4) == "post" {
            - char _dta[_svy_poststrata]
            - char _dta[_svy_postweight]
            - exit
            ---------------------------------------------- end _svyset.Clear ---
          - exit
          ------------------------------------------------------ end _svyset ---
        - _svyset clear calmethod
          ---------------------------------------------------- begin _svyset ---
          - version 9
          - gettoken cmd 0 : 0
          - if "`cmd'" == "clear" {
          = if "clear" == "clear" {
          - Clear `0'
          = Clear  calmethod
            -------------------------------------------- begin _svyset.Clear ---
            - if `:word count `0'' > 2 {
            = if 1 > 2 {
              di as err "too many arguments"
              exit 103
              }
            - args name i
            - if "`name'" == "stages" {
            = if "calmethod" == "stages" {
              confirm integer number `i'
              if `i' <= 1 {
              local i 1
              }
              local stages : char _dta[_svy_stages]
              capture CheckPosInt `stages'
              if c(rc) {
              local stages = `i' - 1
              }
              forval j = `i'/`stages' {
              char _dta[_svy_su`j']
              char _dta[_svy_strata`j']
              char _dta[_svy_fpc`j']
              }
              local --i
              if `i' > 0 {
              char _dta[_svy_stages] `i'
              }
              else char _dta[_svy_stages]
              exit
              }
            - if "`name'" == "stages_wt" {
            = if "calmethod" == "stages_wt" {
              confirm integer number `i'
              if `i' <= 1 {
              local i 1
              }
              local stages_wt : char _dta[_svy_stages_wt]
              capture CheckPosInt `stages_wt'
              if c(rc) {
              local stages_wt = `i' - 1
              }
              forval j = `i'/`stages_wt' {
              char _dta[_svy_su`j']
              char _dta[_svy_weight`j']
              }
              local --i
              if `i' > 0 {
              char _dta[_svy_stages_wt] `i'
              }
              else char _dta[_svy_stages_wt]
              exit
              }
            - if "`name'" == "version" {
            = if "calmethod" == "version" {
              char _dta[_svy_version]
              }
            - CheckName `name'
            = CheckName calmethod
              -------------------------------------- begin _svyset.CheckName ---
              - local 0 `", `0'"'
              = local 0 `", calmethod"'
              - capture syntax [, WTYPE WEXP WVAR PWeight IWeight VCE MSE BRRwei
> ght FAY BSRweight BSN JKRweight SDRweight SDRFPC DOF POSTStrata POSTWeight CAL
> Method CALMOdel CALOpts SINGLEunit SU STRata FPC Weight STAGES stages_wt ]
              - if c(rc) {
                di as err "invalid survey characteristic"
                exit 198
                }
              - local gname `stages' `stages_wt' `pweight' `iweight' `wtype' `wv
> ar' `wexp' `vce' `mse' `brrweight' `fay' `bsrweight' `bsn' `jkrweight' `sdrwei
> ght' `sdrfpc' `dof' `poststrata' `postweight' `calmethod' `calmodel' `calopts'
>  `singleunit'
              = local gname                    calmethod   
              - local sname `su' `strata' `fpc' `weight'
              = local sname    
              - local k : word count `gname' `sname'
              = local k : word count calmethod 
              - if `k' > 1 {
              = if 1 > 1 {
                di as err "too many names"
                exit 103
                }
              - if `k' == 0 {
              = if 1 == 0 {
                di as err "name required"
                exit 100
                }
              - sreturn local gname `gname'
              = sreturn local gname calmethod
              - sreturn local sname `sname'
              = sreturn local sname 
              ---------------------------------------- end _svyset.CheckName ---
            - if "`s(sname)'" != "" {
            = if "" != "" {
              local name `s(sname)'
              CheckPosInt `i'
              }
            - else local name `s(gname)'
            = else local name calmethod
            - if inlist("`name'","pweight","iweight","wtype","wexp","wvar") {
            = if inlist("calmethod","pweight","iweight","wtype","wexp","wvar") {
              char _dta[_svy_wtype]
              char _dta[_svy_wvar]
              exit
              }
            - if "`name'" == "vce" {
            = if "calmethod" == "vce" {
              char _dta[_svy_vce]
              char _dta[_svy_mse]
              exit
              }
            - if bsubstr("`name'",1,4) == "post" {
            = if bsubstr("calmethod",1,4) == "post" {
              char _dta[_svy_poststrata]
              char _dta[_svy_postweight]
              exit
              }
            - if bsubstr("`name'",1,3) == "cal" {
            = if bsubstr("calmethod",1,3) == "cal" {
            - char _dta[_svy_calmethod]
            - char _dta[_svy_calmodel]
            - char _dta[_svy_calopts]
            - exit
            ---------------------------------------------- end _svyset.Clear ---
          - exit
          ------------------------------------------------------ end _svyset ---
        - _svyset clear singleunit
          ---------------------------------------------------- begin _svyset ---
          - version 9
          - gettoken cmd 0 : 0
          - if "`cmd'" == "clear" {
          = if "clear" == "clear" {
          - Clear `0'
          = Clear  singleunit
            -------------------------------------------- begin _svyset.Clear ---
            - if `:word count `0'' > 2 {
            = if 1 > 2 {
              di as err "too many arguments"
              exit 103
              }
            - args name i
            - if "`name'" == "stages" {
            = if "singleunit" == "stages" {
              confirm integer number `i'
              if `i' <= 1 {
              local i 1
              }
              local stages : char _dta[_svy_stages]
              capture CheckPosInt `stages'
              if c(rc) {
              local stages = `i' - 1
              }
              forval j = `i'/`stages' {
              char _dta[_svy_su`j']
              char _dta[_svy_strata`j']
              char _dta[_svy_fpc`j']
              }
              local --i
              if `i' > 0 {
              char _dta[_svy_stages] `i'
              }
              else char _dta[_svy_stages]
              exit
              }
            - if "`name'" == "stages_wt" {
            = if "singleunit" == "stages_wt" {
              confirm integer number `i'
              if `i' <= 1 {
              local i 1
              }
              local stages_wt : char _dta[_svy_stages_wt]
              capture CheckPosInt `stages_wt'
              if c(rc) {
              local stages_wt = `i' - 1
              }
              forval j = `i'/`stages_wt' {
              char _dta[_svy_su`j']
              char _dta[_svy_weight`j']
              }
              local --i
              if `i' > 0 {
              char _dta[_svy_stages_wt] `i'
              }
              else char _dta[_svy_stages_wt]
              exit
              }
            - if "`name'" == "version" {
            = if "singleunit" == "version" {
              char _dta[_svy_version]
              }
            - CheckName `name'
            = CheckName singleunit
              -------------------------------------- begin _svyset.CheckName ---
              - local 0 `", `0'"'
              = local 0 `", singleunit"'
              - capture syntax [, WTYPE WEXP WVAR PWeight IWeight VCE MSE BRRwei
> ght FAY BSRweight BSN JKRweight SDRweight SDRFPC DOF POSTStrata POSTWeight CAL
> Method CALMOdel CALOpts SINGLEunit SU STRata FPC Weight STAGES stages_wt ]
              - if c(rc) {
                di as err "invalid survey characteristic"
                exit 198
                }
              - local gname `stages' `stages_wt' `pweight' `iweight' `wtype' `wv
> ar' `wexp' `vce' `mse' `brrweight' `fay' `bsrweight' `bsn' `jkrweight' `sdrwei
> ght' `sdrfpc' `dof' `poststrata' `postweight' `calmethod' `calmodel' `calopts'
>  `singleunit'
              = local gname                       singleunit
              - local sname `su' `strata' `fpc' `weight'
              = local sname    
              - local k : word count `gname' `sname'
              = local k : word count singleunit 
              - if `k' > 1 {
              = if 1 > 1 {
                di as err "too many names"
                exit 103
                }
              - if `k' == 0 {
              = if 1 == 0 {
                di as err "name required"
                exit 100
                }
              - sreturn local gname `gname'
              = sreturn local gname singleunit
              - sreturn local sname `sname'
              = sreturn local sname 
              ---------------------------------------- end _svyset.CheckName ---
            - if "`s(sname)'" != "" {
            = if "" != "" {
              local name `s(sname)'
              CheckPosInt `i'
              }
            - else local name `s(gname)'
            = else local name singleunit
            - if inlist("`name'","pweight","iweight","wtype","wexp","wvar") {
            = if inlist("singleunit","pweight","iweight","wtype","wexp","wvar") 
> {
              char _dta[_svy_wtype]
              char _dta[_svy_wvar]
              exit
              }
            - if "`name'" == "vce" {
            = if "singleunit" == "vce" {
              char _dta[_svy_vce]
              char _dta[_svy_mse]
              exit
              }
            - if bsubstr("`name'",1,4) == "post" {
            = if bsubstr("singleunit",1,4) == "post" {
              char _dta[_svy_poststrata]
              char _dta[_svy_postweight]
              exit
              }
            - if bsubstr("`name'",1,3) == "cal" {
            = if bsubstr("singleunit",1,3) == "cal" {
              char _dta[_svy_calmethod]
              char _dta[_svy_calmodel]
              char _dta[_svy_calopts]
              exit
              }
            - if "`name'" == "sdrweight" {
            = if "singleunit" == "sdrweight" {
              char _dta[_svy_sdrfpc]
              }
            - char _dta[_svy_`name'`i']
            = char _dta[_svy_singleunit]
            ---------------------------------------------- end _svyset.Clear ---
          - exit
          ------------------------------------------------------ end _svyset ---
        - _svyset clear stages 1
          ---------------------------------------------------- begin _svyset ---
          - version 9
          - gettoken cmd 0 : 0
          - if "`cmd'" == "clear" {
          = if "clear" == "clear" {
          - Clear `0'
          = Clear  stages 1
            -------------------------------------------- begin _svyset.Clear ---
            - if `:word count `0'' > 2 {
            = if 2 > 2 {
              di as err "too many arguments"
              exit 103
              }
            - args name i
            - if "`name'" == "stages" {
            = if "stages" == "stages" {
            - confirm integer number `i'
            = confirm integer number 1
            - if `i' <= 1 {
            = if 1 <= 1 {
            - local i 1
            - }
            - local stages : char _dta[_svy_stages]
            - capture CheckPosInt `stages'
            = capture CheckPosInt 1
              ------------------------------------ begin _svyset.CheckPosInt ---
              - confirm integer number `0'
              = confirm integer number 1
              - if `0' < 1 {
              = if 1 < 1 {
                di as err "'`0'' found where positive integer required"
                exit 7
                }
              -------------------------------------- end _svyset.CheckPosInt ---
            - if c(rc) {
              local stages = `i' - 1
              }
            - forval j = `i'/`stages' {
            = forval j = 1/1 {
            - char _dta[_svy_su`j']
            = char _dta[_svy_su1]
            - char _dta[_svy_strata`j']
            = char _dta[_svy_strata1]
            - char _dta[_svy_fpc`j']
            = char _dta[_svy_fpc1]
            - }
            - local --i
            - if `i' > 0 {
            = if 0 > 0 {
              char _dta[_svy_stages] `i'
              }
            - else char _dta[_svy_stages]
            - exit
            ---------------------------------------------- end _svyset.Clear ---
          - exit
          ------------------------------------------------------ end _svyset ---
        - _svyset clear stages_wt 1
          ---------------------------------------------------- begin _svyset ---
          - version 9
          - gettoken cmd 0 : 0
          - if "`cmd'" == "clear" {
          = if "clear" == "clear" {
          - Clear `0'
          = Clear  stages_wt 1
            -------------------------------------------- begin _svyset.Clear ---
            - if `:word count `0'' > 2 {
            = if 2 > 2 {
              di as err "too many arguments"
              exit 103
              }
            - args name i
            - if "`name'" == "stages" {
            = if "stages_wt" == "stages" {
              confirm integer number `i'
              if `i' <= 1 {
              local i 1
              }
              local stages : char _dta[_svy_stages]
              capture CheckPosInt `stages'
              if c(rc) {
              local stages = `i' - 1
              }
              forval j = `i'/`stages' {
              char _dta[_svy_su`j']
              char _dta[_svy_strata`j']
              char _dta[_svy_fpc`j']
              }
              local --i
              if `i' > 0 {
              char _dta[_svy_stages] `i'
              }
              else char _dta[_svy_stages]
              exit
              }
            - if "`name'" == "stages_wt" {
            = if "stages_wt" == "stages_wt" {
            - confirm integer number `i'
            = confirm integer number 1
            - if `i' <= 1 {
            = if 1 <= 1 {
            - local i 1
            - }
            - local stages_wt : char _dta[_svy_stages_wt]
            - capture CheckPosInt `stages_wt'
            = capture CheckPosInt 
              ------------------------------------ begin _svyset.CheckPosInt ---
              - confirm integer number `0'
              = confirm integer number 
              -------------------------------------- end _svyset.CheckPosInt ---
            - if c(rc) {
            - local stages_wt = `i' - 1
            = local stages_wt = 1 - 1
            - }
            - forval j = `i'/`stages_wt' {
            = forval j = 1/0 {
              char _dta[_svy_su`j']
              char _dta[_svy_weight`j']
              }
            - local --i
            - if `i' > 0 {
            = if 0 > 0 {
              char _dta[_svy_stages_wt] `i'
              }
            - else char _dta[_svy_stages_wt]
            - exit
            ---------------------------------------------- end _svyset.Clear ---
          - exit
          ------------------------------------------------------ end _svyset ---
        - char _dta[_svy_version]
        - exit
        --------------------------------------------------- end svyset.Clear ---
      - }
      - local wgt_n 0
      - local ignore 0
      - forval i = 1/`stage_n' {
      = forval i = 1/1 {
      - ParseStage "`mi'" `i' `stage_n' `stage_`i''
      = ParseStage "" 1 1 [pweight=asecwth]
        -------------------------------------------- begin svyset.ParseStage ---
        - gettoken mi 0 : 0
        - gettoken i 0 : 0
        - gettoken last 0 : 0
        - if "`mi'" == "" {
        = if "" == "" {
        - local micheck "*"
        - }
        - else local micheck "u_mi_check_setvars settime svyset"
        - if `i' == 1 {
        = if 1 == 1 {
        - local uspec `"[anything(name=su id="psuid")]"'
        - local oldopts PSU(varname)
        - }
        - else {
          local uspec `"anything(name=su id="ssuid")"'
          }
        - syntax `uspec' [pweight iweight/] [, STRata(varname) FPC(varname numer
> ic) Weight`i'(varname numeric) `oldopts' ]
        = syntax [anything(name=su id="psuid")] [pweight iweight/] [, STRata(var
> name) FPC(varname numeric) Weight1(varname numeric) PSU(varname) ]
        - if "`psu'" != "" {
        = if "" != "" {
          if "`su'" != "" & "`su'" != "`psu'" {
          di as err "option {bf:psu()} invalid"
          exit 198
          }
          else local su `psu'
          }
        - else if "`su'" == "" {
        = else if "" == "" {
        - if "`weight`i''`weight'`strata'`fpc'" == "" {
        = if "pweight" == "" {
          di as err "psuid required"
          exit 198
          }
        - local su _n
        - }
        - if `"`su'"' == "_n" & `i' < `last' {
        = if `"_n"' == "_n" & 1 < 1 {
          di as err "invalid use of _n; " "observations can only be sampled in t
> he final stage"
          exit 198
          }
        - local wtype `weight'
        = local wtype pweight
        - local wvar `"`exp'"'
        = local wvar `"asecwth"'
        - if `"`wtype'"' != "" {
        = if `"pweight"' != "" {
        - _svyset get wvar
          ---------------------------------------------------- begin _svyset ---
          - version 9
          - gettoken cmd 0 : 0
          - if "`cmd'" == "clear" {
          = if "get" == "clear" {
            Clear `0'
            exit
            }
          - if "`cmd'" == "set" {
          = if "get" == "set" {
            Set `0'
            exit
            }
          - if "`cmd'" == "get" {
          = if "get" == "get" {
          - Get `0'
          = Get  wvar
            ---------------------------------------------- begin _svyset.Get ---
            - if `:word count `0'' > 2 {
            = if 1 > 2 {
              di as err "too many arguments"
              exit 103
              }
            - args name i
            - CheckName `name'
            = CheckName wvar
              -------------------------------------- begin _svyset.CheckName ---
              - local 0 `", `0'"'
              = local 0 `", wvar"'
              - capture syntax [, WTYPE WEXP WVAR PWeight IWeight VCE MSE BRRwei
> ght FAY BSRweight BSN JKRweight SDRweight SDRFPC DOF POSTStrata POSTWeight CAL
> Method CALMOdel CALOpts SINGLEunit SU STRata FPC Weight STAGES stages_wt ]
              - if c(rc) {
                di as err "invalid survey characteristic"
                exit 198
                }
              - local gname `stages' `stages_wt' `pweight' `iweight' `wtype' `wv
> ar' `wexp' `vce' `mse' `brrweight' `fay' `bsrweight' `bsn' `jkrweight' `sdrwei
> ght' `sdrfpc' `dof' `poststrata' `postweight' `calmethod' `calmodel' `calopts'
>  `singleunit'
              = local gname      wvar                 
              - local sname `su' `strata' `fpc' `weight'
              = local sname    
              - local k : word count `gname' `sname'
              = local k : word count wvar 
              - if `k' > 1 {
              = if 1 > 1 {
                di as err "too many names"
                exit 103
                }
              - if `k' == 0 {
              = if 1 == 0 {
                di as err "name required"
                exit 100
                }
              - sreturn local gname `gname'
              = sreturn local gname wvar
              - sreturn local sname `sname'
              = sreturn local sname 
              ---------------------------------------- end _svyset.CheckName ---
            - if "`s(sname)'" != "" {
            = if "" != "" {
              local name `s(sname)'
              CheckPosInt `i'
              }
            - else local name `s(gname)'
            = else local name wvar
            - if inlist("`name'", "wtype", "wvar", "wexp") {
            = if inlist("wvar", "wtype", "wvar", "wexp") {
            - local wtype : char _dta[_svy_wtype]
            - local wvar : char _dta[_svy_wvar]
            - if `"`wtype'`wvar'"' != "" {
            = if `""' != "" {
              if `"`wtype'"' == "" {
              di as err "error in svy settings; weight variable set without weig
> ht type"
              exit 459
              }
              if `"`wvar'"' == "" {
              "error in svy settings; weight type set without weight variable"
              exit 459
              }
              CheckName `wtype'
              local wtype `s(gname)' `s(sname)'
              if !inlist("`wtype'", "pweight", "iweight") {
              "error in svy settings; invalid weight type"
              exit 459
              }
              CheckNumVar `wvar'
              local wvar `s(varname)'
              local wexp "= `wvar'"
              return local wtype `"`wtype'"'
              return local wvar `"`wvar'"'
              return local wexp `"`wexp'"'
              }
            - exit
            ------------------------------------------------ end _svyset.Get ---
          - exit
          ------------------------------------------------------ end _svyset ---
        - if `"`r(wvar)'"' != "" {
        = if `""' != "" {
          di as err "sampling weights may only be specified once"
          exit 198
          }
        - `micheck' `wvar'
        = * asecwth
        - _svyset set `wtype' `wvar'
        = _svyset set pweight asecwth
          ---------------------------------------------------- begin _svyset ---
          - version 9
          - gettoken cmd 0 : 0
          - if "`cmd'" == "clear" {
          = if "set" == "clear" {
            Clear `0'
            exit
            }
          - if "`cmd'" == "set" {
          = if "set" == "set" {
          - Set `0'
          = Set  pweight asecwth
            ---------------------------------------------- begin _svyset.Set ---
            - gettoken name value : 0
            - CheckName `name'
            = CheckName pweight
              -------------------------------------- begin _svyset.CheckName ---
              - local 0 `", `0'"'
              = local 0 `", pweight"'
              - capture syntax [, WTYPE WEXP WVAR PWeight IWeight VCE MSE BRRwei
> ght FAY BSRweight BSN JKRweight SDRweight SDRFPC DOF POSTStrata POSTWeight CAL
> Method CALMOdel CALOpts SINGLEunit SU STRata FPC Weight STAGES stages_wt ]
              - if c(rc) {
                di as err "invalid survey characteristic"
                exit 198
                }
              - local gname `stages' `stages_wt' `pweight' `iweight' `wtype' `wv
> ar' `wexp' `vce' `mse' `brrweight' `fay' `bsrweight' `bsn' `jkrweight' `sdrwei
> ght' `sdrfpc' `dof' `poststrata' `postweight' `calmethod' `calmodel' `calopts'
>  `singleunit'
              = local gname   pweight                    
              - local sname `su' `strata' `fpc' `weight'
              = local sname    
              - local k : word count `gname' `sname'
              = local k : word count pweight 
              - if `k' > 1 {
              = if 1 > 1 {
                di as err "too many names"
                exit 103
                }
              - if `k' == 0 {
              = if 1 == 0 {
                di as err "name required"
                exit 100
                }
              - sreturn local gname `gname'
              = sreturn local gname pweight
              - sreturn local sname `sname'
              = sreturn local sname 
              ---------------------------------------- end _svyset.CheckName ---
            - local name `s(gname)'
            = local name pweight
            - if "`name'" == "" {
            = if "pweight" == "" {
              local name `s(sname)'
              gettoken i value : value
              CheckPosInt `i'
              if "`name'" == "su" {
              if !inlist(trim("`value'"), "", "_n") {
              CheckVar `value'
              local value `s(varname)'
              }
              }
              if "`name'" == "strata" {
              CheckVar `value'
              local value `s(varname)'
              }
              if "`name'" == "fpc" {
              CheckNumVar `value'
              local value `s(varname)'
              }
              if "`name'" == "weight" {
              CheckNumVar `value'
              local value `s(varname)'
              }
              char _dta[_svy_`name'`i'] `value'
              exit
              }
            - if "`name'" == "stages" {
            = if "pweight" == "stages" {
              CheckPosInt `value'
              }
            - if "`name'" == "stages_wt" {
            = if "pweight" == "stages_wt" {
              CheckPosInt `value'
              }
            - if inlist("`name'", "pweight", "iweight") {
            = if inlist("pweight", "pweight", "iweight") {
            - char _dta[_svy_wtype] `name'
            = char _dta[_svy_wtype] pweight
            - local name wvar
            - CheckNumVar `value'
            = CheckNumVar  asecwth
              ------------------------------------ begin _svyset.CheckNumVar ---
              - syntax varname(numeric)
              - sreturn local varname `varlist'
              = sreturn local varname asecwth
              -------------------------------------- end _svyset.CheckNumVar ---
            - local value `s(varname)'
            = local value asecwth
            - }
            - if "`name'" == "vce" {
            = if "wvar" == "vce" {
              _svy_check_vce `value'
              local value `s(vce)'
              if "`s(mse)'" != "" {
              char _dta[_svy_mse] mse
              }
              }
            - if "`name'" == "mse" {
            = if "wvar" == "mse" {
              local value mse
              }
            - if inlist("`name'","brrweight","bsrweight","jkrweight","sdrweight"
> ) {
            = if inlist("wvar","brrweight","bsrweight","jkrweight","sdrweight") 
> {
              CheckNumVarlist `value'
              local value `s(varlist)'
              }
            - if "`name'" == "sdrfpc" {
            = if "wvar" == "sdrfpc" {
              if `"`:list retok value'"' != "" {
              confirm number `value'
              }
              }
            - if "`name'" == "fay" {
            = if "wvar" == "fay" {
              CheckFay `value'
              }
            - if "`name'" == "bsn" {
            = if "wvar" == "bsn" {
              CheckBSN `value'
              }
            - if "`name'" == "dof" {
            = if "wvar" == "dof" {
              CheckDOF `value'
              }
            - if "`name'" == "poststrata" {
            = if "wvar" == "poststrata" {
              CheckVar `value'
              local value `s(varname)'
              }
            - if "`name'" == "postweight" {
            = if "wvar" == "postweight" {
              CheckPostW `value'
              local value `s(varname)'
              }
            - if "`name'" == "calmethod" {
            = if "wvar" == "calmethod" {
              CheckCalMethod `value'
              local value `s(method)'
              }
            - if "`name'" == "singleunit" {
            = if "wvar" == "singleunit" {
              CheckSingle `value'
              local value `s(singleunit)'
              }
            - char _dta[_svy_`name'] `value'
            = char _dta[_svy_wvar] asecwth
            ------------------------------------------------ end _svyset.Set ---
          - exit
          ------------------------------------------------------ end _svyset ---
        - _svyset get brr
          ---------------------------------------------------- begin _svyset ---
          - version 9
          - gettoken cmd 0 : 0
          - if "`cmd'" == "clear" {
          = if "get" == "clear" {
            Clear `0'
            exit
            }
          - if "`cmd'" == "set" {
          = if "get" == "set" {
            Set `0'
            exit
            }
          - if "`cmd'" == "get" {
          = if "get" == "get" {
          - Get `0'
          = Get  brr
            ---------------------------------------------- begin _svyset.Get ---
            - if `:word count `0'' > 2 {
            = if 1 > 2 {
              di as err "too many arguments"
              exit 103
              }
            - args name i
            - CheckName `name'
            = CheckName brr
              -------------------------------------- begin _svyset.CheckName ---
              - local 0 `", `0'"'
              = local 0 `", brr"'
              - capture syntax [, WTYPE WEXP WVAR PWeight IWeight VCE MSE BRRwei
> ght FAY BSRweight BSN JKRweight SDRweight SDRFPC DOF POSTStrata POSTWeight CAL
> Method CALMOdel CALOpts SINGLEunit SU STRata FPC Weight STAGES stages_wt ]
              - if c(rc) {
                di as err "invalid survey characteristic"
                exit 198
                }
              - local gname `stages' `stages_wt' `pweight' `iweight' `wtype' `wv
> ar' `wexp' `vce' `mse' `brrweight' `fay' `bsrweight' `bsn' `jkrweight' `sdrwei
> ght' `sdrfpc' `dof' `poststrata' `postweight' `calmethod' `calmodel' `calopts'
>  `singleunit'
              = local gname          brrweight             
              - local sname `su' `strata' `fpc' `weight'
              = local sname    
              - local k : word count `gname' `sname'
              = local k : word count brrweight 
              - if `k' > 1 {
              = if 1 > 1 {
                di as err "too many names"
                exit 103
                }
              - if `k' == 0 {
              = if 1 == 0 {
                di as err "name required"
                exit 100
                }
              - sreturn local gname `gname'
              = sreturn local gname brrweight
              - sreturn local sname `sname'
              = sreturn local sname 
              ---------------------------------------- end _svyset.CheckName ---
            - if "`s(sname)'" != "" {
            = if "" != "" {
              local name `s(sname)'
              CheckPosInt `i'
              }
            - else local name `s(gname)'
            = else local name brrweight
            - if inlist("`name'", "wtype", "wvar", "wexp") {
            = if inlist("brrweight", "wtype", "wvar", "wexp") {
              local wtype : char _dta[_svy_wtype]
              local wvar : char _dta[_svy_wvar]
              if `"`wtype'`wvar'"' != "" {
              if `"`wtype'"' == "" {
              di as err "error in svy settings; weight variable set without weig
> ht type"
              exit 459
              }
              if `"`wvar'"' == "" {
              "error in svy settings; weight type set without weight variable"
              exit 459
              }
              CheckName `wtype'
              local wtype `s(gname)' `s(sname)'
              if !inlist("`wtype'", "pweight", "iweight") {
              "error in svy settings; invalid weight type"
              exit 459
              }
              CheckNumVar `wvar'
              local wvar `s(varname)'
              local wexp "= `wvar'"
              return local wtype `"`wtype'"'
              return local wvar `"`wvar'"'
              return local wexp `"`wexp'"'
              }
              exit
              }
            - if "`name'" == "stages" {
            = if "brrweight" == "stages" {
              local stages : char _dta[_svy_stages]
              capture CheckPosInt `stages'
              if c(rc) {
              return scalar stages = 0
              }
              return scalar stages = `stages'
              exit
              }
            - if "`name'" == "stages_wt" {
            = if "brrweight" == "stages_wt" {
              local stages_wt : char _dta[_svy_stages_wt]
              capture CheckPosInt `stages_wt'
              if c(rc) {
              return scalar stages_wt = 0
              }
              else {
              return scalar stages_wt = `stages_wt'
              }
              exit
              }
            - if inlist("`name'", "vce", "mse") {
            = if inlist("brrweight", "vce", "mse") {
              local vce : char _dta[_svy_vce]
              local mse : char _dta[_svy_mse]
              if `"`vce'`mse'"' != "" {
              _svy_check_vce `vce', `mse'
              return local vce `s(vce)'
              return local mse `s(mse)'
              }
              exit
              }
            - if "`name'" == "brrweight" {
            = if "brrweight" == "brrweight" {
            - local brr : char _dta[_svy_brrweight]
            - if `"`brr'"' != "" {
            = if `""' != "" {
              CheckNumVarlist `brr'
              return local brrweight `s(varlist)'
              }
            - exit
            ------------------------------------------------ end _svyset.Get ---
          - exit
          ------------------------------------------------------ end _svyset ---
        - local RW `"`r(brrweight)'"'
        = local RW `""'
        - if `:list wvar in RW' {
        = if 0 {
          RWerror brrweight `wtype' `wvar'
          }
        - _svyset get bsr
          ---------------------------------------------------- begin _svyset ---
          - version 9
          - gettoken cmd 0 : 0
          - if "`cmd'" == "clear" {
          = if "get" == "clear" {
            Clear `0'
            exit
            }
          - if "`cmd'" == "set" {
          = if "get" == "set" {
            Set `0'
            exit
            }
          - if "`cmd'" == "get" {
          = if "get" == "get" {
          - Get `0'
          = Get  bsr
            ---------------------------------------------- begin _svyset.Get ---
            - if `:word count `0'' > 2 {
            = if 1 > 2 {
              di as err "too many arguments"
              exit 103
              }
            - args name i
            - CheckName `name'
            = CheckName bsr
              -------------------------------------- begin _svyset.CheckName ---
              - local 0 `", `0'"'
              = local 0 `", bsr"'
              - capture syntax [, WTYPE WEXP WVAR PWeight IWeight VCE MSE BRRwei
> ght FAY BSRweight BSN JKRweight SDRweight SDRFPC DOF POSTStrata POSTWeight CAL
> Method CALMOdel CALOpts SINGLEunit SU STRata FPC Weight STAGES stages_wt ]
              - if c(rc) {
                di as err "invalid survey characteristic"
                exit 198
                }
              - local gname `stages' `stages_wt' `pweight' `iweight' `wtype' `wv
> ar' `wexp' `vce' `mse' `brrweight' `fay' `bsrweight' `bsn' `jkrweight' `sdrwei
> ght' `sdrfpc' `dof' `poststrata' `postweight' `calmethod' `calmodel' `calopts'
>  `singleunit'
              = local gname            bsrweight           
              - local sname `su' `strata' `fpc' `weight'
              = local sname    
              - local k : word count `gname' `sname'
              = local k : word count bsrweight 
              - if `k' > 1 {
              = if 1 > 1 {
                di as err "too many names"
                exit 103
                }
              - if `k' == 0 {
              = if 1 == 0 {
                di as err "name required"
                exit 100
                }
              - sreturn local gname `gname'
              = sreturn local gname bsrweight
              - sreturn local sname `sname'
              = sreturn local sname 
              ---------------------------------------- end _svyset.CheckName ---
            - if "`s(sname)'" != "" {
            = if "" != "" {
              local name `s(sname)'
              CheckPosInt `i'
              }
            - else local name `s(gname)'
            = else local name bsrweight
            - if inlist("`name'", "wtype", "wvar", "wexp") {
            = if inlist("bsrweight", "wtype", "wvar", "wexp") {
              local wtype : char _dta[_svy_wtype]
              local wvar : char _dta[_svy_wvar]
              if `"`wtype'`wvar'"' != "" {
              if `"`wtype'"' == "" {
              di as err "error in svy settings; weight variable set without weig
> ht type"
              exit 459
              }
              if `"`wvar'"' == "" {
              "error in svy settings; weight type set without weight variable"
              exit 459
              }
              CheckName `wtype'
              local wtype `s(gname)' `s(sname)'
              if !inlist("`wtype'", "pweight", "iweight") {
              "error in svy settings; invalid weight type"
              exit 459
              }
              CheckNumVar `wvar'
              local wvar `s(varname)'
              local wexp "= `wvar'"
              return local wtype `"`wtype'"'
              return local wvar `"`wvar'"'
              return local wexp `"`wexp'"'
              }
              exit
              }
            - if "`name'" == "stages" {
            = if "bsrweight" == "stages" {
              local stages : char _dta[_svy_stages]
              capture CheckPosInt `stages'
              if c(rc) {
              return scalar stages = 0
              }
              return scalar stages = `stages'
              exit
              }
            - if "`name'" == "stages_wt" {
            = if "bsrweight" == "stages_wt" {
              local stages_wt : char _dta[_svy_stages_wt]
              capture CheckPosInt `stages_wt'
              if c(rc) {
              return scalar stages_wt = 0
              }
              else {
              return scalar stages_wt = `stages_wt'
              }
              exit
              }
            - if inlist("`name'", "vce", "mse") {
            = if inlist("bsrweight", "vce", "mse") {
              local vce : char _dta[_svy_vce]
              local mse : char _dta[_svy_mse]
              if `"`vce'`mse'"' != "" {
              _svy_check_vce `vce', `mse'
              return local vce `s(vce)'
              return local mse `s(mse)'
              }
              exit
              }
            - if "`name'" == "brrweight" {
            = if "bsrweight" == "brrweight" {
              local brr : char _dta[_svy_brrweight]
              if `"`brr'"' != "" {
              CheckNumVarlist `brr'
              return local brrweight `s(varlist)'
              }
              exit
              }
            - if "`name'" == "fay" {
            = if "bsrweight" == "fay" {
              local fay : char _dta[_svy_fay]
              if `"`fay'"' != "" {
              CheckFay `fay'
              return scalar fay = `s(value)'
              }
              exit
              }
            - if "`name'" == "bsrweight" {
            = if "bsrweight" == "bsrweight" {
            - local bsr : char _dta[_svy_bsrweight]
            - if `"`bsr'"' != "" {
            = if `""' != "" {
              CheckNumVarlist `bsr'
              return local bsrweight `s(varlist)'
              }
            - exit
            ------------------------------------------------ end _svyset.Get ---
          - exit
          ------------------------------------------------------ end _svyset ---
        - local RW `"`r(bsrweight)'"'
        = local RW `""'
        - if `:list wvar in RW' {
        = if 0 {
          RWerror bsrweight `wtype' `wvar'
          }
        - _svyset get jkr
          ---------------------------------------------------- begin _svyset ---
          - version 9
          - gettoken cmd 0 : 0
          - if "`cmd'" == "clear" {
          = if "get" == "clear" {
            Clear `0'
            exit
            }
          - if "`cmd'" == "set" {
          = if "get" == "set" {
            Set `0'
            exit
            }
          - if "`cmd'" == "get" {
          = if "get" == "get" {
          - Get `0'
          = Get  jkr
            ---------------------------------------------- begin _svyset.Get ---
            - if `:word count `0'' > 2 {
            = if 1 > 2 {
              di as err "too many arguments"
              exit 103
              }
            - args name i
            - CheckName `name'
            = CheckName jkr
              -------------------------------------- begin _svyset.CheckName ---
              - local 0 `", `0'"'
              = local 0 `", jkr"'
              - capture syntax [, WTYPE WEXP WVAR PWeight IWeight VCE MSE BRRwei
> ght FAY BSRweight BSN JKRweight SDRweight SDRFPC DOF POSTStrata POSTWeight CAL
> Method CALMOdel CALOpts SINGLEunit SU STRata FPC Weight STAGES stages_wt ]
              - if c(rc) {
                di as err "invalid survey characteristic"
                exit 198
                }
              - local gname `stages' `stages_wt' `pweight' `iweight' `wtype' `wv
> ar' `wexp' `vce' `mse' `brrweight' `fay' `bsrweight' `bsn' `jkrweight' `sdrwei
> ght' `sdrfpc' `dof' `poststrata' `postweight' `calmethod' `calmodel' `calopts'
>  `singleunit'
              = local gname              jkrweight         
              - local sname `su' `strata' `fpc' `weight'
              = local sname    
              - local k : word count `gname' `sname'
              = local k : word count jkrweight 
              - if `k' > 1 {
              = if 1 > 1 {
                di as err "too many names"
                exit 103
                }
              - if `k' == 0 {
              = if 1 == 0 {
                di as err "name required"
                exit 100
                }
              - sreturn local gname `gname'
              = sreturn local gname jkrweight
              - sreturn local sname `sname'
              = sreturn local sname 
              ---------------------------------------- end _svyset.CheckName ---
            - if "`s(sname)'" != "" {
            = if "" != "" {
              local name `s(sname)'
              CheckPosInt `i'
              }
            - else local name `s(gname)'
            = else local name jkrweight
            - if inlist("`name'", "wtype", "wvar", "wexp") {
            = if inlist("jkrweight", "wtype", "wvar", "wexp") {
              local wtype : char _dta[_svy_wtype]
              local wvar : char _dta[_svy_wvar]
              if `"`wtype'`wvar'"' != "" {
              if `"`wtype'"' == "" {
              di as err "error in svy settings; weight variable set without weig
> ht type"
              exit 459
              }
              if `"`wvar'"' == "" {
              "error in svy settings; weight type set without weight variable"
              exit 459
              }
              CheckName `wtype'
              local wtype `s(gname)' `s(sname)'
              if !inlist("`wtype'", "pweight", "iweight") {
              "error in svy settings; invalid weight type"
              exit 459
              }
              CheckNumVar `wvar'
              local wvar `s(varname)'
              local wexp "= `wvar'"
              return local wtype `"`wtype'"'
              return local wvar `"`wvar'"'
              return local wexp `"`wexp'"'
              }
              exit
              }
            - if "`name'" == "stages" {
            = if "jkrweight" == "stages" {
              local stages : char _dta[_svy_stages]
              capture CheckPosInt `stages'
              if c(rc) {
              return scalar stages = 0
              }
              return scalar stages = `stages'
              exit
              }
            - if "`name'" == "stages_wt" {
            = if "jkrweight" == "stages_wt" {
              local stages_wt : char _dta[_svy_stages_wt]
              capture CheckPosInt `stages_wt'
              if c(rc) {
              return scalar stages_wt = 0
              }
              else {
              return scalar stages_wt = `stages_wt'
              }
              exit
              }
            - if inlist("`name'", "vce", "mse") {
            = if inlist("jkrweight", "vce", "mse") {
              local vce : char _dta[_svy_vce]
              local mse : char _dta[_svy_mse]
              if `"`vce'`mse'"' != "" {
              _svy_check_vce `vce', `mse'
              return local vce `s(vce)'
              return local mse `s(mse)'
              }
              exit
              }
            - if "`name'" == "brrweight" {
            = if "jkrweight" == "brrweight" {
              local brr : char _dta[_svy_brrweight]
              if `"`brr'"' != "" {
              CheckNumVarlist `brr'
              return local brrweight `s(varlist)'
              }
              exit
              }
            - if "`name'" == "fay" {
            = if "jkrweight" == "fay" {
              local fay : char _dta[_svy_fay]
              if `"`fay'"' != "" {
              CheckFay `fay'
              return scalar fay = `s(value)'
              }
              exit
              }
            - if "`name'" == "bsrweight" {
            = if "jkrweight" == "bsrweight" {
              local bsr : char _dta[_svy_bsrweight]
              if `"`bsr'"' != "" {
              CheckNumVarlist `bsr'
              return local bsrweight `s(varlist)'
              }
              exit
              }
            - if "`name'" == "bsn" {
            = if "jkrweight" == "bsn" {
              local bsn : char _dta[_svy_bsn]
              if `"`bsn'"' != "" {
              CheckBSN `bsn'
              return scalar bsn = `s(value)'
              }
              exit
              }
            - if "`name'" == "jkrweight" {
            = if "jkrweight" == "jkrweight" {
            - local jkr : char _dta[_svy_jkrweight]
            - if `"`jkr'"' != "" {
            = if `""' != "" {
              CheckNumVarlist `jkr'
              return local jkrweight `s(varlist)'
              }
            - exit
            ------------------------------------------------ end _svyset.Get ---
          - exit
          ------------------------------------------------------ end _svyset ---
        - local RW `"`r(jkrweight)'"'
        = local RW `""'
        - if `:list wvar in RW' {
        = if 0 {
          RWerror jkrweight `wtype' `wvar'
          }
        - _svyset get sdr
          ---------------------------------------------------- begin _svyset ---
          - version 9
          - gettoken cmd 0 : 0
          - if "`cmd'" == "clear" {
          = if "get" == "clear" {
            Clear `0'
            exit
            }
          - if "`cmd'" == "set" {
          = if "get" == "set" {
            Set `0'
            exit
            }
          - if "`cmd'" == "get" {
          = if "get" == "get" {
          - Get `0'
          = Get  sdr
            ---------------------------------------------- begin _svyset.Get ---
            - if `:word count `0'' > 2 {
            = if 1 > 2 {
              di as err "too many arguments"
              exit 103
              }
            - args name i
            - CheckName `name'
            = CheckName sdr
              -------------------------------------- begin _svyset.CheckName ---
              - local 0 `", `0'"'
              = local 0 `", sdr"'
              - capture syntax [, WTYPE WEXP WVAR PWeight IWeight VCE MSE BRRwei
> ght FAY BSRweight BSN JKRweight SDRweight SDRFPC DOF POSTStrata POSTWeight CAL
> Method CALMOdel CALOpts SINGLEunit SU STRata FPC Weight STAGES stages_wt ]
              - if c(rc) {
                di as err "invalid survey characteristic"
                exit 198
                }
              - local gname `stages' `stages_wt' `pweight' `iweight' `wtype' `wv
> ar' `wexp' `vce' `mse' `brrweight' `fay' `bsrweight' `bsn' `jkrweight' `sdrwei
> ght' `sdrfpc' `dof' `poststrata' `postweight' `calmethod' `calmodel' `calopts'
>  `singleunit'
              = local gname               sdrweight        
              - local sname `su' `strata' `fpc' `weight'
              = local sname    
              - local k : word count `gname' `sname'
              = local k : word count sdrweight 
              - if `k' > 1 {
              = if 1 > 1 {
                di as err "too many names"
                exit 103
                }
              - if `k' == 0 {
              = if 1 == 0 {
                di as err "name required"
                exit 100
                }
              - sreturn local gname `gname'
              = sreturn local gname sdrweight
              - sreturn local sname `sname'
              = sreturn local sname 
              ---------------------------------------- end _svyset.CheckName ---
            - if "`s(sname)'" != "" {
            = if "" != "" {
              local name `s(sname)'
              CheckPosInt `i'
              }
            - else local name `s(gname)'
            = else local name sdrweight
            - if inlist("`name'", "wtype", "wvar", "wexp") {
            = if inlist("sdrweight", "wtype", "wvar", "wexp") {
              local wtype : char _dta[_svy_wtype]
              local wvar : char _dta[_svy_wvar]
              if `"`wtype'`wvar'"' != "" {
              if `"`wtype'"' == "" {
              di as err "error in svy settings; weight variable set without weig
> ht type"
              exit 459
              }
              if `"`wvar'"' == "" {
              "error in svy settings; weight type set without weight variable"
              exit 459
              }
              CheckName `wtype'
              local wtype `s(gname)' `s(sname)'
              if !inlist("`wtype'", "pweight", "iweight") {
              "error in svy settings; invalid weight type"
              exit 459
              }
              CheckNumVar `wvar'
              local wvar `s(varname)'
              local wexp "= `wvar'"
              return local wtype `"`wtype'"'
              return local wvar `"`wvar'"'
              return local wexp `"`wexp'"'
              }
              exit
              }
            - if "`name'" == "stages" {
            = if "sdrweight" == "stages" {
              local stages : char _dta[_svy_stages]
              capture CheckPosInt `stages'
              if c(rc) {
              return scalar stages = 0
              }
              return scalar stages = `stages'
              exit
              }
            - if "`name'" == "stages_wt" {
            = if "sdrweight" == "stages_wt" {
              local stages_wt : char _dta[_svy_stages_wt]
              capture CheckPosInt `stages_wt'
              if c(rc) {
              return scalar stages_wt = 0
              }
              else {
              return scalar stages_wt = `stages_wt'
              }
              exit
              }
            - if inlist("`name'", "vce", "mse") {
            = if inlist("sdrweight", "vce", "mse") {
              local vce : char _dta[_svy_vce]
              local mse : char _dta[_svy_mse]
              if `"`vce'`mse'"' != "" {
              _svy_check_vce `vce', `mse'
              return local vce `s(vce)'
              return local mse `s(mse)'
              }
              exit
              }
            - if "`name'" == "brrweight" {
            = if "sdrweight" == "brrweight" {
              local brr : char _dta[_svy_brrweight]
              if `"`brr'"' != "" {
              CheckNumVarlist `brr'
              return local brrweight `s(varlist)'
              }
              exit
              }
            - if "`name'" == "fay" {
            = if "sdrweight" == "fay" {
              local fay : char _dta[_svy_fay]
              if `"`fay'"' != "" {
              CheckFay `fay'
              return scalar fay = `s(value)'
              }
              exit
              }
            - if "`name'" == "bsrweight" {
            = if "sdrweight" == "bsrweight" {
              local bsr : char _dta[_svy_bsrweight]
              if `"`bsr'"' != "" {
              CheckNumVarlist `bsr'
              return local bsrweight `s(varlist)'
              }
              exit
              }
            - if "`name'" == "bsn" {
            = if "sdrweight" == "bsn" {
              local bsn : char _dta[_svy_bsn]
              if `"`bsn'"' != "" {
              CheckBSN `bsn'
              return scalar bsn = `s(value)'
              }
              exit
              }
            - if "`name'" == "jkrweight" {
            = if "sdrweight" == "jkrweight" {
              local jkr : char _dta[_svy_jkrweight]
              if `"`jkr'"' != "" {
              CheckNumVarlist `jkr'
              return local jkrweight `s(varlist)'
              }
              exit
              }
            - if "`name'" == "sdrweight" {
            = if "sdrweight" == "sdrweight" {
            - local sdr : char _dta[_svy_sdrweight]
            - if `"`sdr'"' != "" {
            = if `""' != "" {
              CheckNumVarlist `sdr'
              return local sdrweight `s(varlist)'
              local fpc : char _dta[_svy_sdrfpc]
              if `"`fpc'"' != "" {
              return local sdrfpc `"`fpc'"'
              }
              }
            - exit
            ------------------------------------------------ end _svyset.Get ---
          - exit
          ------------------------------------------------------ end _svyset ---
        - local RW `"`r(sdrweight)'"'
        = local RW `""'
        - if `:list wvar in RW' {
        = if 0 {
          RWerror sdrweight `wtype' `wvar'
          }
        - }
        - if !inlist("`su'", "", "_n") {
        = if !inlist("_n", "", "_n") {
          capture confirm variable `su'
          if c(rc) {
          local psu = cond(`i' == 1, "psu", "ssu")
          di as err `"{bf:`su'} invalid `psu' variable name"'
          exit c(rc)
          }
          }
        - if `"`su'"' != "_n" {
        = if `"_n"' != "_n" {
          `micheck' `su'
          }
        - _svyset set su `i' `su'
        = _svyset set su 1 _n
          ---------------------------------------------------- begin _svyset ---
          - version 9
          - gettoken cmd 0 : 0
          - if "`cmd'" == "clear" {
          = if "set" == "clear" {
            Clear `0'
            exit
            }
          - if "`cmd'" == "set" {
          = if "set" == "set" {
          - Set `0'
          = Set  su 1 _n
            ---------------------------------------------- begin _svyset.Set ---
            - gettoken name value : 0
            - CheckName `name'
            = CheckName su
              -------------------------------------- begin _svyset.CheckName ---
              - local 0 `", `0'"'
              = local 0 `", su"'
              - capture syntax [, WTYPE WEXP WVAR PWeight IWeight VCE MSE BRRwei
> ght FAY BSRweight BSN JKRweight SDRweight SDRFPC DOF POSTStrata POSTWeight CAL
> Method CALMOdel CALOpts SINGLEunit SU STRata FPC Weight STAGES stages_wt ]
              - if c(rc) {
                di as err "invalid survey characteristic"
                exit 198
                }
              - local gname `stages' `stages_wt' `pweight' `iweight' `wtype' `wv
> ar' `wexp' `vce' `mse' `brrweight' `fay' `bsrweight' `bsn' `jkrweight' `sdrwei
> ght' `sdrfpc' `dof' `poststrata' `postweight' `calmethod' `calmodel' `calopts'
>  `singleunit'
              = local gname                       
              - local sname `su' `strata' `fpc' `weight'
              = local sname su   
              - local k : word count `gname' `sname'
              = local k : word count  su
              - if `k' > 1 {
              = if 1 > 1 {
                di as err "too many names"
                exit 103
                }
              - if `k' == 0 {
              = if 1 == 0 {
                di as err "name required"
                exit 100
                }
              - sreturn local gname `gname'
              = sreturn local gname 
              - sreturn local sname `sname'
              = sreturn local sname su
              ---------------------------------------- end _svyset.CheckName ---
            - local name `s(gname)'
            = local name 
            - if "`name'" == "" {
            = if "" == "" {
            - local name `s(sname)'
            = local name su
            - gettoken i value : value
            - CheckPosInt `i'
            = CheckPosInt 1
              ------------------------------------ begin _svyset.CheckPosInt ---
              - confirm integer number `0'
              = confirm integer number 1
              - if `0' < 1 {
              = if 1 < 1 {
                di as err "'`0'' found where positive integer required"
                exit 7
                }
              -------------------------------------- end _svyset.CheckPosInt ---
            - if "`name'" == "su" {
            = if "su" == "su" {
            - if !inlist(trim("`value'"), "", "_n") {
            = if !inlist(trim(" _n"), "", "_n") {
              CheckVar `value'
              local value `s(varname)'
              }
            - }
            - if "`name'" == "strata" {
            = if "su" == "strata" {
              CheckVar `value'
              local value `s(varname)'
              }
            - if "`name'" == "fpc" {
            = if "su" == "fpc" {
              CheckNumVar `value'
              local value `s(varname)'
              }
            - if "`name'" == "weight" {
            = if "su" == "weight" {
              CheckNumVar `value'
              local value `s(varname)'
              }
            - char _dta[_svy_`name'`i'] `value'
            = char _dta[_svy_su1]  _n
            - exit
            ------------------------------------------------ end _svyset.Set ---
          - exit
          ------------------------------------------------------ end _svyset ---
        - if "`strata'" != "" {
        = if "" != "" {
          `micheck' `strata'
          _svyset set strata `i' `strata'
          }
        - else _svyset clear strata `i'
        = else _svyset clear strata 1
          ---------------------------------------------------- begin _svyset ---
          - version 9
          - gettoken cmd 0 : 0
          - if "`cmd'" == "clear" {
          = if "clear" == "clear" {
          - Clear `0'
          = Clear  strata 1
            -------------------------------------------- begin _svyset.Clear ---
            - if `:word count `0'' > 2 {
            = if 2 > 2 {
              di as err "too many arguments"
              exit 103
              }
            - args name i
            - if "`name'" == "stages" {
            = if "strata" == "stages" {
              confirm integer number `i'
              if `i' <= 1 {
              local i 1
              }
              local stages : char _dta[_svy_stages]
              capture CheckPosInt `stages'
              if c(rc) {
              local stages = `i' - 1
              }
              forval j = `i'/`stages' {
              char _dta[_svy_su`j']
              char _dta[_svy_strata`j']
              char _dta[_svy_fpc`j']
              }
              local --i
              if `i' > 0 {
              char _dta[_svy_stages] `i'
              }
              else char _dta[_svy_stages]
              exit
              }
            - if "`name'" == "stages_wt" {
            = if "strata" == "stages_wt" {
              confirm integer number `i'
              if `i' <= 1 {
              local i 1
              }
              local stages_wt : char _dta[_svy_stages_wt]
              capture CheckPosInt `stages_wt'
              if c(rc) {
              local stages_wt = `i' - 1
              }
              forval j = `i'/`stages_wt' {
              char _dta[_svy_su`j']
              char _dta[_svy_weight`j']
              }
              local --i
              if `i' > 0 {
              char _dta[_svy_stages_wt] `i'
              }
              else char _dta[_svy_stages_wt]
              exit
              }
            - if "`name'" == "version" {
            = if "strata" == "version" {
              char _dta[_svy_version]
              }
            - CheckName `name'
            = CheckName strata
              -------------------------------------- begin _svyset.CheckName ---
              - local 0 `", `0'"'
              = local 0 `", strata"'
              - capture syntax [, WTYPE WEXP WVAR PWeight IWeight VCE MSE BRRwei
> ght FAY BSRweight BSN JKRweight SDRweight SDRFPC DOF POSTStrata POSTWeight CAL
> Method CALMOdel CALOpts SINGLEunit SU STRata FPC Weight STAGES stages_wt ]
              - if c(rc) {
                di as err "invalid survey characteristic"
                exit 198
                }
              - local gname `stages' `stages_wt' `pweight' `iweight' `wtype' `wv
> ar' `wexp' `vce' `mse' `brrweight' `fay' `bsrweight' `bsn' `jkrweight' `sdrwei
> ght' `sdrfpc' `dof' `poststrata' `postweight' `calmethod' `calmodel' `calopts'
>  `singleunit'
              = local gname                       
              - local sname `su' `strata' `fpc' `weight'
              = local sname  strata  
              - local k : word count `gname' `sname'
              = local k : word count  strata
              - if `k' > 1 {
              = if 1 > 1 {
                di as err "too many names"
                exit 103
                }
              - if `k' == 0 {
              = if 1 == 0 {
                di as err "name required"
                exit 100
                }
              - sreturn local gname `gname'
              = sreturn local gname 
              - sreturn local sname `sname'
              = sreturn local sname strata
              ---------------------------------------- end _svyset.CheckName ---
            - if "`s(sname)'" != "" {
            = if "strata" != "" {
            - local name `s(sname)'
            = local name strata
            - CheckPosInt `i'
            = CheckPosInt 1
              ------------------------------------ begin _svyset.CheckPosInt ---
              - confirm integer number `0'
              = confirm integer number 1
              - if `0' < 1 {
              = if 1 < 1 {
                di as err "'`0'' found where positive integer required"
                exit 7
                }
              -------------------------------------- end _svyset.CheckPosInt ---
            - }
            - else local name `s(gname)'
            = else local name 
            - if inlist("`name'","pweight","iweight","wtype","wexp","wvar") {
            = if inlist("strata","pweight","iweight","wtype","wexp","wvar") {
              char _dta[_svy_wtype]
              char _dta[_svy_wvar]
              exit
              }
            - if "`name'" == "vce" {
            = if "strata" == "vce" {
              char _dta[_svy_vce]
              char _dta[_svy_mse]
              exit
              }
            - if bsubstr("`name'",1,4) == "post" {
            = if bsubstr("strata",1,4) == "post" {
              char _dta[_svy_poststrata]
              char _dta[_svy_postweight]
              exit
              }
            - if bsubstr("`name'",1,3) == "cal" {
            = if bsubstr("strata",1,3) == "cal" {
              char _dta[_svy_calmethod]
              char _dta[_svy_calmodel]
              char _dta[_svy_calopts]
              exit
              }
            - if "`name'" == "sdrweight" {
            = if "strata" == "sdrweight" {
              char _dta[_svy_sdrfpc]
              }
            - char _dta[_svy_`name'`i']
            = char _dta[_svy_strata1]
            ---------------------------------------------- end _svyset.Clear ---
          - exit
          ------------------------------------------------------ end _svyset ---
        - if "`fpc'" != "" {
        = if "" != "" {
          `micheck' `fpc'
          _svyset set fpc `i' `fpc'
          }
        - else _svyset clear fpc `i'
        = else _svyset clear fpc 1
          ---------------------------------------------------- begin _svyset ---
          - version 9
          - gettoken cmd 0 : 0
          - if "`cmd'" == "clear" {
          = if "clear" == "clear" {
          - Clear `0'
          = Clear  fpc 1
            -------------------------------------------- begin _svyset.Clear ---
            - if `:word count `0'' > 2 {
            = if 2 > 2 {
              di as err "too many arguments"
              exit 103
              }
            - args name i
            - if "`name'" == "stages" {
            = if "fpc" == "stages" {
              confirm integer number `i'
              if `i' <= 1 {
              local i 1
              }
              local stages : char _dta[_svy_stages]
              capture CheckPosInt `stages'
              if c(rc) {
              local stages = `i' - 1
              }
              forval j = `i'/`stages' {
              char _dta[_svy_su`j']
              char _dta[_svy_strata`j']
              char _dta[_svy_fpc`j']
              }
              local --i
              if `i' > 0 {
              char _dta[_svy_stages] `i'
              }
              else char _dta[_svy_stages]
              exit
              }
            - if "`name'" == "stages_wt" {
            = if "fpc" == "stages_wt" {
              confirm integer number `i'
              if `i' <= 1 {
              local i 1
              }
              local stages_wt : char _dta[_svy_stages_wt]
              capture CheckPosInt `stages_wt'
              if c(rc) {
              local stages_wt = `i' - 1
              }
              forval j = `i'/`stages_wt' {
              char _dta[_svy_su`j']
              char _dta[_svy_weight`j']
              }
              local --i
              if `i' > 0 {
              char _dta[_svy_stages_wt] `i'
              }
              else char _dta[_svy_stages_wt]
              exit
              }
            - if "`name'" == "version" {
            = if "fpc" == "version" {
              char _dta[_svy_version]
              }
            - CheckName `name'
            = CheckName fpc
              -------------------------------------- begin _svyset.CheckName ---
              - local 0 `", `0'"'
              = local 0 `", fpc"'
              - capture syntax [, WTYPE WEXP WVAR PWeight IWeight VCE MSE BRRwei
> ght FAY BSRweight BSN JKRweight SDRweight SDRFPC DOF POSTStrata POSTWeight CAL
> Method CALMOdel CALOpts SINGLEunit SU STRata FPC Weight STAGES stages_wt ]
              - if c(rc) {
                di as err "invalid survey characteristic"
                exit 198
                }
              - local gname `stages' `stages_wt' `pweight' `iweight' `wtype' `wv
> ar' `wexp' `vce' `mse' `brrweight' `fay' `bsrweight' `bsn' `jkrweight' `sdrwei
> ght' `sdrfpc' `dof' `poststrata' `postweight' `calmethod' `calmodel' `calopts'
>  `singleunit'
              = local gname                       
              - local sname `su' `strata' `fpc' `weight'
              = local sname   fpc 
              - local k : word count `gname' `sname'
              = local k : word count  fpc
              - if `k' > 1 {
              = if 1 > 1 {
                di as err "too many names"
                exit 103
                }
              - if `k' == 0 {
              = if 1 == 0 {
                di as err "name required"
                exit 100
                }
              - sreturn local gname `gname'
              = sreturn local gname 
              - sreturn local sname `sname'
              = sreturn local sname fpc
              ---------------------------------------- end _svyset.CheckName ---
            - if "`s(sname)'" != "" {
            = if "fpc" != "" {
            - local name `s(sname)'
            = local name fpc
            - CheckPosInt `i'
            = CheckPosInt 1
              ------------------------------------ begin _svyset.CheckPosInt ---
              - confirm integer number `0'
              = confirm integer number 1
              - if `0' < 1 {
              = if 1 < 1 {
                di as err "'`0'' found where positive integer required"
                exit 7
                }
              -------------------------------------- end _svyset.CheckPosInt ---
            - }
            - else local name `s(gname)'
            = else local name 
            - if inlist("`name'","pweight","iweight","wtype","wexp","wvar") {
            = if inlist("fpc","pweight","iweight","wtype","wexp","wvar") {
              char _dta[_svy_wtype]
              char _dta[_svy_wvar]
              exit
              }
            - if "`name'" == "vce" {
            = if "fpc" == "vce" {
              char _dta[_svy_vce]
              char _dta[_svy_mse]
              exit
              }
            - if bsubstr("`name'",1,4) == "post" {
            = if bsubstr("fpc",1,4) == "post" {
              char _dta[_svy_poststrata]
              char _dta[_svy_postweight]
              exit
              }
            - if bsubstr("`name'",1,3) == "cal" {
            = if bsubstr("fpc",1,3) == "cal" {
              char _dta[_svy_calmethod]
              char _dta[_svy_calmodel]
              char _dta[_svy_calopts]
              exit
              }
            - if "`name'" == "sdrweight" {
            = if "fpc" == "sdrweight" {
              char _dta[_svy_sdrfpc]
              }
            - char _dta[_svy_`name'`i']
            = char _dta[_svy_fpc1]
            ---------------------------------------------- end _svyset.Clear ---
          - exit
          ------------------------------------------------------ end _svyset ---
        - if "`weight`i''" != "" {
        = if "" != "" {
          `micheck' `weight`i''
          _svyset set weight `i' `weight`i''
          }
        - else _svyset clear weight `i'
        = else _svyset clear weight 1
          ---------------------------------------------------- begin _svyset ---
          - version 9
          - gettoken cmd 0 : 0
          - if "`cmd'" == "clear" {
          = if "clear" == "clear" {
          - Clear `0'
          = Clear  weight 1
            -------------------------------------------- begin _svyset.Clear ---
            - if `:word count `0'' > 2 {
            = if 2 > 2 {
              di as err "too many arguments"
              exit 103
              }
            - args name i
            - if "`name'" == "stages" {
            = if "weight" == "stages" {
              confirm integer number `i'
              if `i' <= 1 {
              local i 1
              }
              local stages : char _dta[_svy_stages]
              capture CheckPosInt `stages'
              if c(rc) {
              local stages = `i' - 1
              }
              forval j = `i'/`stages' {
              char _dta[_svy_su`j']
              char _dta[_svy_strata`j']
              char _dta[_svy_fpc`j']
              }
              local --i
              if `i' > 0 {
              char _dta[_svy_stages] `i'
              }
              else char _dta[_svy_stages]
              exit
              }
            - if "`name'" == "stages_wt" {
            = if "weight" == "stages_wt" {
              confirm integer number `i'
              if `i' <= 1 {
              local i 1
              }
              local stages_wt : char _dta[_svy_stages_wt]
              capture CheckPosInt `stages_wt'
              if c(rc) {
              local stages_wt = `i' - 1
              }
              forval j = `i'/`stages_wt' {
              char _dta[_svy_su`j']
              char _dta[_svy_weight`j']
              }
              local --i
              if `i' > 0 {
              char _dta[_svy_stages_wt] `i'
              }
              else char _dta[_svy_stages_wt]
              exit
              }
            - if "`name'" == "version" {
            = if "weight" == "version" {
              char _dta[_svy_version]
              }
            - CheckName `name'
            = CheckName weight
              -------------------------------------- begin _svyset.CheckName ---
              - local 0 `", `0'"'
              = local 0 `", weight"'
              - capture syntax [, WTYPE WEXP WVAR PWeight IWeight VCE MSE BRRwei
> ght FAY BSRweight BSN JKRweight SDRweight SDRFPC DOF POSTStrata POSTWeight CAL
> Method CALMOdel CALOpts SINGLEunit SU STRata FPC Weight STAGES stages_wt ]
              - if c(rc) {
                di as err "invalid survey characteristic"
                exit 198
                }
              - local gname `stages' `stages_wt' `pweight' `iweight' `wtype' `wv
> ar' `wexp' `vce' `mse' `brrweight' `fay' `bsrweight' `bsn' `jkrweight' `sdrwei
> ght' `sdrfpc' `dof' `poststrata' `postweight' `calmethod' `calmodel' `calopts'
>  `singleunit'
              = local gname                       
              - local sname `su' `strata' `fpc' `weight'
              = local sname    weight
              - local k : word count `gname' `sname'
              = local k : word count  weight
              - if `k' > 1 {
              = if 1 > 1 {
                di as err "too many names"
                exit 103
                }
              - if `k' == 0 {
              = if 1 == 0 {
                di as err "name required"
                exit 100
                }
              - sreturn local gname `gname'
              = sreturn local gname 
              - sreturn local sname `sname'
              = sreturn local sname weight
              ---------------------------------------- end _svyset.CheckName ---
            - if "`s(sname)'" != "" {
            = if "weight" != "" {
            - local name `s(sname)'
            = local name weight
            - CheckPosInt `i'
            = CheckPosInt 1
              ------------------------------------ begin _svyset.CheckPosInt ---
              - confirm integer number `0'
              = confirm integer number 1
              - if `0' < 1 {
              = if 1 < 1 {
                di as err "'`0'' found where positive integer required"
                exit 7
                }
              -------------------------------------- end _svyset.CheckPosInt ---
            - }
            - else local name `s(gname)'
            = else local name 
            - if inlist("`name'","pweight","iweight","wtype","wexp","wvar") {
            = if inlist("weight","pweight","iweight","wtype","wexp","wvar") {
              char _dta[_svy_wtype]
              char _dta[_svy_wvar]
              exit
              }
            - if "`name'" == "vce" {
            = if "weight" == "vce" {
              char _dta[_svy_vce]
              char _dta[_svy_mse]
              exit
              }
            - if bsubstr("`name'",1,4) == "post" {
            = if bsubstr("weight",1,4) == "post" {
              char _dta[_svy_poststrata]
              char _dta[_svy_postweight]
              exit
              }
            - if bsubstr("`name'",1,3) == "cal" {
            = if bsubstr("weight",1,3) == "cal" {
              char _dta[_svy_calmethod]
              char _dta[_svy_calmodel]
              char _dta[_svy_calopts]
              exit
              }
            - if "`name'" == "sdrweight" {
            = if "weight" == "sdrweight" {
              char _dta[_svy_sdrfpc]
              }
            - char _dta[_svy_`name'`i']
            = char _dta[_svy_weight1]
            ---------------------------------------------- end _svyset.Clear ---
          - exit
          ------------------------------------------------------ end _svyset ---
        ---------------------------------------------- end svyset.ParseStage ---
      - _svyset get fpc `i'
      = _svyset get fpc 1
        ------------------------------------------------------ begin _svyset ---
        - version 9
        - gettoken cmd 0 : 0
        - if "`cmd'" == "clear" {
        = if "get" == "clear" {
          Clear `0'
          exit
          }
        - if "`cmd'" == "set" {
        = if "get" == "set" {
          Set `0'
          exit
          }
        - if "`cmd'" == "get" {
        = if "get" == "get" {
        - Get `0'
        = Get  fpc 1
          ------------------------------------------------ begin _svyset.Get ---
          - if `:word count `0'' > 2 {
          = if 2 > 2 {
            di as err "too many arguments"
            exit 103
            }
          - args name i
          - CheckName `name'
          = CheckName fpc
            ---------------------------------------- begin _svyset.CheckName ---
            - local 0 `", `0'"'
            = local 0 `", fpc"'
            - capture syntax [, WTYPE WEXP WVAR PWeight IWeight VCE MSE BRRweigh
> t FAY BSRweight BSN JKRweight SDRweight SDRFPC DOF POSTStrata POSTWeight CALMe
> thod CALMOdel CALOpts SINGLEunit SU STRata FPC Weight STAGES stages_wt ]
            - if c(rc) {
              di as err "invalid survey characteristic"
              exit 198
              }
            - local gname `stages' `stages_wt' `pweight' `iweight' `wtype' `wvar
> ' `wexp' `vce' `mse' `brrweight' `fay' `bsrweight' `bsn' `jkrweight' `sdrweigh
> t' `sdrfpc' `dof' `poststrata' `postweight' `calmethod' `calmodel' `calopts' `
> singleunit'
            = local gname                       
            - local sname `su' `strata' `fpc' `weight'
            = local sname   fpc 
            - local k : word count `gname' `sname'
            = local k : word count  fpc
            - if `k' > 1 {
            = if 1 > 1 {
              di as err "too many names"
              exit 103
              }
            - if `k' == 0 {
            = if 1 == 0 {
              di as err "name required"
              exit 100
              }
            - sreturn local gname `gname'
            = sreturn local gname 
            - sreturn local sname `sname'
            = sreturn local sname fpc
            ------------------------------------------ end _svyset.CheckName ---
          - if "`s(sname)'" != "" {
          = if "fpc" != "" {
          - local name `s(sname)'
          = local name fpc
          - CheckPosInt `i'
          = CheckPosInt 1
            -------------------------------------- begin _svyset.CheckPosInt ---
            - confirm integer number `0'
            = confirm integer number 1
            - if `0' < 1 {
            = if 1 < 1 {
              di as err "'`0'' found where positive integer required"
              exit 7
              }
            ---------------------------------------- end _svyset.CheckPosInt ---
          - }
          - else local name `s(gname)'
          = else local name 
          - if inlist("`name'", "wtype", "wvar", "wexp") {
          = if inlist("fpc", "wtype", "wvar", "wexp") {
            local wtype : char _dta[_svy_wtype]
            local wvar : char _dta[_svy_wvar]
            if `"`wtype'`wvar'"' != "" {
            if `"`wtype'"' == "" {
            di as err "error in svy settings; weight variable set without weight
>  type"
            exit 459
            }
            if `"`wvar'"' == "" {
            "error in svy settings; weight type set without weight variable"
            exit 459
            }
            CheckName `wtype'
            local wtype `s(gname)' `s(sname)'
            if !inlist("`wtype'", "pweight", "iweight") {
            "error in svy settings; invalid weight type"
            exit 459
            }
            CheckNumVar `wvar'
            local wvar `s(varname)'
            local wexp "= `wvar'"
            return local wtype `"`wtype'"'
            return local wvar `"`wvar'"'
            return local wexp `"`wexp'"'
            }
            exit
            }
          - if "`name'" == "stages" {
          = if "fpc" == "stages" {
            local stages : char _dta[_svy_stages]
            capture CheckPosInt `stages'
            if c(rc) {
            return scalar stages = 0
            }
            return scalar stages = `stages'
            exit
            }
          - if "`name'" == "stages_wt" {
          = if "fpc" == "stages_wt" {
            local stages_wt : char _dta[_svy_stages_wt]
            capture CheckPosInt `stages_wt'
            if c(rc) {
            return scalar stages_wt = 0
            }
            else {
            return scalar stages_wt = `stages_wt'
            }
            exit
            }
          - if inlist("`name'", "vce", "mse") {
          = if inlist("fpc", "vce", "mse") {
            local vce : char _dta[_svy_vce]
            local mse : char _dta[_svy_mse]
            if `"`vce'`mse'"' != "" {
            _svy_check_vce `vce', `mse'
            return local vce `s(vce)'
            return local mse `s(mse)'
            }
            exit
            }
          - if "`name'" == "brrweight" {
          = if "fpc" == "brrweight" {
            local brr : char _dta[_svy_brrweight]
            if `"`brr'"' != "" {
            CheckNumVarlist `brr'
            return local brrweight `s(varlist)'
            }
            exit
            }
          - if "`name'" == "fay" {
          = if "fpc" == "fay" {
            local fay : char _dta[_svy_fay]
            if `"`fay'"' != "" {
            CheckFay `fay'
            return scalar fay = `s(value)'
            }
            exit
            }
          - if "`name'" == "bsrweight" {
          = if "fpc" == "bsrweight" {
            local bsr : char _dta[_svy_bsrweight]
            if `"`bsr'"' != "" {
            CheckNumVarlist `bsr'
            return local bsrweight `s(varlist)'
            }
            exit
            }
          - if "`name'" == "bsn" {
          = if "fpc" == "bsn" {
            local bsn : char _dta[_svy_bsn]
            if `"`bsn'"' != "" {
            CheckBSN `bsn'
            return scalar bsn = `s(value)'
            }
            exit
            }
          - if "`name'" == "jkrweight" {
          = if "fpc" == "jkrweight" {
            local jkr : char _dta[_svy_jkrweight]
            if `"`jkr'"' != "" {
            CheckNumVarlist `jkr'
            return local jkrweight `s(varlist)'
            }
            exit
            }
          - if "`name'" == "sdrweight" {
          = if "fpc" == "sdrweight" {
            local sdr : char _dta[_svy_sdrweight]
            if `"`sdr'"' != "" {
            CheckNumVarlist `sdr'
            return local sdrweight `s(varlist)'
            local fpc : char _dta[_svy_sdrfpc]
            if `"`fpc'"' != "" {
            return local sdrfpc `"`fpc'"'
            }
            }
            exit
            }
          - if "`name'" == "dof" {
          = if "fpc" == "dof" {
            local dof : char _dta[_svy_dof]
            if `"`dof'"' != "" {
            CheckDOF `dof'
            return scalar dof = `s(value)'
            }
            exit
            }
          - if "`name'" == "poststrata" {
          = if "fpc" == "poststrata" {
            local poststrata : char _dta[_svy_poststrata]
            local postweight : char _dta[_svy_postweight]
            if `"`poststrata'`postweight'"' != "" {
            if "`postweight'" == "" {
            di as err "error in svy settings; poststrata set without postweight"
            exit 459
            }
            if "`poststrata'" == "" {
            di as err "error in svy settings; postweight set without poststrata"
            exit 459
            }
            CheckVar `poststrata'
            return local poststrata `s(varname)'
            CheckPostW `postweight'
            return local postweight `s(varname)'
            }
            exit
            }
          - if "`name'" == "calmethod" {
          = if "fpc" == "calmethod" {
            local calmethod : char _dta[_svy_calmethod]
            local calmodel : char _dta[_svy_calmodel]
            local calopts : char _dta[_svy_calopts]
            if `"`calmethod'`calmodel'`calopts'"' != "" {
            if "`calmethod'" == "" {
            di as err "error in svy settings; calibration method not properly se
> t"
            exit 459
            }
            if "`calmodel'" == "" {
            di as err "error in svy settings; calibration model not properly set
> "
            exit 459
            }
            if "`calopts'" == "" {
            di as err "error in svy settings; calibration options not properly s
> et"
            exit 459
            }
            CheckCalMethod `calmethod'
            return hidden local calmethod `"`s(method)'"'
            return hidden local calmodel `"`calmodel'"'
            return hidden local calopts `"`calopts'"'
            }
            exit
            }
          - if "`name'" == "su" {
          = if "fpc" == "su" {
            CheckPosInt `i'
            local su : char _dta[_svy_su`i']
            if !inlist("`su'", "", "_n") {
            CheckVar `su'
            return local su`i' `s(varname)'
            }
            else return local su`i' `su'
            exit
            }
          - if "`name'" == "weight" {
          = if "fpc" == "weight" {
            CheckPosInt `i'
            local weight : char _dta[_svy_weight`i']
            if "`weight'" != "" {
            CheckVar `weight'
            return local weight`i' `s(varname)'
            }
            exit
            }
          - if "`name'" == "strata" {
          = if "fpc" == "strata" {
            CheckPosInt `i'
            local strata : char _dta[_svy_strata`i']
            if "`strata'" != "" {
            CheckVar `strata'
            return local strata`i' `s(varname)'
            }
            exit
            }
          - if "`name'" == "fpc" {
          = if "fpc" == "fpc" {
          - CheckPosInt `i'
          = CheckPosInt 1
            -------------------------------------- begin _svyset.CheckPosInt ---
            - confirm integer number `0'
            = confirm integer number 1
            - if `0' < 1 {
            = if 1 < 1 {
              di as err "'`0'' found where positive integer required"
              exit 7
              }
            ---------------------------------------- end _svyset.CheckPosInt ---
          - local fpc : char _dta[_svy_fpc`i']
          = local fpc : char _dta[_svy_fpc1]
          - if "`fpc'" != "" {
          = if "" != "" {
            CheckVar `fpc'
            return local fpc`i' `s(varname)'
            }
          - exit
          -------------------------------------------------- end _svyset.Get ---
        - exit
        -------------------------------------------------------- end _svyset ---
      - if "`r(fpc`i')'" == "" & `stage_n' > `i' {
      = if "" == "" & 1 > 1 {
        di as txt "{p 0 6 2}" "Note: Stage `i' is sampled with replacement;" " f
> urther stages will be ignored for variance estimation.{p_end}"
        local stage_n `i'
        local ignore 1
        }
      - _svyset get weight `i'
      = _svyset get weight 1
        ------------------------------------------------------ begin _svyset ---
        - version 9
        - gettoken cmd 0 : 0
        - if "`cmd'" == "clear" {
        = if "get" == "clear" {
          Clear `0'
          exit
          }
        - if "`cmd'" == "set" {
        = if "get" == "set" {
          Set `0'
          exit
          }
        - if "`cmd'" == "get" {
        = if "get" == "get" {
        - Get `0'
        = Get  weight 1
          ------------------------------------------------ begin _svyset.Get ---
          - if `:word count `0'' > 2 {
          = if 2 > 2 {
            di as err "too many arguments"
            exit 103
            }
          - args name i
          - CheckName `name'
          = CheckName weight
            ---------------------------------------- begin _svyset.CheckName ---
            - local 0 `", `0'"'
            = local 0 `", weight"'
            - capture syntax [, WTYPE WEXP WVAR PWeight IWeight VCE MSE BRRweigh
> t FAY BSRweight BSN JKRweight SDRweight SDRFPC DOF POSTStrata POSTWeight CALMe
> thod CALMOdel CALOpts SINGLEunit SU STRata FPC Weight STAGES stages_wt ]
            - if c(rc) {
              di as err "invalid survey characteristic"
              exit 198
              }
            - local gname `stages' `stages_wt' `pweight' `iweight' `wtype' `wvar
> ' `wexp' `vce' `mse' `brrweight' `fay' `bsrweight' `bsn' `jkrweight' `sdrweigh
> t' `sdrfpc' `dof' `poststrata' `postweight' `calmethod' `calmodel' `calopts' `
> singleunit'
            = local gname                       
            - local sname `su' `strata' `fpc' `weight'
            = local sname    weight
            - local k : word count `gname' `sname'
            = local k : word count  weight
            - if `k' > 1 {
            = if 1 > 1 {
              di as err "too many names"
              exit 103
              }
            - if `k' == 0 {
            = if 1 == 0 {
              di as err "name required"
              exit 100
              }
            - sreturn local gname `gname'
            = sreturn local gname 
            - sreturn local sname `sname'
            = sreturn local sname weight
            ------------------------------------------ end _svyset.CheckName ---
          - if "`s(sname)'" != "" {
          = if "weight" != "" {
          - local name `s(sname)'
          = local name weight
          - CheckPosInt `i'
          = CheckPosInt 1
            -------------------------------------- begin _svyset.CheckPosInt ---
            - confirm integer number `0'
            = confirm integer number 1
            - if `0' < 1 {
            = if 1 < 1 {
              di as err "'`0'' found where positive integer required"
              exit 7
              }
            ---------------------------------------- end _svyset.CheckPosInt ---
          - }
          - else local name `s(gname)'
          = else local name 
          - if inlist("`name'", "wtype", "wvar", "wexp") {
          = if inlist("weight", "wtype", "wvar", "wexp") {
            local wtype : char _dta[_svy_wtype]
            local wvar : char _dta[_svy_wvar]
            if `"`wtype'`wvar'"' != "" {
            if `"`wtype'"' == "" {
            di as err "error in svy settings; weight variable set without weight
>  type"
            exit 459
            }
            if `"`wvar'"' == "" {
            "error in svy settings; weight type set without weight variable"
            exit 459
            }
            CheckName `wtype'
            local wtype `s(gname)' `s(sname)'
            if !inlist("`wtype'", "pweight", "iweight") {
            "error in svy settings; invalid weight type"
            exit 459
            }
            CheckNumVar `wvar'
            local wvar `s(varname)'
            local wexp "= `wvar'"
            return local wtype `"`wtype'"'
            return local wvar `"`wvar'"'
            return local wexp `"`wexp'"'
            }
            exit
            }
          - if "`name'" == "stages" {
          = if "weight" == "stages" {
            local stages : char _dta[_svy_stages]
            capture CheckPosInt `stages'
            if c(rc) {
            return scalar stages = 0
            }
            return scalar stages = `stages'
            exit
            }
          - if "`name'" == "stages_wt" {
          = if "weight" == "stages_wt" {
            local stages_wt : char _dta[_svy_stages_wt]
            capture CheckPosInt `stages_wt'
            if c(rc) {
            return scalar stages_wt = 0
            }
            else {
            return scalar stages_wt = `stages_wt'
            }
            exit
            }
          - if inlist("`name'", "vce", "mse") {
          = if inlist("weight", "vce", "mse") {
            local vce : char _dta[_svy_vce]
            local mse : char _dta[_svy_mse]
            if `"`vce'`mse'"' != "" {
            _svy_check_vce `vce', `mse'
            return local vce `s(vce)'
            return local mse `s(mse)'
            }
            exit
            }
          - if "`name'" == "brrweight" {
          = if "weight" == "brrweight" {
            local brr : char _dta[_svy_brrweight]
            if `"`brr'"' != "" {
            CheckNumVarlist `brr'
            return local brrweight `s(varlist)'
            }
            exit
            }
          - if "`name'" == "fay" {
          = if "weight" == "fay" {
            local fay : char _dta[_svy_fay]
            if `"`fay'"' != "" {
            CheckFay `fay'
            return scalar fay = `s(value)'
            }
            exit
            }
          - if "`name'" == "bsrweight" {
          = if "weight" == "bsrweight" {
            local bsr : char _dta[_svy_bsrweight]
            if `"`bsr'"' != "" {
            CheckNumVarlist `bsr'
            return local bsrweight `s(varlist)'
            }
            exit
            }
          - if "`name'" == "bsn" {
          = if "weight" == "bsn" {
            local bsn : char _dta[_svy_bsn]
            if `"`bsn'"' != "" {
            CheckBSN `bsn'
            return scalar bsn = `s(value)'
            }
            exit
            }
          - if "`name'" == "jkrweight" {
          = if "weight" == "jkrweight" {
            local jkr : char _dta[_svy_jkrweight]
            if `"`jkr'"' != "" {
            CheckNumVarlist `jkr'
            return local jkrweight `s(varlist)'
            }
            exit
            }
          - if "`name'" == "sdrweight" {
          = if "weight" == "sdrweight" {
            local sdr : char _dta[_svy_sdrweight]
            if `"`sdr'"' != "" {
            CheckNumVarlist `sdr'
            return local sdrweight `s(varlist)'
            local fpc : char _dta[_svy_sdrfpc]
            if `"`fpc'"' != "" {
            return local sdrfpc `"`fpc'"'
            }
            }
            exit
            }
          - if "`name'" == "dof" {
          = if "weight" == "dof" {
            local dof : char _dta[_svy_dof]
            if `"`dof'"' != "" {
            CheckDOF `dof'
            return scalar dof = `s(value)'
            }
            exit
            }
          - if "`name'" == "poststrata" {
          = if "weight" == "poststrata" {
            local poststrata : char _dta[_svy_poststrata]
            local postweight : char _dta[_svy_postweight]
            if `"`poststrata'`postweight'"' != "" {
            if "`postweight'" == "" {
            di as err "error in svy settings; poststrata set without postweight"
            exit 459
            }
            if "`poststrata'" == "" {
            di as err "error in svy settings; postweight set without poststrata"
            exit 459
            }
            CheckVar `poststrata'
            return local poststrata `s(varname)'
            CheckPostW `postweight'
            return local postweight `s(varname)'
            }
            exit
            }
          - if "`name'" == "calmethod" {
          = if "weight" == "calmethod" {
            local calmethod : char _dta[_svy_calmethod]
            local calmodel : char _dta[_svy_calmodel]
            local calopts : char _dta[_svy_calopts]
            if `"`calmethod'`calmodel'`calopts'"' != "" {
            if "`calmethod'" == "" {
            di as err "error in svy settings; calibration method not properly se
> t"
            exit 459
            }
            if "`calmodel'" == "" {
            di as err "error in svy settings; calibration model not properly set
> "
            exit 459
            }
            if "`calopts'" == "" {
            di as err "error in svy settings; calibration options not properly s
> et"
            exit 459
            }
            CheckCalMethod `calmethod'
            return hidden local calmethod `"`s(method)'"'
            return hidden local calmodel `"`calmodel'"'
            return hidden local calopts `"`calopts'"'
            }
            exit
            }
          - if "`name'" == "su" {
          = if "weight" == "su" {
            CheckPosInt `i'
            local su : char _dta[_svy_su`i']
            if !inlist("`su'", "", "_n") {
            CheckVar `su'
            return local su`i' `s(varname)'
            }
            else return local su`i' `su'
            exit
            }
          - if "`name'" == "weight" {
          = if "weight" == "weight" {
          - CheckPosInt `i'
          = CheckPosInt 1
            -------------------------------------- begin _svyset.CheckPosInt ---
            - confirm integer number `0'
            = confirm integer number 1
            - if `0' < 1 {
            = if 1 < 1 {
              di as err "'`0'' found where positive integer required"
              exit 7
              }
            ---------------------------------------- end _svyset.CheckPosInt ---
          - local weight : char _dta[_svy_weight`i']
          = local weight : char _dta[_svy_weight1]
          - if "`weight'" != "" {
          = if "" != "" {
            CheckVar `weight'
            return local weight`i' `s(varname)'
            }
          - exit
          -------------------------------------------------- end _svyset.Get ---
        - exit
        -------------------------------------------------------- end _svyset ---
      - if "`r(weight`i')'" != "" {
      = if "" != "" {
        local wgt_n = `i'
        }
      - }
      - if "`noclear'" == "" & `"`:char _dta[_svy_su1]'"' != "" {
      = if "" == "" & `"_n"' != "" {
      - if `stage_n' == 0 {
      = if 1 == 0 {
        local stage_n 1
        }
      - char _dta[_svy_stages] `stage_n'
      = char _dta[_svy_stages] 1
      - }
      - if `wgt_n' {
      = if 0 {
        char _dta[_svy_stages_wt] `wgt_n'
        }
      - if `stage_n' | `"`global_op'"' != "" {
      = if 1 | `""' != "" {
      - char _dta[_svy_version] 2
      - }
      - Display
        ----------------------------------------------- begin svyset.Display ---
        - syntax [, eclass ]
        - Get, `eclass'
        = Get, 
          ------------------------------------------------- begin svyset.Get ---
          - syntax [, eclass]
          - if "`eclass'" != "" {
          = if "" != "" {
            if "`e(prefix)'" != "svy" {
            di as err "svy estimation results not found"
            exit 301
            }
            GetEclass
            return add
            exit
            }
          - local version : char _dta[_svy_version]
          - capture confirm integer number `version'
          = capture confirm integer number 2
          - if c(rc) {
            GetOld
            return add
            exit
            }
          - local is_set 0
          - _svyset get wvar
            -------------------------------------------------- begin _svyset ---
            - version 9
            - gettoken cmd 0 : 0
            - if "`cmd'" == "clear" {
            = if "get" == "clear" {
              Clear `0'
              exit
              }
            - if "`cmd'" == "set" {
            = if "get" == "set" {
              Set `0'
              exit
              }
            - if "`cmd'" == "get" {
            = if "get" == "get" {
            - Get `0'
            = Get  wvar
              -------------------------------------------- begin _svyset.Get ---
              - if `:word count `0'' > 2 {
              = if 1 > 2 {
                di as err "too many arguments"
                exit 103
                }
              - args name i
              - CheckName `name'
              = CheckName wvar
                ------------------------------------ begin _svyset.CheckName ---
                - local 0 `", `0'"'
                = local 0 `", wvar"'
                - capture syntax [, WTYPE WEXP WVAR PWeight IWeight VCE MSE BRRw
> eight FAY BSRweight BSN JKRweight SDRweight SDRFPC DOF POSTStrata POSTWeight C
> ALMethod CALMOdel CALOpts SINGLEunit SU STRata FPC Weight STAGES stages_wt ]
                - if c(rc) {
                  di as err "invalid survey characteristic"
                  exit 198
                  }
                - local gname `stages' `stages_wt' `pweight' `iweight' `wtype' `
> wvar' `wexp' `vce' `mse' `brrweight' `fay' `bsrweight' `bsn' `jkrweight' `sdrw
> eight' `sdrfpc' `dof' `poststrata' `postweight' `calmethod' `calmodel' `calopt
> s' `singleunit'
                = local gname      wvar                 
                - local sname `su' `strata' `fpc' `weight'
                = local sname    
                - local k : word count `gname' `sname'
                = local k : word count wvar 
                - if `k' > 1 {
                = if 1 > 1 {
                  di as err "too many names"
                  exit 103
                  }
                - if `k' == 0 {
                = if 1 == 0 {
                  di as err "name required"
                  exit 100
                  }
                - sreturn local gname `gname'
                = sreturn local gname wvar
                - sreturn local sname `sname'
                = sreturn local sname 
                -------------------------------------- end _svyset.CheckName ---
              - if "`s(sname)'" != "" {
              = if "" != "" {
                local name `s(sname)'
                CheckPosInt `i'
                }
              - else local name `s(gname)'
              = else local name wvar
              - if inlist("`name'", "wtype", "wvar", "wexp") {
              = if inlist("wvar", "wtype", "wvar", "wexp") {
              - local wtype : char _dta[_svy_wtype]
              - local wvar : char _dta[_svy_wvar]
              - if `"`wtype'`wvar'"' != "" {
              = if `"pweightasecwth"' != "" {
              - if `"`wtype'"' == "" {
              = if `"pweight"' == "" {
                di as err "error in svy settings; weight variable set without we
> ight type"
                exit 459
                }
              - if `"`wvar'"' == "" {
              = if `"asecwth"' == "" {
                "error in svy settings; weight type set without weight variable"
                exit 459
                }
              - CheckName `wtype'
              = CheckName pweight
                ------------------------------------ begin _svyset.CheckName ---
                - local 0 `", `0'"'
                = local 0 `", pweight"'
                - capture syntax [, WTYPE WEXP WVAR PWeight IWeight VCE MSE BRRw
> eight FAY BSRweight BSN JKRweight SDRweight SDRFPC DOF POSTStrata POSTWeight C
> ALMethod CALMOdel CALOpts SINGLEunit SU STRata FPC Weight STAGES stages_wt ]
                - if c(rc) {
                  di as err "invalid survey characteristic"
                  exit 198
                  }
                - local gname `stages' `stages_wt' `pweight' `iweight' `wtype' `
> wvar' `wexp' `vce' `mse' `brrweight' `fay' `bsrweight' `bsn' `jkrweight' `sdrw
> eight' `sdrfpc' `dof' `poststrata' `postweight' `calmethod' `calmodel' `calopt
> s' `singleunit'
                = local gname   pweight                    
                - local sname `su' `strata' `fpc' `weight'
                = local sname    
                - local k : word count `gname' `sname'
                = local k : word count pweight 
                - if `k' > 1 {
                = if 1 > 1 {
                  di as err "too many names"
                  exit 103
                  }
                - if `k' == 0 {
                = if 1 == 0 {
                  di as err "name required"
                  exit 100
                  }
                - sreturn local gname `gname'
                = sreturn local gname pweight
                - sreturn local sname `sname'
                = sreturn local sname 
                -------------------------------------- end _svyset.CheckName ---
              - local wtype `s(gname)' `s(sname)'
              = local wtype pweight 
              - if !inlist("`wtype'", "pweight", "iweight") {
              = if !inlist("pweight", "pweight", "iweight") {
                "error in svy settings; invalid weight type"
                exit 459
                }
              - CheckNumVar `wvar'
              = CheckNumVar asecwth
                ---------------------------------- begin _svyset.CheckNumVar ---
                - syntax varname(numeric)
                - sreturn local varname `varlist'
                = sreturn local varname asecwth
                ------------------------------------ end _svyset.CheckNumVar ---
              - local wvar `s(varname)'
              = local wvar asecwth
              - local wexp "= `wvar'"
              = local wexp "= asecwth"
              - return local wtype `"`wtype'"'
              = return local wtype `"pweight"'
              - return local wvar `"`wvar'"'
              = return local wvar `"asecwth"'
              - return local wexp `"`wexp'"'
              = return local wexp `"= asecwth"'
              - }
              - exit
              ---------------------------------------------- end _svyset.Get ---
            - exit
            ---------------------------------------------------- end _svyset ---
          - if `"`r(wvar)'"' != "" {
          = if `"asecwth"' != "" {
          - local wt `"[`r(wtype)'`r(wexp)']"'
          = local wt `"[pweight= asecwth]"'
          - return add
          - local is_set 1
          - }
          - _svyset get brr
            -------------------------------------------------- begin _svyset ---
            - version 9
            - gettoken cmd 0 : 0
            - if "`cmd'" == "clear" {
            = if "get" == "clear" {
              Clear `0'
              exit
              }
            - if "`cmd'" == "set" {
            = if "get" == "set" {
              Set `0'
              exit
              }
            - if "`cmd'" == "get" {
            = if "get" == "get" {
            - Get `0'
            = Get  brr
              -------------------------------------------- begin _svyset.Get ---
              - if `:word count `0'' > 2 {
              = if 1 > 2 {
                di as err "too many arguments"
                exit 103
                }
              - args name i
              - CheckName `name'
              = CheckName brr
                ------------------------------------ begin _svyset.CheckName ---
                - local 0 `", `0'"'
                = local 0 `", brr"'
                - capture syntax [, WTYPE WEXP WVAR PWeight IWeight VCE MSE BRRw
> eight FAY BSRweight BSN JKRweight SDRweight SDRFPC DOF POSTStrata POSTWeight C
> ALMethod CALMOdel CALOpts SINGLEunit SU STRata FPC Weight STAGES stages_wt ]
                - if c(rc) {
                  di as err "invalid survey characteristic"
                  exit 198
                  }
                - local gname `stages' `stages_wt' `pweight' `iweight' `wtype' `
> wvar' `wexp' `vce' `mse' `brrweight' `fay' `bsrweight' `bsn' `jkrweight' `sdrw
> eight' `sdrfpc' `dof' `poststrata' `postweight' `calmethod' `calmodel' `calopt
> s' `singleunit'
                = local gname          brrweight             
                - local sname `su' `strata' `fpc' `weight'
                = local sname    
                - local k : word count `gname' `sname'
                = local k : word count brrweight 
                - if `k' > 1 {
                = if 1 > 1 {
                  di as err "too many names"
                  exit 103
                  }
                - if `k' == 0 {
                = if 1 == 0 {
                  di as err "name required"
                  exit 100
                  }
                - sreturn local gname `gname'
                = sreturn local gname brrweight
                - sreturn local sname `sname'
                = sreturn local sname 
                -------------------------------------- end _svyset.CheckName ---
              - if "`s(sname)'" != "" {
              = if "" != "" {
                local name `s(sname)'
                CheckPosInt `i'
                }
              - else local name `s(gname)'
              = else local name brrweight
              - if inlist("`name'", "wtype", "wvar", "wexp") {
              = if inlist("brrweight", "wtype", "wvar", "wexp") {
                local wtype : char _dta[_svy_wtype]
                local wvar : char _dta[_svy_wvar]
                if `"`wtype'`wvar'"' != "" {
                if `"`wtype'"' == "" {
                di as err "error in svy settings; weight variable set without we
> ight type"
                exit 459
                }
                if `"`wvar'"' == "" {
                "error in svy settings; weight type set without weight variable"
                exit 459
                }
                CheckName `wtype'
                local wtype `s(gname)' `s(sname)'
                if !inlist("`wtype'", "pweight", "iweight") {
                "error in svy settings; invalid weight type"
                exit 459
                }
                CheckNumVar `wvar'
                local wvar `s(varname)'
                local wexp "= `wvar'"
                return local wtype `"`wtype'"'
                return local wvar `"`wvar'"'
                return local wexp `"`wexp'"'
                }
                exit
                }
              - if "`name'" == "stages" {
              = if "brrweight" == "stages" {
                local stages : char _dta[_svy_stages]
                capture CheckPosInt `stages'
                if c(rc) {
                return scalar stages = 0
                }
                return scalar stages = `stages'
                exit
                }
              - if "`name'" == "stages_wt" {
              = if "brrweight" == "stages_wt" {
                local stages_wt : char _dta[_svy_stages_wt]
                capture CheckPosInt `stages_wt'
                if c(rc) {
                return scalar stages_wt = 0
                }
                else {
                return scalar stages_wt = `stages_wt'
                }
                exit
                }
              - if inlist("`name'", "vce", "mse") {
              = if inlist("brrweight", "vce", "mse") {
                local vce : char _dta[_svy_vce]
                local mse : char _dta[_svy_mse]
                if `"`vce'`mse'"' != "" {
                _svy_check_vce `vce', `mse'
                return local vce `s(vce)'
                return local mse `s(mse)'
                }
                exit
                }
              - if "`name'" == "brrweight" {
              = if "brrweight" == "brrweight" {
              - local brr : char _dta[_svy_brrweight]
              - if `"`brr'"' != "" {
              = if `""' != "" {
                CheckNumVarlist `brr'
                return local brrweight `s(varlist)'
                }
              - exit
              ---------------------------------------------- end _svyset.Get ---
            - exit
            ---------------------------------------------------- end _svyset ---
          - if "`r(brrweight)'" != "" {
          = if "" != "" {
            local gsets `"`gsets' brrweight(`r(brrweight)')"'
            return add
            local is_set 1
            }
          - _svyset get fay
            -------------------------------------------------- begin _svyset ---
            - version 9
            - gettoken cmd 0 : 0
            - if "`cmd'" == "clear" {
            = if "get" == "clear" {
              Clear `0'
              exit
              }
            - if "`cmd'" == "set" {
            = if "get" == "set" {
              Set `0'
              exit
              }
            - if "`cmd'" == "get" {
            = if "get" == "get" {
            - Get `0'
            = Get  fay
              -------------------------------------------- begin _svyset.Get ---
              - if `:word count `0'' > 2 {
              = if 1 > 2 {
                di as err "too many arguments"
                exit 103
                }
              - args name i
              - CheckName `name'
              = CheckName fay
                ------------------------------------ begin _svyset.CheckName ---
                - local 0 `", `0'"'
                = local 0 `", fay"'
                - capture syntax [, WTYPE WEXP WVAR PWeight IWeight VCE MSE BRRw
> eight FAY BSRweight BSN JKRweight SDRweight SDRFPC DOF POSTStrata POSTWeight C
> ALMethod CALMOdel CALOpts SINGLEunit SU STRata FPC Weight STAGES stages_wt ]
                - if c(rc) {
                  di as err "invalid survey characteristic"
                  exit 198
                  }
                - local gname `stages' `stages_wt' `pweight' `iweight' `wtype' `
> wvar' `wexp' `vce' `mse' `brrweight' `fay' `bsrweight' `bsn' `jkrweight' `sdrw
> eight' `sdrfpc' `dof' `poststrata' `postweight' `calmethod' `calmodel' `calopt
> s' `singleunit'
                = local gname           fay            
                - local sname `su' `strata' `fpc' `weight'
                = local sname    
                - local k : word count `gname' `sname'
                = local k : word count fay 
                - if `k' > 1 {
                = if 1 > 1 {
                  di as err "too many names"
                  exit 103
                  }
                - if `k' == 0 {
                = if 1 == 0 {
                  di as err "name required"
                  exit 100
                  }
                - sreturn local gname `gname'
                = sreturn local gname fay
                - sreturn local sname `sname'
                = sreturn local sname 
                -------------------------------------- end _svyset.CheckName ---
              - if "`s(sname)'" != "" {
              = if "" != "" {
                local name `s(sname)'
                CheckPosInt `i'
                }
              - else local name `s(gname)'
              = else local name fay
              - if inlist("`name'", "wtype", "wvar", "wexp") {
              = if inlist("fay", "wtype", "wvar", "wexp") {
                local wtype : char _dta[_svy_wtype]
                local wvar : char _dta[_svy_wvar]
                if `"`wtype'`wvar'"' != "" {
                if `"`wtype'"' == "" {
                di as err "error in svy settings; weight variable set without we
> ight type"
                exit 459
                }
                if `"`wvar'"' == "" {
                "error in svy settings; weight type set without weight variable"
                exit 459
                }
                CheckName `wtype'
                local wtype `s(gname)' `s(sname)'
                if !inlist("`wtype'", "pweight", "iweight") {
                "error in svy settings; invalid weight type"
                exit 459
                }
                CheckNumVar `wvar'
                local wvar `s(varname)'
                local wexp "= `wvar'"
                return local wtype `"`wtype'"'
                return local wvar `"`wvar'"'
                return local wexp `"`wexp'"'
                }
                exit
                }
              - if "`name'" == "stages" {
              = if "fay" == "stages" {
                local stages : char _dta[_svy_stages]
                capture CheckPosInt `stages'
                if c(rc) {
                return scalar stages = 0
                }
                return scalar stages = `stages'
                exit
                }
              - if "`name'" == "stages_wt" {
              = if "fay" == "stages_wt" {
                local stages_wt : char _dta[_svy_stages_wt]
                capture CheckPosInt `stages_wt'
                if c(rc) {
                return scalar stages_wt = 0
                }
                else {
                return scalar stages_wt = `stages_wt'
                }
                exit
                }
              - if inlist("`name'", "vce", "mse") {
              = if inlist("fay", "vce", "mse") {
                local vce : char _dta[_svy_vce]
                local mse : char _dta[_svy_mse]
                if `"`vce'`mse'"' != "" {
                _svy_check_vce `vce', `mse'
                return local vce `s(vce)'
                return local mse `s(mse)'
                }
                exit
                }
              - if "`name'" == "brrweight" {
              = if "fay" == "brrweight" {
                local brr : char _dta[_svy_brrweight]
                if `"`brr'"' != "" {
                CheckNumVarlist `brr'
                return local brrweight `s(varlist)'
                }
                exit
                }
              - if "`name'" == "fay" {
              = if "fay" == "fay" {
              - local fay : char _dta[_svy_fay]
              - if `"`fay'"' != "" {
              = if `""' != "" {
                CheckFay `fay'
                return scalar fay = `s(value)'
                }
              - exit
              ---------------------------------------------- end _svyset.Get ---
            - exit
            ---------------------------------------------------- end _svyset ---
          - if !inlist("`r(fay)'", "", "0") {
          = if !inlist("", "", "0") {
            local gsets `"`gsets' fay(`r(fay)')"'
            return add
            local is_set 1
            }
          - _svyset get bsr
            -------------------------------------------------- begin _svyset ---
            - version 9
            - gettoken cmd 0 : 0
            - if "`cmd'" == "clear" {
            = if "get" == "clear" {
              Clear `0'
              exit
              }
            - if "`cmd'" == "set" {
            = if "get" == "set" {
              Set `0'
              exit
              }
            - if "`cmd'" == "get" {
            = if "get" == "get" {
            - Get `0'
            = Get  bsr
              -------------------------------------------- begin _svyset.Get ---
              - if `:word count `0'' > 2 {
              = if 1 > 2 {
                di as err "too many arguments"
                exit 103
                }
              - args name i
              - CheckName `name'
              = CheckName bsr
                ------------------------------------ begin _svyset.CheckName ---
                - local 0 `", `0'"'
                = local 0 `", bsr"'
                - capture syntax [, WTYPE WEXP WVAR PWeight IWeight VCE MSE BRRw
> eight FAY BSRweight BSN JKRweight SDRweight SDRFPC DOF POSTStrata POSTWeight C
> ALMethod CALMOdel CALOpts SINGLEunit SU STRata FPC Weight STAGES stages_wt ]
                - if c(rc) {
                  di as err "invalid survey characteristic"
                  exit 198
                  }
                - local gname `stages' `stages_wt' `pweight' `iweight' `wtype' `
> wvar' `wexp' `vce' `mse' `brrweight' `fay' `bsrweight' `bsn' `jkrweight' `sdrw
> eight' `sdrfpc' `dof' `poststrata' `postweight' `calmethod' `calmodel' `calopt
> s' `singleunit'
                = local gname            bsrweight           
                - local sname `su' `strata' `fpc' `weight'
                = local sname    
                - local k : word count `gname' `sname'
                = local k : word count bsrweight 
                - if `k' > 1 {
                = if 1 > 1 {
                  di as err "too many names"
                  exit 103
                  }
                - if `k' == 0 {
                = if 1 == 0 {
                  di as err "name required"
                  exit 100
                  }
                - sreturn local gname `gname'
                = sreturn local gname bsrweight
                - sreturn local sname `sname'
                = sreturn local sname 
                -------------------------------------- end _svyset.CheckName ---
              - if "`s(sname)'" != "" {
              = if "" != "" {
                local name `s(sname)'
                CheckPosInt `i'
                }
              - else local name `s(gname)'
              = else local name bsrweight
              - if inlist("`name'", "wtype", "wvar", "wexp") {
              = if inlist("bsrweight", "wtype", "wvar", "wexp") {
                local wtype : char _dta[_svy_wtype]
                local wvar : char _dta[_svy_wvar]
                if `"`wtype'`wvar'"' != "" {
                if `"`wtype'"' == "" {
                di as err "error in svy settings; weight variable set without we
> ight type"
                exit 459
                }
                if `"`wvar'"' == "" {
                "error in svy settings; weight type set without weight variable"
                exit 459
                }
                CheckName `wtype'
                local wtype `s(gname)' `s(sname)'
                if !inlist("`wtype'", "pweight", "iweight") {
                "error in svy settings; invalid weight type"
                exit 459
                }
                CheckNumVar `wvar'
                local wvar `s(varname)'
                local wexp "= `wvar'"
                return local wtype `"`wtype'"'
                return local wvar `"`wvar'"'
                return local wexp `"`wexp'"'
                }
                exit
                }
              - if "`name'" == "stages" {
              = if "bsrweight" == "stages" {
                local stages : char _dta[_svy_stages]
                capture CheckPosInt `stages'
                if c(rc) {
                return scalar stages = 0
                }
                return scalar stages = `stages'
                exit
                }
              - if "`name'" == "stages_wt" {
              = if "bsrweight" == "stages_wt" {
                local stages_wt : char _dta[_svy_stages_wt]
                capture CheckPosInt `stages_wt'
                if c(rc) {
                return scalar stages_wt = 0
                }
                else {
                return scalar stages_wt = `stages_wt'
                }
                exit
                }
              - if inlist("`name'", "vce", "mse") {
              = if inlist("bsrweight", "vce", "mse") {
                local vce : char _dta[_svy_vce]
                local mse : char _dta[_svy_mse]
                if `"`vce'`mse'"' != "" {
                _svy_check_vce `vce', `mse'
                return local vce `s(vce)'
                return local mse `s(mse)'
                }
                exit
                }
              - if "`name'" == "brrweight" {
              = if "bsrweight" == "brrweight" {
                local brr : char _dta[_svy_brrweight]
                if `"`brr'"' != "" {
                CheckNumVarlist `brr'
                return local brrweight `s(varlist)'
                }
                exit
                }
              - if "`name'" == "fay" {
              = if "bsrweight" == "fay" {
                local fay : char _dta[_svy_fay]
                if `"`fay'"' != "" {
                CheckFay `fay'
                return scalar fay = `s(value)'
                }
                exit
                }
              - if "`name'" == "bsrweight" {
              = if "bsrweight" == "bsrweight" {
              - local bsr : char _dta[_svy_bsrweight]
              - if `"`bsr'"' != "" {
              = if `""' != "" {
                CheckNumVarlist `bsr'
                return local bsrweight `s(varlist)'
                }
              - exit
              ---------------------------------------------- end _svyset.Get ---
            - exit
            ---------------------------------------------------- end _svyset ---
          - if "`r(bsrweight)'" != "" {
          = if "" != "" {
            local gsets `"`gsets' bsrweight(`r(bsrweight)')"'
            return add
            local is_set 1
            }
          - _svyset get bsn
            -------------------------------------------------- begin _svyset ---
            - version 9
            - gettoken cmd 0 : 0
            - if "`cmd'" == "clear" {
            = if "get" == "clear" {
              Clear `0'
              exit
              }
            - if "`cmd'" == "set" {
            = if "get" == "set" {
              Set `0'
              exit
              }
            - if "`cmd'" == "get" {
            = if "get" == "get" {
            - Get `0'
            = Get  bsn
              -------------------------------------------- begin _svyset.Get ---
              - if `:word count `0'' > 2 {
              = if 1 > 2 {
                di as err "too many arguments"
                exit 103
                }
              - args name i
              - CheckName `name'
              = CheckName bsn
                ------------------------------------ begin _svyset.CheckName ---
                - local 0 `", `0'"'
                = local 0 `", bsn"'
                - capture syntax [, WTYPE WEXP WVAR PWeight IWeight VCE MSE BRRw
> eight FAY BSRweight BSN JKRweight SDRweight SDRFPC DOF POSTStrata POSTWeight C
> ALMethod CALMOdel CALOpts SINGLEunit SU STRata FPC Weight STAGES stages_wt ]
                - if c(rc) {
                  di as err "invalid survey characteristic"
                  exit 198
                  }
                - local gname `stages' `stages_wt' `pweight' `iweight' `wtype' `
> wvar' `wexp' `vce' `mse' `brrweight' `fay' `bsrweight' `bsn' `jkrweight' `sdrw
> eight' `sdrfpc' `dof' `poststrata' `postweight' `calmethod' `calmodel' `calopt
> s' `singleunit'
                = local gname             bsn          
                - local sname `su' `strata' `fpc' `weight'
                = local sname    
                - local k : word count `gname' `sname'
                = local k : word count bsn 
                - if `k' > 1 {
                = if 1 > 1 {
                  di as err "too many names"
                  exit 103
                  }
                - if `k' == 0 {
                = if 1 == 0 {
                  di as err "name required"
                  exit 100
                  }
                - sreturn local gname `gname'
                = sreturn local gname bsn
                - sreturn local sname `sname'
                = sreturn local sname 
                -------------------------------------- end _svyset.CheckName ---
              - if "`s(sname)'" != "" {
              = if "" != "" {
                local name `s(sname)'
                CheckPosInt `i'
                }
              - else local name `s(gname)'
              = else local name bsn
              - if inlist("`name'", "wtype", "wvar", "wexp") {
              = if inlist("bsn", "wtype", "wvar", "wexp") {
                local wtype : char _dta[_svy_wtype]
                local wvar : char _dta[_svy_wvar]
                if `"`wtype'`wvar'"' != "" {
                if `"`wtype'"' == "" {
                di as err "error in svy settings; weight variable set without we
> ight type"
                exit 459
                }
                if `"`wvar'"' == "" {
                "error in svy settings; weight type set without weight variable"
                exit 459
                }
                CheckName `wtype'
                local wtype `s(gname)' `s(sname)'
                if !inlist("`wtype'", "pweight", "iweight") {
                "error in svy settings; invalid weight type"
                exit 459
                }
                CheckNumVar `wvar'
                local wvar `s(varname)'
                local wexp "= `wvar'"
                return local wtype `"`wtype'"'
                return local wvar `"`wvar'"'
                return local wexp `"`wexp'"'
                }
                exit
                }
              - if "`name'" == "stages" {
              = if "bsn" == "stages" {
                local stages : char _dta[_svy_stages]
                capture CheckPosInt `stages'
                if c(rc) {
                return scalar stages = 0
                }
                return scalar stages = `stages'
                exit
                }
              - if "`name'" == "stages_wt" {
              = if "bsn" == "stages_wt" {
                local stages_wt : char _dta[_svy_stages_wt]
                capture CheckPosInt `stages_wt'
                if c(rc) {
                return scalar stages_wt = 0
                }
                else {
                return scalar stages_wt = `stages_wt'
                }
                exit
                }
              - if inlist("`name'", "vce", "mse") {
              = if inlist("bsn", "vce", "mse") {
                local vce : char _dta[_svy_vce]
                local mse : char _dta[_svy_mse]
                if `"`vce'`mse'"' != "" {
                _svy_check_vce `vce', `mse'
                return local vce `s(vce)'
                return local mse `s(mse)'
                }
                exit
                }
              - if "`name'" == "brrweight" {
              = if "bsn" == "brrweight" {
                local brr : char _dta[_svy_brrweight]
                if `"`brr'"' != "" {
                CheckNumVarlist `brr'
                return local brrweight `s(varlist)'
                }
                exit
                }
              - if "`name'" == "fay" {
              = if "bsn" == "fay" {
                local fay : char _dta[_svy_fay]
                if `"`fay'"' != "" {
                CheckFay `fay'
                return scalar fay = `s(value)'
                }
                exit
                }
              - if "`name'" == "bsrweight" {
              = if "bsn" == "bsrweight" {
                local bsr : char _dta[_svy_bsrweight]
                if `"`bsr'"' != "" {
                CheckNumVarlist `bsr'
                return local bsrweight `s(varlist)'
                }
                exit
                }
              - if "`name'" == "bsn" {
              = if "bsn" == "bsn" {
              - local bsn : char _dta[_svy_bsn]
              - if `"`bsn'"' != "" {
              = if `""' != "" {
                CheckBSN `bsn'
                return scalar bsn = `s(value)'
                }
              - exit
              ---------------------------------------------- end _svyset.Get ---
            - exit
            ---------------------------------------------------- end _svyset ---
          - if !inlist("`r(bsn)'", "", "1") {
          = if !inlist("", "", "1") {
            local gsets `"`gsets' bsn(`r(bsn)')"'
            return add
            local is_set 1
            }
          - _svyset get jkr
            -------------------------------------------------- begin _svyset ---
            - version 9
            - gettoken cmd 0 : 0
            - if "`cmd'" == "clear" {
            = if "get" == "clear" {
              Clear `0'
              exit
              }
            - if "`cmd'" == "set" {
            = if "get" == "set" {
              Set `0'
              exit
              }
            - if "`cmd'" == "get" {
            = if "get" == "get" {
            - Get `0'
            = Get  jkr
              -------------------------------------------- begin _svyset.Get ---
              - if `:word count `0'' > 2 {
              = if 1 > 2 {
                di as err "too many arguments"
                exit 103
                }
              - args name i
              - CheckName `name'
              = CheckName jkr
                ------------------------------------ begin _svyset.CheckName ---
                - local 0 `", `0'"'
                = local 0 `", jkr"'
                - capture syntax [, WTYPE WEXP WVAR PWeight IWeight VCE MSE BRRw
> eight FAY BSRweight BSN JKRweight SDRweight SDRFPC DOF POSTStrata POSTWeight C
> ALMethod CALMOdel CALOpts SINGLEunit SU STRata FPC Weight STAGES stages_wt ]
                - if c(rc) {
                  di as err "invalid survey characteristic"
                  exit 198
                  }
                - local gname `stages' `stages_wt' `pweight' `iweight' `wtype' `
> wvar' `wexp' `vce' `mse' `brrweight' `fay' `bsrweight' `bsn' `jkrweight' `sdrw
> eight' `sdrfpc' `dof' `poststrata' `postweight' `calmethod' `calmodel' `calopt
> s' `singleunit'
                = local gname              jkrweight         
                - local sname `su' `strata' `fpc' `weight'
                = local sname    
                - local k : word count `gname' `sname'
                = local k : word count jkrweight 
                - if `k' > 1 {
                = if 1 > 1 {
                  di as err "too many names"
                  exit 103
                  }
                - if `k' == 0 {
                = if 1 == 0 {
                  di as err "name required"
                  exit 100
                  }
                - sreturn local gname `gname'
                = sreturn local gname jkrweight
                - sreturn local sname `sname'
                = sreturn local sname 
                -------------------------------------- end _svyset.CheckName ---
              - if "`s(sname)'" != "" {
              = if "" != "" {
                local name `s(sname)'
                CheckPosInt `i'
                }
              - else local name `s(gname)'
              = else local name jkrweight
              - if inlist("`name'", "wtype", "wvar", "wexp") {
              = if inlist("jkrweight", "wtype", "wvar", "wexp") {
                local wtype : char _dta[_svy_wtype]
                local wvar : char _dta[_svy_wvar]
                if `"`wtype'`wvar'"' != "" {
                if `"`wtype'"' == "" {
                di as err "error in svy settings; weight variable set without we
> ight type"
                exit 459
                }
                if `"`wvar'"' == "" {
                "error in svy settings; weight type set without weight variable"
                exit 459
                }
                CheckName `wtype'
                local wtype `s(gname)' `s(sname)'
                if !inlist("`wtype'", "pweight", "iweight") {
                "error in svy settings; invalid weight type"
                exit 459
                }
                CheckNumVar `wvar'
                local wvar `s(varname)'
                local wexp "= `wvar'"
                return local wtype `"`wtype'"'
                return local wvar `"`wvar'"'
                return local wexp `"`wexp'"'
                }
                exit
                }
              - if "`name'" == "stages" {
              = if "jkrweight" == "stages" {
                local stages : char _dta[_svy_stages]
                capture CheckPosInt `stages'
                if c(rc) {
                return scalar stages = 0
                }
                return scalar stages = `stages'
                exit
                }
              - if "`name'" == "stages_wt" {
              = if "jkrweight" == "stages_wt" {
                local stages_wt : char _dta[_svy_stages_wt]
                capture CheckPosInt `stages_wt'
                if c(rc) {
                return scalar stages_wt = 0
                }
                else {
                return scalar stages_wt = `stages_wt'
                }
                exit
                }
              - if inlist("`name'", "vce", "mse") {
              = if inlist("jkrweight", "vce", "mse") {
                local vce : char _dta[_svy_vce]
                local mse : char _dta[_svy_mse]
                if `"`vce'`mse'"' != "" {
                _svy_check_vce `vce', `mse'
                return local vce `s(vce)'
                return local mse `s(mse)'
                }
                exit
                }
              - if "`name'" == "brrweight" {
              = if "jkrweight" == "brrweight" {
                local brr : char _dta[_svy_brrweight]
                if `"`brr'"' != "" {
                CheckNumVarlist `brr'
                return local brrweight `s(varlist)'
                }
                exit
                }
              - if "`name'" == "fay" {
              = if "jkrweight" == "fay" {
                local fay : char _dta[_svy_fay]
                if `"`fay'"' != "" {
                CheckFay `fay'
                return scalar fay = `s(value)'
                }
                exit
                }
              - if "`name'" == "bsrweight" {
              = if "jkrweight" == "bsrweight" {
                local bsr : char _dta[_svy_bsrweight]
                if `"`bsr'"' != "" {
                CheckNumVarlist `bsr'
                return local bsrweight `s(varlist)'
                }
                exit
                }
              - if "`name'" == "bsn" {
              = if "jkrweight" == "bsn" {
                local bsn : char _dta[_svy_bsn]
                if `"`bsn'"' != "" {
                CheckBSN `bsn'
                return scalar bsn = `s(value)'
                }
                exit
                }
              - if "`name'" == "jkrweight" {
              = if "jkrweight" == "jkrweight" {
              - local jkr : char _dta[_svy_jkrweight]
              - if `"`jkr'"' != "" {
              = if `""' != "" {
                CheckNumVarlist `jkr'
                return local jkrweight `s(varlist)'
                }
              - exit
              ---------------------------------------------- end _svyset.Get ---
            - exit
            ---------------------------------------------------- end _svyset ---
          - if "`r(jkrweight)'" != "" {
          = if "" != "" {
            local gsets `"`gsets' jkrweight(`r(jkrweight)')"'
            return add
            local is_set 1
            }
          - _svyset get sdr
            -------------------------------------------------- begin _svyset ---
            - version 9
            - gettoken cmd 0 : 0
            - if "`cmd'" == "clear" {
            = if "get" == "clear" {
              Clear `0'
              exit
              }
            - if "`cmd'" == "set" {
            = if "get" == "set" {
              Set `0'
              exit
              }
            - if "`cmd'" == "get" {
            = if "get" == "get" {
            - Get `0'
            = Get  sdr
              -------------------------------------------- begin _svyset.Get ---
              - if `:word count `0'' > 2 {
              = if 1 > 2 {
                di as err "too many arguments"
                exit 103
                }
              - args name i
              - CheckName `name'
              = CheckName sdr
                ------------------------------------ begin _svyset.CheckName ---
                - local 0 `", `0'"'
                = local 0 `", sdr"'
                - capture syntax [, WTYPE WEXP WVAR PWeight IWeight VCE MSE BRRw
> eight FAY BSRweight BSN JKRweight SDRweight SDRFPC DOF POSTStrata POSTWeight C
> ALMethod CALMOdel CALOpts SINGLEunit SU STRata FPC Weight STAGES stages_wt ]
                - if c(rc) {
                  di as err "invalid survey characteristic"
                  exit 198
                  }
                - local gname `stages' `stages_wt' `pweight' `iweight' `wtype' `
> wvar' `wexp' `vce' `mse' `brrweight' `fay' `bsrweight' `bsn' `jkrweight' `sdrw
> eight' `sdrfpc' `dof' `poststrata' `postweight' `calmethod' `calmodel' `calopt
> s' `singleunit'
                = local gname               sdrweight        
                - local sname `su' `strata' `fpc' `weight'
                = local sname    
                - local k : word count `gname' `sname'
                = local k : word count sdrweight 
                - if `k' > 1 {
                = if 1 > 1 {
                  di as err "too many names"
                  exit 103
                  }
                - if `k' == 0 {
                = if 1 == 0 {
                  di as err "name required"
                  exit 100
                  }
                - sreturn local gname `gname'
                = sreturn local gname sdrweight
                - sreturn local sname `sname'
                = sreturn local sname 
                -------------------------------------- end _svyset.CheckName ---
              - if "`s(sname)'" != "" {
              = if "" != "" {
                local name `s(sname)'
                CheckPosInt `i'
                }
              - else local name `s(gname)'
              = else local name sdrweight
              - if inlist("`name'", "wtype", "wvar", "wexp") {
              = if inlist("sdrweight", "wtype", "wvar", "wexp") {
                local wtype : char _dta[_svy_wtype]
                local wvar : char _dta[_svy_wvar]
                if `"`wtype'`wvar'"' != "" {
                if `"`wtype'"' == "" {
                di as err "error in svy settings; weight variable set without we
> ight type"
                exit 459
                }
                if `"`wvar'"' == "" {
                "error in svy settings; weight type set without weight variable"
                exit 459
                }
                CheckName `wtype'
                local wtype `s(gname)' `s(sname)'
                if !inlist("`wtype'", "pweight", "iweight") {
                "error in svy settings; invalid weight type"
                exit 459
                }
                CheckNumVar `wvar'
                local wvar `s(varname)'
                local wexp "= `wvar'"
                return local wtype `"`wtype'"'
                return local wvar `"`wvar'"'
                return local wexp `"`wexp'"'
                }
                exit
                }
              - if "`name'" == "stages" {
              = if "sdrweight" == "stages" {
                local stages : char _dta[_svy_stages]
                capture CheckPosInt `stages'
                if c(rc) {
                return scalar stages = 0
                }
                return scalar stages = `stages'
                exit
                }
              - if "`name'" == "stages_wt" {
              = if "sdrweight" == "stages_wt" {
                local stages_wt : char _dta[_svy_stages_wt]
                capture CheckPosInt `stages_wt'
                if c(rc) {
                return scalar stages_wt = 0
                }
                else {
                return scalar stages_wt = `stages_wt'
                }
                exit
                }
              - if inlist("`name'", "vce", "mse") {
              = if inlist("sdrweight", "vce", "mse") {
                local vce : char _dta[_svy_vce]
                local mse : char _dta[_svy_mse]
                if `"`vce'`mse'"' != "" {
                _svy_check_vce `vce', `mse'
                return local vce `s(vce)'
                return local mse `s(mse)'
                }
                exit
                }
              - if "`name'" == "brrweight" {
              = if "sdrweight" == "brrweight" {
                local brr : char _dta[_svy_brrweight]
                if `"`brr'"' != "" {
                CheckNumVarlist `brr'
                return local brrweight `s(varlist)'
                }
                exit
                }
              - if "`name'" == "fay" {
              = if "sdrweight" == "fay" {
                local fay : char _dta[_svy_fay]
                if `"`fay'"' != "" {
                CheckFay `fay'
                return scalar fay = `s(value)'
                }
                exit
                }
              - if "`name'" == "bsrweight" {
              = if "sdrweight" == "bsrweight" {
                local bsr : char _dta[_svy_bsrweight]
                if `"`bsr'"' != "" {
                CheckNumVarlist `bsr'
                return local bsrweight `s(varlist)'
                }
                exit
                }
              - if "`name'" == "bsn" {
              = if "sdrweight" == "bsn" {
                local bsn : char _dta[_svy_bsn]
                if `"`bsn'"' != "" {
                CheckBSN `bsn'
                return scalar bsn = `s(value)'
                }
                exit
                }
              - if "`name'" == "jkrweight" {
              = if "sdrweight" == "jkrweight" {
                local jkr : char _dta[_svy_jkrweight]
                if `"`jkr'"' != "" {
                CheckNumVarlist `jkr'
                return local jkrweight `s(varlist)'
                }
                exit
                }
              - if "`name'" == "sdrweight" {
              = if "sdrweight" == "sdrweight" {
              - local sdr : char _dta[_svy_sdrweight]
              - if `"`sdr'"' != "" {
              = if `""' != "" {
                CheckNumVarlist `sdr'
                return local sdrweight `s(varlist)'
                local fpc : char _dta[_svy_sdrfpc]
                if `"`fpc'"' != "" {
                return local sdrfpc `"`fpc'"'
                }
                }
              - exit
              ---------------------------------------------- end _svyset.Get ---
            - exit
            ---------------------------------------------------- end _svyset ---
          - if "`r(sdrweight)'" != "" {
          = if "" != "" {
            local sdrw "`r(sdrweight)'"
            if "`r(sdrfpc)'" != "" {
            local fpc ", fpc(`r(sdrfpc)')"
            }
            local gsets `"`gsets' sdrweight(`sdrw'`fpc')"'
            return add
            local is_set 1
            }
          - _svyset get dof
            -------------------------------------------------- begin _svyset ---
            - version 9
            - gettoken cmd 0 : 0
            - if "`cmd'" == "clear" {
            = if "get" == "clear" {
              Clear `0'
              exit
              }
            - if "`cmd'" == "set" {
            = if "get" == "set" {
              Set `0'
              exit
              }
            - if "`cmd'" == "get" {
            = if "get" == "get" {
            - Get `0'
            = Get  dof
              -------------------------------------------- begin _svyset.Get ---
              - if `:word count `0'' > 2 {
              = if 1 > 2 {
                di as err "too many arguments"
                exit 103
                }
              - args name i
              - CheckName `name'
              = CheckName dof
                ------------------------------------ begin _svyset.CheckName ---
                - local 0 `", `0'"'
                = local 0 `", dof"'
                - capture syntax [, WTYPE WEXP WVAR PWeight IWeight VCE MSE BRRw
> eight FAY BSRweight BSN JKRweight SDRweight SDRFPC DOF POSTStrata POSTWeight C
> ALMethod CALMOdel CALOpts SINGLEunit SU STRata FPC Weight STAGES stages_wt ]
                - if c(rc) {
                  di as err "invalid survey characteristic"
                  exit 198
                  }
                - local gname `stages' `stages_wt' `pweight' `iweight' `wtype' `
> wvar' `wexp' `vce' `mse' `brrweight' `fay' `bsrweight' `bsn' `jkrweight' `sdrw
> eight' `sdrfpc' `dof' `poststrata' `postweight' `calmethod' `calmodel' `calopt
> s' `singleunit'
                = local gname                 dof      
                - local sname `su' `strata' `fpc' `weight'
                = local sname    
                - local k : word count `gname' `sname'
                = local k : word count dof 
                - if `k' > 1 {
                = if 1 > 1 {
                  di as err "too many names"
                  exit 103
                  }
                - if `k' == 0 {
                = if 1 == 0 {
                  di as err "name required"
                  exit 100
                  }
                - sreturn local gname `gname'
                = sreturn local gname dof
                - sreturn local sname `sname'
                = sreturn local sname 
                -------------------------------------- end _svyset.CheckName ---
              - if "`s(sname)'" != "" {
              = if "" != "" {
                local name `s(sname)'
                CheckPosInt `i'
                }
              - else local name `s(gname)'
              = else local name dof
              - if inlist("`name'", "wtype", "wvar", "wexp") {
              = if inlist("dof", "wtype", "wvar", "wexp") {
                local wtype : char _dta[_svy_wtype]
                local wvar : char _dta[_svy_wvar]
                if `"`wtype'`wvar'"' != "" {
                if `"`wtype'"' == "" {
                di as err "error in svy settings; weight variable set without we
> ight type"
                exit 459
                }
                if `"`wvar'"' == "" {
                "error in svy settings; weight type set without weight variable"
                exit 459
                }
                CheckName `wtype'
                local wtype `s(gname)' `s(sname)'
                if !inlist("`wtype'", "pweight", "iweight") {
                "error in svy settings; invalid weight type"
                exit 459
                }
                CheckNumVar `wvar'
                local wvar `s(varname)'
                local wexp "= `wvar'"
                return local wtype `"`wtype'"'
                return local wvar `"`wvar'"'
                return local wexp `"`wexp'"'
                }
                exit
                }
              - if "`name'" == "stages" {
              = if "dof" == "stages" {
                local stages : char _dta[_svy_stages]
                capture CheckPosInt `stages'
                if c(rc) {
                return scalar stages = 0
                }
                return scalar stages = `stages'
                exit
                }
              - if "`name'" == "stages_wt" {
              = if "dof" == "stages_wt" {
                local stages_wt : char _dta[_svy_stages_wt]
                capture CheckPosInt `stages_wt'
                if c(rc) {
                return scalar stages_wt = 0
                }
                else {
                return scalar stages_wt = `stages_wt'
                }
                exit
                }
              - if inlist("`name'", "vce", "mse") {
              = if inlist("dof", "vce", "mse") {
                local vce : char _dta[_svy_vce]
                local mse : char _dta[_svy_mse]
                if `"`vce'`mse'"' != "" {
                _svy_check_vce `vce', `mse'
                return local vce `s(vce)'
                return local mse `s(mse)'
                }
                exit
                }
              - if "`name'" == "brrweight" {
              = if "dof" == "brrweight" {
                local brr : char _dta[_svy_brrweight]
                if `"`brr'"' != "" {
                CheckNumVarlist `brr'
                return local brrweight `s(varlist)'
                }
                exit
                }
              - if "`name'" == "fay" {
              = if "dof" == "fay" {
                local fay : char _dta[_svy_fay]
                if `"`fay'"' != "" {
                CheckFay `fay'
                return scalar fay = `s(value)'
                }
                exit
                }
              - if "`name'" == "bsrweight" {
              = if "dof" == "bsrweight" {
                local bsr : char _dta[_svy_bsrweight]
                if `"`bsr'"' != "" {
                CheckNumVarlist `bsr'
                return local bsrweight `s(varlist)'
                }
                exit
                }
              - if "`name'" == "bsn" {
              = if "dof" == "bsn" {
                local bsn : char _dta[_svy_bsn]
                if `"`bsn'"' != "" {
                CheckBSN `bsn'
                return scalar bsn = `s(value)'
                }
                exit
                }
              - if "`name'" == "jkrweight" {
              = if "dof" == "jkrweight" {
                local jkr : char _dta[_svy_jkrweight]
                if `"`jkr'"' != "" {
                CheckNumVarlist `jkr'
                return local jkrweight `s(varlist)'
                }
                exit
                }
              - if "`name'" == "sdrweight" {
              = if "dof" == "sdrweight" {
                local sdr : char _dta[_svy_sdrweight]
                if `"`sdr'"' != "" {
                CheckNumVarlist `sdr'
                return local sdrweight `s(varlist)'
                local fpc : char _dta[_svy_sdrfpc]
                if `"`fpc'"' != "" {
                return local sdrfpc `"`fpc'"'
                }
                }
                exit
                }
              - if "`name'" == "dof" {
              = if "dof" == "dof" {
              - local dof : char _dta[_svy_dof]
              - if `"`dof'"' != "" {
              = if `""' != "" {
                CheckDOF `dof'
                return scalar dof = `s(value)'
                }
              - exit
              ---------------------------------------------- end _svyset.Get ---
            - exit
            ---------------------------------------------------- end _svyset ---
          - if "`r(dof)'" != "" {
          = if "" != "" {
            local gsets `"`gsets' dof(`r(dof)')"'
            return add
            local is_set 1
            }
          - _svyset get posts
            -------------------------------------------------- begin _svyset ---
            - version 9
            - gettoken cmd 0 : 0
            - if "`cmd'" == "clear" {
            = if "get" == "clear" {
              Clear `0'
              exit
              }
            - if "`cmd'" == "set" {
            = if "get" == "set" {
              Set `0'
              exit
              }
            - if "`cmd'" == "get" {
            = if "get" == "get" {
            - Get `0'
            = Get  posts
              -------------------------------------------- begin _svyset.Get ---
              - if `:word count `0'' > 2 {
              = if 1 > 2 {
                di as err "too many arguments"
                exit 103
                }
              - args name i
              - CheckName `name'
              = CheckName posts
                ------------------------------------ begin _svyset.CheckName ---
                - local 0 `", `0'"'
                = local 0 `", posts"'
                - capture syntax [, WTYPE WEXP WVAR PWeight IWeight VCE MSE BRRw
> eight FAY BSRweight BSN JKRweight SDRweight SDRFPC DOF POSTStrata POSTWeight C
> ALMethod CALMOdel CALOpts SINGLEunit SU STRata FPC Weight STAGES stages_wt ]
                - if c(rc) {
                  di as err "invalid survey characteristic"
                  exit 198
                  }
                - local gname `stages' `stages_wt' `pweight' `iweight' `wtype' `
> wvar' `wexp' `vce' `mse' `brrweight' `fay' `bsrweight' `bsn' `jkrweight' `sdrw
> eight' `sdrfpc' `dof' `poststrata' `postweight' `calmethod' `calmodel' `calopt
> s' `singleunit'
                = local gname                  poststrata     
                - local sname `su' `strata' `fpc' `weight'
                = local sname    
                - local k : word count `gname' `sname'
                = local k : word count poststrata 
                - if `k' > 1 {
                = if 1 > 1 {
                  di as err "too many names"
                  exit 103
                  }
                - if `k' == 0 {
                = if 1 == 0 {
                  di as err "name required"
                  exit 100
                  }
                - sreturn local gname `gname'
                = sreturn local gname poststrata
                - sreturn local sname `sname'
                = sreturn local sname 
                -------------------------------------- end _svyset.CheckName ---
              - if "`s(sname)'" != "" {
              = if "" != "" {
                local name `s(sname)'
                CheckPosInt `i'
                }
              - else local name `s(gname)'
              = else local name poststrata
              - if inlist("`name'", "wtype", "wvar", "wexp") {
              = if inlist("poststrata", "wtype", "wvar", "wexp") {
                local wtype : char _dta[_svy_wtype]
                local wvar : char _dta[_svy_wvar]
                if `"`wtype'`wvar'"' != "" {
                if `"`wtype'"' == "" {
                di as err "error in svy settings; weight variable set without we
> ight type"
                exit 459
                }
                if `"`wvar'"' == "" {
                "error in svy settings; weight type set without weight variable"
                exit 459
                }
                CheckName `wtype'
                local wtype `s(gname)' `s(sname)'
                if !inlist("`wtype'", "pweight", "iweight") {
                "error in svy settings; invalid weight type"
                exit 459
                }
                CheckNumVar `wvar'
                local wvar `s(varname)'
                local wexp "= `wvar'"
                return local wtype `"`wtype'"'
                return local wvar `"`wvar'"'
                return local wexp `"`wexp'"'
                }
                exit
                }
              - if "`name'" == "stages" {
              = if "poststrata" == "stages" {
                local stages : char _dta[_svy_stages]
                capture CheckPosInt `stages'
                if c(rc) {
                return scalar stages = 0
                }
                return scalar stages = `stages'
                exit
                }
              - if "`name'" == "stages_wt" {
              = if "poststrata" == "stages_wt" {
                local stages_wt : char _dta[_svy_stages_wt]
                capture CheckPosInt `stages_wt'
                if c(rc) {
                return scalar stages_wt = 0
                }
                else {
                return scalar stages_wt = `stages_wt'
                }
                exit
                }
              - if inlist("`name'", "vce", "mse") {
              = if inlist("poststrata", "vce", "mse") {
                local vce : char _dta[_svy_vce]
                local mse : char _dta[_svy_mse]
                if `"`vce'`mse'"' != "" {
                _svy_check_vce `vce', `mse'
                return local vce `s(vce)'
                return local mse `s(mse)'
                }
                exit
                }
              - if "`name'" == "brrweight" {
              = if "poststrata" == "brrweight" {
                local brr : char _dta[_svy_brrweight]
                if `"`brr'"' != "" {
                CheckNumVarlist `brr'
                return local brrweight `s(varlist)'
                }
                exit
                }
              - if "`name'" == "fay" {
              = if "poststrata" == "fay" {
                local fay : char _dta[_svy_fay]
                if `"`fay'"' != "" {
                CheckFay `fay'
                return scalar fay = `s(value)'
                }
                exit
                }
              - if "`name'" == "bsrweight" {
              = if "poststrata" == "bsrweight" {
                local bsr : char _dta[_svy_bsrweight]
                if `"`bsr'"' != "" {
                CheckNumVarlist `bsr'
                return local bsrweight `s(varlist)'
                }
                exit
                }
              - if "`name'" == "bsn" {
              = if "poststrata" == "bsn" {
                local bsn : char _dta[_svy_bsn]
                if `"`bsn'"' != "" {
                CheckBSN `bsn'
                return scalar bsn = `s(value)'
                }
                exit
                }
              - if "`name'" == "jkrweight" {
              = if "poststrata" == "jkrweight" {
                local jkr : char _dta[_svy_jkrweight]
                if `"`jkr'"' != "" {
                CheckNumVarlist `jkr'
                return local jkrweight `s(varlist)'
                }
                exit
                }
              - if "`name'" == "sdrweight" {
              = if "poststrata" == "sdrweight" {
                local sdr : char _dta[_svy_sdrweight]
                if `"`sdr'"' != "" {
                CheckNumVarlist `sdr'
                return local sdrweight `s(varlist)'
                local fpc : char _dta[_svy_sdrfpc]
                if `"`fpc'"' != "" {
                return local sdrfpc `"`fpc'"'
                }
                }
                exit
                }
              - if "`name'" == "dof" {
              = if "poststrata" == "dof" {
                local dof : char _dta[_svy_dof]
                if `"`dof'"' != "" {
                CheckDOF `dof'
                return scalar dof = `s(value)'
                }
                exit
                }
              - if "`name'" == "poststrata" {
              = if "poststrata" == "poststrata" {
              - local poststrata : char _dta[_svy_poststrata]
              - local postweight : char _dta[_svy_postweight]
              - if `"`poststrata'`postweight'"' != "" {
              = if `""' != "" {
                if "`postweight'" == "" {
                di as err "error in svy settings; poststrata set without postwei
> ght"
                exit 459
                }
                if "`poststrata'" == "" {
                di as err "error in svy settings; postweight set without poststr
> ata"
                exit 459
                }
                CheckVar `poststrata'
                return local poststrata `s(varname)'
                CheckPostW `postweight'
                return local postweight `s(varname)'
                }
              - exit
              ---------------------------------------------- end _svyset.Get ---
            - exit
            ---------------------------------------------------- end _svyset ---
          - if `"`r(poststrata)'`r(postweight)'"' != "" {
          = if `""' != "" {
            local gsets `"`gsets' poststrata(`r(poststrata)')"'
            local gsets `"`gsets' postweight(`r(postweight)')"'
            return add
            local is_set 1
            }
          - _svyset get calmethod
            -------------------------------------------------- begin _svyset ---
            - version 9
            - gettoken cmd 0 : 0
            - if "`cmd'" == "clear" {
            = if "get" == "clear" {
              Clear `0'
              exit
              }
            - if "`cmd'" == "set" {
            = if "get" == "set" {
              Set `0'
              exit
              }
            - if "`cmd'" == "get" {
            = if "get" == "get" {
            - Get `0'
            = Get  calmethod
              -------------------------------------------- begin _svyset.Get ---
              - if `:word count `0'' > 2 {
              = if 1 > 2 {
                di as err "too many arguments"
                exit 103
                }
              - args name i
              - CheckName `name'
              = CheckName calmethod
                ------------------------------------ begin _svyset.CheckName ---
                - local 0 `", `0'"'
                = local 0 `", calmethod"'
                - capture syntax [, WTYPE WEXP WVAR PWeight IWeight VCE MSE BRRw
> eight FAY BSRweight BSN JKRweight SDRweight SDRFPC DOF POSTStrata POSTWeight C
> ALMethod CALMOdel CALOpts SINGLEunit SU STRata FPC Weight STAGES stages_wt ]
                - if c(rc) {
                  di as err "invalid survey characteristic"
                  exit 198
                  }
                - local gname `stages' `stages_wt' `pweight' `iweight' `wtype' `
> wvar' `wexp' `vce' `mse' `brrweight' `fay' `bsrweight' `bsn' `jkrweight' `sdrw
> eight' `sdrfpc' `dof' `poststrata' `postweight' `calmethod' `calmodel' `calopt
> s' `singleunit'
                = local gname                    calmethod   
                - local sname `su' `strata' `fpc' `weight'
                = local sname    
                - local k : word count `gname' `sname'
                = local k : word count calmethod 
                - if `k' > 1 {
                = if 1 > 1 {
                  di as err "too many names"
                  exit 103
                  }
                - if `k' == 0 {
                = if 1 == 0 {
                  di as err "name required"
                  exit 100
                  }
                - sreturn local gname `gname'
                = sreturn local gname calmethod
                - sreturn local sname `sname'
                = sreturn local sname 
                -------------------------------------- end _svyset.CheckName ---
              - if "`s(sname)'" != "" {
              = if "" != "" {
                local name `s(sname)'
                CheckPosInt `i'
                }
              - else local name `s(gname)'
              = else local name calmethod
              - if inlist("`name'", "wtype", "wvar", "wexp") {
              = if inlist("calmethod", "wtype", "wvar", "wexp") {
                local wtype : char _dta[_svy_wtype]
                local wvar : char _dta[_svy_wvar]
                if `"`wtype'`wvar'"' != "" {
                if `"`wtype'"' == "" {
                di as err "error in svy settings; weight variable set without we
> ight type"
                exit 459
                }
                if `"`wvar'"' == "" {
                "error in svy settings; weight type set without weight variable"
                exit 459
                }
                CheckName `wtype'
                local wtype `s(gname)' `s(sname)'
                if !inlist("`wtype'", "pweight", "iweight") {
                "error in svy settings; invalid weight type"
                exit 459
                }
                CheckNumVar `wvar'
                local wvar `s(varname)'
                local wexp "= `wvar'"
                return local wtype `"`wtype'"'
                return local wvar `"`wvar'"'
                return local wexp `"`wexp'"'
                }
                exit
                }
              - if "`name'" == "stages" {
              = if "calmethod" == "stages" {
                local stages : char _dta[_svy_stages]
                capture CheckPosInt `stages'
                if c(rc) {
                return scalar stages = 0
                }
                return scalar stages = `stages'
                exit
                }
              - if "`name'" == "stages_wt" {
              = if "calmethod" == "stages_wt" {
                local stages_wt : char _dta[_svy_stages_wt]
                capture CheckPosInt `stages_wt'
                if c(rc) {
                return scalar stages_wt = 0
                }
                else {
                return scalar stages_wt = `stages_wt'
                }
                exit
                }
              - if inlist("`name'", "vce", "mse") {
              = if inlist("calmethod", "vce", "mse") {
                local vce : char _dta[_svy_vce]
                local mse : char _dta[_svy_mse]
                if `"`vce'`mse'"' != "" {
                _svy_check_vce `vce', `mse'
                return local vce `s(vce)'
                return local mse `s(mse)'
                }
                exit
                }
              - if "`name'" == "brrweight" {
              = if "calmethod" == "brrweight" {
                local brr : char _dta[_svy_brrweight]
                if `"`brr'"' != "" {
                CheckNumVarlist `brr'
                return local brrweight `s(varlist)'
                }
                exit
                }
              - if "`name'" == "fay" {
              = if "calmethod" == "fay" {
                local fay : char _dta[_svy_fay]
                if `"`fay'"' != "" {
                CheckFay `fay'
                return scalar fay = `s(value)'
                }
                exit
                }
              - if "`name'" == "bsrweight" {
              = if "calmethod" == "bsrweight" {
                local bsr : char _dta[_svy_bsrweight]
                if `"`bsr'"' != "" {
                CheckNumVarlist `bsr'
                return local bsrweight `s(varlist)'
                }
                exit
                }
              - if "`name'" == "bsn" {
              = if "calmethod" == "bsn" {
                local bsn : char _dta[_svy_bsn]
                if `"`bsn'"' != "" {
                CheckBSN `bsn'
                return scalar bsn = `s(value)'
                }
                exit
                }
              - if "`name'" == "jkrweight" {
              = if "calmethod" == "jkrweight" {
                local jkr : char _dta[_svy_jkrweight]
                if `"`jkr'"' != "" {
                CheckNumVarlist `jkr'
                return local jkrweight `s(varlist)'
                }
                exit
                }
              - if "`name'" == "sdrweight" {
              = if "calmethod" == "sdrweight" {
                local sdr : char _dta[_svy_sdrweight]
                if `"`sdr'"' != "" {
                CheckNumVarlist `sdr'
                return local sdrweight `s(varlist)'
                local fpc : char _dta[_svy_sdrfpc]
                if `"`fpc'"' != "" {
                return local sdrfpc `"`fpc'"'
                }
                }
                exit
                }
              - if "`name'" == "dof" {
              = if "calmethod" == "dof" {
                local dof : char _dta[_svy_dof]
                if `"`dof'"' != "" {
                CheckDOF `dof'
                return scalar dof = `s(value)'
                }
                exit
                }
              - if "`name'" == "poststrata" {
              = if "calmethod" == "poststrata" {
                local poststrata : char _dta[_svy_poststrata]
                local postweight : char _dta[_svy_postweight]
                if `"`poststrata'`postweight'"' != "" {
                if "`postweight'" == "" {
                di as err "error in svy settings; poststrata set without postwei
> ght"
                exit 459
                }
                if "`poststrata'" == "" {
                di as err "error in svy settings; postweight set without poststr
> ata"
                exit 459
                }
                CheckVar `poststrata'
                return local poststrata `s(varname)'
                CheckPostW `postweight'
                return local postweight `s(varname)'
                }
                exit
                }
              - if "`name'" == "calmethod" {
              = if "calmethod" == "calmethod" {
              - local calmethod : char _dta[_svy_calmethod]
              - local calmodel : char _dta[_svy_calmodel]
              - local calopts : char _dta[_svy_calopts]
              - if `"`calmethod'`calmodel'`calopts'"' != "" {
              = if `""' != "" {
                if "`calmethod'" == "" {
                di as err "error in svy settings; calibration method not properl
> y set"
                exit 459
                }
                if "`calmodel'" == "" {
                di as err "error in svy settings; calibration model not properly
>  set"
                exit 459
                }
                if "`calopts'" == "" {
                di as err "error in svy settings; calibration options not proper
> ly set"
                exit 459
                }
                CheckCalMethod `calmethod'
                return hidden local calmethod `"`s(method)'"'
                return hidden local calmodel `"`calmodel'"'
                return hidden local calopts `"`calopts'"'
                }
              - exit
              ---------------------------------------------- end _svyset.Get ---
            - exit
            ---------------------------------------------------- end _svyset ---
          - if `"`r(calmethod)'"' != "" {
          = if `""' != "" {
            local spec `"`r(calmodel)', `r(calopts)'"'
            local gsets `"`gsets' `r(calmethod)'(`spec')"'
            return local `r(calmethod)' `"`spec'"'
            return add
            local is_set 1
            }
          - _svyset get singleunit
            -------------------------------------------------- begin _svyset ---
            - version 9
            - gettoken cmd 0 : 0
            - if "`cmd'" == "clear" {
            = if "get" == "clear" {
              Clear `0'
              exit
              }
            - if "`cmd'" == "set" {
            = if "get" == "set" {
              Set `0'
              exit
              }
            - if "`cmd'" == "get" {
            = if "get" == "get" {
            - Get `0'
            = Get  singleunit
              -------------------------------------------- begin _svyset.Get ---
              - if `:word count `0'' > 2 {
              = if 1 > 2 {
                di as err "too many arguments"
                exit 103
                }
              - args name i
              - CheckName `name'
              = CheckName singleunit
                ------------------------------------ begin _svyset.CheckName ---
                - local 0 `", `0'"'
                = local 0 `", singleunit"'
                - capture syntax [, WTYPE WEXP WVAR PWeight IWeight VCE MSE BRRw
> eight FAY BSRweight BSN JKRweight SDRweight SDRFPC DOF POSTStrata POSTWeight C
> ALMethod CALMOdel CALOpts SINGLEunit SU STRata FPC Weight STAGES stages_wt ]
                - if c(rc) {
                  di as err "invalid survey characteristic"
                  exit 198
                  }
                - local gname `stages' `stages_wt' `pweight' `iweight' `wtype' `
> wvar' `wexp' `vce' `mse' `brrweight' `fay' `bsrweight' `bsn' `jkrweight' `sdrw
> eight' `sdrfpc' `dof' `poststrata' `postweight' `calmethod' `calmodel' `calopt
> s' `singleunit'
                = local gname                       singleunit
                - local sname `su' `strata' `fpc' `weight'
                = local sname    
                - local k : word count `gname' `sname'
                = local k : word count singleunit 
                - if `k' > 1 {
                = if 1 > 1 {
                  di as err "too many names"
                  exit 103
                  }
                - if `k' == 0 {
                = if 1 == 0 {
                  di as err "name required"
                  exit 100
                  }
                - sreturn local gname `gname'
                = sreturn local gname singleunit
                - sreturn local sname `sname'
                = sreturn local sname 
                -------------------------------------- end _svyset.CheckName ---
              - if "`s(sname)'" != "" {
              = if "" != "" {
                local name `s(sname)'
                CheckPosInt `i'
                }
              - else local name `s(gname)'
              = else local name singleunit
              - if inlist("`name'", "wtype", "wvar", "wexp") {
              = if inlist("singleunit", "wtype", "wvar", "wexp") {
                local wtype : char _dta[_svy_wtype]
                local wvar : char _dta[_svy_wvar]
                if `"`wtype'`wvar'"' != "" {
                if `"`wtype'"' == "" {
                di as err "error in svy settings; weight variable set without we
> ight type"
                exit 459
                }
                if `"`wvar'"' == "" {
                "error in svy settings; weight type set without weight variable"
                exit 459
                }
                CheckName `wtype'
                local wtype `s(gname)' `s(sname)'
                if !inlist("`wtype'", "pweight", "iweight") {
                "error in svy settings; invalid weight type"
                exit 459
                }
                CheckNumVar `wvar'
                local wvar `s(varname)'
                local wexp "= `wvar'"
                return local wtype `"`wtype'"'
                return local wvar `"`wvar'"'
                return local wexp `"`wexp'"'
                }
                exit
                }
              - if "`name'" == "stages" {
              = if "singleunit" == "stages" {
                local stages : char _dta[_svy_stages]
                capture CheckPosInt `stages'
                if c(rc) {
                return scalar stages = 0
                }
                return scalar stages = `stages'
                exit
                }
              - if "`name'" == "stages_wt" {
              = if "singleunit" == "stages_wt" {
                local stages_wt : char _dta[_svy_stages_wt]
                capture CheckPosInt `stages_wt'
                if c(rc) {
                return scalar stages_wt = 0
                }
                else {
                return scalar stages_wt = `stages_wt'
                }
                exit
                }
              - if inlist("`name'", "vce", "mse") {
              = if inlist("singleunit", "vce", "mse") {
                local vce : char _dta[_svy_vce]
                local mse : char _dta[_svy_mse]
                if `"`vce'`mse'"' != "" {
                _svy_check_vce `vce', `mse'
                return local vce `s(vce)'
                return local mse `s(mse)'
                }
                exit
                }
              - if "`name'" == "brrweight" {
              = if "singleunit" == "brrweight" {
                local brr : char _dta[_svy_brrweight]
                if `"`brr'"' != "" {
                CheckNumVarlist `brr'
                return local brrweight `s(varlist)'
                }
                exit
                }
              - if "`name'" == "fay" {
              = if "singleunit" == "fay" {
                local fay : char _dta[_svy_fay]
                if `"`fay'"' != "" {
                CheckFay `fay'
                return scalar fay = `s(value)'
                }
                exit
                }
              - if "`name'" == "bsrweight" {
              = if "singleunit" == "bsrweight" {
                local bsr : char _dta[_svy_bsrweight]
                if `"`bsr'"' != "" {
                CheckNumVarlist `bsr'
                return local bsrweight `s(varlist)'
                }
                exit
                }
              - if "`name'" == "bsn" {
              = if "singleunit" == "bsn" {
                local bsn : char _dta[_svy_bsn]
                if `"`bsn'"' != "" {
                CheckBSN `bsn'
                return scalar bsn = `s(value)'
                }
                exit
                }
              - if "`name'" == "jkrweight" {
              = if "singleunit" == "jkrweight" {
                local jkr : char _dta[_svy_jkrweight]
                if `"`jkr'"' != "" {
                CheckNumVarlist `jkr'
                return local jkrweight `s(varlist)'
                }
                exit
                }
              - if "`name'" == "sdrweight" {
              = if "singleunit" == "sdrweight" {
                local sdr : char _dta[_svy_sdrweight]
                if `"`sdr'"' != "" {
                CheckNumVarlist `sdr'
                return local sdrweight `s(varlist)'
                local fpc : char _dta[_svy_sdrfpc]
                if `"`fpc'"' != "" {
                return local sdrfpc `"`fpc'"'
                }
                }
                exit
                }
              - if "`name'" == "dof" {
              = if "singleunit" == "dof" {
                local dof : char _dta[_svy_dof]
                if `"`dof'"' != "" {
                CheckDOF `dof'
                return scalar dof = `s(value)'
                }
                exit
                }
              - if "`name'" == "poststrata" {
              = if "singleunit" == "poststrata" {
                local poststrata : char _dta[_svy_poststrata]
                local postweight : char _dta[_svy_postweight]
                if `"`poststrata'`postweight'"' != "" {
                if "`postweight'" == "" {
                di as err "error in svy settings; poststrata set without postwei
> ght"
                exit 459
                }
                if "`poststrata'" == "" {
                di as err "error in svy settings; postweight set without poststr
> ata"
                exit 459
                }
                CheckVar `poststrata'
                return local poststrata `s(varname)'
                CheckPostW `postweight'
                return local postweight `s(varname)'
                }
                exit
                }
              - if "`name'" == "calmethod" {
              = if "singleunit" == "calmethod" {
                local calmethod : char _dta[_svy_calmethod]
                local calmodel : char _dta[_svy_calmodel]
                local calopts : char _dta[_svy_calopts]
                if `"`calmethod'`calmodel'`calopts'"' != "" {
                if "`calmethod'" == "" {
                di as err "error in svy settings; calibration method not properl
> y set"
                exit 459
                }
                if "`calmodel'" == "" {
                di as err "error in svy settings; calibration model not properly
>  set"
                exit 459
                }
                if "`calopts'" == "" {
                di as err "error in svy settings; calibration options not proper
> ly set"
                exit 459
                }
                CheckCalMethod `calmethod'
                return hidden local calmethod `"`s(method)'"'
                return hidden local calmodel `"`calmodel'"'
                return hidden local calopts `"`calopts'"'
                }
                exit
                }
              - if "`name'" == "su" {
              = if "singleunit" == "su" {
                CheckPosInt `i'
                local su : char _dta[_svy_su`i']
                if !inlist("`su'", "", "_n") {
                CheckVar `su'
                return local su`i' `s(varname)'
                }
                else return local su`i' `su'
                exit
                }
              - if "`name'" == "weight" {
              = if "singleunit" == "weight" {
                CheckPosInt `i'
                local weight : char _dta[_svy_weight`i']
                if "`weight'" != "" {
                CheckVar `weight'
                return local weight`i' `s(varname)'
                }
                exit
                }
              - if "`name'" == "strata" {
              = if "singleunit" == "strata" {
                CheckPosInt `i'
                local strata : char _dta[_svy_strata`i']
                if "`strata'" != "" {
                CheckVar `strata'
                return local strata`i' `s(varname)'
                }
                exit
                }
              - if "`name'" == "fpc" {
              = if "singleunit" == "fpc" {
                CheckPosInt `i'
                local fpc : char _dta[_svy_fpc`i']
                if "`fpc'" != "" {
                CheckVar `fpc'
                return local fpc`i' `s(varname)'
                }
                exit
                }
              - if "`name'" == "singleunit" {
              = if "singleunit" == "singleunit" {
              - local singleunit : char _dta[_svy_singleunit]
              - CheckSingle `singleunit'
              = CheckSingle 
                ---------------------------------- begin _svyset.CheckSingle ---
                - local zero `"`0'"'
                = local zero `""'
                - local 0 `", `zero'"'
                = local 0 `", "'
                - capture syntax [, MISsing CERtainty SCAled CENtered ]
                - if c(rc) {
                  di as err `"singleunit(`zero') invalid"'
                  exit 198
                  }
                - if `:list sizeof zero' == 0 {
                = if 0 == 0 {
                - local missing missing
                - }
                - sreturn local singleunit `missing' `scaled' `certainty' `cente
> red'
                = sreturn local singleunit missing   
                ------------------------------------ end _svyset.CheckSingle ---
              - return local singleunit `s(singleunit)'
              = return local singleunit missing
              - exit
              ---------------------------------------------- end _svyset.Get ---
            - exit
            ---------------------------------------------------- end _svyset ---
          - if `"`r(singleunit)'"' != "" {
          = if `"missing"' != "" {
          - local gsets `"`gsets' singleunit(`r(singleunit)')"'
          = local gsets `" singleunit(missing)"'
          - return add
          - local is_set 1
          - }
          - else local gsets `"`gsets' singleunit(missing)"'
          = else local gsets `" singleunit(missing) singleunit(missing)"'
          - _svyset get vce
            -------------------------------------------------- begin _svyset ---
            - version 9
            - gettoken cmd 0 : 0
            - if "`cmd'" == "clear" {
            = if "get" == "clear" {
              Clear `0'
              exit
              }
            - if "`cmd'" == "set" {
            = if "get" == "set" {
              Set `0'
              exit
              }
            - if "`cmd'" == "get" {
            = if "get" == "get" {
            - Get `0'
            = Get  vce
              -------------------------------------------- begin _svyset.Get ---
              - if `:word count `0'' > 2 {
              = if 1 > 2 {
                di as err "too many arguments"
                exit 103
                }
              - args name i
              - CheckName `name'
              = CheckName vce
                ------------------------------------ begin _svyset.CheckName ---
                - local 0 `", `0'"'
                = local 0 `", vce"'
                - capture syntax [, WTYPE WEXP WVAR PWeight IWeight VCE MSE BRRw
> eight FAY BSRweight BSN JKRweight SDRweight SDRFPC DOF POSTStrata POSTWeight C
> ALMethod CALMOdel CALOpts SINGLEunit SU STRata FPC Weight STAGES stages_wt ]
                - if c(rc) {
                  di as err "invalid survey characteristic"
                  exit 198
                  }
                - local gname `stages' `stages_wt' `pweight' `iweight' `wtype' `
> wvar' `wexp' `vce' `mse' `brrweight' `fay' `bsrweight' `bsn' `jkrweight' `sdrw
> eight' `sdrfpc' `dof' `poststrata' `postweight' `calmethod' `calmodel' `calopt
> s' `singleunit'
                = local gname        vce               
                - local sname `su' `strata' `fpc' `weight'
                = local sname    
                - local k : word count `gname' `sname'
                = local k : word count vce 
                - if `k' > 1 {
                = if 1 > 1 {
                  di as err "too many names"
                  exit 103
                  }
                - if `k' == 0 {
                = if 1 == 0 {
                  di as err "name required"
                  exit 100
                  }
                - sreturn local gname `gname'
                = sreturn local gname vce
                - sreturn local sname `sname'
                = sreturn local sname 
                -------------------------------------- end _svyset.CheckName ---
              - if "`s(sname)'" != "" {
              = if "" != "" {
                local name `s(sname)'
                CheckPosInt `i'
                }
              - else local name `s(gname)'
              = else local name vce
              - if inlist("`name'", "wtype", "wvar", "wexp") {
              = if inlist("vce", "wtype", "wvar", "wexp") {
                local wtype : char _dta[_svy_wtype]
                local wvar : char _dta[_svy_wvar]
                if `"`wtype'`wvar'"' != "" {
                if `"`wtype'"' == "" {
                di as err "error in svy settings; weight variable set without we
> ight type"
                exit 459
                }
                if `"`wvar'"' == "" {
                "error in svy settings; weight type set without weight variable"
                exit 459
                }
                CheckName `wtype'
                local wtype `s(gname)' `s(sname)'
                if !inlist("`wtype'", "pweight", "iweight") {
                "error in svy settings; invalid weight type"
                exit 459
                }
                CheckNumVar `wvar'
                local wvar `s(varname)'
                local wexp "= `wvar'"
                return local wtype `"`wtype'"'
                return local wvar `"`wvar'"'
                return local wexp `"`wexp'"'
                }
                exit
                }
              - if "`name'" == "stages" {
              = if "vce" == "stages" {
                local stages : char _dta[_svy_stages]
                capture CheckPosInt `stages'
                if c(rc) {
                return scalar stages = 0
                }
                return scalar stages = `stages'
                exit
                }
              - if "`name'" == "stages_wt" {
              = if "vce" == "stages_wt" {
                local stages_wt : char _dta[_svy_stages_wt]
                capture CheckPosInt `stages_wt'
                if c(rc) {
                return scalar stages_wt = 0
                }
                else {
                return scalar stages_wt = `stages_wt'
                }
                exit
                }
              - if inlist("`name'", "vce", "mse") {
              = if inlist("vce", "vce", "mse") {
              - local vce : char _dta[_svy_vce]
              - local mse : char _dta[_svy_mse]
              - if `"`vce'`mse'"' != "" {
              = if `""' != "" {
                _svy_check_vce `vce', `mse'
                return local vce `s(vce)'
                return local mse `s(mse)'
                }
              - exit
              ---------------------------------------------- end _svyset.Get ---
            - exit
            ---------------------------------------------------- end _svyset ---
          - if `"`r(vce)'"' != "" {
          = if `""' != "" {
            local gsets `"`gsets' vce(`r(vce)')"'
            if "`r(mse)'" != "" {
            local gsets `"`gsets' mse"'
            }
            return add
            local is_set 1
            }
          - else {
          - local gsets `"`gsets' vce(linearized)"'
          = local gsets `" singleunit(missing) vce(linearized)"'
          - return local vce linearized
          - }
          - local stages : char _dta[_svy_stages]
          - capture confirm integer number `stages'
          = capture confirm integer number 1
          - if c(rc) {
            local stages 0
            }
          - else local is_set 1
          - local stages_wt : char _dta[_svy_stages_wt]
          - capture confirm integer number `stages_wt'
          = capture confirm integer number 
          - if c(rc) {
          - local stages_wt 0
          - }
          - if `stages_wt' {
          = if 0 {
            if "`return(wtype)'" != "" {
            di as err "invalid weight specification;"
            di as err "`return(wtype)'s not allowed with stage-level {bf:weight(
> )} options"
            exit 198
            }
            if "`return(brrweight)'" != "" {
            di as err "invalid weight specification;"
            di as err "option {bf:brrweight()} not allowed with stage-level {bf:
> weight()} options"
            exit 198
            }
            if "`return(bsrweight)'" != "" {
            di as err "invalid weight specification;"
            di as err "option {bf:bsrweight()} not allowed with stage-level {bf:
> weight()} options"
            exit 198
            }
            if "`return(jkrweight)'" != "" {
            di as err "invalid weight specification;"
            di as err "option {bf:jkrweight()} not allowed with stage-level {bf:
> weight()} options"
            exit 198
            }
            if "`return(sdrweight)'" != "" {
            di as err "invalid weight specification;"
            di as err "option {bf:sdrweight}() not allowed with stage-level {bf:
> weight()} options"
            exit 198
            }
            }
          - if `stages_wt' > `stages' {
          = if 0 > 1 {
            local I = `stages_wt'
            }
          - else local I = `stages'
          = else local I = 1
          - local comma ","
          - forval i = 1/`I' {
          = forval i = 1/1 {
          - local comma ","
          - _svyset get su `i'
          = _svyset get su 1
            -------------------------------------------------- begin _svyset ---
            - version 9
            - gettoken cmd 0 : 0
            - if "`cmd'" == "clear" {
            = if "get" == "clear" {
              Clear `0'
              exit
              }
            - if "`cmd'" == "set" {
            = if "get" == "set" {
              Set `0'
              exit
              }
            - if "`cmd'" == "get" {
            = if "get" == "get" {
            - Get `0'
            = Get  su 1
              -------------------------------------------- begin _svyset.Get ---
              - if `:word count `0'' > 2 {
              = if 2 > 2 {
                di as err "too many arguments"
                exit 103
                }
              - args name i
              - CheckName `name'
              = CheckName su
                ------------------------------------ begin _svyset.CheckName ---
                - local 0 `", `0'"'
                = local 0 `", su"'
                - capture syntax [, WTYPE WEXP WVAR PWeight IWeight VCE MSE BRRw
> eight FAY BSRweight BSN JKRweight SDRweight SDRFPC DOF POSTStrata POSTWeight C
> ALMethod CALMOdel CALOpts SINGLEunit SU STRata FPC Weight STAGES stages_wt ]
                - if c(rc) {
                  di as err "invalid survey characteristic"
                  exit 198
                  }
                - local gname `stages' `stages_wt' `pweight' `iweight' `wtype' `
> wvar' `wexp' `vce' `mse' `brrweight' `fay' `bsrweight' `bsn' `jkrweight' `sdrw
> eight' `sdrfpc' `dof' `poststrata' `postweight' `calmethod' `calmodel' `calopt
> s' `singleunit'
                = local gname                       
                - local sname `su' `strata' `fpc' `weight'
                = local sname su   
                - local k : word count `gname' `sname'
                = local k : word count  su
                - if `k' > 1 {
                = if 1 > 1 {
                  di as err "too many names"
                  exit 103
                  }
                - if `k' == 0 {
                = if 1 == 0 {
                  di as err "name required"
                  exit 100
                  }
                - sreturn local gname `gname'
                = sreturn local gname 
                - sreturn local sname `sname'
                = sreturn local sname su
                -------------------------------------- end _svyset.CheckName ---
              - if "`s(sname)'" != "" {
              = if "su" != "" {
              - local name `s(sname)'
              = local name su
              - CheckPosInt `i'
              = CheckPosInt 1
                ---------------------------------- begin _svyset.CheckPosInt ---
                - confirm integer number `0'
                = confirm integer number 1
                - if `0' < 1 {
                = if 1 < 1 {
                  di as err "'`0'' found where positive integer required"
                  exit 7
                  }
                ------------------------------------ end _svyset.CheckPosInt ---
              - }
              - else local name `s(gname)'
              = else local name 
              - if inlist("`name'", "wtype", "wvar", "wexp") {
              = if inlist("su", "wtype", "wvar", "wexp") {
                local wtype : char _dta[_svy_wtype]
                local wvar : char _dta[_svy_wvar]
                if `"`wtype'`wvar'"' != "" {
                if `"`wtype'"' == "" {
                di as err "error in svy settings; weight variable set without we
> ight type"
                exit 459
                }
                if `"`wvar'"' == "" {
                "error in svy settings; weight type set without weight variable"
                exit 459
                }
                CheckName `wtype'
                local wtype `s(gname)' `s(sname)'
                if !inlist("`wtype'", "pweight", "iweight") {
                "error in svy settings; invalid weight type"
                exit 459
                }
                CheckNumVar `wvar'
                local wvar `s(varname)'
                local wexp "= `wvar'"
                return local wtype `"`wtype'"'
                return local wvar `"`wvar'"'
                return local wexp `"`wexp'"'
                }
                exit
                }
              - if "`name'" == "stages" {
              = if "su" == "stages" {
                local stages : char _dta[_svy_stages]
                capture CheckPosInt `stages'
                if c(rc) {
                return scalar stages = 0
                }
                return scalar stages = `stages'
                exit
                }
              - if "`name'" == "stages_wt" {
              = if "su" == "stages_wt" {
                local stages_wt : char _dta[_svy_stages_wt]
                capture CheckPosInt `stages_wt'
                if c(rc) {
                return scalar stages_wt = 0
                }
                else {
                return scalar stages_wt = `stages_wt'
                }
                exit
                }
              - if inlist("`name'", "vce", "mse") {
              = if inlist("su", "vce", "mse") {
                local vce : char _dta[_svy_vce]
                local mse : char _dta[_svy_mse]
                if `"`vce'`mse'"' != "" {
                _svy_check_vce `vce', `mse'
                return local vce `s(vce)'
                return local mse `s(mse)'
                }
                exit
                }
              - if "`name'" == "brrweight" {
              = if "su" == "brrweight" {
                local brr : char _dta[_svy_brrweight]
                if `"`brr'"' != "" {
                CheckNumVarlist `brr'
                return local brrweight `s(varlist)'
                }
                exit
                }
              - if "`name'" == "fay" {
              = if "su" == "fay" {
                local fay : char _dta[_svy_fay]
                if `"`fay'"' != "" {
                CheckFay `fay'
                return scalar fay = `s(value)'
                }
                exit
                }
              - if "`name'" == "bsrweight" {
              = if "su" == "bsrweight" {
                local bsr : char _dta[_svy_bsrweight]
                if `"`bsr'"' != "" {
                CheckNumVarlist `bsr'
                return local bsrweight `s(varlist)'
                }
                exit
                }
              - if "`name'" == "bsn" {
              = if "su" == "bsn" {
                local bsn : char _dta[_svy_bsn]
                if `"`bsn'"' != "" {
                CheckBSN `bsn'
                return scalar bsn = `s(value)'
                }
                exit
                }
              - if "`name'" == "jkrweight" {
              = if "su" == "jkrweight" {
                local jkr : char _dta[_svy_jkrweight]
                if `"`jkr'"' != "" {
                CheckNumVarlist `jkr'
                return local jkrweight `s(varlist)'
                }
                exit
                }
              - if "`name'" == "sdrweight" {
              = if "su" == "sdrweight" {
                local sdr : char _dta[_svy_sdrweight]
                if `"`sdr'"' != "" {
                CheckNumVarlist `sdr'
                return local sdrweight `s(varlist)'
                local fpc : char _dta[_svy_sdrfpc]
                if `"`fpc'"' != "" {
                return local sdrfpc `"`fpc'"'
                }
                }
                exit
                }
              - if "`name'" == "dof" {
              = if "su" == "dof" {
                local dof : char _dta[_svy_dof]
                if `"`dof'"' != "" {
                CheckDOF `dof'
                return scalar dof = `s(value)'
                }
                exit
                }
              - if "`name'" == "poststrata" {
              = if "su" == "poststrata" {
                local poststrata : char _dta[_svy_poststrata]
                local postweight : char _dta[_svy_postweight]
                if `"`poststrata'`postweight'"' != "" {
                if "`postweight'" == "" {
                di as err "error in svy settings; poststrata set without postwei
> ght"
                exit 459
                }
                if "`poststrata'" == "" {
                di as err "error in svy settings; postweight set without poststr
> ata"
                exit 459
                }
                CheckVar `poststrata'
                return local poststrata `s(varname)'
                CheckPostW `postweight'
                return local postweight `s(varname)'
                }
                exit
                }
              - if "`name'" == "calmethod" {
              = if "su" == "calmethod" {
                local calmethod : char _dta[_svy_calmethod]
                local calmodel : char _dta[_svy_calmodel]
                local calopts : char _dta[_svy_calopts]
                if `"`calmethod'`calmodel'`calopts'"' != "" {
                if "`calmethod'" == "" {
                di as err "error in svy settings; calibration method not properl
> y set"
                exit 459
                }
                if "`calmodel'" == "" {
                di as err "error in svy settings; calibration model not properly
>  set"
                exit 459
                }
                if "`calopts'" == "" {
                di as err "error in svy settings; calibration options not proper
> ly set"
                exit 459
                }
                CheckCalMethod `calmethod'
                return hidden local calmethod `"`s(method)'"'
                return hidden local calmodel `"`calmodel'"'
                return hidden local calopts `"`calopts'"'
                }
                exit
                }
              - if "`name'" == "su" {
              = if "su" == "su" {
              - CheckPosInt `i'
              = CheckPosInt 1
                ---------------------------------- begin _svyset.CheckPosInt ---
                - confirm integer number `0'
                = confirm integer number 1
                - if `0' < 1 {
                = if 1 < 1 {
                  di as err "'`0'' found where positive integer required"
                  exit 7
                  }
                ------------------------------------ end _svyset.CheckPosInt ---
              - local su : char _dta[_svy_su`i']
              = local su : char _dta[_svy_su1]
              - if !inlist("`su'", "", "_n") {
              = if !inlist("_n", "", "_n") {
                CheckVar `su'
                return local su`i' `s(varname)'
                }
              - else return local su`i' `su'
              = else return local su1 _n
              - exit
              ---------------------------------------------- end _svyset.Get ---
            - exit
            ---------------------------------------------------- end _svyset ---
          - local su `r(su`i')'
          = local su _n
          - if `"`su'"' != "" {
          = if `"_n"' != "" {
          - local sets "`sets'`oror'`su'"
          = local sets "_n"
          - if `"`su'"' == "_n" {
          = if `"_n"' == "_n" {
          - if `i' < `stages' {
          = if 1 < 1 {
            di as err "invalid use of _n; " "observations can only be sampled in
>  the final stage"
            exit 198
            }
          - local su
          - }
          - else return add
          - }
          - else if `i' < `I' {
          = else if 1 < 1 {
            di as err "invalid survey characteristics;" _n "sampling unit variab
> le is not set for stage `i' of `I' stages"
            exit 459
            }
          - if "`wt'" != "" {
          = if "[pweight= asecwth]" != "" {
          - local sets "`sets' `wt'"
          = local sets "_n [pweight= asecwth]"
          - local wt
          - }
          - _svyset get strata `i'
          = _svyset get strata 1
            -------------------------------------------------- begin _svyset ---
            - version 9
            - gettoken cmd 0 : 0
            - if "`cmd'" == "clear" {
            = if "get" == "clear" {
              Clear `0'
              exit
              }
            - if "`cmd'" == "set" {
            = if "get" == "set" {
              Set `0'
              exit
              }
            - if "`cmd'" == "get" {
            = if "get" == "get" {
            - Get `0'
            = Get  strata 1
              -------------------------------------------- begin _svyset.Get ---
              - if `:word count `0'' > 2 {
              = if 2 > 2 {
                di as err "too many arguments"
                exit 103
                }
              - args name i
              - CheckName `name'
              = CheckName strata
                ------------------------------------ begin _svyset.CheckName ---
                - local 0 `", `0'"'
                = local 0 `", strata"'
                - capture syntax [, WTYPE WEXP WVAR PWeight IWeight VCE MSE BRRw
> eight FAY BSRweight BSN JKRweight SDRweight SDRFPC DOF POSTStrata POSTWeight C
> ALMethod CALMOdel CALOpts SINGLEunit SU STRata FPC Weight STAGES stages_wt ]
                - if c(rc) {
                  di as err "invalid survey characteristic"
                  exit 198
                  }
                - local gname `stages' `stages_wt' `pweight' `iweight' `wtype' `
> wvar' `wexp' `vce' `mse' `brrweight' `fay' `bsrweight' `bsn' `jkrweight' `sdrw
> eight' `sdrfpc' `dof' `poststrata' `postweight' `calmethod' `calmodel' `calopt
> s' `singleunit'
                = local gname                       
                - local sname `su' `strata' `fpc' `weight'
                = local sname  strata  
                - local k : word count `gname' `sname'
                = local k : word count  strata
                - if `k' > 1 {
                = if 1 > 1 {
                  di as err "too many names"
                  exit 103
                  }
                - if `k' == 0 {
                = if 1 == 0 {
                  di as err "name required"
                  exit 100
                  }
                - sreturn local gname `gname'
                = sreturn local gname 
                - sreturn local sname `sname'
                = sreturn local sname strata
                -------------------------------------- end _svyset.CheckName ---
              - if "`s(sname)'" != "" {
              = if "strata" != "" {
              - local name `s(sname)'
              = local name strata
              - CheckPosInt `i'
              = CheckPosInt 1
                ---------------------------------- begin _svyset.CheckPosInt ---
                - confirm integer number `0'
                = confirm integer number 1
                - if `0' < 1 {
                = if 1 < 1 {
                  di as err "'`0'' found where positive integer required"
                  exit 7
                  }
                ------------------------------------ end _svyset.CheckPosInt ---
              - }
              - else local name `s(gname)'
              = else local name 
              - if inlist("`name'", "wtype", "wvar", "wexp") {
              = if inlist("strata", "wtype", "wvar", "wexp") {
                local wtype : char _dta[_svy_wtype]
                local wvar : char _dta[_svy_wvar]
                if `"`wtype'`wvar'"' != "" {
                if `"`wtype'"' == "" {
                di as err "error in svy settings; weight variable set without we
> ight type"
                exit 459
                }
                if `"`wvar'"' == "" {
                "error in svy settings; weight type set without weight variable"
                exit 459
                }
                CheckName `wtype'
                local wtype `s(gname)' `s(sname)'
                if !inlist("`wtype'", "pweight", "iweight") {
                "error in svy settings; invalid weight type"
                exit 459
                }
                CheckNumVar `wvar'
                local wvar `s(varname)'
                local wexp "= `wvar'"
                return local wtype `"`wtype'"'
                return local wvar `"`wvar'"'
                return local wexp `"`wexp'"'
                }
                exit
                }
              - if "`name'" == "stages" {
              = if "strata" == "stages" {
                local stages : char _dta[_svy_stages]
                capture CheckPosInt `stages'
                if c(rc) {
                return scalar stages = 0
                }
                return scalar stages = `stages'
                exit
                }
              - if "`name'" == "stages_wt" {
              = if "strata" == "stages_wt" {
                local stages_wt : char _dta[_svy_stages_wt]
                capture CheckPosInt `stages_wt'
                if c(rc) {
                return scalar stages_wt = 0
                }
                else {
                return scalar stages_wt = `stages_wt'
                }
                exit
                }
              - if inlist("`name'", "vce", "mse") {
              = if inlist("strata", "vce", "mse") {
                local vce : char _dta[_svy_vce]
                local mse : char _dta[_svy_mse]
                if `"`vce'`mse'"' != "" {
                _svy_check_vce `vce', `mse'
                return local vce `s(vce)'
                return local mse `s(mse)'
                }
                exit
                }
              - if "`name'" == "brrweight" {
              = if "strata" == "brrweight" {
                local brr : char _dta[_svy_brrweight]
                if `"`brr'"' != "" {
                CheckNumVarlist `brr'
                return local brrweight `s(varlist)'
                }
                exit
                }
              - if "`name'" == "fay" {
              = if "strata" == "fay" {
                local fay : char _dta[_svy_fay]
                if `"`fay'"' != "" {
                CheckFay `fay'
                return scalar fay = `s(value)'
                }
                exit
                }
              - if "`name'" == "bsrweight" {
              = if "strata" == "bsrweight" {
                local bsr : char _dta[_svy_bsrweight]
                if `"`bsr'"' != "" {
                CheckNumVarlist `bsr'
                return local bsrweight `s(varlist)'
                }
                exit
                }
              - if "`name'" == "bsn" {
              = if "strata" == "bsn" {
                local bsn : char _dta[_svy_bsn]
                if `"`bsn'"' != "" {
                CheckBSN `bsn'
                return scalar bsn = `s(value)'
                }
                exit
                }
              - if "`name'" == "jkrweight" {
              = if "strata" == "jkrweight" {
                local jkr : char _dta[_svy_jkrweight]
                if `"`jkr'"' != "" {
                CheckNumVarlist `jkr'
                return local jkrweight `s(varlist)'
                }
                exit
                }
              - if "`name'" == "sdrweight" {
              = if "strata" == "sdrweight" {
                local sdr : char _dta[_svy_sdrweight]
                if `"`sdr'"' != "" {
                CheckNumVarlist `sdr'
                return local sdrweight `s(varlist)'
                local fpc : char _dta[_svy_sdrfpc]
                if `"`fpc'"' != "" {
                return local sdrfpc `"`fpc'"'
                }
                }
                exit
                }
              - if "`name'" == "dof" {
              = if "strata" == "dof" {
                local dof : char _dta[_svy_dof]
                if `"`dof'"' != "" {
                CheckDOF `dof'
                return scalar dof = `s(value)'
                }
                exit
                }
              - if "`name'" == "poststrata" {
              = if "strata" == "poststrata" {
                local poststrata : char _dta[_svy_poststrata]
                local postweight : char _dta[_svy_postweight]
                if `"`poststrata'`postweight'"' != "" {
                if "`postweight'" == "" {
                di as err "error in svy settings; poststrata set without postwei
> ght"
                exit 459
                }
                if "`poststrata'" == "" {
                di as err "error in svy settings; postweight set without poststr
> ata"
                exit 459
                }
                CheckVar `poststrata'
                return local poststrata `s(varname)'
                CheckPostW `postweight'
                return local postweight `s(varname)'
                }
                exit
                }
              - if "`name'" == "calmethod" {
              = if "strata" == "calmethod" {
                local calmethod : char _dta[_svy_calmethod]
                local calmodel : char _dta[_svy_calmodel]
                local calopts : char _dta[_svy_calopts]
                if `"`calmethod'`calmodel'`calopts'"' != "" {
                if "`calmethod'" == "" {
                di as err "error in svy settings; calibration method not properl
> y set"
                exit 459
                }
                if "`calmodel'" == "" {
                di as err "error in svy settings; calibration model not properly
>  set"
                exit 459
                }
                if "`calopts'" == "" {
                di as err "error in svy settings; calibration options not proper
> ly set"
                exit 459
                }
                CheckCalMethod `calmethod'
                return hidden local calmethod `"`s(method)'"'
                return hidden local calmodel `"`calmodel'"'
                return hidden local calopts `"`calopts'"'
                }
                exit
                }
              - if "`name'" == "su" {
              = if "strata" == "su" {
                CheckPosInt `i'
                local su : char _dta[_svy_su`i']
                if !inlist("`su'", "", "_n") {
                CheckVar `su'
                return local su`i' `s(varname)'
                }
                else return local su`i' `su'
                exit
                }
              - if "`name'" == "weight" {
              = if "strata" == "weight" {
                CheckPosInt `i'
                local weight : char _dta[_svy_weight`i']
                if "`weight'" != "" {
                CheckVar `weight'
                return local weight`i' `s(varname)'
                }
                exit
                }
              - if "`name'" == "strata" {
              = if "strata" == "strata" {
              - CheckPosInt `i'
              = CheckPosInt 1
                ---------------------------------- begin _svyset.CheckPosInt ---
                - confirm integer number `0'
                = confirm integer number 1
                - if `0' < 1 {
                = if 1 < 1 {
                  di as err "'`0'' found where positive integer required"
                  exit 7
                  }
                ------------------------------------ end _svyset.CheckPosInt ---
              - local strata : char _dta[_svy_strata`i']
              = local strata : char _dta[_svy_strata1]
              - if "`strata'" != "" {
              = if "" != "" {
                CheckVar `strata'
                return local strata`i' `s(varname)'
                }
              - exit
              ---------------------------------------------- end _svyset.Get ---
            - exit
            ---------------------------------------------------- end _svyset ---
          - local strata `r(strata`i')'
          = local strata 
          - if `"`strata'"' != "" {
          = if `""' != "" {
            return add
            local sets `"`sets'`comma' strata(`strata')"'
            local comma
            }
          - _svyset get weight `i'
          = _svyset get weight 1
            -------------------------------------------------- begin _svyset ---
            - version 9
            - gettoken cmd 0 : 0
            - if "`cmd'" == "clear" {
            = if "get" == "clear" {
              Clear `0'
              exit
              }
            - if "`cmd'" == "set" {
            = if "get" == "set" {
              Set `0'
              exit
              }
            - if "`cmd'" == "get" {
            = if "get" == "get" {
            - Get `0'
            = Get  weight 1
              -------------------------------------------- begin _svyset.Get ---
              - if `:word count `0'' > 2 {
              = if 2 > 2 {
                di as err "too many arguments"
                exit 103
                }
              - args name i
              - CheckName `name'
              = CheckName weight
                ------------------------------------ begin _svyset.CheckName ---
                - local 0 `", `0'"'
                = local 0 `", weight"'
                - capture syntax [, WTYPE WEXP WVAR PWeight IWeight VCE MSE BRRw
> eight FAY BSRweight BSN JKRweight SDRweight SDRFPC DOF POSTStrata POSTWeight C
> ALMethod CALMOdel CALOpts SINGLEunit SU STRata FPC Weight STAGES stages_wt ]
                - if c(rc) {
                  di as err "invalid survey characteristic"
                  exit 198
                  }
                - local gname `stages' `stages_wt' `pweight' `iweight' `wtype' `
> wvar' `wexp' `vce' `mse' `brrweight' `fay' `bsrweight' `bsn' `jkrweight' `sdrw
> eight' `sdrfpc' `dof' `poststrata' `postweight' `calmethod' `calmodel' `calopt
> s' `singleunit'
                = local gname                       
                - local sname `su' `strata' `fpc' `weight'
                = local sname    weight
                - local k : word count `gname' `sname'
                = local k : word count  weight
                - if `k' > 1 {
                = if 1 > 1 {
                  di as err "too many names"
                  exit 103
                  }
                - if `k' == 0 {
                = if 1 == 0 {
                  di as err "name required"
                  exit 100
                  }
                - sreturn local gname `gname'
                = sreturn local gname 
                - sreturn local sname `sname'
                = sreturn local sname weight
                -------------------------------------- end _svyset.CheckName ---
              - if "`s(sname)'" != "" {
              = if "weight" != "" {
              - local name `s(sname)'
              = local name weight
              - CheckPosInt `i'
              = CheckPosInt 1
                ---------------------------------- begin _svyset.CheckPosInt ---
                - confirm integer number `0'
                = confirm integer number 1
                - if `0' < 1 {
                = if 1 < 1 {
                  di as err "'`0'' found where positive integer required"
                  exit 7
                  }
                ------------------------------------ end _svyset.CheckPosInt ---
              - }
              - else local name `s(gname)'
              = else local name 
              - if inlist("`name'", "wtype", "wvar", "wexp") {
              = if inlist("weight", "wtype", "wvar", "wexp") {
                local wtype : char _dta[_svy_wtype]
                local wvar : char _dta[_svy_wvar]
                if `"`wtype'`wvar'"' != "" {
                if `"`wtype'"' == "" {
                di as err "error in svy settings; weight variable set without we
> ight type"
                exit 459
                }
                if `"`wvar'"' == "" {
                "error in svy settings; weight type set without weight variable"
                exit 459
                }
                CheckName `wtype'
                local wtype `s(gname)' `s(sname)'
                if !inlist("`wtype'", "pweight", "iweight") {
                "error in svy settings; invalid weight type"
                exit 459
                }
                CheckNumVar `wvar'
                local wvar `s(varname)'
                local wexp "= `wvar'"
                return local wtype `"`wtype'"'
                return local wvar `"`wvar'"'
                return local wexp `"`wexp'"'
                }
                exit
                }
              - if "`name'" == "stages" {
              = if "weight" == "stages" {
                local stages : char _dta[_svy_stages]
                capture CheckPosInt `stages'
                if c(rc) {
                return scalar stages = 0
                }
                return scalar stages = `stages'
                exit
                }
              - if "`name'" == "stages_wt" {
              = if "weight" == "stages_wt" {
                local stages_wt : char _dta[_svy_stages_wt]
                capture CheckPosInt `stages_wt'
                if c(rc) {
                return scalar stages_wt = 0
                }
                else {
                return scalar stages_wt = `stages_wt'
                }
                exit
                }
              - if inlist("`name'", "vce", "mse") {
              = if inlist("weight", "vce", "mse") {
                local vce : char _dta[_svy_vce]
                local mse : char _dta[_svy_mse]
                if `"`vce'`mse'"' != "" {
                _svy_check_vce `vce', `mse'
                return local vce `s(vce)'
                return local mse `s(mse)'
                }
                exit
                }
              - if "`name'" == "brrweight" {
              = if "weight" == "brrweight" {
                local brr : char _dta[_svy_brrweight]
                if `"`brr'"' != "" {
                CheckNumVarlist `brr'
                return local brrweight `s(varlist)'
                }
                exit
                }
              - if "`name'" == "fay" {
              = if "weight" == "fay" {
                local fay : char _dta[_svy_fay]
                if `"`fay'"' != "" {
                CheckFay `fay'
                return scalar fay = `s(value)'
                }
                exit
                }
              - if "`name'" == "bsrweight" {
              = if "weight" == "bsrweight" {
                local bsr : char _dta[_svy_bsrweight]
                if `"`bsr'"' != "" {
                CheckNumVarlist `bsr'
                return local bsrweight `s(varlist)'
                }
                exit
                }
              - if "`name'" == "bsn" {
              = if "weight" == "bsn" {
                local bsn : char _dta[_svy_bsn]
                if `"`bsn'"' != "" {
                CheckBSN `bsn'
                return scalar bsn = `s(value)'
                }
                exit
                }
              - if "`name'" == "jkrweight" {
              = if "weight" == "jkrweight" {
                local jkr : char _dta[_svy_jkrweight]
                if `"`jkr'"' != "" {
                CheckNumVarlist `jkr'
                return local jkrweight `s(varlist)'
                }
                exit
                }
              - if "`name'" == "sdrweight" {
              = if "weight" == "sdrweight" {
                local sdr : char _dta[_svy_sdrweight]
                if `"`sdr'"' != "" {
                CheckNumVarlist `sdr'
                return local sdrweight `s(varlist)'
                local fpc : char _dta[_svy_sdrfpc]
                if `"`fpc'"' != "" {
                return local sdrfpc `"`fpc'"'
                }
                }
                exit
                }
              - if "`name'" == "dof" {
              = if "weight" == "dof" {
                local dof : char _dta[_svy_dof]
                if `"`dof'"' != "" {
                CheckDOF `dof'
                return scalar dof = `s(value)'
                }
                exit
                }
              - if "`name'" == "poststrata" {
              = if "weight" == "poststrata" {
                local poststrata : char _dta[_svy_poststrata]
                local postweight : char _dta[_svy_postweight]
                if `"`poststrata'`postweight'"' != "" {
                if "`postweight'" == "" {
                di as err "error in svy settings; poststrata set without postwei
> ght"
                exit 459
                }
                if "`poststrata'" == "" {
                di as err "error in svy settings; postweight set without poststr
> ata"
                exit 459
                }
                CheckVar `poststrata'
                return local poststrata `s(varname)'
                CheckPostW `postweight'
                return local postweight `s(varname)'
                }
                exit
                }
              - if "`name'" == "calmethod" {
              = if "weight" == "calmethod" {
                local calmethod : char _dta[_svy_calmethod]
                local calmodel : char _dta[_svy_calmodel]
                local calopts : char _dta[_svy_calopts]
                if `"`calmethod'`calmodel'`calopts'"' != "" {
                if "`calmethod'" == "" {
                di as err "error in svy settings; calibration method not properl
> y set"
                exit 459
                }
                if "`calmodel'" == "" {
                di as err "error in svy settings; calibration model not properly
>  set"
                exit 459
                }
                if "`calopts'" == "" {
                di as err "error in svy settings; calibration options not proper
> ly set"
                exit 459
                }
                CheckCalMethod `calmethod'
                return hidden local calmethod `"`s(method)'"'
                return hidden local calmodel `"`calmodel'"'
                return hidden local calopts `"`calopts'"'
                }
                exit
                }
              - if "`name'" == "su" {
              = if "weight" == "su" {
                CheckPosInt `i'
                local su : char _dta[_svy_su`i']
                if !inlist("`su'", "", "_n") {
                CheckVar `su'
                return local su`i' `s(varname)'
                }
                else return local su`i' `su'
                exit
                }
              - if "`name'" == "weight" {
              = if "weight" == "weight" {
              - CheckPosInt `i'
              = CheckPosInt 1
                ---------------------------------- begin _svyset.CheckPosInt ---
                - confirm integer number `0'
                = confirm integer number 1
                - if `0' < 1 {
                = if 1 < 1 {
                  di as err "'`0'' found where positive integer required"
                  exit 7
                  }
                ------------------------------------ end _svyset.CheckPosInt ---
              - local weight : char _dta[_svy_weight`i']
              = local weight : char _dta[_svy_weight1]
              - if "`weight'" != "" {
              = if "" != "" {
                CheckVar `weight'
                return local weight`i' `s(varname)'
                }
              - exit
              ---------------------------------------------- end _svyset.Get ---
            - exit
            ---------------------------------------------------- end _svyset ---
          - local weight `r(weight`i')'
          = local weight 
          - if `"`weight'"' != "" {
          = if `""' != "" {
            local wlist `wlist' `weight'
            return add
            local sets `"`sets'`comma' weight(`weight')"'
            local comma
            }
          - _svyset get fpc `i'
          = _svyset get fpc 1
            -------------------------------------------------- begin _svyset ---
            - version 9
            - gettoken cmd 0 : 0
            - if "`cmd'" == "clear" {
            = if "get" == "clear" {
              Clear `0'
              exit
              }
            - if "`cmd'" == "set" {
            = if "get" == "set" {
              Set `0'
              exit
              }
            - if "`cmd'" == "get" {
            = if "get" == "get" {
            - Get `0'
            = Get  fpc 1
              -------------------------------------------- begin _svyset.Get ---
              - if `:word count `0'' > 2 {
              = if 2 > 2 {
                di as err "too many arguments"
                exit 103
                }
              - args name i
              - CheckName `name'
              = CheckName fpc
                ------------------------------------ begin _svyset.CheckName ---
                - local 0 `", `0'"'
                = local 0 `", fpc"'
                - capture syntax [, WTYPE WEXP WVAR PWeight IWeight VCE MSE BRRw
> eight FAY BSRweight BSN JKRweight SDRweight SDRFPC DOF POSTStrata POSTWeight C
> ALMethod CALMOdel CALOpts SINGLEunit SU STRata FPC Weight STAGES stages_wt ]
                - if c(rc) {
                  di as err "invalid survey characteristic"
                  exit 198
                  }
                - local gname `stages' `stages_wt' `pweight' `iweight' `wtype' `
> wvar' `wexp' `vce' `mse' `brrweight' `fay' `bsrweight' `bsn' `jkrweight' `sdrw
> eight' `sdrfpc' `dof' `poststrata' `postweight' `calmethod' `calmodel' `calopt
> s' `singleunit'
                = local gname                       
                - local sname `su' `strata' `fpc' `weight'
                = local sname   fpc 
                - local k : word count `gname' `sname'
                = local k : word count  fpc
                - if `k' > 1 {
                = if 1 > 1 {
                  di as err "too many names"
                  exit 103
                  }
                - if `k' == 0 {
                = if 1 == 0 {
                  di as err "name required"
                  exit 100
                  }
                - sreturn local gname `gname'
                = sreturn local gname 
                - sreturn local sname `sname'
                = sreturn local sname fpc
                -------------------------------------- end _svyset.CheckName ---
              - if "`s(sname)'" != "" {
              = if "fpc" != "" {
              - local name `s(sname)'
              = local name fpc
              - CheckPosInt `i'
              = CheckPosInt 1
                ---------------------------------- begin _svyset.CheckPosInt ---
                - confirm integer number `0'
                = confirm integer number 1
                - if `0' < 1 {
                = if 1 < 1 {
                  di as err "'`0'' found where positive integer required"
                  exit 7
                  }
                ------------------------------------ end _svyset.CheckPosInt ---
              - }
              - else local name `s(gname)'
              = else local name 
              - if inlist("`name'", "wtype", "wvar", "wexp") {
              = if inlist("fpc", "wtype", "wvar", "wexp") {
                local wtype : char _dta[_svy_wtype]
                local wvar : char _dta[_svy_wvar]
                if `"`wtype'`wvar'"' != "" {
                if `"`wtype'"' == "" {
                di as err "error in svy settings; weight variable set without we
> ight type"
                exit 459
                }
                if `"`wvar'"' == "" {
                "error in svy settings; weight type set without weight variable"
                exit 459
                }
                CheckName `wtype'
                local wtype `s(gname)' `s(sname)'
                if !inlist("`wtype'", "pweight", "iweight") {
                "error in svy settings; invalid weight type"
                exit 459
                }
                CheckNumVar `wvar'
                local wvar `s(varname)'
                local wexp "= `wvar'"
                return local wtype `"`wtype'"'
                return local wvar `"`wvar'"'
                return local wexp `"`wexp'"'
                }
                exit
                }
              - if "`name'" == "stages" {
              = if "fpc" == "stages" {
                local stages : char _dta[_svy_stages]
                capture CheckPosInt `stages'
                if c(rc) {
                return scalar stages = 0
                }
                return scalar stages = `stages'
                exit
                }
              - if "`name'" == "stages_wt" {
              = if "fpc" == "stages_wt" {
                local stages_wt : char _dta[_svy_stages_wt]
                capture CheckPosInt `stages_wt'
                if c(rc) {
                return scalar stages_wt = 0
                }
                else {
                return scalar stages_wt = `stages_wt'
                }
                exit
                }
              - if inlist("`name'", "vce", "mse") {
              = if inlist("fpc", "vce", "mse") {
                local vce : char _dta[_svy_vce]
                local mse : char _dta[_svy_mse]
                if `"`vce'`mse'"' != "" {
                _svy_check_vce `vce', `mse'
                return local vce `s(vce)'
                return local mse `s(mse)'
                }
                exit
                }
              - if "`name'" == "brrweight" {
              = if "fpc" == "brrweight" {
                local brr : char _dta[_svy_brrweight]
                if `"`brr'"' != "" {
                CheckNumVarlist `brr'
                return local brrweight `s(varlist)'
                }
                exit
                }
              - if "`name'" == "fay" {
              = if "fpc" == "fay" {
                local fay : char _dta[_svy_fay]
                if `"`fay'"' != "" {
                CheckFay `fay'
                return scalar fay = `s(value)'
                }
                exit
                }
              - if "`name'" == "bsrweight" {
              = if "fpc" == "bsrweight" {
                local bsr : char _dta[_svy_bsrweight]
                if `"`bsr'"' != "" {
                CheckNumVarlist `bsr'
                return local bsrweight `s(varlist)'
                }
                exit
                }
              - if "`name'" == "bsn" {
              = if "fpc" == "bsn" {
                local bsn : char _dta[_svy_bsn]
                if `"`bsn'"' != "" {
                CheckBSN `bsn'
                return scalar bsn = `s(value)'
                }
                exit
                }
              - if "`name'" == "jkrweight" {
              = if "fpc" == "jkrweight" {
                local jkr : char _dta[_svy_jkrweight]
                if `"`jkr'"' != "" {
                CheckNumVarlist `jkr'
                return local jkrweight `s(varlist)'
                }
                exit
                }
              - if "`name'" == "sdrweight" {
              = if "fpc" == "sdrweight" {
                local sdr : char _dta[_svy_sdrweight]
                if `"`sdr'"' != "" {
                CheckNumVarlist `sdr'
                return local sdrweight `s(varlist)'
                local fpc : char _dta[_svy_sdrfpc]
                if `"`fpc'"' != "" {
                return local sdrfpc `"`fpc'"'
                }
                }
                exit
                }
              - if "`name'" == "dof" {
              = if "fpc" == "dof" {
                local dof : char _dta[_svy_dof]
                if `"`dof'"' != "" {
                CheckDOF `dof'
                return scalar dof = `s(value)'
                }
                exit
                }
              - if "`name'" == "poststrata" {
              = if "fpc" == "poststrata" {
                local poststrata : char _dta[_svy_poststrata]
                local postweight : char _dta[_svy_postweight]
                if `"`poststrata'`postweight'"' != "" {
                if "`postweight'" == "" {
                di as err "error in svy settings; poststrata set without postwei
> ght"
                exit 459
                }
                if "`poststrata'" == "" {
                di as err "error in svy settings; postweight set without poststr
> ata"
                exit 459
                }
                CheckVar `poststrata'
                return local poststrata `s(varname)'
                CheckPostW `postweight'
                return local postweight `s(varname)'
                }
                exit
                }
              - if "`name'" == "calmethod" {
              = if "fpc" == "calmethod" {
                local calmethod : char _dta[_svy_calmethod]
                local calmodel : char _dta[_svy_calmodel]
                local calopts : char _dta[_svy_calopts]
                if `"`calmethod'`calmodel'`calopts'"' != "" {
                if "`calmethod'" == "" {
                di as err "error in svy settings; calibration method not properl
> y set"
                exit 459
                }
                if "`calmodel'" == "" {
                di as err "error in svy settings; calibration model not properly
>  set"
                exit 459
                }
                if "`calopts'" == "" {
                di as err "error in svy settings; calibration options not proper
> ly set"
                exit 459
                }
                CheckCalMethod `calmethod'
                return hidden local calmethod `"`s(method)'"'
                return hidden local calmodel `"`calmodel'"'
                return hidden local calopts `"`calopts'"'
                }
                exit
                }
              - if "`name'" == "su" {
              = if "fpc" == "su" {
                CheckPosInt `i'
                local su : char _dta[_svy_su`i']
                if !inlist("`su'", "", "_n") {
                CheckVar `su'
                return local su`i' `s(varname)'
                }
                else return local su`i' `su'
                exit
                }
              - if "`name'" == "weight" {
              = if "fpc" == "weight" {
                CheckPosInt `i'
                local weight : char _dta[_svy_weight`i']
                if "`weight'" != "" {
                CheckVar `weight'
                return local weight`i' `s(varname)'
                }
                exit
                }
              - if "`name'" == "strata" {
              = if "fpc" == "strata" {
                CheckPosInt `i'
                local strata : char _dta[_svy_strata`i']
                if "`strata'" != "" {
                CheckVar `strata'
                return local strata`i' `s(varname)'
                }
                exit
                }
              - if "`name'" == "fpc" {
              = if "fpc" == "fpc" {
              - CheckPosInt `i'
              = CheckPosInt 1
                ---------------------------------- begin _svyset.CheckPosInt ---
                - confirm integer number `0'
                = confirm integer number 1
                - if `0' < 1 {
                = if 1 < 1 {
                  di as err "'`0'' found where positive integer required"
                  exit 7
                  }
                ------------------------------------ end _svyset.CheckPosInt ---
              - local fpc : char _dta[_svy_fpc`i']
              = local fpc : char _dta[_svy_fpc1]
              - if "`fpc'" != "" {
              = if "" != "" {
                CheckVar `fpc'
                return local fpc`i' `s(varname)'
                }
              - exit
              ---------------------------------------------- end _svyset.Get ---
            - exit
            ---------------------------------------------------- end _svyset ---
          - local fpc `r(fpc`i')'
          = local fpc 
          - if `"`fpc'"' != "" {
          = if `""' != "" {
            return add
            local sets `"`sets'`comma' fpc(`fpc')"'
            local comma
            }
          - else if `i' < `stages' {
          = else if 1 < 1 {
            di as err "invalid survey characteristics;" _n "FPC variable is not 
> set for stage `i' of `stages' stages"
            exit 459
            }
          - local oror " || "
          - }
          - if `is_set' == 0 {
          = if 1 == 0 {
            return clear
            local sets ", clear"
            }
          - else {
          - if `"`gsets'"' != "" {
          = if `" singleunit(missing) vce(linearized)"' != "" {
          - local sets `"`sets'`comma' `:list retok gsets'"'
          = local sets `"_n [pweight= asecwth], singleunit(missing) vce(lineariz
> ed)"'
          - }
          - if `"`return(singleunit)'"' == "" {
          = if `"missing"' == "" {
            return local singleunit missing
            }
          - }
          - return local settings `"`sets'"'
          = return local settings `"_n [pweight= asecwth], singleunit(missing) v
> ce(linearized)"'
          - if `stages' {
          = if 1 {
          - return scalar stages = `stages'
          = return scalar stages = 1
          - }
          - if `stages_wt' {
          = if 0 {
            return scalar stages_wt = `stages_wt'
            }
          - else return hidden scalar stages_wt = 0
          - return hidden local wlist `"`wlist'"'
          = return hidden local wlist `""'
          --------------------------------------------------- end svyset.Get ---
        - if `"`r(settings)'"' == ", clear" {
        = if `"_n [pweight= asecwth], singleunit(missing) vce(linearized)"' == "
> , clear" {
          di as txt "no survey characteristics are set"
          exit
          }
        - di

        - local c2 16
        - local sfmt %13s
        - if `"`r(wtype)'"' != "" {
        = if `"pweight"' != "" {
        - local wvar `"`r(wvar)'"'
        = local wvar `"asecwth"'
        - di as txt `sfmt' "`r(wtype)'" ":" _col(`c2') as res "`wvar'"
        = di as txt %13s "pweight" ":" _col(16) as res "asecwth"
      pweight: asecwth
        - }
        - else {
          di as txt `sfmt' "pweight" ":" _col(`c2') "<none>"
          }
        - if `"`r(vce)'"' != "" {
        = if `"linearized"' != "" {
        - di as txt `sfmt' "VCE" ":" _col(`c2') as res "`r(vce)'"
        = di as txt %13s "VCE" ":" _col(16) as res "linearized"
          VCE: linearized
        - if !inlist("`r(vce)'", "", "linearized") {
        = if !inlist("linearized", "", "linearized") {
          if "`r(mse)'" == "" {
          local mseas as txt
          local onoff off
          }
          else {
          local mseas as res
          local onoff on
          }
          di as txt `sfmt' "MSE" ":" _col(`c2') `mseas' "`onoff'"
          }
        - }
        - else {
          di as txt `sfmt' "VCE" ":" _col(`c2') "linearized"
          }
        - local colsets 1 `c2' `c2' 2
        = local colsets 1 16 16 2
        - if `"`r(brrweight)'"' != "" {
        = if `""' != "" {
          FirstLast result `r(brrweight)'
          di "{p2colset `colsets'}{...}"
          di as txt "{p2col:{space 4}brrweight:}" as res "`result'{p_end}"
          di "{p2colreset}{...}"
          }
        - if `"`r(fay)'"' != "" {
        = if `""' != "" {
          di "{p2colset `colsets'}{...}"
          di as txt "{p2col:{space 10}fay:}" as res `r(fay)' "{p_end}"
          di "{p2colreset}{...}"
          }
        - if `"`r(bsrweight)'"' != "" {
        = if `""' != "" {
          FirstLast result `r(bsrweight)'
          di "{p2colset `colsets'}{...}"
          di as txt "{p2col:{space 4}bsrweight:}" as res "`result'{p_end}"
          di "{p2colreset}{...}"
          }
        - if `"`r(bsn)'"' != "" {
        = if `""' != "" {
          di "{p2colset `colsets'}{...}"
          di as txt "{p2col:{space 10}bsn:}" as res `r(bsn)' "{p_end}"
          di "{p2colreset}{...}"
          }
        - if `"`r(jkrweight)'"' != "" {
        = if `""' != "" {
          FirstLast result `r(jkrweight)'
          di "{p2colset `colsets'}{...}"
          di as txt "{p2col:{space 4}jkrweight:}" as res "`result'{p_end}"
          di "{p2colreset}{...}"
          }
        - if `"`r(sdrweight)'"' != "" {
        = if `""' != "" {
          FirstLast result `r(sdrweight)'
          di "{p2colset `colsets'}{...}"
          di as txt "{p2col:{space 4}sdrweight:}" as res "`result'{p_end}"
          di "{p2colreset}{...}"
          }
        - if `"`r(dof)'"' != "" {
        = if `""' != "" {
          di "{p2colset `colsets'}{...}"
          di as txt "{p2col:{space 4}Design df:}" as res `r(dof)' "{p_end}"
          di "{p2colreset}{...}"
          }
        - if `"`r(poststrata)'"' != "" {
        = if `""' != "" {
          di as txt `sfmt' "Poststrata" ":" _col(`c2') as res "`r(poststrata)'"
          }
        - if `"`r(postweight)'"' != "" {
        = if `""' != "" {
          di as txt `sfmt' "Postweight" ":" _col(`c2') as res "`r(postweight)'"
          }
        - if `"`r(calmethod)'"' != "" {
        = if `""' != "" {
          di as txt `sfmt' "Calibration" ":" _col(`c2') as res "`r(calmethod)'"
          }
        - if `"`r(singleunit)'"' != "" {
        = if `"missing"' != "" {
        - di as txt `sfmt' "Single unit" ":" _col(`c2') as res "`r(singleunit)'"
        = di as txt %13s "Single unit" ":" _col(16) as res "missing"
  Single unit: missing
        - }
        - if !missing(r(stages)) {
        - local stages = r(stages)
        - }
        - else {
          local stages = 0
          }
        - if !missing(r(stages_wt)) {
        - local stages_wt = r(stages_wt)
        - }
        - else {
          local stages_wt = 0
          }
        - if `stages_wt' > `stages' {
        = if 0 > 1 {
          local I = `stages_wt'
          }
        - else {
        - local I = `stages'
        = local I = 1
        - }
        - forval i = 1/`I' {
        = forval i = 1/1 {
        - if `"`r(strata`i')'"' != "" {
        = if `""' != "" {
          di as txt `sfmt' "Strata `i'" ":" _col(`c2') as res "`r(strata`i')'"
          }
        - else {
        - di as txt `sfmt' "Strata `i'" ":" _col(`c2') "<one>"
        = di as txt %13s "Strata 1" ":" _col(16) "<one>"
     Strata 1: <one>
        - }
        - if !inlist(`"`r(su`i')'"', "", "_n") {
        = if !inlist(`""', "", "_n") {
          di as txt `sfmt' "SU `i'" ":" _col(`c2') as res "`r(su`i')'"
          }
        - else {
        - di as txt `sfmt' "SU `i'" ":" _col(`c2') "<observations>"
        = di as txt %13s "SU 1" ":" _col(16) "<observations>"
         SU 1: <observations>
        - }
        - if `"`r(fpc`i')'"' != "" {
        = if `""' != "" {
          di as txt `sfmt' "FPC `i'" ":" _col(`c2') as res "`r(fpc`i')'"
          }
        - else {
        - di as txt `sfmt' "FPC `i'" ":" _col(`c2') as txt "<zero>"
        = di as txt %13s "FPC 1" ":" _col(16) as txt "<zero>"
        FPC 1: <zero>
        - }
        - if `"`r(weight`i')'"' != "" {
        = if `""' != "" {
          di as txt `sfmt' "Weight `i'" ":" _col(`c2') as res "`r(weight`i')'"
          }
        - else if `stages_wt' {
        = else if 0 {
          di as txt `sfmt' "Weight `i'" ":" _col(`c2') "<none>"
          }
        - }
        - di as txt "{p2colreset}{...}"
        ------------------------------------------------- end svyset.Display ---
      ---------------------------------------------------- end svyset.SvySet ---
    - if c(rc) {
      local rc = c(rc)
      capture SvySet `oldset'
      exit `rc'
      }
    ------------------------------------------------------------- end svyset ---
  - compress
  (0 bytes saved)
  - tempfile ref_data
  - save `ref_data'
  = save /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.000002
file /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.000002 saved
  - local ref_income_var "hhincome"
  - di "Income type set as `inc_var' income; " "Calculating household income usi
> ng hhincome CPS-ASEC variable."
  = di "Income type set as  income; " "Calculating household income using hhinco
> me CPS-ASEC variable."
Income type set as  income; Calculating household income using hhincome CPS-ASEC
>  variable.
  - }
  - else if "`cpstype'" == "respondent" & `"`using'"' == "" {
  = else if "household" == "respondent" & `""' == "" {
    use `reference_dataset', clear
    svyset [pweight=asecwt]
    compress
    tempfile ref_data
    save `ref_data'
    local ref_income_var "inctot"
    di "Income type set as `inc_var' income; " "Calculating respondent income us
> ing inctot ASEC variable."
    }
  - else if `"`cpstype'"' != "household" & `"`cpstype'"' != "family" & `"`csstyp
> e'"' != "respondent" {
  = else if `"household"' != "household" & `"household"' != "family" & `""' != "
> respondent" {
    display as err "CPS income type must be either household, family, or respond
> ent."
    error 999
    }
  - use `research_data', clear
  = use /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.000001, clear
(Streamlined ACS data, 2019)
  - levelsof `inc_cat_var', local("`inc_cat_var'_levels")
  = levelsof acs_hhinc, local("acs_hhinc_levels")
    =        if (N <= 2000) {
    =        y = srswor(x, 200)
    =        if (rows(t) >= 50) {
    =        return(multiplicity(sum(t[., 2] :== 1), rows(t)) < 50)
    --------------------------------------------------------- begin levelsof ---
    - version 15.0
    - syntax varname [if] [in] [, Separate(str) MISSing Local(name local) Clean 
> MATROW(name) MATCELL(name) HEXadecimal ]
    - if ("`missing'" == "") {
    = if ("" == "") {
    - marksample touse, strok
    - }
    - else {
      marksample touse, strok novarlist
      }
    - if (`"`separate'"' == "") {
    = if (`""' == "") {
    - local separate " "
    - }
    - local typ : type `varlist'
    = local typ : type acs_hhinc
    - if ("`typ'" == "strL" | substr("`typ'", 1, 3) == "str") {
    = if ("float" == "strL" | substr("float", 1, 3) == "str") {
      NoHexadecimal `hexadecimal'
      NoMatrow `matrow'
      }
    - mata: st_rclear()
    - if ("`typ'" == "strL") {
    = if ("float" == "strL") {
      LevelsOfStrL `varlist' if `touse', separate(`"`separate'"') `clean' matcel
> l(`matcell')
      }
    - else if (substr("`typ'", 1, 3) == "str") {
    = else if (substr("float", 1, 3) == "str") {
      local isclean = ("`clean'" != "")
      mata: LevelsOfString("`varlist'", "`touse'", `"`separate'"', `isclean', "`
> matcell'")
      }
    - else {
    - local isint = inlist("`typ'", "byte", "int", "long")
    = local isint = inlist("float", "byte", "int", "long")
    - mata: LevelsOfReal("`varlist'", "`touse'", `"`separate'"', `isint', 1, "`m
> atrow'", "`matcell'", "`hexadecimal'" != "")
    = mata: LevelsOfReal("acs_hhinc", "__000000", `" "', 0, 1, "", "", "" != "")
    - if ("`usetab'" == "usetab") {
    = if ("usetab" == "usetab") {
    - cap LevelsOfTab `varlist' if `touse', `missing' separate(`"`separate'"') m
> atrow(`matrow') matcell(`matcell') `hexadecimal'
    = cap LevelsOfTab acs_hhinc if __000000,  separate(`" "') matrow() matcell()
>  
      ------------------------------------------- begin levelsof.LevelsOfTab ---
      - syntax varname(numeric) if [, MISSING SEPARATE(str) MATROW(name) MATCELL
> (name) HEXADECIMAL ]
      - tempname row
      - if ("`matcell'" != "") {
      = if ("" != "") {
        tempname cell
        }
      - qui tab `varlist' `if', `missing' matrow(`row') matcell(`cell')
      = qui tab acs_hhinc if __000000,  matrow(__000001) matcell()
      - if (r(N) == 0) {
        return scalar r = 0
        return scalar N = 0
        exit
        }
      - local n `r(r)'
      = local n 9
      - if (`"`separate'"' == "") {
      = if (`" "' == "") {
        local separate " "
        }
      - if ("`hexadecimal'" == "") {
      = if ("" == "") {
      - forvalues i = 1/`n' {
      = forvalues i = 1/9 {
      - if (`row'[`i', 1] == int(`row'[`i', 1])) {
      = if (__000001[1, 1] == int(__000001[1, 1])) {
      - local lev : di %21.0g `row'[`i', 1]
      = local lev : di %21.0g __000001[1, 1]
      - local lev `lev'
      = local lev                     1
      - }
      - else {
        local lev = `row'[`i', 1]
        }
      - if (`i' == 1) {
      = if (1 == 1) {
      - local levels `lev'
      = local levels 1
      - }
      - else {
        local levels `levels'`separate'`lev'
        }
      - }
      - if (`row'[`i', 1] == int(`row'[`i', 1])) {
      = if (__000001[2, 1] == int(__000001[2, 1])) {
      - local lev : di %21.0g `row'[`i', 1]
      = local lev : di %21.0g __000001[2, 1]
      - local lev `lev'
      = local lev                     2
      - }
      - else {
        local lev = `row'[`i', 1]
        }
      - if (`i' == 1) {
      = if (2 == 1) {
        local levels `lev'
        }
      - else {
      - local levels `levels'`separate'`lev'
      = local levels 1 2
      - }
      - }
      - if (`row'[`i', 1] == int(`row'[`i', 1])) {
      = if (__000001[3, 1] == int(__000001[3, 1])) {
      - local lev : di %21.0g `row'[`i', 1]
      = local lev : di %21.0g __000001[3, 1]
      - local lev `lev'
      = local lev                     3
      - }
      - else {
        local lev = `row'[`i', 1]
        }
      - if (`i' == 1) {
      = if (3 == 1) {
        local levels `lev'
        }
      - else {
      - local levels `levels'`separate'`lev'
      = local levels 1 2 3
      - }
      - }
      - if (`row'[`i', 1] == int(`row'[`i', 1])) {
      = if (__000001[4, 1] == int(__000001[4, 1])) {
      - local lev : di %21.0g `row'[`i', 1]
      = local lev : di %21.0g __000001[4, 1]
      - local lev `lev'
      = local lev                     4
      - }
      - else {
        local lev = `row'[`i', 1]
        }
      - if (`i' == 1) {
      = if (4 == 1) {
        local levels `lev'
        }
      - else {
      - local levels `levels'`separate'`lev'
      = local levels 1 2 3 4
      - }
      - }
      - if (`row'[`i', 1] == int(`row'[`i', 1])) {
      = if (__000001[5, 1] == int(__000001[5, 1])) {
      - local lev : di %21.0g `row'[`i', 1]
      = local lev : di %21.0g __000001[5, 1]
      - local lev `lev'
      = local lev                     5
      - }
      - else {
        local lev = `row'[`i', 1]
        }
      - if (`i' == 1) {
      = if (5 == 1) {
        local levels `lev'
        }
      - else {
      - local levels `levels'`separate'`lev'
      = local levels 1 2 3 4 5
      - }
      - }
      - if (`row'[`i', 1] == int(`row'[`i', 1])) {
      = if (__000001[6, 1] == int(__000001[6, 1])) {
      - local lev : di %21.0g `row'[`i', 1]
      = local lev : di %21.0g __000001[6, 1]
      - local lev `lev'
      = local lev                     6
      - }
      - else {
        local lev = `row'[`i', 1]
        }
      - if (`i' == 1) {
      = if (6 == 1) {
        local levels `lev'
        }
      - else {
      - local levels `levels'`separate'`lev'
      = local levels 1 2 3 4 5 6
      - }
      - }
      - if (`row'[`i', 1] == int(`row'[`i', 1])) {
      = if (__000001[7, 1] == int(__000001[7, 1])) {
      - local lev : di %21.0g `row'[`i', 1]
      = local lev : di %21.0g __000001[7, 1]
      - local lev `lev'
      = local lev                     7
      - }
      - else {
        local lev = `row'[`i', 1]
        }
      - if (`i' == 1) {
      = if (7 == 1) {
        local levels `lev'
        }
      - else {
      - local levels `levels'`separate'`lev'
      = local levels 1 2 3 4 5 6 7
      - }
      - }
      - if (`row'[`i', 1] == int(`row'[`i', 1])) {
      = if (__000001[8, 1] == int(__000001[8, 1])) {
      - local lev : di %21.0g `row'[`i', 1]
      = local lev : di %21.0g __000001[8, 1]
      - local lev `lev'
      = local lev                     8
      - }
      - else {
        local lev = `row'[`i', 1]
        }
      - if (`i' == 1) {
      = if (8 == 1) {
        local levels `lev'
        }
      - else {
      - local levels `levels'`separate'`lev'
      = local levels 1 2 3 4 5 6 7 8
      - }
      - }
      - if (`row'[`i', 1] == int(`row'[`i', 1])) {
      = if (__000001[9, 1] == int(__000001[9, 1])) {
      - local lev : di %21.0g `row'[`i', 1]
      = local lev : di %21.0g __000001[9, 1]
      - local lev `lev'
      = local lev                     9
      - }
      - else {
        local lev = `row'[`i', 1]
        }
      - if (`i' == 1) {
      = if (9 == 1) {
        local levels `lev'
        }
      - else {
      - local levels `levels'`separate'`lev'
      = local levels 1 2 3 4 5 6 7 8 9
      - }
      - }
      - }
      - else {
        local levels : di %21x `row'[1, 1]
        forvalues i = 2/`n' {
        local lev : di %21x `row'[`i', 1]
        local levels `levels'`separate'`lev'
        }
        }
      - if ("`matrow'" != "") {
      = if ("" != "") {
        MatrixRename `row' `matrow'
        }
      - if ("`matcell'" != "") {
      = if ("" != "") {
        MatrixRename `cell' `matcell'
        }
      - return scalar r = r(r)
      - return scalar N = r(N)
      - return local levels `levels'
      = return local levels 1 2 3 4 5 6 7 8 9
      --------------------------------------------- end levelsof.LevelsOfTab ---
    - if (_rc) {
      mata: LevelsOfReal("`varlist'", "`touse'", `"`separate'"', `isint', 0, "`m
> atrow'", "`matcell'", "`hexadecimal'" != "")
      }
    - }
    - }
    - if ("`local'" != "") {
    = if ("acs_hhinc_levels" != "") {
    - c_local `local' `"`r(levels)'"'
    = c_local acs_hhinc_levels `"1 2 3 4 5 6 7 8 9"'
    - }
    - di as text `"`r(levels)'"'
    = di as text `"1 2 3 4 5 6 7 8 9"'
1 2 3 4 5 6 7 8 9
    ----------------------------------------------------------- end levelsof ---
  - bysort `research_year' `inc_cat_var': gen id = _n
  = bysort year acs_hhinc: gen id = _n
  - di "The income levels are: " "``inc_cat_var'_levels'"
  = di "The income levels are: " "1 2 3 4 5 6 7 8 9"
The income levels are: 1 2 3 4 5 6 7 8 9
  - capture confirm string variable `inc_cat_var'
  = capture confirm string variable acs_hhinc
  - if !_rc {
    gen inc_decoded = `inc_cat_var'
    }
  - else {
  - decode `inc_cat_var', gen(inc_decoded)
  = decode acs_hhinc, gen(inc_decoded)
  - }
  - tempfile working_regex
  - save `working_regex', replace
  = save /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.000003, repla
> ce
(note: file /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.000003 not
>  found)
file /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.000003 saved
  - levelsof `research_year', local(years)
  = levelsof year, local(years)
    --------------------------------------------------------- begin levelsof ---
    - version 15.0
    - syntax varname [if] [in] [, Separate(str) MISSing Local(name local) Clean 
> MATROW(name) MATCELL(name) HEXadecimal ]
    - if ("`missing'" == "") {
    = if ("" == "") {
    - marksample touse, strok
    - }
    - else {
      marksample touse, strok novarlist
      }
    - if (`"`separate'"' == "") {
    = if (`""' == "") {
    - local separate " "
    - }
    - local typ : type `varlist'
    = local typ : type year
    - if ("`typ'" == "strL" | substr("`typ'", 1, 3) == "str") {
    = if ("int" == "strL" | substr("int", 1, 3) == "str") {
      NoHexadecimal `hexadecimal'
      NoMatrow `matrow'
      }
    - mata: st_rclear()
    - if ("`typ'" == "strL") {
    = if ("int" == "strL") {
      LevelsOfStrL `varlist' if `touse', separate(`"`separate'"') `clean' matcel
> l(`matcell')
      }
    - else if (substr("`typ'", 1, 3) == "str") {
    = else if (substr("int", 1, 3) == "str") {
      local isclean = ("`clean'" != "")
      mata: LevelsOfString("`varlist'", "`touse'", `"`separate'"', `isclean', "`
> matcell'")
      }
    - else {
    - local isint = inlist("`typ'", "byte", "int", "long")
    = local isint = inlist("int", "byte", "int", "long")
    - mata: LevelsOfReal("`varlist'", "`touse'", `"`separate'"', `isint', 1, "`m
> atrow'", "`matcell'", "`hexadecimal'" != "")
    = mata: LevelsOfReal("year", "__000000", `" "', 1, 1, "", "", "" != "")
    - if ("`usetab'" == "usetab") {
    = if ("" == "usetab") {
      cap LevelsOfTab `varlist' if `touse', `missing' separate(`"`separate'"') m
> atrow(`matrow') matcell(`matcell') `hexadecimal'
      if (_rc) {
      mata: LevelsOfReal("`varlist'", "`touse'", `"`separate'"', `isint', 0, "`m
> atrow'", "`matcell'", "`hexadecimal'" != "")
      }
      }
    - }
    - if ("`local'" != "") {
    = if ("years" != "") {
    - c_local `local' `"`r(levels)'"'
    = c_local years `"2019"'
    - }
    - di as text `"`r(levels)'"'
    = di as text `"2019"'
2019
    ----------------------------------------------------------- end levelsof ---
  - di "Create local variable years to loop within that income level - values:" 
> `years'
  = di "Create local variable years to loop within that income level - values:" 
> 2019
Create local variable years to loop within that income level - values:2019
  - foreach y of local years {
  - foreach inc_level of local `inc_cat_var'_levels {
  = foreach inc_level of local acs_hhinc_levels {
  - use `working_regex', clear
  = use /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.000003, clear
(Streamlined ACS data, 2019)
  - keep if `inc_cat_var' == `inc_level'
  = keep if acs_hhinc == 1
(292,104 observations deleted)
  - di "The current inc_level is: " `inc_level'
  = di "The current inc_level is: " 1
The current inc_level is: 1
  - if regexm(inc_decoded, "^[a-z/A-Z]+") == 1 {
  - di "The inc_level " `inc_level' " is at the lowest end of the " "original Re
> search dataset income range"
  = di "The inc_level " 1 " is at the lowest end of the " "original Research dat
> aset income range"
The inc_level 1 is at the lowest end of the original Research dataset income ran
> ge
  - destring inc_decoded, ignore("Less than LESS THAN Under,$ ") generate(`inc_c
> at_var'_ub)
  = destring inc_decoded, ignore("Less than LESS THAN Under,$ ") generate(acs_hh
> inc_ub)
    --------------------------------------------------------- begin destring ---
    - version 14
    - local cmdargs = `"`0'"'
    = local cmdargs = `"inc_decoded, ignore("Less than LESS THAN Under,$ ") gene
> rate(acs_hhinc_ub)"'
    - local verpre : display "version " %4.1f _caller() ":"
    - syntax [varlist], [Generate(string) replace] [force] [float] [Ignore(strin
> g asis)] [percent] [dpcomma]
    - if _caller() >= 14 {
    - if ustrpos(`"`ignore'"',",") & !ustrpos(`"`ignore'"',`"""') {
    = if ustrpos(`""Less than LESS THAN Under,$ ""',",") & !ustrpos(`""Less than
>  LESS THAN Under,$ ""',`"""') {
      display as error `"ignore string must be enclosed with quotes to ignore co
> mmas or use options"'
      exit 198
      }
    - }
    - `verpre' _parse_ignore `ignore'
    = version 16.0: _parse_ignore "Less than LESS THAN Under,$ "
      -------------------------------------------------- begin _parse_ignore ---
      - version 14
      - sreturn clear
      - if _caller() < 14 {
        capture syntax [anything] , [ASChars] [ASBytes] [illegal]
        if !_rc {
        if "`aschars'`asbytes'`illegal'"!="" {
        display as error "may not specify options in the ignore option for Stata
>  version less than 14"
        exit 198
        }
        }
        sreturn local aschars 0
        sreturn local illegal 0
        }
      - else {
      - syntax [anything] , [ASChars] [ASBytes] [illegal]
      - if "`asbytes'"!="" {
      = if ""!="" {
        if "`aschars'"!="" {
        display as error "may specify only one of the ignore options aschars and
>  asbytes"
        exit 198
        }
        if "`illegal'"!="" {
        display as error "may not specify the ignore option illegal when specify
> ing asbytes"
        exit 198
        }
        }
      - if "`asbytes'"=="" {
      = if ""=="" {
      - if ustrinvalidcnt(`"`anything'"') {
      = if ustrinvalidcnt(`""Less than LESS THAN Under,$ ""') {
        display as error "invalid Unicode characters may not be ignored when rem
> oving aschars"
        exit 198
        }
      - }
      - sreturn local aschars = "`asbytes'"==""
      = sreturn local aschars = ""==""
      - sreturn local illegal = "`illegal'"!=""
      = sreturn local illegal = ""!=""
      - capture sreturn local ignore `anything'
      = capture sreturn local ignore "Less than LESS THAN Under,$ "
      - if _rc {
        sreturn local ignore `"`anything'"'
        }
      - }
      ---------------------------------------------------- end _parse_ignore ---
    - if _caller() < 14 {
      local aschars 0
      syntax [varlist], [Generate(string) replace] [force] [float] [Ignore(strin
> g)] [percent] [dpcomma]
      }
    - else {
    - if `"`s(ignore)'"'!="" {
    = if `"Less than LESS THAN Under,$ "'!="" {
    - local ignore `"`s(ignore)'"'
    = local ignore `"Less than LESS THAN Under,$ "'
    - }
    - local aschars `s(aschars)'
    = local aschars 1
    - if `s(illegal)' {
    = if 0 {
      local illegal = ustrunescape("\ufffd")
      }
    - }
    - if "`percent'" == "percent" {
    = if "" == "percent" {
      if !ustrpos(`"`ignore'"', "%") {
      local ignore `"`ignore'%"'
      }
      }
    - if "`illegal'"!="" {
    = if ""!="" {
      local ignore `"`ignore'`illegal'"'
      }
    - if `"`float'"'!="" {
    = if `""'!="" {
      local gtype "float"
      }
    - else {
    - local gtype "double"
    - }
    - if "`generate'" != "" & "`replace'" != "" {
    = if "acs_hhinc_ub" != "" & "" != "" {
      di as err "options generate and replace are mutually exclusive"
      exit 198
      }
    - if "`generate'" == "" & "`replace'" == "" {
    = if "acs_hhinc_ub" == "" & "" == "" {
      di as err "must specify either generate or replace option"
      exit 198
      }
    - if "`generate'" != "" {
    = if "acs_hhinc_ub" != "" {
    - local ct1: word count `varlist'
    = local ct1: word count inc_decoded
    - local save "`varlist'"
    = local save "inc_decoded"
    - local 0 "`generate'"
    = local 0 "acs_hhinc_ub"
    - capture syntax newvarlist
    - if _rc {
      di as err "generate() contains existing variable(s) and/or illegal variabl
> e name(s)"
      exit _rc
      }
    - local generate "`varlist'"
    = local generate "acs_hhinc_ub"
    - local varlist "`save'"
    = local varlist "inc_decoded"
    - local ct2: word count `generate'
    = local ct2: word count acs_hhinc_ub
    - if `ct1' != `ct2' {
    = if 1 != 1 {
      di as err "number of variables in varlist must equal"
      di as err "number of variables in generate(newvarlist)"
      exit 198
      }
    - }
    - local m 1
    - if `"`ignore'"' == "" {
    = if `"Less than LESS THAN Under,$ "' == "" {
      local ignore ""
      }
    - if `aschars' {
    = if 1 {
    - local l = ustrlen(`"`ignore'"')
    = local l = ustrlen(`"Less than LESS THAN Under,$ "')
    - }
    - else {
      local l = length(`"`ignore'"')
      }
    - while `m' <= `l' {
    = while 1 <= 28 {
    - if `aschars' {
    = if 1 {
    - local char`m' = usubstr(`"`ignore'"', `m', 1)
    = local char1 = usubstr(`"Less than LESS THAN Under,$ "', 1, 1)
    - }
    - else {
      local char`m' = substr(`"`ignore'"', `m', 1)
      }
    - local m = `m' + 1
    = local m = 1 + 1
    - }
    - while `m' <= `l' {
    = while 2 <= 28 {
    - if `aschars' {
    = if 1 {
    - local char`m' = usubstr(`"`ignore'"', `m', 1)
    = local char2 = usubstr(`"Less than LESS THAN Under,$ "', 2, 1)
    - }
    - else {
      local char`m' = substr(`"`ignore'"', `m', 1)
      }
    - local m = `m' + 1
    = local m = 2 + 1
    - }
    - while `m' <= `l' {
    = while 3 <= 28 {
    - if `aschars' {
    = if 1 {
    - local char`m' = usubstr(`"`ignore'"', `m', 1)
    = local char3 = usubstr(`"Less than LESS THAN Under,$ "', 3, 1)
    - }
    - else {
      local char`m' = substr(`"`ignore'"', `m', 1)
      }
    - local m = `m' + 1
    = local m = 3 + 1
    - }
    - while `m' <= `l' {
    = while 4 <= 28 {
    - if `aschars' {
    = if 1 {
    - local char`m' = usubstr(`"`ignore'"', `m', 1)
    = local char4 = usubstr(`"Less than LESS THAN Under,$ "', 4, 1)
    - }
    - else {
      local char`m' = substr(`"`ignore'"', `m', 1)
      }
    - local m = `m' + 1
    = local m = 4 + 1
    - }
    - while `m' <= `l' {
    = while 5 <= 28 {
    - if `aschars' {
    = if 1 {
    - local char`m' = usubstr(`"`ignore'"', `m', 1)
    = local char5 = usubstr(`"Less than LESS THAN Under,$ "', 5, 1)
    - }
    - else {
      local char`m' = substr(`"`ignore'"', `m', 1)
      }
    - local m = `m' + 1
    = local m = 5 + 1
    - }
    - while `m' <= `l' {
    = while 6 <= 28 {
    - if `aschars' {
    = if 1 {
    - local char`m' = usubstr(`"`ignore'"', `m', 1)
    = local char6 = usubstr(`"Less than LESS THAN Under,$ "', 6, 1)
    - }
    - else {
      local char`m' = substr(`"`ignore'"', `m', 1)
      }
    - local m = `m' + 1
    = local m = 6 + 1
    - }
    - while `m' <= `l' {
    = while 7 <= 28 {
    - if `aschars' {
    = if 1 {
    - local char`m' = usubstr(`"`ignore'"', `m', 1)
    = local char7 = usubstr(`"Less than LESS THAN Under,$ "', 7, 1)
    - }
    - else {
      local char`m' = substr(`"`ignore'"', `m', 1)
      }
    - local m = `m' + 1
    = local m = 7 + 1
    - }
    - while `m' <= `l' {
    = while 8 <= 28 {
    - if `aschars' {
    = if 1 {
    - local char`m' = usubstr(`"`ignore'"', `m', 1)
    = local char8 = usubstr(`"Less than LESS THAN Under,$ "', 8, 1)
    - }
    - else {
      local char`m' = substr(`"`ignore'"', `m', 1)
      }
    - local m = `m' + 1
    = local m = 8 + 1
    - }
    - while `m' <= `l' {
    = while 9 <= 28 {
    - if `aschars' {
    = if 1 {
    - local char`m' = usubstr(`"`ignore'"', `m', 1)
    = local char9 = usubstr(`"Less than LESS THAN Under,$ "', 9, 1)
    - }
    - else {
      local char`m' = substr(`"`ignore'"', `m', 1)
      }
    - local m = `m' + 1
    = local m = 9 + 1
    - }
    - while `m' <= `l' {
    = while 10 <= 28 {
    - if `aschars' {
    = if 1 {
    - local char`m' = usubstr(`"`ignore'"', `m', 1)
    = local char10 = usubstr(`"Less than LESS THAN Under,$ "', 10, 1)
    - }
    - else {
      local char`m' = substr(`"`ignore'"', `m', 1)
      }
    - local m = `m' + 1
    = local m = 10 + 1
    - }
    - while `m' <= `l' {
    = while 11 <= 28 {
    - if `aschars' {
    = if 1 {
    - local char`m' = usubstr(`"`ignore'"', `m', 1)
    = local char11 = usubstr(`"Less than LESS THAN Under,$ "', 11, 1)
    - }
    - else {
      local char`m' = substr(`"`ignore'"', `m', 1)
      }
    - local m = `m' + 1
    = local m = 11 + 1
    - }
    - while `m' <= `l' {
    = while 12 <= 28 {
    - if `aschars' {
    = if 1 {
    - local char`m' = usubstr(`"`ignore'"', `m', 1)
    = local char12 = usubstr(`"Less than LESS THAN Under,$ "', 12, 1)
    - }
    - else {
      local char`m' = substr(`"`ignore'"', `m', 1)
      }
    - local m = `m' + 1
    = local m = 12 + 1
    - }
    - while `m' <= `l' {
    = while 13 <= 28 {
    - if `aschars' {
    = if 1 {
    - local char`m' = usubstr(`"`ignore'"', `m', 1)
    = local char13 = usubstr(`"Less than LESS THAN Under,$ "', 13, 1)
    - }
    - else {
      local char`m' = substr(`"`ignore'"', `m', 1)
      }
    - local m = `m' + 1
    = local m = 13 + 1
    - }
    - while `m' <= `l' {
    = while 14 <= 28 {
    - if `aschars' {
    = if 1 {
    - local char`m' = usubstr(`"`ignore'"', `m', 1)
    = local char14 = usubstr(`"Less than LESS THAN Under,$ "', 14, 1)
    - }
    - else {
      local char`m' = substr(`"`ignore'"', `m', 1)
      }
    - local m = `m' + 1
    = local m = 14 + 1
    - }
    - while `m' <= `l' {
    = while 15 <= 28 {
    - if `aschars' {
    = if 1 {
    - local char`m' = usubstr(`"`ignore'"', `m', 1)
    = local char15 = usubstr(`"Less than LESS THAN Under,$ "', 15, 1)
    - }
    - else {
      local char`m' = substr(`"`ignore'"', `m', 1)
      }
    - local m = `m' + 1
    = local m = 15 + 1
    - }
    - while `m' <= `l' {
    = while 16 <= 28 {
    - if `aschars' {
    = if 1 {
    - local char`m' = usubstr(`"`ignore'"', `m', 1)
    = local char16 = usubstr(`"Less than LESS THAN Under,$ "', 16, 1)
    - }
    - else {
      local char`m' = substr(`"`ignore'"', `m', 1)
      }
    - local m = `m' + 1
    = local m = 16 + 1
    - }
    - while `m' <= `l' {
    = while 17 <= 28 {
    - if `aschars' {
    = if 1 {
    - local char`m' = usubstr(`"`ignore'"', `m', 1)
    = local char17 = usubstr(`"Less than LESS THAN Under,$ "', 17, 1)
    - }
    - else {
      local char`m' = substr(`"`ignore'"', `m', 1)
      }
    - local m = `m' + 1
    = local m = 17 + 1
    - }
    - while `m' <= `l' {
    = while 18 <= 28 {
    - if `aschars' {
    = if 1 {
    - local char`m' = usubstr(`"`ignore'"', `m', 1)
    = local char18 = usubstr(`"Less than LESS THAN Under,$ "', 18, 1)
    - }
    - else {
      local char`m' = substr(`"`ignore'"', `m', 1)
      }
    - local m = `m' + 1
    = local m = 18 + 1
    - }
    - while `m' <= `l' {
    = while 19 <= 28 {
    - if `aschars' {
    = if 1 {
    - local char`m' = usubstr(`"`ignore'"', `m', 1)
    = local char19 = usubstr(`"Less than LESS THAN Under,$ "', 19, 1)
    - }
    - else {
      local char`m' = substr(`"`ignore'"', `m', 1)
      }
    - local m = `m' + 1
    = local m = 19 + 1
    - }
    - while `m' <= `l' {
    = while 20 <= 28 {
    - if `aschars' {
    = if 1 {
    - local char`m' = usubstr(`"`ignore'"', `m', 1)
    = local char20 = usubstr(`"Less than LESS THAN Under,$ "', 20, 1)
    - }
    - else {
      local char`m' = substr(`"`ignore'"', `m', 1)
      }
    - local m = `m' + 1
    = local m = 20 + 1
    - }
    - while `m' <= `l' {
    = while 21 <= 28 {
    - if `aschars' {
    = if 1 {
    - local char`m' = usubstr(`"`ignore'"', `m', 1)
    = local char21 = usubstr(`"Less than LESS THAN Under,$ "', 21, 1)
    - }
    - else {
      local char`m' = substr(`"`ignore'"', `m', 1)
      }
    - local m = `m' + 1
    = local m = 21 + 1
    - }
    - while `m' <= `l' {
    = while 22 <= 28 {
    - if `aschars' {
    = if 1 {
    - local char`m' = usubstr(`"`ignore'"', `m', 1)
    = local char22 = usubstr(`"Less than LESS THAN Under,$ "', 22, 1)
    - }
    - else {
      local char`m' = substr(`"`ignore'"', `m', 1)
      }
    - local m = `m' + 1
    = local m = 22 + 1
    - }
    - while `m' <= `l' {
    = while 23 <= 28 {
    - if `aschars' {
    = if 1 {
    - local char`m' = usubstr(`"`ignore'"', `m', 1)
    = local char23 = usubstr(`"Less than LESS THAN Under,$ "', 23, 1)
    - }
    - else {
      local char`m' = substr(`"`ignore'"', `m', 1)
      }
    - local m = `m' + 1
    = local m = 23 + 1
    - }
    - while `m' <= `l' {
    = while 24 <= 28 {
    - if `aschars' {
    = if 1 {
    - local char`m' = usubstr(`"`ignore'"', `m', 1)
    = local char24 = usubstr(`"Less than LESS THAN Under,$ "', 24, 1)
    - }
    - else {
      local char`m' = substr(`"`ignore'"', `m', 1)
      }
    - local m = `m' + 1
    = local m = 24 + 1
    - }
    - while `m' <= `l' {
    = while 25 <= 28 {
    - if `aschars' {
    = if 1 {
    - local char`m' = usubstr(`"`ignore'"', `m', 1)
    = local char25 = usubstr(`"Less than LESS THAN Under,$ "', 25, 1)
    - }
    - else {
      local char`m' = substr(`"`ignore'"', `m', 1)
      }
    - local m = `m' + 1
    = local m = 25 + 1
    - }
    - while `m' <= `l' {
    = while 26 <= 28 {
    - if `aschars' {
    = if 1 {
    - local char`m' = usubstr(`"`ignore'"', `m', 1)
    = local char26 = usubstr(`"Less than LESS THAN Under,$ "', 26, 1)
    - }
    - else {
      local char`m' = substr(`"`ignore'"', `m', 1)
      }
    - local m = `m' + 1
    = local m = 26 + 1
    - }
    - while `m' <= `l' {
    = while 27 <= 28 {
    - if `aschars' {
    = if 1 {
    - local char`m' = usubstr(`"`ignore'"', `m', 1)
    = local char27 = usubstr(`"Less than LESS THAN Under,$ "', 27, 1)
    - }
    - else {
      local char`m' = substr(`"`ignore'"', `m', 1)
      }
    - local m = `m' + 1
    = local m = 27 + 1
    - }
    - while `m' <= `l' {
    = while 28 <= 28 {
    - if `aschars' {
    = if 1 {
    - local char`m' = usubstr(`"`ignore'"', `m', 1)
    = local char28 = usubstr(`"Less than LESS THAN Under,$ "', 28, 1)
    - }
    - else {
      local char`m' = substr(`"`ignore'"', `m', 1)
      }
    - local m = `m' + 1
    = local m = 28 + 1
    - }
    - while `m' <= `l' {
    = while 29 <= 28 {
      if `aschars' {
      local char`m' = usubstr(`"`ignore'"', `m', 1)
      }
      else {
      local char`m' = substr(`"`ignore'"', `m', 1)
      }
      local m = `m' + 1
      }
    - if `aschars' {
    = if 1 {
    - local aswhat "character"
    - }
    - else {
      local aswhat "byte"
      }
    - if "`generate'"!="" {
    = if "acs_hhinc_ub"!="" {
    - local genrep "generate"
    - }
    - else {
      local genrep "replace"
      }
    - local tvars OLDVAR NEWVAR ismissing found topct
    - tempvar `tvars'
    = tempvar OLDVAR NEWVAR ismissing found topct
    - local varno 0
    - foreach var of varlist `varlist' {
    = foreach var of varlist inc_decoded {
    - local varno = `varno' + 1
    = local varno = 0 + 1
    - if "`generate'"!="" {
    = if "acs_hhinc_ub"!="" {
    - local finalvarname : word `varno' of `generate'
    = local finalvarname : word 1 of acs_hhinc_ub
    - local finalprint "`finalvarname' "
    = local finalprint "acs_hhinc_ub "
    - }
    - else {
      local finalvarname "`var'"
      local finalprint ""
      }
    - capture confirm string variable `var'
    = capture confirm string variable inc_decoded
    - if _rc != 0 {
      di as txt "`var' already numeric; no " as res "`genrep'"
      }
    - else {
    - qui gen `OLDVAR' = `var'
    = qui gen __000000 = inc_decoded
    - local jj 1
    - local b
    - local bcnt = 0
    - local c
    - local makepct
    - while `"`char`jj''"' != "" {
    = while `"L"' != "" {
    - capture drop `found'
    = capture drop __000003
    - capture drop `topct'
    = capture drop __000004
    - local t `"`char`jj''"'
    = local t `"L"'
    - if `aschars' {
    = if 1 {
    - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
    = qui gen byte __000003 = ustrpos(__000000, `"L"') != 0
    - }
    - else {
      qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
      }
    - qui summarize `found', meanonly
    = qui summarize __000003, meanonly
    - if r(sum) > 0 {
    - if `"`t'"'=="`illegal'" {
    = if `"L"'=="" {
      local b `"`b' illegal Unicode"'
      }
    - else if `"`t'"' == " " {
    = else if `"L"' == " " {
      local b `"`b' space"'
      }
    - else {
    - local b `"`b' `t'"'
    = local b `" L"'
    - }
    - local ++bcnt
    - }
    - if `aschars' {
    = if 1 {
    - if `"`t'"'=="%" {
    = if `"L"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if ustrpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
    - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
    = qui replace __000000 = usubinstr(__000000, `"L"', "", .)
    - }
    - else {
      if `"`t'"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if strpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
      qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
      }
    - local jj = `jj' + 1
    = local jj = 1 + 1
    - }
    - while `"`char`jj''"' != "" {
    = while `"e"' != "" {
    - capture drop `found'
    = capture drop __000003
    - capture drop `topct'
    = capture drop __000004
    - local t `"`char`jj''"'
    = local t `"e"'
    - if `aschars' {
    = if 1 {
    - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
    = qui gen byte __000003 = ustrpos(__000000, `"e"') != 0
    - }
    - else {
      qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
      }
    - qui summarize `found', meanonly
    = qui summarize __000003, meanonly
    - if r(sum) > 0 {
    - if `"`t'"'=="`illegal'" {
    = if `"e"'=="" {
      local b `"`b' illegal Unicode"'
      }
    - else if `"`t'"' == " " {
    = else if `"e"' == " " {
      local b `"`b' space"'
      }
    - else {
    - local b `"`b' `t'"'
    = local b `" L e"'
    - }
    - local ++bcnt
    - }
    - if `aschars' {
    = if 1 {
    - if `"`t'"'=="%" {
    = if `"e"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if ustrpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
    - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
    = qui replace __000000 = usubinstr(__000000, `"e"', "", .)
    - }
    - else {
      if `"`t'"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if strpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
      qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
      }
    - local jj = `jj' + 1
    = local jj = 2 + 1
    - }
    - while `"`char`jj''"' != "" {
    = while `"s"' != "" {
    - capture drop `found'
    = capture drop __000003
    - capture drop `topct'
    = capture drop __000004
    - local t `"`char`jj''"'
    = local t `"s"'
    - if `aschars' {
    = if 1 {
    - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
    = qui gen byte __000003 = ustrpos(__000000, `"s"') != 0
    - }
    - else {
      qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
      }
    - qui summarize `found', meanonly
    = qui summarize __000003, meanonly
    - if r(sum) > 0 {
    - if `"`t'"'=="`illegal'" {
    = if `"s"'=="" {
      local b `"`b' illegal Unicode"'
      }
    - else if `"`t'"' == " " {
    = else if `"s"' == " " {
      local b `"`b' space"'
      }
    - else {
    - local b `"`b' `t'"'
    = local b `" L e s"'
    - }
    - local ++bcnt
    - }
    - if `aschars' {
    = if 1 {
    - if `"`t'"'=="%" {
    = if `"s"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if ustrpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
    - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
    = qui replace __000000 = usubinstr(__000000, `"s"', "", .)
    - }
    - else {
      if `"`t'"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if strpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
      qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
      }
    - local jj = `jj' + 1
    = local jj = 3 + 1
    - }
    - while `"`char`jj''"' != "" {
    = while `"s"' != "" {
    - capture drop `found'
    = capture drop __000003
    - capture drop `topct'
    = capture drop __000004
    - local t `"`char`jj''"'
    = local t `"s"'
    - if `aschars' {
    = if 1 {
    - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
    = qui gen byte __000003 = ustrpos(__000000, `"s"') != 0
    - }
    - else {
      qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
      }
    - qui summarize `found', meanonly
    = qui summarize __000003, meanonly
    - if r(sum) > 0 {
      if `"`t'"'=="`illegal'" {
      local b `"`b' illegal Unicode"'
      }
      else if `"`t'"' == " " {
      local b `"`b' space"'
      }
      else {
      local b `"`b' `t'"'
      }
      local ++bcnt
      }
    - if `aschars' {
    = if 1 {
    - if `"`t'"'=="%" {
    = if `"s"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if ustrpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
    - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
    = qui replace __000000 = usubinstr(__000000, `"s"', "", .)
    - }
    - else {
      if `"`t'"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if strpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
      qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
      }
    - local jj = `jj' + 1
    = local jj = 4 + 1
    - }
    - while `"`char`jj''"' != "" {
    = while `" "' != "" {
    - capture drop `found'
    = capture drop __000003
    - capture drop `topct'
    = capture drop __000004
    - local t `"`char`jj''"'
    = local t `" "'
    - if `aschars' {
    = if 1 {
    - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
    = qui gen byte __000003 = ustrpos(__000000, `" "') != 0
    - }
    - else {
      qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
      }
    - qui summarize `found', meanonly
    = qui summarize __000003, meanonly
    - if r(sum) > 0 {
    - if `"`t'"'=="`illegal'" {
    = if `" "'=="" {
      local b `"`b' illegal Unicode"'
      }
    - else if `"`t'"' == " " {
    = else if `" "' == " " {
    - local b `"`b' space"'
    = local b `" L e s space"'
    - }
    - else {
      local b `"`b' `t'"'
      }
    - local ++bcnt
    - }
    - if `aschars' {
    = if 1 {
    - if `"`t'"'=="%" {
    = if `" "'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if ustrpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
    - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
    = qui replace __000000 = usubinstr(__000000, `" "', "", .)
    - }
    - else {
      if `"`t'"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if strpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
      qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
      }
    - local jj = `jj' + 1
    = local jj = 5 + 1
    - }
    - while `"`char`jj''"' != "" {
    = while `"t"' != "" {
    - capture drop `found'
    = capture drop __000003
    - capture drop `topct'
    = capture drop __000004
    - local t `"`char`jj''"'
    = local t `"t"'
    - if `aschars' {
    = if 1 {
    - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
    = qui gen byte __000003 = ustrpos(__000000, `"t"') != 0
    - }
    - else {
      qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
      }
    - qui summarize `found', meanonly
    = qui summarize __000003, meanonly
    - if r(sum) > 0 {
    - if `"`t'"'=="`illegal'" {
    = if `"t"'=="" {
      local b `"`b' illegal Unicode"'
      }
    - else if `"`t'"' == " " {
    = else if `"t"' == " " {
      local b `"`b' space"'
      }
    - else {
    - local b `"`b' `t'"'
    = local b `" L e s space t"'
    - }
    - local ++bcnt
    - }
    - if `aschars' {
    = if 1 {
    - if `"`t'"'=="%" {
    = if `"t"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if ustrpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
    - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
    = qui replace __000000 = usubinstr(__000000, `"t"', "", .)
    - }
    - else {
      if `"`t'"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if strpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
      qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
      }
    - local jj = `jj' + 1
    = local jj = 6 + 1
    - }
    - while `"`char`jj''"' != "" {
    = while `"h"' != "" {
    - capture drop `found'
    = capture drop __000003
    - capture drop `topct'
    = capture drop __000004
    - local t `"`char`jj''"'
    = local t `"h"'
    - if `aschars' {
    = if 1 {
    - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
    = qui gen byte __000003 = ustrpos(__000000, `"h"') != 0
    - }
    - else {
      qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
      }
    - qui summarize `found', meanonly
    = qui summarize __000003, meanonly
    - if r(sum) > 0 {
    - if `"`t'"'=="`illegal'" {
    = if `"h"'=="" {
      local b `"`b' illegal Unicode"'
      }
    - else if `"`t'"' == " " {
    = else if `"h"' == " " {
      local b `"`b' space"'
      }
    - else {
    - local b `"`b' `t'"'
    = local b `" L e s space t h"'
    - }
    - local ++bcnt
    - }
    - if `aschars' {
    = if 1 {
    - if `"`t'"'=="%" {
    = if `"h"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if ustrpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
    - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
    = qui replace __000000 = usubinstr(__000000, `"h"', "", .)
    - }
    - else {
      if `"`t'"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if strpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
      qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
      }
    - local jj = `jj' + 1
    = local jj = 7 + 1
    - }
    - while `"`char`jj''"' != "" {
    = while `"a"' != "" {
    - capture drop `found'
    = capture drop __000003
    - capture drop `topct'
    = capture drop __000004
    - local t `"`char`jj''"'
    = local t `"a"'
    - if `aschars' {
    = if 1 {
    - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
    = qui gen byte __000003 = ustrpos(__000000, `"a"') != 0
    - }
    - else {
      qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
      }
    - qui summarize `found', meanonly
    = qui summarize __000003, meanonly
    - if r(sum) > 0 {
    - if `"`t'"'=="`illegal'" {
    = if `"a"'=="" {
      local b `"`b' illegal Unicode"'
      }
    - else if `"`t'"' == " " {
    = else if `"a"' == " " {
      local b `"`b' space"'
      }
    - else {
    - local b `"`b' `t'"'
    = local b `" L e s space t h a"'
    - }
    - local ++bcnt
    - }
    - if `aschars' {
    = if 1 {
    - if `"`t'"'=="%" {
    = if `"a"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if ustrpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
    - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
    = qui replace __000000 = usubinstr(__000000, `"a"', "", .)
    - }
    - else {
      if `"`t'"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if strpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
      qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
      }
    - local jj = `jj' + 1
    = local jj = 8 + 1
    - }
    - while `"`char`jj''"' != "" {
    = while `"n"' != "" {
    - capture drop `found'
    = capture drop __000003
    - capture drop `topct'
    = capture drop __000004
    - local t `"`char`jj''"'
    = local t `"n"'
    - if `aschars' {
    = if 1 {
    - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
    = qui gen byte __000003 = ustrpos(__000000, `"n"') != 0
    - }
    - else {
      qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
      }
    - qui summarize `found', meanonly
    = qui summarize __000003, meanonly
    - if r(sum) > 0 {
    - if `"`t'"'=="`illegal'" {
    = if `"n"'=="" {
      local b `"`b' illegal Unicode"'
      }
    - else if `"`t'"' == " " {
    = else if `"n"' == " " {
      local b `"`b' space"'
      }
    - else {
    - local b `"`b' `t'"'
    = local b `" L e s space t h a n"'
    - }
    - local ++bcnt
    - }
    - if `aschars' {
    = if 1 {
    - if `"`t'"'=="%" {
    = if `"n"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if ustrpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
    - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
    = qui replace __000000 = usubinstr(__000000, `"n"', "", .)
    - }
    - else {
      if `"`t'"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if strpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
      qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
      }
    - local jj = `jj' + 1
    = local jj = 9 + 1
    - }
    - while `"`char`jj''"' != "" {
    = while `" "' != "" {
    - capture drop `found'
    = capture drop __000003
    - capture drop `topct'
    = capture drop __000004
    - local t `"`char`jj''"'
    = local t `" "'
    - if `aschars' {
    = if 1 {
    - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
    = qui gen byte __000003 = ustrpos(__000000, `" "') != 0
    - }
    - else {
      qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
      }
    - qui summarize `found', meanonly
    = qui summarize __000003, meanonly
    - if r(sum) > 0 {
      if `"`t'"'=="`illegal'" {
      local b `"`b' illegal Unicode"'
      }
      else if `"`t'"' == " " {
      local b `"`b' space"'
      }
      else {
      local b `"`b' `t'"'
      }
      local ++bcnt
      }
    - if `aschars' {
    = if 1 {
    - if `"`t'"'=="%" {
    = if `" "'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if ustrpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
    - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
    = qui replace __000000 = usubinstr(__000000, `" "', "", .)
    - }
    - else {
      if `"`t'"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if strpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
      qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
      }
    - local jj = `jj' + 1
    = local jj = 10 + 1
    - }
    - while `"`char`jj''"' != "" {
    = while `"L"' != "" {
    - capture drop `found'
    = capture drop __000003
    - capture drop `topct'
    = capture drop __000004
    - local t `"`char`jj''"'
    = local t `"L"'
    - if `aschars' {
    = if 1 {
    - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
    = qui gen byte __000003 = ustrpos(__000000, `"L"') != 0
    - }
    - else {
      qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
      }
    - qui summarize `found', meanonly
    = qui summarize __000003, meanonly
    - if r(sum) > 0 {
      if `"`t'"'=="`illegal'" {
      local b `"`b' illegal Unicode"'
      }
      else if `"`t'"' == " " {
      local b `"`b' space"'
      }
      else {
      local b `"`b' `t'"'
      }
      local ++bcnt
      }
    - if `aschars' {
    = if 1 {
    - if `"`t'"'=="%" {
    = if `"L"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if ustrpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
    - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
    = qui replace __000000 = usubinstr(__000000, `"L"', "", .)
    - }
    - else {
      if `"`t'"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if strpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
      qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
      }
    - local jj = `jj' + 1
    = local jj = 11 + 1
    - }
    - while `"`char`jj''"' != "" {
    = while `"E"' != "" {
    - capture drop `found'
    = capture drop __000003
    - capture drop `topct'
    = capture drop __000004
    - local t `"`char`jj''"'
    = local t `"E"'
    - if `aschars' {
    = if 1 {
    - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
    = qui gen byte __000003 = ustrpos(__000000, `"E"') != 0
    - }
    - else {
      qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
      }
    - qui summarize `found', meanonly
    = qui summarize __000003, meanonly
    - if r(sum) > 0 {
      if `"`t'"'=="`illegal'" {
      local b `"`b' illegal Unicode"'
      }
      else if `"`t'"' == " " {
      local b `"`b' space"'
      }
      else {
      local b `"`b' `t'"'
      }
      local ++bcnt
      }
    - if `aschars' {
    = if 1 {
    - if `"`t'"'=="%" {
    = if `"E"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if ustrpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
    - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
    = qui replace __000000 = usubinstr(__000000, `"E"', "", .)
    - }
    - else {
      if `"`t'"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if strpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
      qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
      }
    - local jj = `jj' + 1
    = local jj = 12 + 1
    - }
    - while `"`char`jj''"' != "" {
    = while `"S"' != "" {
    - capture drop `found'
    = capture drop __000003
    - capture drop `topct'
    = capture drop __000004
    - local t `"`char`jj''"'
    = local t `"S"'
    - if `aschars' {
    = if 1 {
    - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
    = qui gen byte __000003 = ustrpos(__000000, `"S"') != 0
    - }
    - else {
      qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
      }
    - qui summarize `found', meanonly
    = qui summarize __000003, meanonly
    - if r(sum) > 0 {
      if `"`t'"'=="`illegal'" {
      local b `"`b' illegal Unicode"'
      }
      else if `"`t'"' == " " {
      local b `"`b' space"'
      }
      else {
      local b `"`b' `t'"'
      }
      local ++bcnt
      }
    - if `aschars' {
    = if 1 {
    - if `"`t'"'=="%" {
    = if `"S"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if ustrpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
    - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
    = qui replace __000000 = usubinstr(__000000, `"S"', "", .)
    - }
    - else {
      if `"`t'"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if strpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
      qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
      }
    - local jj = `jj' + 1
    = local jj = 13 + 1
    - }
    - while `"`char`jj''"' != "" {
    = while `"S"' != "" {
    - capture drop `found'
    = capture drop __000003
    - capture drop `topct'
    = capture drop __000004
    - local t `"`char`jj''"'
    = local t `"S"'
    - if `aschars' {
    = if 1 {
    - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
    = qui gen byte __000003 = ustrpos(__000000, `"S"') != 0
    - }
    - else {
      qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
      }
    - qui summarize `found', meanonly
    = qui summarize __000003, meanonly
    - if r(sum) > 0 {
      if `"`t'"'=="`illegal'" {
      local b `"`b' illegal Unicode"'
      }
      else if `"`t'"' == " " {
      local b `"`b' space"'
      }
      else {
      local b `"`b' `t'"'
      }
      local ++bcnt
      }
    - if `aschars' {
    = if 1 {
    - if `"`t'"'=="%" {
    = if `"S"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if ustrpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
    - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
    = qui replace __000000 = usubinstr(__000000, `"S"', "", .)
    - }
    - else {
      if `"`t'"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if strpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
      qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
      }
    - local jj = `jj' + 1
    = local jj = 14 + 1
    - }
    - while `"`char`jj''"' != "" {
    = while `" "' != "" {
    - capture drop `found'
    = capture drop __000003
    - capture drop `topct'
    = capture drop __000004
    - local t `"`char`jj''"'
    = local t `" "'
    - if `aschars' {
    = if 1 {
    - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
    = qui gen byte __000003 = ustrpos(__000000, `" "') != 0
    - }
    - else {
      qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
      }
    - qui summarize `found', meanonly
    = qui summarize __000003, meanonly
    - if r(sum) > 0 {
      if `"`t'"'=="`illegal'" {
      local b `"`b' illegal Unicode"'
      }
      else if `"`t'"' == " " {
      local b `"`b' space"'
      }
      else {
      local b `"`b' `t'"'
      }
      local ++bcnt
      }
    - if `aschars' {
    = if 1 {
    - if `"`t'"'=="%" {
    = if `" "'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if ustrpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
    - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
    = qui replace __000000 = usubinstr(__000000, `" "', "", .)
    - }
    - else {
      if `"`t'"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if strpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
      qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
      }
    - local jj = `jj' + 1
    = local jj = 15 + 1
    - }
    - while `"`char`jj''"' != "" {
    = while `"T"' != "" {
    - capture drop `found'
    = capture drop __000003
    - capture drop `topct'
    = capture drop __000004
    - local t `"`char`jj''"'
    = local t `"T"'
    - if `aschars' {
    = if 1 {
    - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
    = qui gen byte __000003 = ustrpos(__000000, `"T"') != 0
    - }
    - else {
      qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
      }
    - qui summarize `found', meanonly
    = qui summarize __000003, meanonly
    - if r(sum) > 0 {
      if `"`t'"'=="`illegal'" {
      local b `"`b' illegal Unicode"'
      }
      else if `"`t'"' == " " {
      local b `"`b' space"'
      }
      else {
      local b `"`b' `t'"'
      }
      local ++bcnt
      }
    - if `aschars' {
    = if 1 {
    - if `"`t'"'=="%" {
    = if `"T"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if ustrpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
    - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
    = qui replace __000000 = usubinstr(__000000, `"T"', "", .)
    - }
    - else {
      if `"`t'"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if strpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
      qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
      }
    - local jj = `jj' + 1
    = local jj = 16 + 1
    - }
    - while `"`char`jj''"' != "" {
    = while `"H"' != "" {
    - capture drop `found'
    = capture drop __000003
    - capture drop `topct'
    = capture drop __000004
    - local t `"`char`jj''"'
    = local t `"H"'
    - if `aschars' {
    = if 1 {
    - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
    = qui gen byte __000003 = ustrpos(__000000, `"H"') != 0
    - }
    - else {
      qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
      }
    - qui summarize `found', meanonly
    = qui summarize __000003, meanonly
    - if r(sum) > 0 {
      if `"`t'"'=="`illegal'" {
      local b `"`b' illegal Unicode"'
      }
      else if `"`t'"' == " " {
      local b `"`b' space"'
      }
      else {
      local b `"`b' `t'"'
      }
      local ++bcnt
      }
    - if `aschars' {
    = if 1 {
    - if `"`t'"'=="%" {
    = if `"H"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if ustrpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
    - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
    = qui replace __000000 = usubinstr(__000000, `"H"', "", .)
    - }
    - else {
      if `"`t'"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if strpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
      qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
      }
    - local jj = `jj' + 1
    = local jj = 17 + 1
    - }
    - while `"`char`jj''"' != "" {
    = while `"A"' != "" {
    - capture drop `found'
    = capture drop __000003
    - capture drop `topct'
    = capture drop __000004
    - local t `"`char`jj''"'
    = local t `"A"'
    - if `aschars' {
    = if 1 {
    - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
    = qui gen byte __000003 = ustrpos(__000000, `"A"') != 0
    - }
    - else {
      qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
      }
    - qui summarize `found', meanonly
    = qui summarize __000003, meanonly
    - if r(sum) > 0 {
      if `"`t'"'=="`illegal'" {
      local b `"`b' illegal Unicode"'
      }
      else if `"`t'"' == " " {
      local b `"`b' space"'
      }
      else {
      local b `"`b' `t'"'
      }
      local ++bcnt
      }
    - if `aschars' {
    = if 1 {
    - if `"`t'"'=="%" {
    = if `"A"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if ustrpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
    - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
    = qui replace __000000 = usubinstr(__000000, `"A"', "", .)
    - }
    - else {
      if `"`t'"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if strpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
      qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
      }
    - local jj = `jj' + 1
    = local jj = 18 + 1
    - }
    - while `"`char`jj''"' != "" {
    = while `"N"' != "" {
    - capture drop `found'
    = capture drop __000003
    - capture drop `topct'
    = capture drop __000004
    - local t `"`char`jj''"'
    = local t `"N"'
    - if `aschars' {
    = if 1 {
    - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
    = qui gen byte __000003 = ustrpos(__000000, `"N"') != 0
    - }
    - else {
      qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
      }
    - qui summarize `found', meanonly
    = qui summarize __000003, meanonly
    - if r(sum) > 0 {
      if `"`t'"'=="`illegal'" {
      local b `"`b' illegal Unicode"'
      }
      else if `"`t'"' == " " {
      local b `"`b' space"'
      }
      else {
      local b `"`b' `t'"'
      }
      local ++bcnt
      }
    - if `aschars' {
    = if 1 {
    - if `"`t'"'=="%" {
    = if `"N"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if ustrpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
    - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
    = qui replace __000000 = usubinstr(__000000, `"N"', "", .)
    - }
    - else {
      if `"`t'"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if strpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
      qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
      }
    - local jj = `jj' + 1
    = local jj = 19 + 1
    - }
    - while `"`char`jj''"' != "" {
    = while `" "' != "" {
    - capture drop `found'
    = capture drop __000003
    - capture drop `topct'
    = capture drop __000004
    - local t `"`char`jj''"'
    = local t `" "'
    - if `aschars' {
    = if 1 {
    - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
    = qui gen byte __000003 = ustrpos(__000000, `" "') != 0
    - }
    - else {
      qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
      }
    - qui summarize `found', meanonly
    = qui summarize __000003, meanonly
    - if r(sum) > 0 {
      if `"`t'"'=="`illegal'" {
      local b `"`b' illegal Unicode"'
      }
      else if `"`t'"' == " " {
      local b `"`b' space"'
      }
      else {
      local b `"`b' `t'"'
      }
      local ++bcnt
      }
    - if `aschars' {
    = if 1 {
    - if `"`t'"'=="%" {
    = if `" "'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if ustrpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
    - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
    = qui replace __000000 = usubinstr(__000000, `" "', "", .)
    - }
    - else {
      if `"`t'"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if strpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
      qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
      }
    - local jj = `jj' + 1
    = local jj = 20 + 1
    - }
    - while `"`char`jj''"' != "" {
    = while `"U"' != "" {
    - capture drop `found'
    = capture drop __000003
    - capture drop `topct'
    = capture drop __000004
    - local t `"`char`jj''"'
    = local t `"U"'
    - if `aschars' {
    = if 1 {
    - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
    = qui gen byte __000003 = ustrpos(__000000, `"U"') != 0
    - }
    - else {
      qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
      }
    - qui summarize `found', meanonly
    = qui summarize __000003, meanonly
    - if r(sum) > 0 {
      if `"`t'"'=="`illegal'" {
      local b `"`b' illegal Unicode"'
      }
      else if `"`t'"' == " " {
      local b `"`b' space"'
      }
      else {
      local b `"`b' `t'"'
      }
      local ++bcnt
      }
    - if `aschars' {
    = if 1 {
    - if `"`t'"'=="%" {
    = if `"U"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if ustrpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
    - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
    = qui replace __000000 = usubinstr(__000000, `"U"', "", .)
    - }
    - else {
      if `"`t'"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if strpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
      qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
      }
    - local jj = `jj' + 1
    = local jj = 21 + 1
    - }
    - while `"`char`jj''"' != "" {
    = while `"n"' != "" {
    - capture drop `found'
    = capture drop __000003
    - capture drop `topct'
    = capture drop __000004
    - local t `"`char`jj''"'
    = local t `"n"'
    - if `aschars' {
    = if 1 {
    - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
    = qui gen byte __000003 = ustrpos(__000000, `"n"') != 0
    - }
    - else {
      qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
      }
    - qui summarize `found', meanonly
    = qui summarize __000003, meanonly
    - if r(sum) > 0 {
      if `"`t'"'=="`illegal'" {
      local b `"`b' illegal Unicode"'
      }
      else if `"`t'"' == " " {
      local b `"`b' space"'
      }
      else {
      local b `"`b' `t'"'
      }
      local ++bcnt
      }
    - if `aschars' {
    = if 1 {
    - if `"`t'"'=="%" {
    = if `"n"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if ustrpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
    - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
    = qui replace __000000 = usubinstr(__000000, `"n"', "", .)
    - }
    - else {
      if `"`t'"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if strpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
      qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
      }
    - local jj = `jj' + 1
    = local jj = 22 + 1
    - }
    - while `"`char`jj''"' != "" {
    = while `"d"' != "" {
    - capture drop `found'
    = capture drop __000003
    - capture drop `topct'
    = capture drop __000004
    - local t `"`char`jj''"'
    = local t `"d"'
    - if `aschars' {
    = if 1 {
    - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
    = qui gen byte __000003 = ustrpos(__000000, `"d"') != 0
    - }
    - else {
      qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
      }
    - qui summarize `found', meanonly
    = qui summarize __000003, meanonly
    - if r(sum) > 0 {
      if `"`t'"'=="`illegal'" {
      local b `"`b' illegal Unicode"'
      }
      else if `"`t'"' == " " {
      local b `"`b' space"'
      }
      else {
      local b `"`b' `t'"'
      }
      local ++bcnt
      }
    - if `aschars' {
    = if 1 {
    - if `"`t'"'=="%" {
    = if `"d"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if ustrpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
    - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
    = qui replace __000000 = usubinstr(__000000, `"d"', "", .)
    - }
    - else {
      if `"`t'"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if strpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
      qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
      }
    - local jj = `jj' + 1
    = local jj = 23 + 1
    - }
    - while `"`char`jj''"' != "" {
    = while `"e"' != "" {
    - capture drop `found'
    = capture drop __000003
    - capture drop `topct'
    = capture drop __000004
    - local t `"`char`jj''"'
    = local t `"e"'
    - if `aschars' {
    = if 1 {
    - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
    = qui gen byte __000003 = ustrpos(__000000, `"e"') != 0
    - }
    - else {
      qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
      }
    - qui summarize `found', meanonly
    = qui summarize __000003, meanonly
    - if r(sum) > 0 {
      if `"`t'"'=="`illegal'" {
      local b `"`b' illegal Unicode"'
      }
      else if `"`t'"' == " " {
      local b `"`b' space"'
      }
      else {
      local b `"`b' `t'"'
      }
      local ++bcnt
      }
    - if `aschars' {
    = if 1 {
    - if `"`t'"'=="%" {
    = if `"e"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if ustrpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
    - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
    = qui replace __000000 = usubinstr(__000000, `"e"', "", .)
    - }
    - else {
      if `"`t'"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if strpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
      qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
      }
    - local jj = `jj' + 1
    = local jj = 24 + 1
    - }
    - while `"`char`jj''"' != "" {
    = while `"r"' != "" {
    - capture drop `found'
    = capture drop __000003
    - capture drop `topct'
    = capture drop __000004
    - local t `"`char`jj''"'
    = local t `"r"'
    - if `aschars' {
    = if 1 {
    - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
    = qui gen byte __000003 = ustrpos(__000000, `"r"') != 0
    - }
    - else {
      qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
      }
    - qui summarize `found', meanonly
    = qui summarize __000003, meanonly
    - if r(sum) > 0 {
      if `"`t'"'=="`illegal'" {
      local b `"`b' illegal Unicode"'
      }
      else if `"`t'"' == " " {
      local b `"`b' space"'
      }
      else {
      local b `"`b' `t'"'
      }
      local ++bcnt
      }
    - if `aschars' {
    = if 1 {
    - if `"`t'"'=="%" {
    = if `"r"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if ustrpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
    - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
    = qui replace __000000 = usubinstr(__000000, `"r"', "", .)
    - }
    - else {
      if `"`t'"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if strpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
      qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
      }
    - local jj = `jj' + 1
    = local jj = 25 + 1
    - }
    - while `"`char`jj''"' != "" {
    = while `","' != "" {
    - capture drop `found'
    = capture drop __000003
    - capture drop `topct'
    = capture drop __000004
    - local t `"`char`jj''"'
    = local t `","'
    - if `aschars' {
    = if 1 {
    - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
    = qui gen byte __000003 = ustrpos(__000000, `","') != 0
    - }
    - else {
      qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
      }
    - qui summarize `found', meanonly
    = qui summarize __000003, meanonly
    - if r(sum) > 0 {
      if `"`t'"'=="`illegal'" {
      local b `"`b' illegal Unicode"'
      }
      else if `"`t'"' == " " {
      local b `"`b' space"'
      }
      else {
      local b `"`b' `t'"'
      }
      local ++bcnt
      }
    - if `aschars' {
    = if 1 {
    - if `"`t'"'=="%" {
    = if `","'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if ustrpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
    - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
    = qui replace __000000 = usubinstr(__000000, `","', "", .)
    - }
    - else {
      if `"`t'"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if strpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
      qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
      }
    - local jj = `jj' + 1
    = local jj = 26 + 1
    - }
    - while `"`char`jj''"' != "" {
    = while `"$"' != "" {
    - capture drop `found'
    = capture drop __000003
    - capture drop `topct'
    = capture drop __000004
    - local t `"`char`jj''"'
    = local t `"$"'
    - if `aschars' {
    = if 1 {
    - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
    = qui gen byte __000003 = ustrpos(__000000, `"$"') != 0
    - }
    - else {
      qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
      }
    - qui summarize `found', meanonly
    = qui summarize __000003, meanonly
    - if r(sum) > 0 {
    - if `"`t'"'=="`illegal'" {
    = if `"$"'=="" {
      local b `"`b' illegal Unicode"'
      }
    - else if `"`t'"' == " " {
    = else if `"$"' == " " {
      local b `"`b' space"'
      }
    - else {
    - local b `"`b' `t'"'
    = local b `" L e s space t h a n $"'
    - }
    - local ++bcnt
    - }
    - if `aschars' {
    = if 1 {
    - if `"`t'"'=="%" {
    = if `"$"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if ustrpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
    - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
    = qui replace __000000 = usubinstr(__000000, `"$"', "", .)
    - }
    - else {
      if `"`t'"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if strpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
      qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
      }
    - local jj = `jj' + 1
    = local jj = 27 + 1
    - }
    - while `"`char`jj''"' != "" {
    = while `" "' != "" {
    - capture drop `found'
    = capture drop __000003
    - capture drop `topct'
    = capture drop __000004
    - local t `"`char`jj''"'
    = local t `" "'
    - if `aschars' {
    = if 1 {
    - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
    = qui gen byte __000003 = ustrpos(__000000, `" "') != 0
    - }
    - else {
      qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
      }
    - qui summarize `found', meanonly
    = qui summarize __000003, meanonly
    - if r(sum) > 0 {
      if `"`t'"'=="`illegal'" {
      local b `"`b' illegal Unicode"'
      }
      else if `"`t'"' == " " {
      local b `"`b' space"'
      }
      else {
      local b `"`b' `t'"'
      }
      local ++bcnt
      }
    - if `aschars' {
    = if 1 {
    - if `"`t'"'=="%" {
    = if `" "'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if ustrpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
    - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
    = qui replace __000000 = usubinstr(__000000, `" "', "", .)
    - }
    - else {
      if `"`t'"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if strpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
      qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
      }
    - local jj = `jj' + 1
    = local jj = 28 + 1
    - }
    - while `"`char`jj''"' != "" {
    = while `""' != "" {
      capture drop `found'
      capture drop `topct'
      local t `"`char`jj''"'
      if `aschars' {
      qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
      }
      else {
      qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
      }
      qui summarize `found', meanonly
      if r(sum) > 0 {
      if `"`t'"'=="`illegal'" {
      local b `"`b' illegal Unicode"'
      }
      else if `"`t'"' == " " {
      local b `"`b' space"'
      }
      else {
      local b `"`b' `t'"'
      }
      local ++bcnt
      }
      if `aschars' {
      if `"`t'"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if ustrpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
      qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
      }
      else {
      if `"`t'"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if strpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
      qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
      }
      local jj = `jj' + 1
      }
    - if _caller() >= 14 {
    - qui replace `OLDVAR' = ustrtrim(`OLDVAR')
    = qui replace __000000 = ustrtrim(__000000)
    - }
    - else {
      qui replace `OLDVAR' = strtrim(`OLDVAR')
      }
    - quietly gen byte `ismissing' = `OLDVAR'=="" | `OLDVAR'=="." | (strlen(`OLD
> VAR')==2 & inrange(`OLDVAR',".a",".z"))
    = quietly gen byte __000002 = __000000=="" | __000000=="." | (strlen(__00000
> 0)==2 & inrange(__000000,".a",".z"))
    - if ("`dpcomma'" != "") {
    = if ("" != "") {
      qui replace `OLDVAR' = subinstr(`OLDVAR',".","X",.) if !`ismissing'
      qui replace `OLDVAR' = subinstr(`OLDVAR', ",", ".", 1) if !ustrregexm(`OLD
> VAR',"(,[a-z])|(^,$)")
      }
    - if _caller() >= 14 {
    - qui replace `OLDVAR' = ustrregexrf(`OLDVAR',"^0+","0")
    = qui replace __000000 = ustrregexrf(__000000,"^0+","0")
    - }
    - else {
      qui replace `OLDVAR' = regexr(`OLDVAR',"^0+","0")
      }
    - qui gen `gtype' `NEWVAR' = real(`OLDVAR')
    = qui gen double __000001 = real(__000000)
    - qui summarize `ismissing', meanonly
    = qui summarize __000002, meanonly
    - local oldmiss = r(sum)
    - qui count if missing(`NEWVAR')
    = qui count if missing(__000001)
    - local newmiss = r(N)
    - local flag = `oldmiss'!=`newmiss'
    = local flag = 0!=0
    - if `flag' & ("`force'" == "") {
    = if 0 & ("" == "") {
      if `"`ignore'"' != "" {
      di as txt "`var': contains " "`aswhat's not specified in " as res "ignore(
> )" as txt "; no " as res "`genrep'"
      }
      else {
      di as txt "`var': contains " "nonnumeric `aswhat's; no " as res "`genrep'"
      }
      }
    - else {
    - order `NEWVAR', after(`var')
    = order __000001, after(inc_decoded)
      ---------------------------------------------------------- begin order ---
      - version 11
      - if (_caller()<11) {
        _order `macval(0)'
        exit
        }
      - syntax varlist[, Before(varname) After(varname) first last SEQuential AL
> PHAbetic]
      - if (`"`before'"' == "" & `"`after'"' == "" & "`first'" == "" & "`last'" 
> == "" & "`alphabetic'" == "" & "`sequential'" == "") {
      = if (`""' == "" & `"inc_decoded"' == "" & "" == "" & "" == "" & "" == "" 
> & "" == "") {
        _order `macval(0)'
        exit
        }
      - if (`"`before'"' != "" & `"`after'"' != "") {
      = if (`""' != "" & `"inc_decoded"' != "") {
        dis as error "before() may not be combined with after()"
        exit 198
        }
      - if (`"`before'"' != "" & `"`first'"' != "") {
      = if (`""' != "" & `""' != "") {
        dis as error "before() may not be combined with first()"
        exit 198
        }
      - if (`"`before'"' != "" & `"`last'"' != "") {
      = if (`""' != "" & `""' != "") {
        dis as error "before() may not be combined with last()"
        exit 198
        }
      - if (`"`after'"' != "" & `"`before'"' != "") {
      = if (`"inc_decoded"' != "" & `""' != "") {
        dis as error "after() may not be combined with before()"
        exit 198
        }
      - if (`"`after'"' != "" & `"`first'"' != "") {
      = if (`"inc_decoded"' != "" & `""' != "") {
        dis as error "after() may not be combined with first()"
        exit 198
        }
      - if (`"`after'"' != "" & `"`last'"' != "") {
      = if (`"inc_decoded"' != "" & `""' != "") {
        dis as error "after() may not be combined with last()"
        exit 198
        }
      - if ("`first'" != "" & "`last'" != "") {
      = if ("" != "" & "" != "") {
        dis as error "first may not be combined with last"
        exit 198
        }
      - if ("`sequential'" != "" & "`alphabetic'" != "") {
      = if ("" != "" & "" != "") {
        dis as error "sequential may not be combined with alphabetic"
        exit 198
        }
      - if ("`first'" != "") {
      = if ("" != "") {
        if "`alphabetic'" != "" {
        local varlist : list sort varlist
        }
        if "`sequential'" != "" {
        aorder `varlist'
        }
        else {
        _order `varlist'
        }
        }
      - if ("`last'" != "") {
      = if ("" != "") {
        unab vlist : _all
        local list : list vlist - varlist
        if "`alphabetic'" != "" {
        local varlist : list sort varlist
        }
        if "`sequential'" != "" {
        preserve
        keep `varlist'
        aorder `varlist'
        unab varlist : _all
        restore
        }
        _order `list' `varlist'
        }
      - if (`"`before'"' != "") {
      = if (`""' != "") {
        local test : list before in varlist
        if `test' {
        dis as err "varname specified in before() may not" " be in varlist"
        exit 198
        }
        if "`alphabetic'" != "" {
        local varlist : list sort varlist
        }
        if "`sequential'" != "" {
        preserve
        keep `varlist'
        aorder `varlist'
        unab varlist : _all
        restore
        }
        unab vlist : _all
        local vlist : list vlist - varlist
        local var_num : list posof "`before'" in vlist
        local var_num = `var_num' - 1
        local fvar : word 1 of `vlist'
        capture local lvar : word `var_num' of `vlist'
        if _rc {
        _order `varlist'
        exit
        }
        unab nlist : `fvar'-`lvar'
        local nlist : list nlist - varlist
        _order `nlist' `varlist'
        }
      - if (`"`after'"' != "") {
      = if (`"inc_decoded"' != "") {
      - local test : list after in varlist
      - if `test' {
      = if 0 {
        dis as err "varname specified in after() may not" " be in varlist"
        exit 198
        }
      - if "`alphabetic'" != "" {
      = if "" != "" {
        local varlist : list sort varlist
        }
      - if "`sequential'" != "" {
      = if "" != "" {
        preserve
        keep `varlist'
        aorder `varlist'
        unab varlist : _all
        restore
        }
      - unab vlist : _all
        --------------------------------------------------------- begin unab ---
        - version 6
        - gettoken user 0: 0, parse(" :")
        - gettoken colon 0: 0, parse(" :")
        - if `"`colon'"' != ":" { error 198 }
        = if `":"' != ":" { error 198 }
        - syntax [varlist(default=empty)] [, MIN(integer 1) MAX(integer 120000) 
> NAME(string)]
        - c_local `user' `varlist'
        = c_local vlist year hhwt repwt cluster adjust statefip strata hhincome_
> acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 repwt10 rep
> wt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 repwt20 r
> epwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt29 repwt30
>  repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repwt39 repwt
> 40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 repwt49 rep
> wt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 repwt59 r
> epwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt68 repwt69
>  repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repwt78 repwt
> 79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp5 repwtp6
>  repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14 repwtp15
>  repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwtp23 repwt
> p24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 repwtp32 re
> pwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40 repwtp41
>  repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwtp49 repwt
> p50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 repwtp58 re
> pwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66 repwtp67
>  repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwtp75 repwt
> p76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __000000 __00
> 0003 __000002 __000001
        - local n : word count `varlist'
        = local n : word count year hhwt repwt cluster adjust statefip strata hh
> income_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 repw
> t10 repwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 re
> pwt20 repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt29 
> repwt30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repwt3
> 9 repwt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 repw
> t49 repwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 re
> pwt59 repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt68 
> repwt69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repwt7
> 8 repwt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp5 
> repwtp6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14 r
> epwtp15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwtp2
> 3 repwtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 repw
> tp32 repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40 r
> epwtp41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwtp4
> 9 repwtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 repw
> tp58 repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66 r
> epwtp67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwtp7
> 5 repwtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __0000
> 00 __000003 __000002 __000001
        - if `n'>=`min' & `n'<=`max' { exit }
        = if 178>=1 & 178<=120000 { exit }
        ----------------------------------------------------------- end unab ---
      - local vlist : list vlist - varlist
      - local var_num : list posof "`after'" in vlist
      = local var_num : list posof "inc_decoded" in vlist
      - local fvar : word 1 of `vlist'
      = local fvar : word 1 of year hhwt repwt cluster adjust statefip strata hh
> income_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 repw
> t10 repwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 re
> pwt20 repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt29 
> repwt30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repwt3
> 9 repwt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 repw
> t49 repwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 re
> pwt59 repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt68 
> repwt69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repwt7
> 8 repwt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp5 
> repwtp6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14 r
> epwtp15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwtp2
> 3 repwtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 repw
> tp32 repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40 r
> epwtp41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwtp4
> 9 repwtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 repw
> tp58 repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66 r
> epwtp67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwtp7
> 5 repwtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __0000
> 00 __000003 __000002
      - local lvar : word `var_num' of `vlist'
      = local lvar : word 174 of year hhwt repwt cluster adjust statefip strata 
> hhincome_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 re
> pwt10 repwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 
> repwt20 repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt2
> 9 repwt30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repw
> t39 repwt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 re
> pwt49 repwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 
> repwt59 repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt6
> 8 repwt69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repw
> t78 repwt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp
> 5 repwtp6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14
>  repwtp15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwt
> p23 repwtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 re
> pwtp32 repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40
>  repwtp41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwt
> p49 repwtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 re
> pwtp58 repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66
>  repwtp67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwt
> p75 repwtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __00
> 0000 __000003 __000002
      - unab nlist : `fvar'-`lvar'
      = unab nlist : year-inc_decoded
        --------------------------------------------------------- begin unab ---
        - version 6
        - gettoken user 0: 0, parse(" :")
        - gettoken colon 0: 0, parse(" :")
        - if `"`colon'"' != ":" { error 198 }
        = if `":"' != ":" { error 198 }
        - syntax [varlist(default=empty)] [, MIN(integer 1) MAX(integer 120000) 
> NAME(string)]
        - c_local `user' `varlist'
        = c_local nlist year hhwt repwt cluster adjust statefip strata hhincome_
> acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 repwt10 rep
> wt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 repwt20 r
> epwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt29 repwt30
>  repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repwt39 repwt
> 40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 repwt49 rep
> wt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 repwt59 r
> epwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt68 repwt69
>  repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repwt78 repwt
> 79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp5 repwtp6
>  repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14 repwtp15
>  repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwtp23 repwt
> p24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 repwtp32 re
> pwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40 repwtp41
>  repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwtp49 repwt
> p50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 repwtp58 re
> pwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66 repwtp67
>  repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwtp75 repwt
> p76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded
        - local n : word count `varlist'
        = local n : word count year hhwt repwt cluster adjust statefip strata hh
> income_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 repw
> t10 repwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 re
> pwt20 repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt29 
> repwt30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repwt3
> 9 repwt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 repw
> t49 repwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 re
> pwt59 repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt68 
> repwt69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repwt7
> 8 repwt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp5 
> repwtp6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14 r
> epwtp15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwtp2
> 3 repwtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 repw
> tp32 repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40 r
> epwtp41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwtp4
> 9 repwtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 repw
> tp58 repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66 r
> epwtp67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwtp7
> 5 repwtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded
        - if `n'>=`min' & `n'<=`max' { exit }
        = if 174>=1 & 174<=120000 { exit }
        ----------------------------------------------------------- end unab ---
      - local nlist : list nlist - varlist
      - _order `nlist' `varlist'
      = _order year hhwt repwt cluster adjust statefip strata hhincome_acs repwt
> 1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 repwt10 repwt11 repw
> t12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 repwt20 repwt21 re
> pwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt29 repwt30 repwt31 
> repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repwt39 repwt40 repwt4
> 1 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 repwt49 repwt50 repw
> t51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 repwt59 repwt60 re
> pwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt68 repwt69 repwt70 
> repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repwt78 repwt79 repwt8
> 0 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp5 repwtp6 repwtp7 
> repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14 repwtp15 repwtp16
>  repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwtp23 repwtp24 repwt
> p25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 repwtp32 repwtp33 re
> pwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40 repwtp41 repwtp42
>  repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwtp49 repwtp50 repwt
> p51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 repwtp58 repwtp59 re
> pwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66 repwtp67 repwtp68
>  repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwtp75 repwtp76 repwt
> p77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __000001
      - }
      - if ("`alphabetic'" != "" & `"`before'"' == "" & `"`after'"' == "" & "`fi
> rst'" == "" & "`last'" == "") {
      = if ("" != "" & `""' == "" & `"inc_decoded"' == "" & "" == "" & "" == "")
>  {
        local vlist : list sort varlist
        _order `vlist'
        }
      - if ("`sequential'" != "" & `"`before'"' == "" & `"`after'"' == "" & "`fi
> rst'" == "" & "`last'" == "") {
      = if ("" != "" & `""' == "" & `"inc_decoded"' == "" & "" == "" & "" == "")
>  {
        aorder `varlist'
        }
      ------------------------------------------------------------ end order ---
    - if `aschars' {
    = if 1 {
    - local dispb `"`b'"'
    = local dispb `" L e s space t h a n $"'
    - }
    - else {
      local dispb = printablebytes(`"`b'"')
      }
    - local c = plural(`bcnt',strproper("`aswhat'")) + " removed " + plural(`bcn
> t',"was","were") + `":`dispb'"'
    = local c = plural(9,strproper("character")) + " removed " + plural(9,"was",
> "were") + `": L e s space t h a n $"'
    - if "`makepct'" != "" {
    = if "" != "" {
      if `makepct' {
      qui replace `NEWVAR' = `NEWVAR'/100
      }
      }
    - qui compress `NEWVAR'
    = qui compress __000001
    - local type : type `NEWVAR'
    = local type : type __000001
    - if `flag' {
    = if 0 {
      di as txt "`var': contains nonnumeric `aswhat's" _continue
      if `"`ignore'"'!="" {
      display " not specified in " as result "ignore()" _continue
      }
      if `"`b'"'=="" {
      display "; `finalprint'" as res "`genrep'd " as txt "as " as res "`type'" 
> _continue
      }
      display
      }
    - if `"`b'"' != "" {
    = if `" L e s space t h a n $"' != "" {
    - di as txt "`var': " plural(`bcnt',"`aswhat'") as res `"`dispb'"' as txt " 
> removed; `finalprint'" as res "`genrep'd " as txt "as " as res "`type'"
    = di as txt "inc_decoded: " plural(9,"character") as res `" L e s space t h 
> a n $"' as txt " removed; acs_hhinc_ub " as res "generated " as txt "as " as r
> es "int"
inc_decoded: characters L e s space t h a n $ removed; acs_hhinc_ub generated as
>  int
    - }
    - else if `"`b'"' == "" & !`flag' {
    = else if `" L e s space t h a n $"' == "" & !0 {
      di as txt "`var': all characters numeric; " "`finalprint'" as res "`genrep
> 'd " as txt "as " as res "`type'"
      }
    - if `newmiss' != 0 {
    = if 0 != 0 {
      di as txt "(`newmiss' missing " plural(`newmiss',"value") " generated)"
      }
    - label variable `NEWVAR' `"`: variable label `var''"'
    = label variable __000001 `"Household Income (ACS) arbitrary categories base
> d on hhincome_acs"'
      ---------------------------------------------------------- begin label ---
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {
      = if (strpos("variable", "val") > 0 ) {
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {
        local fix ", nofix"
        }
        gettoken var rest : anything
        while `"`rest'"' != "" {
        gettoken lab rest : rest
        local label "`lab'"
        }
        local vlist : list anything - lab
        if "`lab'" == "." {
        local lab ""
        }
        foreach var of varlist `vlist' {
        `vv' _label `val' `var' `lab' `fix'
        }
        }
      - else {
      - `vv' _label `macval(0)'
      = version 14, missing: _label variable __000001 `"Household Income (ACS) a
> rbitrary categories based on hhincome_acs"'
      - }
      ------------------------------------------------------------ end label ---
    - char `NEWVAR'[destring] `c'
    = char __000001[destring] Characters removed were: L e s space t h a n $
    - char `NEWVAR'[destring_cmd] `"destring `cmdargs'"'
    = char __000001[destring_cmd] `"destring inc_decoded, ignore("Less than LESS
>  THAN Under,$ ") generate(acs_hhinc_ub)"'
    - char `var'[destring]
    = char inc_decoded[destring]
    - char `var'[destring_cmd]
    = char inc_decoded[destring_cmd]
    - if "`genrep'"=="generate" {
    = if "generate"=="generate" {
    - Charcopy `var' `NEWVAR'
    = Charcopy inc_decoded __000001
      ---------------------------------------------- begin destring.Charcopy ---
      - syntax varlist(min=2 max=2)
      - tokenize `varlist'
      = tokenize inc_decoded __000001
      - args from to
      - local chfrom : char `from'[]
      = local chfrom : char inc_decoded[]
      - if "`chfrom'" == "" {
      = if "" == "" {
      - exit
      ------------------------------------------------ end destring.Charcopy ---
    - rename `NEWVAR' `: word `varno' of `generate''
    = rename __000001 acs_hhinc_ub
      =struct rename_peldf {
      =        string scalar        element
      =        real scalar  elementtype
      =        real scalar            arg
      =        real scalar            match
      =struct rename_patterndf {
      =        real scalar  patterntype
      =        string scalar            original
      =        struct rename_peldf rowvector          ellist
      =        real rowvector            n_of
      =        string rowvector            varnames
      =        string matrix            pieces
      =struct rename_optiondf {
      =        real scalar       isrecase
      =        real scalar       isrecase_upper, isrecase_lower, isrecase_proper
      =        real scalar       isdryrun
      =        real scalar       isrenumber, isaddnumber
      =        real scalar            from
      =        real scalar       issort
      =        real scalar       isdebug
      =        real scalar       istest
      =        real scalar       isr
      =void rename_optiondf_init(struct rename_optiondf scalar option)
      =        option.isrecase = option.isdryrun = 0
      =                                option.isrecase_proper = 0
      =        option.isrenumber = option.isaddnumber = 0
      =        option.issort     = 0
      =        option.isdebug    = 0
      =        option.istest     = 0
      =        option.isr        = 0
      =struct rename_renamedf {
      =        struct rename_patterndf rowvector      oldplist
      =        struct rename_patterndf rowvector      newplist
      =        struct rename_optiondf scalar       option
      =void rename_cmd(string scalar thirdarg)
      =        string scalar    input
      =real scalar can_do_fast(string scalar input)
      =        string rowvector    token
      =        real scalar    rc
      =        if (length(token)!=2) return(0)
      =        if (!st_isname(token[1])) return(0)
      =        if (!st_isname(token[2])) return(0)
      =        if (token[1] == token[2]) return(0)
      =        return(1)
      =void rename_cmd_u(string scalar input)
      =        struct rename_renamedf scalar       ren
      =                dump_pattern(ren.oldplist, "old after parsing", 0)
      =                dump_pattern(ren.newplist, "new after parsing", 0)
      =void xeq_old_to_new(struct rename_renamedf scalar ren)
      =                dump_pattern(ren.oldplist, "old after linkage", 0)
      =                dump_pattern(ren.newplist, "new after linkage", 0)
      =                dump_pattern(ren.oldplist, "old final", 1)
      =                dump_pattern(ren.newplist, "new final", 1)
      =void xeq_recase(struct rename_renamedf scalar ren)
      =        fillin_old_varnames(ren.oldplist, ren.newplist, 0)
      =                dump_pattern(ren.oldplist, "old final", 1)
      =                dump_pattern(ren.newplist, "new final", 1)
      =void parse_cmd(struct rename_renamedf scalar ren, string scalar input)
      =        real scalar            c
      =        string scalar            lhs, ops
      =        string scalar            oldnames, newnames
      =        parse_cmd_pat_els(ren.oldplist, oldnames, 0)
      =                parse_cmd_pat_els(ren.newplist, newnames, 1)
      =real scalar parse_cmd_commaloc(string scalar s)
      =        real scalar    i, L
      =        real scalar    nestlev
      =        string scalar    c
      =void getarg(string scalar input, string scalar arg, string scalar rest)
      =        real scalar    L, npar, i
      =        string scalar    c
      =void parse_cmd_options(struct rename_optiondf scalar option, string scala
> r ops)
      =        string scalar            token
      =        transmorphic      t
      =        rename_optiondf_init(option)
      =void confirm_options_consistent(struct rename_optiondf scalar option)
      =        string rowvector    list
      =void parse_cmd_options_u(struct rename_optiondf scalar option, string sca
> lar token, transmorphic t)
      =real scalar parse_cmd_options_u_std(struct rename_optiondf scalar option,
>  string scalar source)
      =        real scalar    l
      =                option.isdebug = 1
      =                option.isdryrun = 1
      =                option.isrecase = option.isrecase_lower = 1
      =                option.isrecase = option.isrecase_proper= 1
      =                option.isr = 1
      =                option.issort = 1
      =                option.istest = 1
      =                option.isrecase = option.isrecase_upper = 1
      =        else    return(0)
      =        return(1)
      =real scalar parse_cmd_options_u_number(struct rename_optiondf scalar opti
> on, string scalar source,
      =                                                                transmorp
> hic t)
      =        string scalar            token
      =        real scalar            from
      =        real scalar            l
      =        string scalar            op
      =        if (option.isrenumber | option.isaddnumber)  return(0)
      =                option.isrenumber = 1
      =                option.isaddnumber = 1
      =                return(1)
      =        return(1)
      =void parse_cmd_pat_els(struct rename_patterndf rowvector pat, string scal
> ar toparse, real pattype)
      =        string scalar            token, curlist
      =        transmorphic      t
      =        real scalar       first
      =        first   = 1
      =                                first    = 1
      =                                first   = 0
      =void parse_cmd_pat_el(struct rename_patterndf rowvector pat, string scala
> r token, real pattype)
      =        string scalar            mytoken
      =        struct rename_patterndf scalar      mypat
      =        real scalar            i, j
      =        real matrix            found
      =        mypat.n_of        = J(1, (8), 0)
      =        confirm_not_empty(mytoken, pattype==0 ?
      =                if (i=strpos(mytoken, "*")) found = (found \ (i, (3)))
      =                if (i=strpos(mytoken, "?")) found = (found \ (i, (4) ))
      =                if (i=strpos(mytoken, "#")) found = (found \ (i, (5)))
      =                if (i=strpos(mytoken, "(")) found = (found \ (i, (6)))
      =                if (i=strpos(mytoken, "=")) found = (found \ (i, (7)))
      =                if (i=strpos(mytoken, ".")) found = (found \ (i, (8)))
      =                        if (i==(3)) {
      =                        else if (i==(4)) {
      =                        else if (i==(5)) {
      =                        else if (i==(6)) {
      =                        else if (i==(7)) {
      =                        else if (i==(8)) {
      =string scalar set_subscript(struct rename_patterndf scalar pat, string sc
> alar token, real pt)
      =        real scalar    i
      =        string scalar    c
      =        if (pt != 1) {
      =        if (pt != 1)              return(token)
      =void set_pat_ETstrlist(struct rename_patterndf scalar pat, string scalar 
> token)
      =        struct rename_peldf scalar          el
      =        el.elementtype = (1)
      =        pat.n_of[(1)] = pat.n_of[(1)] + 1
      =string scalar set_pat_str(struct rename_patterndf scalar pat, string scal
> ar token)
      =        struct rename_peldf scalar          el
      =        el.elementtype = (2)
      =string scalar set_pat_ETstar(struct rename_patterndf scalar pat, string s
> calar token, real scalar loc)
      =        struct rename_peldf scalar          el
      =        if (pat.patterntype == 0 && length(pat.ellist)) {
      =                if (pat.ellist[length(pat.ellist)].elementtype == (3)) {
      =        el.elementtype = (3)
      =string scalar set_pat_ETnum_v(struct rename_patterndf scalar pat, string 
> scalar token, real scalar loc)
      =        struct rename_peldf scalar          el
      =        if (pat.patterntype == 0 && length(pat.ellist)) {
      =                if (pat.ellist[length(pat.ellist)].elementtype == (5)) {
      =        el.elementtype = (5)
      =string scalar set_pat_ETeq(struct rename_patterndf scalar pat, string sca
> lar token, real scalar loc)
      =        struct rename_peldf scalar  el
      =        if (pat.patterntype == 0) {
      =        el.elementtype = (7)
      =string scalar set_pat_ETodot(struct rename_patterndf scalar pat, string s
> calar token, real scalar loc)
      =        struct rename_peldf scalar  el
      =        if (pat.patterntype == 0) {
      =        el.elementtype = (8)
      =string scalar set_pat_ETqm(struct rename_patterndf scalar pat, string sca
> lar token, real scalar loc)
      =        struct rename_peldf scalar  el
      =        el.elementtype = (4)
      =string scalar set_pat_ETnum_f(struct rename_patterndf scalar pat, string 
> scalar token, real scalar loc)
      =        struct rename_peldf scalar          el
      =        real scalar            j
      =        el.elementtype = (6)
      =        if (el.arg > 10) {
      =void make_patternlist_lengths_equal(struct rename_renamedf scalar ren)
      =void build_recase_newpattern(struct rename_renamedf scalar ren)
      =        real scalar    i
      =        ren.newplist = rename_patterndf(length(ren.oldplist))
      =                ren.newplist[i].n_of        = J(1, (8), 0)
      =void link_patterns(struct rename_renamedf scalar ren)
      =        real scalar    i, jn
      =real scalar check_and_fix_ETnum(struct rename_patterndf scalar newp, stru
> ct rename_optiondf scalar option)
      =        real scalar            n, j, jn
      =        real scalar  tt
      =                if (tt==(5) | tt==(6)) {
      =                                (tt==(5) ? (9) : (10))
      =struct rename_linklocdf {
      =        real scalar    j_old, last_sequential_j_old
      =        real scalar    j_new
      =        real scalar    jn
      =        real rowvector    mapsub
      =void rename_linklocdf_init(struct rename_linklocdf scalar ll, real scalar
>  jn)
      =void rename_linklocdf_next(struct rename_linklocdf scalar ll, struct rena
> me_patterndf scalar oldp, struct rename_patterndf scalar newp)
      =        real scalar subscr
      =real scalar map_subscript(real scalar subscr, real rowvector mapsub, stru
> ct rename_patterndf scalar oldp, struct rename_patterndf scalar newp)
      =void link_patterns_u(struct rename_patterndf scalar oldp, struct rename_p
> atterndf scalar newp, real scalar jn)
      =        struct rename_linklocdf scalar      ll
      =        rename_linklocdf_init(ll, jn)
      =        rename_linklocdf_next(ll, oldp, newp)
      =                rename_linklocdf_next(ll, oldp, newp)
      =real rowvector pelidx_of_wcidx(struct rename_patterndf scalar oldp)
      =        real rowvector            toret
      =        real scalar            i
      =        real scalar  tt
      =                if (tt!=(1) & tt!=(2)) toret = (toret, i)
      =void confirm_wildcards_link(struct rename_patterndf scalar oldp, real sca
> lar j_old,
      =                            struct rename_patterndf scalar newp, real sca
> lar j_new)
      =        real scalar  tt_old, tt_new
      =        if (tt_new == (3)) return
      =        if (tt_new == (8))  return
      =        if (tt_new == (4)) {
      =                if (tt_old == (4)) return
      =        if (tt_new==(5) | tt_new==(6)) {
      =                if (tt_old==(5) | tt_old==(6)) return
      =string scalar printable_wildcard(struct rename_peldf scalar el)
      =        real scalar  tt
      =        if (tt == (3))  return("*")
      =        if (tt == (4))    return("?")
      =        if (tt == (8))  return(".")
      =        if (tt == (5)) return("#")
      =        if (tt == (6)) return("(" + el.arg*"*" + ")")
      =real scalar count_wildcards(struct rename_patterndf scalar pat)
      =        return(pat.n_of[(3)]  +
      =               pat.n_of[(4)]    +
      =               pat.n_of[(5)] +
      =               pat.n_of[(6)] +
      =               pat.n_of[(8)])
      =real scalar is_wildcard(real scalar tt)
      =        return( tt == (3)  |
      =                tt == (4)    |
      =                tt == (5) |
      =                tt == (6) |
      =                tt == (9) |
      =                tt == (10) |
      =                tt == (8)  )
      =real scalar find_next_wildcard(struct rename_peldf rowvector d, real scal
> ar j0)
      =        real scalar    j
      =void fillin_old_varnames(struct rename_patterndf rowvector oldplist, stru
> ct rename_patterndf rowvector newplist,
      =                                                        real scalar issor
> t)
      =        real scalar    i
      =        string scalar    tmpname
      =void fillin_old_varnames_u(struct rename_patterndf scalar oldp, struct re
> name_patterndf scalar newp,
      =                                        real scalar issort, string scalar
>  tmpname)
      =        string rowvector            varnames, piece
      =        real scalar            i, n, nvars, nels
      =        string matrix            pieces
      =        real scalar  tt
      =        real scalar       filter_varlist, fillin_pieces
      =        filter_varlist = (oldp.n_of[(5)] + oldp.n_of[(6)] != 0)
      =        fillin_pieces  = (newp.n_of[(5)] + newp.n_of[(6)] +
      =                          newp.n_of[(3)]  + newp.n_of[(4)]    != 0)
      =        if (issort) fillin_pieces = 1
      =                        if (tt==(3) | tt==(4)) {
      =string scalar varlistpattern(struct rename_peldf rowvector ellist)
      =        real scalar    j
      =        string scalar    result
      =        if (ellist[1].elementtype == (1)) return(ellist[1].element)
      =string scalar varlist_el(struct rename_peldf scalar el)
      =        if (el.elementtype == (2))    return(el.element)
      =        if (el.elementtype == (3))   return("*")
      =        if (el.elementtype == (4))     return("?")
      =        if (el.elementtype == (5))  return("?*")
      =        if (el.elementtype == (6))  return(el.arg*"?")
      =struct rename_matchdf {
      =        real scalar    j0, j1
      =        real scalar    i0, i1
      =        string scalar    name
      =        string rowvector    pieces
      =real scalar matchvarname(string rowvector pieces, struct rename_peldf row
> vector ellist, string scalar name)
      =        struct rename_matchdf scalar        m
      =                if (ellist[1].elementtype==(1)) {
      =                        return(1)
      =        if (!match_step(m, ellist)) return(0)
      =        return(1)
      =void match_setup(struct rename_matchdf scalar m, struct rename_peldf rowv
> ector ellist, string scalar name)
      =real scalar match_step(struct rename_matchdf scalar m, struct rename_peld
> f rowvector ellist)
      =        real scalar            lefttomatch
      =        real scalar      mr
      =        real scalar     r
      =                if ((r=match_query_done(m))!=(-1)) return(r)
      =                if (match_simplification(m, ellist)==-1) return(0)
      =                if ((r=match_query_done(m))!=(-1)) return(r)
      =                        if (match_step_1(m, ellist)==-1) return(0)
      =                        if ((r=match_query_done(m))!=(-1)) return(r)
      =                        return(0)
      =                        if (mr==-1 | mr==0) return(0)
      =                        if (mr==-1 | mr==0) return(0)
      =real scalar match_step_1(struct rename_matchdf scalar m, struct rename_pe
> ldf rowvector ellist)
      =        if (ellist[m.j0].elementtype==(5)) {
      =                return(match_ETnum_v(m, ellist, 1))
      =        if (ellist[m.j0].elementtype==(3)) {
      =        return(-1)
      =real scalar match_step_2(struct rename_matchdf scalar m, struct rename_pe
> ldf rowvector ellist)
      =        if (ellist[m.j0].elementtype==(5)) {
      =                return(match_ETnum_v(m, ellist, 1))
      =        if (ellist[m.j0+1].elementtype==(5)) {
      =                return(match_ETnum_v(m, ellist, 0))
      =        return(-1)
      =real scalar match_step_3p(struct rename_matchdf scalar m, struct rename_p
> eldf rowvector ellist)
      =        real scalar    j
      =        if (ellist[m.j0].elementtype==(3)) {
      =                if (ellist[j].elementtype==(3)) {
      =                if (ellist[j].elementtype==(5)) {
      =                        return(match_ETnum_v(m, ellist, 0))
      =        if (ellist[m.j0].elementtype==(5)) {
      =                return(match_ETnum_v(m, ellist, 1))
      =        return(-1)
      =real scalar match_query_done(struct rename_matchdf scalar m)
      =                if (m.i0 < m.i1) return(0)
      =                return(1)
      =        return((-1))
      =real scalar match_simplification(struct rename_matchdf scalar m, struct r
> ename_peldf rowvector ellist)
      =        real scalar      mr
      =        while ((m.i1 >m.i0 & m.j1> m.j0)) {
      =                mr = match_fixed(m, ellist, 1)
      =                if (mr==-1) return(-1)
      =                if (mr==0)   break
      =        while ((m.i1 >m.i0 & m.j1> m.j0)) {
      =                mr = match_fixed(m, ellist, 0)
      =                if (mr==-1) return(-1)
      =                if (mr==0)   break
      =real scalar match_fixed(struct rename_matchdf scalar m, struct rename_pel
> df rowvector ellist, real scalar s)
      =        real scalar    j
      =        j = (s==1 ? m.j0 : m.j1-1)
      =        if (ellist[j].elementtype==(2))   return(match_ETstr(m, ellist, s
> ))
      =        if (ellist[j].elementtype==(6)) return(match_ETnum_f(m, ellist, s
> ))
      =        if (ellist[j].elementtype==(4))    return(match_ETqm(m, ellist, s
> ))
      =        return(0)
      =real scalar match_ETstr(struct rename_matchdf scalar m, struct rename_pel
> df rowvector ellist, real scalar s)
      =        real scalar    j, len
      =        j = (s==1 ? m.j0 : m.j1-1)
      =        if (ellist[j].elementtype != (2)) return(0)
      =        if ((s==1 ?  usubstr(m.name, m.i0, len) :
      =                return(-1)
      =        return(1)
      =real scalar match_ETnum_f(struct rename_matchdf scalar m, struct rename_p
> eldf rowvector ellist, real scalar s)
      =        real scalar    j, i, len
      =        string scalar    str, c
      =        j = (s==1 ? m.j0 : m.j1-1)
      =        if (ellist[j].elementtype != (6)) return(0)
      =        str = (s==1 ?  usubstr(m.name, m.i0, len) : usubstr(m.name, -len,
>  .))
      =        if (ustrlen(str)!=len) return(-1)
      =                if (c<"0" | c>"9") return(-1)
      =        return(1)
      =real scalar match_ETqm(struct rename_matchdf scalar m, struct rename_peld
> f rowvector ellist, real scalar s)
      =        if (ellist[s==1 ? m.j0 : m.j1-1].elementtype != (4)) {
      =                return(0)
      =        if (m.i0==m.i1) return(-1)
      =        return(1)
      =real scalar match_ETnum_v(struct rename_matchdf scalar m, struct rename_p
> eldf rowvector ellist, real scalar s)
      =        real scalar            j, i0, i1, len
      =        string scalar            c
      =        string scalar            c1
      =        struct rename_matchdf scalar        hold
      =        j = (s==1 ? m.j0 : m.j1-1)
      =        if (ellist[j].elementtype != (5)) return(0)
      =        if (s==1) {
      =                if (match_step(m, ellist)==1) return(1)
      =        return(-1)
      =real scalar match_ETstar_left(struct rename_matchdf scalar m, struct rena
> me_peldf rowvector ellist)
      =        real scalar            len, newlen
      =        struct rename_matchdf scalar        hold
      =        real scalar       next_is_ETnum_v
      =        if (ellist[m.j0].elementtype != (3)) return(0)
      =                post_match_piece(m, 1, len)
      =                return(1)
      =        next_is_ETnum_v = (ellist[m.j0+1].elementtype==(5))
      =                post_match_piece(m, 1, len)
      =                if (match_step(m, ellist)==1) {
      =                                        post_match_piece(m, 1, newlen)
      =                        return(1)
      =        return(-1)
      =real scalar mstargiveback(string scalar s)
      =        real scalar    l
      =        string scalar    c
      =        string scalar    c1
      =void post_match_piece(struct rename_matchdf scalar m, real scalar s, real
>  scalar len)
      =        if (s==1) {
      =void sort_old_varnames(struct rename_renamedf scalar ren)
      =        real scalar i
      =void sort_appropriate_field(struct rename_patterndf rowvector oldplist, s
> truct rename_patterndf rowvector newplist)
      =        real scalar            i
      =        real scalar            j
      =real scalar j_of_renumber(struct rename_patterndf scalar plist)
      =        real scalar            j
      =        real scalar  tt
      =                if (tt==(9) | tt==(10)) return(j)
      =real scalar j_of_number(struct rename_patterndf scalar plist)
      =        real scalar            j, jtoret
      =        real scalar  tt
      =                if (tt==(3) | tt==(4) | tt==(5) | tt==(6)) {
      =void sort_on_field(struct rename_patterndf scalar plist, real scalar j)
      =        real scalar  tt
      =        real colvector            o
      =        string colvector            vc
      =                if (tt==(5) | tt==(6)) {
      =void fillin_new_varnames_recase(struct rename_renamedf scalar ren)
      =        real scalar    i
      =void fillin_new_varnames(struct rename_patterndf rowvector oldplist, stru
> ct rename_patterndf rowvector newplist, real scalar from)
      =        real scalar    i
      =void fillin_new_varnames_u(struct rename_patterndf scalar oldp, struct re
> name_patterndf scalar newp, real scalar from)
      =        real scalar    i
      =        if (newp.ellist[1].elementtype==(1)) {
      =void fillin_new_varnames_u_u(struct rename_patterndf scalar oldp, struct 
> rename_patterndf scalar newp, real scalar from, real scalar i)
      =        real scalar            j
      =        string scalar            name
      =        real scalar  tt
      =                if (tt==(2)) {
      =                else if (tt==(3)) {
      =                else if (tt==(4)) {
      =                else if (tt==(5)) {
      =                else if (tt==(6)) {
      =                else if (tt==(7)) {
      =                else if (tt==(9)) {
      =                else if (tt==(10)) {
      =                else if (tt != (8)) {
      =string scalar fmt_ETnum_f(struct rename_patterndf scalar oldp, struct ren
> ame_patterndf scalar newp, real scalar i, real scalar j)
      =        real scalar    n, len
      =        string scalar    res, orig
      =string scalar fmt_ETnum_f_r(struct rename_patterndf scalar oldp, struct r
> ename_patterndf scalar newp, real scalar j, real scalar from)
      =        real scalar    n, len
      =        string scalar res
      =string matrix build_toren(struct rename_patterndf rowvector oldplist, str
> uct rename_patterndf rowvector newplist)
      =        string matrix    toren
      =        real scalar    i, N, n, k, k2
      =        real colvector    toselect
      =        string rowvector    lastrow, newrow
      =        real scalar hasomissions
      =                                hasomissions = 1
      =void perform_renames(string matrix toren, struct rename_optiondf scalar o
> ption)
      =        real scalar       use_intermediary
      =        string matrix            toren_nonulls
      =                        perform_dryrun(toren, toren_nonulls, 0)
      =void confirm_newnames_new(string matrix toren)
      =        real scalar    i
      =        real rowvector    varnum
      =        string rowvector    tocheck, badvar
      =void perform_set_r(string matrix toren)
      =void perform_test(string matrix toren, real scalar use_intermediary)
      =        real scalar    i
      =void perform_rename_straight(string matrix toren)
      =        real scalar    i
      =        real scalar    breakstatus
      =void perform_rename_intermediary(string matrix toren)
      =        real scalar    i
      =        real scalar    breakstatus
      =        string rowvector    tmpname
      =void perform_dryrun(string matrix toren, string matrix toren_nonulls, rea
> l scalar use_intermediary)
      =        real scalar    i
      =        real scalar    maxlen
      =        string scalar    sfmt, sfmtit
      =void dryrun_note1(string matrix toren, string matrix toren_nonulls)
      =        real scalar    i
      =        real scalar    nulls
      =void dryrun_note2(string matrix toren, real scalar use_intermediary)
      =        string colvector    dupnames, newname, oldname
      =real scalar names_not_jointly_unique(string matrix toren)
      =        real scalar    n0, n1
      =        string colvector    fulllist
      =void confirm_names_unique(string matrix toren)
      =void confirm_names_unique_1(string matrix toren, real scalar j)
      =        string colvector    names, corresponding
      =        string scalar    s
      =        real scalar    n
      =string colvector corresponding_names(string matrix toren, string scalar n
> ame, real scalar js, real scalar jd)
      =        real scalar    i
      =        string colvector    dups
      =void confirm_new_varnames_valid(string matrix toren)
      =        real scalar    i, n
      =        real colvector    bad
      =void confirm_not_empty(string scalar str, string scalar expected)
      =void errprint_bf_list(string vector list , |real scalar USER_MAXEL)
      =        real scalar            MAXEL
      =        real scalar            i, top
      =        real scalar       chopped
      =                        chopped = 1
      =                        chopped = 0
      =void errprint_bf_string(string scalar user_s, |real scalar USER_MAXLEN)
      =        real scalar            MAXLEN
      =        real scalar            len_last, target_last
      =        real scalar            len_remaining
      =        real scalar            i
      =        string rowvector            els
      =        string scalar            s, first, last
      =        real scalar       cont
      =        cont = 1
      =                else            cont   = 0
      =        string scalar    indent
      =void error_preceding_dash( pattype)
      =                        (pattype==0 ? "oldname" : "newname" ) )
      =void error_following_dash( pattype, string scalar what)
      =                        (pattype==0 ? "oldname" : "newname" ) )
      =void option_not_allowed(string scalar option)
      =void option_number_misspecified(string scalar op)
      =void error_ETnum_f_too_long(real scalar n_digits)
      =        errprintf("the {bf:(###...#)} pattern is %g.\n", 10)
      =void error_patternlengths_unequal(struct rename_patterndf rowvector oldpl
> ist, struct rename_patterndf rowvector newplist)
      =        string scalar    s_old, s_new
      =void error_too_many_renumbers(string scalar op, struct rename_patterndf s
> calar newp)
      =void error_strlist_length(struct rename_patterndf scalar oldp, struct ren
> ame_patterndf scalar newp)
      =        real scalar    n_old, n_new
      =        string scalar    s_old, s_new
      =void error_missing_ETnum(string scalar opname, struct rename_patterndf sc
> alar newp)
      =void error_too_many_wildcards(struct rename_patterndf scalar oldp, struct
>  rename_patterndf scalar newp,
      =                                                        real scalar isadd
> number)
      =void error_wildcardmatch_qm(struct rename_patterndf scalar oldp, real sca
> lar j_old,
      =                            struct rename_patterndf scalar newp, real sca
> lar j_new)
      =void error_wildcardmatch_hash(struct rename_patterndf scalar oldp, real s
> calar j_old,
      =                              struct rename_patterndf scalar newp, real s
> calar j_new)
      =void error_no_right_bracket(string scalar original)
      =void error_inside_brackets(string scalar original)
      =void error_newnumber_subscripted(struct rename_patterndf scalar oldp, str
> uct rename_patterndf scalar newp)
      =void error_subscript_invalid(struct rename_patterndf scalar oldp, struct 
> rename_patterndf scalar newp, real scalar subscr)
      =void error_subscripts_in_old(struct rename_patterndf scalar pat)
      =void dump_pattern(struct rename_patterndf rowvector pat, string scalar ty
> p, real scalar incl_names)
      =        real scalar    i, j, n
      =        real scalar    nv, k, m
      =                        pat[i].n_of[(2)],
      =                        pat[i].n_of[(3)],
      =                        pat[i].n_of[(4)],
      =                        pat[i].n_of[(5)],
      =                        pat[i].n_of[(6)],
      =                        pat[i].n_of[(7)],
      =                        pat[i].n_of[(8)])
      =string scalar dump_xlate_tt(real scalar t)
      =        if (t==(1))     return("ETstrlist")
      =        if (t==(2))         return("ETstr")
      =        if (t==(3))        return("ETstar")
      =        if (t==(4))          return("ETqm")
      =        if (t==(5))       return("ETnum_v")
      =        if (t==(6))       return("ETnum_f")
      =        if (t==(7))          return("ETeq")
      =        if (t==(8))        return("ETodot")
      =        if (t==(9))     return("ETnum_v_r")
      =        if (t==(10))     return("ETnum_f_r")
      =void dump_options(struct rename_renamedf scalar ren)
      =void match_debug(struct rename_matchdf scalar m, struct rename_peldf rowv
> ector ellist, string scalar msg)
      =string rowvector list_subtract(string rowvector a, string rowvector b)
      =        string rowvector result
      =string rowvector expand_varlist(string scalar pattern, string scalar tmpn
> ame)
      =        real scalar    rc
      =        string rowvector    result
      =string scalar ordinal_suffix(real scalar i)
      =        real scalar    lastdigit
      --------------------------------------------------------- begin rename ---
      - version 12
      - mata: rename_cmd("`3'")
      = mata: rename_cmd("")
      ----------------------------------------------------------- end rename ---
    - }
    - else {
      char rename `var' `NEWVAR'
      drop `var'
      rename `NEWVAR' `var'
      }
    - }
    - foreach varmac of local tvars {
    - capture drop ``varmac''
    = capture drop __000000
    - }
    - capture drop ``varmac''
    = capture drop __000001
    - }
    - capture drop ``varmac''
    = capture drop __000002
    - }
    - capture drop ``varmac''
    = capture drop __000003
    - }
    - capture drop ``varmac''
    = capture drop __000004
    - }
    - }
    - }
    ----------------------------------------------------------- end destring ---
  - gen `inc_cat_var'_lb = -100000
  = gen acs_hhinc_lb = -100000
  - di "Lower bound of -100,000 created for inc_level " `inc_level'
  = di "Lower bound of -100,000 created for inc_level " 1
Lower bound of -100,000 created for inc_level 1
  - }
  - else if regexm(inc_decoded, "[a-z/A-Z]+$") == 1 {
    di "The inc_level " `inc_level' " is at the highest end of the " "original R
> esearch dataset income range"
    destring inc_decoded, ignore("and over or over,$ or more OR MORE") generate(
> `inc_cat_var'_lb)
    gen `inc_cat_var'_ub = 999999
    di "Upper bound of 999999 created for inc_level " `inc_level'
    }
  - else if regexm(inc_decoded, "[.][a-z]") == 1 {
    di "The inc_level " `inc_level' " is all missing"
    gen `inc_cat_var'_lb = .
    gen `inc_cat_var'_ub = .
    di "Lower and upper bound of . created for inc_level " `inc_level'
    }
  - else if regexm(inc_decoded, "[0-9]+$") == 1 {
    di "The inc_level " `inc_level' " has a lower and an upper level"
    split inc_decoded, parse("-" "to" "-" "to under" "to less than" "UP TO" "but
>  less than") ignore(" ,$") destring
    gen `inc_cat_var'_lb = inc_decoded1
    gen `inc_cat_var'_ub = inc_decoded2
    di "Lower bound of `inc_cat_var'_lb and upper bound of `inc_cat_var'_ub " "c
> reated for inc_level " `inc_level' "of the original Research " "dataset income
>  range"
    }
  - else {
    di as error "Error: The inc_level " `inc_level' " does not fit any of the ex
> isting regular expressions " "designs. Please email the REDI program creator a
> t " "mollymkingphd@gmail.com with information about this " "error and a list o
> f all of your income levels so she " "can update the program. Thank you for yo
> ur help!"
    error 999
    }
  - local upper_bound = `inc_cat_var'_ub
  = local upper_bound = acs_hhinc_ub
  - local lower_bound = `inc_cat_var'_lb
  = local lower_bound = acs_hhinc_lb
  - capture drop inc_decoded1 inc_decoded2
  - quietly summarize if `research_year' == `y' & `inc_cat_var' == `inc_level'
  = quietly summarize if year == 2019 & acs_hhinc == 1
  - local sample_size = r(N)
  - gen `inc_cat_var'_n = `sample_size'
  = gen acs_hhinc_n = 18327
  - label variable `inc_cat_var'_n "N in income level in research dataset"
  = label variable acs_hhinc_n "N in income level in research dataset"
    ------------------------------------------------------------ begin label ---
    - version 10.0
    - local vv : display "version " string(_caller()) ", missing:"
    - gettoken val : 0
    - if (strpos("`val'", "val") > 0 ) {
    = if (strpos("variable", "val") > 0 ) {
      gettoken val 0 : 0
      syntax anything [, nofix]
      if "`fix'" != "" {
      local fix ", nofix"
      }
      gettoken var rest : anything
      while `"`rest'"' != "" {
      gettoken lab rest : rest
      local label "`lab'"
      }
      local vlist : list anything - lab
      if "`lab'" == "." {
      local lab ""
      }
      foreach var of varlist `vlist' {
      `vv' _label `val' `var' `lab' `fix'
      }
      }
    - else {
    - `vv' _label `macval(0)'
    = version 16, missing: _label variable acs_hhinc_n "N in income level in res
> earch dataset"
    - }
    -------------------------------------------------------------- end label ---
  - keep if `research_year' == `y' & `inc_cat_var' == `inc_level'
  = keep if year == 2019 & acs_hhinc == 1
(0 observations deleted)
  - tempfile premerge_`inc_level'_`y'
  = tempfile premerge_1_2019
  - save `premerge_`inc_level'_`y'', replace
  = save /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.000004, repla
> ce
(note: file /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.000004 not
>  found)
file /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.000004 saved
  - di "Saved tempfile with upper and lower bounds of research data income level
> s"
Saved tempfile with upper and lower bounds of research data income levels
  - use `reference_dataset', clear
  = use ~/Documents/SocResearch/Dissertation/data/data_temp/redi13_cps_state_ca.
> dta, clear
(Streamlined CPS ASEC data, CA 2019)
  - di "Reference data open - Income type set as `inc_cat_var' income"
  = di "Reference data open - Income type set as acs_hhinc income"
Reference data open - Income type set as acs_hhinc income
  - keep if `ref_year' == `y' | `"`ref_year'"' == "nys" & `ref_income_var' >= `l
> ower_bound' & `ref_income_var' <= `upper_bound'
  = keep if year == 2019 | `"year"' == "nys" & hhincome >= -100000 & hhincome <=
>  15000
(0 observations deleted)
  - gen obs_no = _n
  - di "Observation number generated"
Observation number generated
  - save $temp/`ASECdata'_`ref_year'_inc`inc_level'.dta, replace
  = save ~/Documents/SocResearch/Dissertation/data/data_temp/_year_inc1.dta, rep
> lace
file ~/Documents/SocResearch/Dissertation/data/data_temp/_year_inc1.dta saved
  - di "Ref to keep income between $`lower_bound' and $`upper_bound' for `y' yea
> r."
  = di "Ref to keep income between $-100000 and $15000 for 2019 year."
Ref to keep income between $-100000 and $15000 for 2019 year.
  - quietly des
    -------------------------------------------------------------- begin des ---
    - local version : di "version " string(_caller()) ":"
    - `version' describe `0'
    = version 16: describe 
      ------------------------------------------------------- begin describe ---
      - version 9
      - local version : di "version " string(_caller()) ":"
      - syntax [anything] [using] [, SImple REPLACE *]
      - if ("`replace'"!="") {
      = if (""!="") {
        describe_mk `0'
        return add
        exit
        }
      - local varlist `"`anything'"'
      = local varlist `""'
      - if ("`simple'" == "") {
      = if ("" == "") {
      - `version' _describe `0'
      = version 16: _describe 
      - return add
      - }
      - else {
        if (`"`options'"' != "") {
        di as err "simple may not be combined with other options"
        exit 198
        }
        if (`"`using'"' != "") {
        qui `version' describe `varlist' `using', varlist
        if "`varlist'" == "" {
        local vars "`r(varlist)'"
        }
        else {
        local vars "`varlist'"
        }
        local wid = 2
        local n : list sizeof vars
        if `n'==0 {
        exit
        }
        if "`c(hasicu)'" == "1" {
        foreach x of local vars {
        local wid = max(`wid', udstrlen(`"`x'"'))
        }
        }
        else {
        foreach x of local vars {
        local wid = max(`wid', strlen(`"`x'"'))
        }
        }
        local wid = `wid' + 2
        local cols = int((`c(linesize)'+1)/`wid')
        if `cols' < 2 {
        foreach x of local `vars' {
        di as txt `col' `"`x'"'
        }
        exit
        }
        local lines = `n'/`cols'
        local lines = int(cond(`lines'>int(`lines'), `lines'+1, `lines'))
        forvalues i=1(1)`lines' {
        local top = min((`cols')*`lines'+`i', `n')
        local col = 1
        forvalues j=`i'(`lines')`top' {
        local x : word `j' of `vars'
        di as txt _column(`col') "`x'" _c
        local col = `col' + `wid'
        }
        di as txt
        }
        qui `version' describe `varlist' `using', short
        return add
        }
        else {
        ds `varlist'
        qui `version' _describe `varlist', short
        return add
        }
        }
      --------------------------------------------------------- end describe ---
    ---------------------------------------------------------------- end des ---
  - local N = r(N)
  - clear
    ------------------------------------------------------------ begin clear ---
    - if _caller() < 10 {
      _clear_9 `0'
      exit
      }
    - version 10
    - syntax [anything]
    - tokenize `anything'
    = tokenize 
    - if `"`2'"' != "" {
    = if `""' != "" {
      display as err "`2' not allowed"
      exit 198
      }
    - if "`1'"=="" {
    = if ""=="" {
    - drop _all
    - label drop _all
      ---------------------------------------------------------- begin label ---
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {
      = if (strpos("drop", "val") > 0 ) {
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {
        local fix ", nofix"
        }
        gettoken var rest : anything
        while `"`rest'"' != "" {
        gettoken lab rest : rest
        local label "`lab'"
        }
        local vlist : list anything - lab
        if "`lab'" == "." {
        local lab ""
        }
        foreach var of varlist `vlist' {
        `vv' _label `val' `var' `lab' `fix'
        }
        }
      - else {
      - `vv' _label `macval(0)'
      = version 10, missing: _label drop _all
      - }
      ------------------------------------------------------------ end label ---
    - }
    - else if "`1'"=="frames" {
    = else if ""=="frames" {
      frames reset
      }
    - else if "`1'"=="mata" {
    = else if ""=="mata" {
      mata: mata clear
      }
    - else if "`1'"=="python" {
    = else if ""=="python" {
      python clear
      }
    - else if inlist("`1'", "results", "matrix") {
    = else if inlist("", "results", "matrix") {
      return clear
      clearreturn
      ereturn clear
      sreturn clear
      _return drop _all
      if ("`1'" == "matrix") {
      matrix drop _all
      _est drop _all
      }
      }
    - else if "`1'"=="programs" {
    = else if ""=="programs" {
      program drop _all
      }
    - else if "`1'"=="ado" {
    = else if ""=="ado" {
      program drop _allado
      }
    - else if "`1'"=="rngstream" | "`1'"=="rngstreams" {
    = else if ""=="rngstream" | ""=="rngstreams" {
      set rngstream clear
      }
    - else if "`1'"=="*" | "`1'"=="all" {
    = else if ""=="*" | ""=="all" {
      capture mata: st_local("semmods", strofreal(sg__global.hasmodels()))
      capture
      if (0`semmods') {
      display as err "-clear all- not allowed while an SEM Builder is open"
      exit 1
      }
      drop _all
      frames reset
      label drop _all
      matrix drop _all
      scalar drop _all
      constraint drop _all
      eq drop _all
      file close _all
      postutil clear
      _return drop _all
      discard
      program drop _all
      timer clear
      mata: _st__put_cmd_clear()
      mata: mata clear
      python clear
      }
    - else {
      display as err "`1' not allowed"
      exit 198
      }
    -------------------------------------------------------------- end clear ---
  - set obs `sample_size'
  = set obs 18327
number of observations (_N) was 0, now 18,327
  - gen obs_no = runiformint(1, `N')
  = gen obs_no = runiformint(1, 6260)
  - merge m:1 obs_no using $temp/`ASECdata'_`ref_year'_inc`inc_level'.dta, keep(
> match) nogenerate
  = merge m:1 obs_no using ~/Documents/SocResearch/Dissertation/data/data_temp/_
> year_inc1.dta, keep(match) nogenerate
    =void resultlist(string scalar macname)
    =        string rowvector    src
    =        string colvector    res
    =        real scalar    i
    =string scalar result(string scalar result)
    =        real scalar    l
    =void resulttext(string scalar macroname, real scalar i)
    =        string scalar    toret
    =void map_mtype(string scalar macname)
    =        string scalar    input, toret
    =void fullfilename(string scalar forstatamac, string scalar fullnamemac, str
> ing scalar macname)
    =        string scalar    fullname, path, filename
    =        real scalar    l
    ------------------------------------------------------------ begin merge ---
    - version 11
    - gettoken mtype 0 : 0, parse(" ,")
    - if (!strpos("`mtype'", ":") & "`mtype'"!="") {
    = if (!strpos("m:1", ":") & "m:1"!="") {
      if (_caller()>=11) {
      di as smcl as txt "{p}"
      di as smcl "(note: you are using old"
      di as smcl "{bf:merge} syntax; see"
      di as smcl "{bf:{help merge:[D] merge}} for new syntax)"
      di as smcl "{p_end}"
      }
      merge_10 `mtype' `0'
      exit
      }
    - local origmtype `"`mtype'"'
    = local origmtype `"m:1"'
    - mata: map_mtype(`"mtype"')
    - gettoken token : 0, parse(" ,")
    - if ("`token'"=="_n") {
    = if ("obs_no"=="_n") {
      if ("`mtype'"!="1:1") {
      error_seq_not11 "`mtype'" "`origmtype'"
      }
      gettoken token 0 : 0, parse(" ,")
      local mtype "_n"
      }
    - syntax [varlist(default=none)] using/ [, ASSERT(string) DEBUG GENerate(nam
> e) FORCE KEEP(string) KEEPUSing(string) noLabels NOGENerate noNOTEs REPLACE no
> REPort SORTED UPDATE ]
    - if ("`mtype'"!="_n") {
    = if ("m:1"!="_n") {
    - local origmtype `"`mtype'"'
    = local origmtype `"m:1"'
    - mata: map_mtype(`"mtype"')
    - if ("`varlist'"=="") {
    = if ("obs_no"=="") {
      error_mat_varlist "`mtype'" "`origmtype'"
      }
    - }
    - else {
      if ("`mtype'"=="_n") {
      if ("`varlist'"!="") {
      error_seq_varlist
      }
      }
      }
    - mata: fullfilename("using", "usingfull", "using")
    - mata: resultlist("assert")
    - mata: resultlist("keep")
    - if ("`generate'"!="") {
    = if (""!="") {
      if ("`nogenerate'"!="") {
      di as smcl err "{p}"
      di as smcl "options -generate()- and -nogenerate-"
      di as smcl "may not be specified together."
      di as smcl err "{p_end}"
      }
      confirm new var `generate'
      }
    - if ("`replace'"!="") {
    = if (""!="") {
      if ("`update'"=="") {
      error_replace
      }
      }
    - if ("`sorted'"=="" & "`mtype'"!="_n") {
    = if (""=="" & "m:1"!="_n") {
    - local sortedby : sortedby
    - checksort "`sortedby'" "`varlist'"
    = checksort "" "obs_no"
      ------------------------------------------------ begin merge.checksort ---
      - args is should
      - local i 0
      - return scalar sorted = 1
      - foreach v1 of local should {
      - local ++i
      - local v2 : word `i' of `is'
      = local v2 : word 1 of 
      - if ("`v1'"!="`v2'") {
      = if ("obs_no"!="") {
      - return scalar sorted = 0
      - continue, break
        }
        }
      -------------------------------------------------- end merge.checksort ---
    - if (!r(sorted)) {
    - sort `varlist'
    = sort obs_no
    - }
    - quietly describe using "`using'", varlist short
    = quietly describe using "~/Documents/SocResearch/Dissertation/data/data_tem
> p/_year_inc1.dta", varlist short
      ------------------------------------------------------- begin describe ---
      - version 9
      - local version : di "version " string(_caller()) ":"
      - syntax [anything] [using] [, SImple REPLACE *]
      - if ("`replace'"!="") {
      = if (""!="") {
        describe_mk `0'
        return add
        exit
        }
      - local varlist `"`anything'"'
      = local varlist `""'
      - if ("`simple'" == "") {
      = if ("" == "") {
      - `version' _describe `0'
      = version 11: _describe using "~/Documents/SocResearch/Dissertation/data/d
> ata_temp/_year_inc1.dta", varlist short
      - return add
      - }
      - else {
        if (`"`options'"' != "") {
        di as err "simple may not be combined with other options"
        exit 198
        }
        if (`"`using'"' != "") {
        qui `version' describe `varlist' `using', varlist
        if "`varlist'" == "" {
        local vars "`r(varlist)'"
        }
        else {
        local vars "`varlist'"
        }
        local wid = 2
        local n : list sizeof vars
        if `n'==0 {
        exit
        }
        if "`c(hasicu)'" == "1" {
        foreach x of local vars {
        local wid = max(`wid', udstrlen(`"`x'"'))
        }
        }
        else {
        foreach x of local vars {
        local wid = max(`wid', strlen(`"`x'"'))
        }
        }
        local wid = `wid' + 2
        local cols = int((`c(linesize)'+1)/`wid')
        if `cols' < 2 {
        foreach x of local `vars' {
        di as txt `col' `"`x'"'
        }
        exit
        }
        local lines = `n'/`cols'
        local lines = int(cond(`lines'>int(`lines'), `lines'+1, `lines'))
        forvalues i=1(1)`lines' {
        local top = min((`cols')*`lines'+`i', `n')
        local col = 1
        forvalues j=`i'(`lines')`top' {
        local x : word `j' of `vars'
        di as txt _column(`col') "`x'" _c
        local col = `col' + `wid'
        }
        di as txt
        }
        qui `version' describe `varlist' `using', short
        return add
        }
        else {
        ds `varlist'
        qui `version' _describe `varlist', short
        return add
        }
        }
      --------------------------------------------------------- end describe ---
    - local sortedby "`r(sortlist)'"
    = local sortedby ""
    - checksort "`sortedby'" "`varlist'"
    = checksort "" "obs_no"
      ------------------------------------------------ begin merge.checksort ---
      - args is should
      - local i 0
      - return scalar sorted = 1
      - foreach v1 of local should {
      - local ++i
      - local v2 : word `i' of `is'
      = local v2 : word 1 of 
      - if ("`v1'"!="`v2'") {
      = if ("obs_no"!="") {
      - return scalar sorted = 0
      - continue, break
        }
        }
      -------------------------------------------------- end merge.checksort ---
    - if (!r(sorted)) {
    - preserve
    - qui use "`using'", clear
    = qui use "~/Documents/SocResearch/Dissertation/data/data_temp/_year_inc1.dt
> a", clear
    - sort `varlist'
    = sort obs_no
    - tempfile using
    - qui save "`using'", replace
    = qui save "/var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.000006
> ", replace
    - restore
    - }
    - }
    - if ("`nogenerate'"!="") {
    = if ("nogenerate"!="") {
    - tempvar mergevar
    - local mergevaristemp 1
    - }
    - else {
      local mergevar = cond("`generate'"!="", "`generate'", "_merge")
      local mergevaristemp 0
      }
    - local options `update' `replace' `notes' `labels' _merge(`mergevar') `forc
> e'
    = local options     _merge(__000000) 
    - if (bsubstr("`mtype'", 1, 1)=="1") {
    = if (bsubstr("m:1", 1, 1)=="1") {
      local options `options' uniqmaster
      }
    - if (bsubstr("`mtype'", 3, 1)=="1") {
    = if (bsubstr("m:1", 3, 1)=="1") {
    - local options `options' uniqusing
    = local options _merge(__000000) uniqusing
    - }
    - if ("`keepusing'"!="") {
    = if (""!="") {
      local options `options' keep(`keepusing')
      }
    - if ("`keep'" !="" & !strpos("`keep'" , "2")) {
    = if ("3" !="" & !strpos("3" , "2")) {
    - local options `options' nokeep
    = local options _merge(__000000) uniqusing nokeep
    - }
    - if (_caller() > 15) {
    - local version : di "version " string(_caller()) ": "
    - }
    - local _merge `"`version'_merge `varlist' using "`using'", nowarn"'
    = local _merge `"version 16: _merge obs_no using "/var/folders/rp/96l526kj7y
> bdjr5vs5bqqjw80000gn/T//S_20065.000006", nowarn"'
    - local _merge `"`_merge' `options' tabulate(mresults)"'
    = local _merge `"version 16: _merge obs_no using "/var/folders/rp/96l526kj7y
> bdjr5vs5bqqjw80000gn/T//S_20065.000006", nowarn _merge(__000000) uniqusing nok
> eep tabulate(mresults)"'
    - if ("`debug'"!="") {
    = if (""!="") {
      di as txt _n "command is"
      di `"`_merge'"' _n
      }
    - `_merge'
    = version 16: _merge obs_no using "/var/folders/rp/96l526kj7ybdjr5vs5bqqjw80
> 000gn/T//S_20065.000006", nowarn _merge(__000000) uniqusing nokeep tabulate(mr
> esults)
    - if (!`mergevaristemp') {
    = if (!1) {
      capture label list _merge
      if (_rc) {
      label define _merge 1 "master only (1)" 2 "using only (2)" 3 "matched (3)"
>  4 "missing updated (4)" 5 "nonmissing conflict (5)"
      }
      label values `mergevar' _merge
      }
    - if ("`assert'"!="") {
    = if (""!="") {
      if (_caller() < 13) {
      buildexpr expr : `mergevar' "`assert'"
      capture assert `expr'
      if (_rc) {
      error_assert `mergevar' "`assert'"
      }
      }
      else {
      capture checkmresults "`mresults'" "`assert'"
      if (_rc) {
      error_assert `mergevar' "`assert'"
      }
      }
      }
    - if ("`keep'"!="") {
    = if ("3"!="") {
    - buildexpr expr : `mergevar' "`keep'"
    = buildexpr expr : __000000 "3"
      ------------------------------------------------ begin merge.buildexpr ---
      - args userexpr colon varname numbers
      - gettoken first numbers : numbers
      - local list `varname'==`first'
      = local list __000000==3
      - foreach el of local numbers {
        local list `list' | `varname'==`el'
        }
      - c_local `userexpr' "(`list')"
      = c_local expr "(__000000==3)"
      -------------------------------------------------- end merge.buildexpr ---
    - quietly keep if `expr'
    = quietly keep if (__000000==3)
    - }
    - if ("`mtype'"=="1:1") {
    = if ("m:1"=="1:1") {
      qui count if `mergevar'==2
      if (r(N)==0) {
      sort `varlist'
      }
      }
    - if (c(noisily) & "`report'"=="") {
    = if (c(noisily) & ""=="") {
    - local isupdate = ("`replace'"!="" | "`update'"!="")
    = local isupdate = (""!="" | ""!="")
    - present_table `isupdate' `mergevar' `mergevaristemp'
    = present_table 0 __000000 1
      -------------------------------------------- begin merge.present_table ---
      - args isupdate mergevar mergevaristemp
      - if (!`mergevaristemp') {
      = if (!1) {
        local v1 "(`mergevar'==1)"
        local v2 "(`mergevar'==2)"
        local v3 "(`mergevar'==3)"
        local v4 "(`mergevar'==4)"
        local v5 "(`mergevar'==5)"
        }
      - quietly {
      - count if `mergevar'==1
      = count if __000000==1
      - local m1 = r(N)
      - count if `mergevar'==2
      = count if __000000==2
      - local m2 = r(N)
      - if (`isupdate') {
      = if (0) {
        count if `mergevar'==3
        local m3 = r(N)
        count if `mergevar'==4
        local m4 = r(N)
        local m5 = _N - `m1' - `m2' - `m3' - `m4'
        }
      - else {
      - local m3 = _N - `m1' - `m2'
      = local m3 = _N - 0 - 0
      - }
      - }
      - di

      - di as smcl as txt _col(5) "Result" _col(38) "# of obs."
    Result                           # of obs.
      - di as smcl as txt _col(5) "{hline 41}"
    -----------------------------------------
      - di as smcl as txt _col(5) "not matched" _col(30) as res %16.0fc (`m1'+`m
> 2')
      = di as smcl as txt _col(5) "not matched" _col(30) as res %16.0fc (0+0)
    not matched                             0
      - if (`m1'|`m2') {
      = if (0|0) {
        di as smcl as txt _col(9) "from master" _col(30) as res %16.0fc `m1' as 
> txt "  `v1'"
        di as smcl as txt _col(9) "from using" _col(30) as res %16.0fc `m2' as t
> xt "  `v2'"
        di
        }
      - if (!`isupdate') {
      = if (!0) {
      - di as smcl as txt _col(5) "matched" _col(30) as res %16.0fc `m3' as txt 
> "  `v3'"
      = di as smcl as txt _col(5) "matched" _col(30) as res %16.0fc 18327 as txt
>  "  "
    matched                            18,327  
      - }
      - else {
        if (`m1'==0 & `m2'==0) {
        di
        }
        di as smcl as txt _col(5) "matched" _col(30) as res %16.0fc (`m3'+`m4'+`
> m5')
        di as smcl as txt _col(9) "not updated" _col(30) as res %16.0fc `m3' as 
> txt "  `v3'"
        di as smcl as txt _col(9) "missing updated" _col(30) as res %16.0fc `m4'
>  as txt "  `v4'"
        di as smcl as txt _col(9) "nonmissing conflict" _col(30) as res %16.0fc 
> `m5' as txt "  `v5'"
        }
      - di as smcl as txt _col(5) "{hline 41}"
    -----------------------------------------
      ---------------------------------------------- end merge.present_table ---
    - }
    -------------------------------------------------------------- end merge ---
  - save $temp/`ASECdata'_`ref_year'_inc`inc_level'.dta, replace
  = save ~/Documents/SocResearch/Dissertation/data/data_temp/_year_inc1.dta, rep
> lace
file ~/Documents/SocResearch/Dissertation/data/data_temp/_year_inc1.dta saved
  - gen id = _n
  - merge 1:1 id using `premerge_`inc_level'_`y''
  = merge 1:1 id using /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065
> .000004
    ------------------------------------------------------------ begin merge ---
    - version 11
    - gettoken mtype 0 : 0, parse(" ,")
    - if (!strpos("`mtype'", ":") & "`mtype'"!="") {
    = if (!strpos("1:1", ":") & "1:1"!="") {
      if (_caller()>=11) {
      di as smcl as txt "{p}"
      di as smcl "(note: you are using old"
      di as smcl "{bf:merge} syntax; see"
      di as smcl "{bf:{help merge:[D] merge}} for new syntax)"
      di as smcl "{p_end}"
      }
      merge_10 `mtype' `0'
      exit
      }
    - local origmtype `"`mtype'"'
    = local origmtype `"1:1"'
    - mata: map_mtype(`"mtype"')
    - gettoken token : 0, parse(" ,")
    - if ("`token'"=="_n") {
    = if ("id"=="_n") {
      if ("`mtype'"!="1:1") {
      error_seq_not11 "`mtype'" "`origmtype'"
      }
      gettoken token 0 : 0, parse(" ,")
      local mtype "_n"
      }
    - syntax [varlist(default=none)] using/ [, ASSERT(string) DEBUG GENerate(nam
> e) FORCE KEEP(string) KEEPUSing(string) noLabels NOGENerate noNOTEs REPLACE no
> REPort SORTED UPDATE ]
    - if ("`mtype'"!="_n") {
    = if ("1:1"!="_n") {
    - local origmtype `"`mtype'"'
    = local origmtype `"1:1"'
    - mata: map_mtype(`"mtype"')
    - if ("`varlist'"=="") {
    = if ("id"=="") {
      error_mat_varlist "`mtype'" "`origmtype'"
      }
    - }
    - else {
      if ("`mtype'"=="_n") {
      if ("`varlist'"!="") {
      error_seq_varlist
      }
      }
      }
    - mata: fullfilename("using", "usingfull", "using")
    - mata: resultlist("assert")
    - mata: resultlist("keep")
    - if ("`generate'"!="") {
    = if (""!="") {
      if ("`nogenerate'"!="") {
      di as smcl err "{p}"
      di as smcl "options -generate()- and -nogenerate-"
      di as smcl "may not be specified together."
      di as smcl err "{p_end}"
      }
      confirm new var `generate'
      }
    - if ("`replace'"!="") {
    = if (""!="") {
      if ("`update'"=="") {
      error_replace
      }
      }
    - if ("`sorted'"=="" & "`mtype'"!="_n") {
    = if (""=="" & "1:1"!="_n") {
    - local sortedby : sortedby
    - checksort "`sortedby'" "`varlist'"
    = checksort "" "id"
      ------------------------------------------------ begin merge.checksort ---
      - args is should
      - local i 0
      - return scalar sorted = 1
      - foreach v1 of local should {
      - local ++i
      - local v2 : word `i' of `is'
      = local v2 : word 1 of 
      - if ("`v1'"!="`v2'") {
      = if ("id"!="") {
      - return scalar sorted = 0
      - continue, break
        }
        }
      -------------------------------------------------- end merge.checksort ---
    - if (!r(sorted)) {
    - sort `varlist'
    = sort id
    - }
    - quietly describe using "`using'", varlist short
    = quietly describe using "/var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//
> S_20065.000004", varlist short
      ------------------------------------------------------- begin describe ---
      - version 9
      - local version : di "version " string(_caller()) ":"
      - syntax [anything] [using] [, SImple REPLACE *]
      - if ("`replace'"!="") {
      = if (""!="") {
        describe_mk `0'
        return add
        exit
        }
      - local varlist `"`anything'"'
      = local varlist `""'
      - if ("`simple'" == "") {
      = if ("" == "") {
      - `version' _describe `0'
      = version 11: _describe using "/var/folders/rp/96l526kj7ybdjr5vs5bqqjw8000
> 0gn/T//S_20065.000004", varlist short
      - return add
      - }
      - else {
        if (`"`options'"' != "") {
        di as err "simple may not be combined with other options"
        exit 198
        }
        if (`"`using'"' != "") {
        qui `version' describe `varlist' `using', varlist
        if "`varlist'" == "" {
        local vars "`r(varlist)'"
        }
        else {
        local vars "`varlist'"
        }
        local wid = 2
        local n : list sizeof vars
        if `n'==0 {
        exit
        }
        if "`c(hasicu)'" == "1" {
        foreach x of local vars {
        local wid = max(`wid', udstrlen(`"`x'"'))
        }
        }
        else {
        foreach x of local vars {
        local wid = max(`wid', strlen(`"`x'"'))
        }
        }
        local wid = `wid' + 2
        local cols = int((`c(linesize)'+1)/`wid')
        if `cols' < 2 {
        foreach x of local `vars' {
        di as txt `col' `"`x'"'
        }
        exit
        }
        local lines = `n'/`cols'
        local lines = int(cond(`lines'>int(`lines'), `lines'+1, `lines'))
        forvalues i=1(1)`lines' {
        local top = min((`cols')*`lines'+`i', `n')
        local col = 1
        forvalues j=`i'(`lines')`top' {
        local x : word `j' of `vars'
        di as txt _column(`col') "`x'" _c
        local col = `col' + `wid'
        }
        di as txt
        }
        qui `version' describe `varlist' `using', short
        return add
        }
        else {
        ds `varlist'
        qui `version' _describe `varlist', short
        return add
        }
        }
      --------------------------------------------------------- end describe ---
    - local sortedby "`r(sortlist)'"
    = local sortedby "year acs_hhinc"
    - checksort "`sortedby'" "`varlist'"
    = checksort "year acs_hhinc" "id"
      ------------------------------------------------ begin merge.checksort ---
      - args is should
      - local i 0
      - return scalar sorted = 1
      - foreach v1 of local should {
      - local ++i
      - local v2 : word `i' of `is'
      = local v2 : word 1 of year acs_hhinc
      - if ("`v1'"!="`v2'") {
      = if ("id"!="year") {
      - return scalar sorted = 0
      - continue, break
        }
        }
      -------------------------------------------------- end merge.checksort ---
    - if (!r(sorted)) {
    - preserve
    - qui use "`using'", clear
    = qui use "/var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.000004"
> , clear
    - sort `varlist'
    = sort id
    - tempfile using
    - qui save "`using'", replace
    = qui save "/var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.000006
> ", replace
    - restore
    - }
    - }
    - if ("`nogenerate'"!="") {
    = if (""!="") {
      tempvar mergevar
      local mergevaristemp 1
      }
    - else {
    - local mergevar = cond("`generate'"!="", "`generate'", "_merge")
    = local mergevar = cond(""!="", "", "_merge")
    - local mergevaristemp 0
    - }
    - local options `update' `replace' `notes' `labels' _merge(`mergevar') `forc
> e'
    = local options     _merge(_merge) 
    - if (bsubstr("`mtype'", 1, 1)=="1") {
    = if (bsubstr("1:1", 1, 1)=="1") {
    - local options `options' uniqmaster
    = local options _merge(_merge) uniqmaster
    - }
    - if (bsubstr("`mtype'", 3, 1)=="1") {
    = if (bsubstr("1:1", 3, 1)=="1") {
    - local options `options' uniqusing
    = local options _merge(_merge) uniqmaster uniqusing
    - }
    - if ("`keepusing'"!="") {
    = if (""!="") {
      local options `options' keep(`keepusing')
      }
    - if ("`keep'" !="" & !strpos("`keep'" , "2")) {
    = if ("" !="" & !strpos("" , "2")) {
      local options `options' nokeep
      }
    - if (_caller() > 15) {
    - local version : di "version " string(_caller()) ": "
    - }
    - local _merge `"`version'_merge `varlist' using "`using'", nowarn"'
    = local _merge `"version 16: _merge id using "/var/folders/rp/96l526kj7ybdjr
> 5vs5bqqjw80000gn/T//S_20065.000006", nowarn"'
    - local _merge `"`_merge' `options' tabulate(mresults)"'
    = local _merge `"version 16: _merge id using "/var/folders/rp/96l526kj7ybdjr
> 5vs5bqqjw80000gn/T//S_20065.000006", nowarn _merge(_merge) uniqmaster uniqusin
> g tabulate(mresults)"'
    - if ("`debug'"!="") {
    = if (""!="") {
      di as txt _n "command is"
      di `"`_merge'"' _n
      }
    - `_merge'
    = version 16: _merge id using "/var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000g
> n/T//S_20065.000006", nowarn _merge(_merge) uniqmaster uniqusing tabulate(mres
> ults)
(label statefip_lbl already defined)
    - if (!`mergevaristemp') {
    = if (!0) {
    - capture label list _merge
      ---------------------------------------------------------- begin label ---
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {
      = if (strpos("list", "val") > 0 ) {
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {
        local fix ", nofix"
        }
        gettoken var rest : anything
        while `"`rest'"' != "" {
        gettoken lab rest : rest
        local label "`lab'"
        }
        local vlist : list anything - lab
        if "`lab'" == "." {
        local lab ""
        }
        foreach var of varlist `vlist' {
        `vv' _label `val' `var' `lab' `fix'
        }
        }
      - else {
      - `vv' _label `macval(0)'
      = version 11, missing: _label list _merge
        }
      ------------------------------------------------------------ end label ---
    - if (_rc) {
    - label define _merge 1 "master only (1)" 2 "using only (2)" 3 "matched (3)"
>  4 "missing updated (4)" 5 "nonmissing conflict (5)"
      ---------------------------------------------------------- begin label ---
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {
      = if (strpos("define", "val") > 0 ) {
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {
        local fix ", nofix"
        }
        gettoken var rest : anything
        while `"`rest'"' != "" {
        gettoken lab rest : rest
        local label "`lab'"
        }
        local vlist : list anything - lab
        if "`lab'" == "." {
        local lab ""
        }
        foreach var of varlist `vlist' {
        `vv' _label `val' `var' `lab' `fix'
        }
        }
      - else {
      - `vv' _label `macval(0)'
      = version 11, missing: _label define _merge 1 "master only (1)" 2 "using o
> nly (2)" 3 "matched (3)" 4 "missing updated (4)" 5 "nonmissing conflict (5)"
      - }
      ------------------------------------------------------------ end label ---
    - }
    - label values `mergevar' _merge
    = label values _merge _merge
      ---------------------------------------------------------- begin label ---
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {
      = if (strpos("values", "val") > 0 ) {
      - gettoken val 0 : 0
      - syntax anything [, nofix]
      - if "`fix'" != "" {
      = if "" != "" {
        local fix ", nofix"
        }
      - gettoken var rest : anything
      - while `"`rest'"' != "" {
      = while `" _merge"' != "" {
      - gettoken lab rest : rest
      - local label "`lab'"
      = local label "_merge"
      - }
      - while `"`rest'"' != "" {
      = while `""' != "" {
        gettoken lab rest : rest
        local label "`lab'"
        }
      - local vlist : list anything - lab
      - if "`lab'" == "." {
      = if "_merge" == "." {
        local lab ""
        }
      - foreach var of varlist `vlist' {
      = foreach var of varlist _merge {
      - `vv' _label `val' `var' `lab' `fix'
      = version 11, missing: _label values _merge _merge 
      - }
      - }
      - else {
        `vv' _label `macval(0)'
        }
      ------------------------------------------------------------ end label ---
    - }
    - if ("`assert'"!="") {
    = if (""!="") {
      if (_caller() < 13) {
      buildexpr expr : `mergevar' "`assert'"
      capture assert `expr'
      if (_rc) {
      error_assert `mergevar' "`assert'"
      }
      }
      else {
      capture checkmresults "`mresults'" "`assert'"
      if (_rc) {
      error_assert `mergevar' "`assert'"
      }
      }
      }
    - if ("`keep'"!="") {
    = if (""!="") {
      buildexpr expr : `mergevar' "`keep'"
      quietly keep if `expr'
      }
    - if ("`mtype'"=="1:1") {
    = if ("1:1"=="1:1") {
    - qui count if `mergevar'==2
    = qui count if _merge==2
    - if (r(N)==0) {
    - sort `varlist'
    = sort id
    - }
    - }
    - if (c(noisily) & "`report'"=="") {
    = if (c(noisily) & ""=="") {
    - local isupdate = ("`replace'"!="" | "`update'"!="")
    = local isupdate = (""!="" | ""!="")
    - present_table `isupdate' `mergevar' `mergevaristemp'
    = present_table 0 _merge 0
      -------------------------------------------- begin merge.present_table ---
      - args isupdate mergevar mergevaristemp
      - if (!`mergevaristemp') {
      = if (!0) {
      - local v1 "(`mergevar'==1)"
      = local v1 "(_merge==1)"
      - local v2 "(`mergevar'==2)"
      = local v2 "(_merge==2)"
      - local v3 "(`mergevar'==3)"
      = local v3 "(_merge==3)"
      - local v4 "(`mergevar'==4)"
      = local v4 "(_merge==4)"
      - local v5 "(`mergevar'==5)"
      = local v5 "(_merge==5)"
      - }
      - quietly {
      - count if `mergevar'==1
      = count if _merge==1
      - local m1 = r(N)
      - count if `mergevar'==2
      = count if _merge==2
      - local m2 = r(N)
      - if (`isupdate') {
      = if (0) {
        count if `mergevar'==3
        local m3 = r(N)
        count if `mergevar'==4
        local m4 = r(N)
        local m5 = _N - `m1' - `m2' - `m3' - `m4'
        }
      - else {
      - local m3 = _N - `m1' - `m2'
      = local m3 = _N - 0 - 0
      - }
      - }
      - di

      - di as smcl as txt _col(5) "Result" _col(38) "# of obs."
    Result                           # of obs.
      - di as smcl as txt _col(5) "{hline 41}"
    -----------------------------------------
      - di as smcl as txt _col(5) "not matched" _col(30) as res %16.0fc (`m1'+`m
> 2')
      = di as smcl as txt _col(5) "not matched" _col(30) as res %16.0fc (0+0)
    not matched                             0
      - if (`m1'|`m2') {
      = if (0|0) {
        di as smcl as txt _col(9) "from master" _col(30) as res %16.0fc `m1' as 
> txt "  `v1'"
        di as smcl as txt _col(9) "from using" _col(30) as res %16.0fc `m2' as t
> xt "  `v2'"
        di
        }
      - if (!`isupdate') {
      = if (!0) {
      - di as smcl as txt _col(5) "matched" _col(30) as res %16.0fc `m3' as txt 
> "  `v3'"
      = di as smcl as txt _col(5) "matched" _col(30) as res %16.0fc 18327 as txt
>  "  (_merge==3)"
    matched                            18,327  (_merge==3)
      - }
      - else {
        if (`m1'==0 & `m2'==0) {
        di
        }
        di as smcl as txt _col(5) "matched" _col(30) as res %16.0fc (`m3'+`m4'+`
> m5')
        di as smcl as txt _col(9) "not updated" _col(30) as res %16.0fc `m3' as 
> txt "  `v3'"
        di as smcl as txt _col(9) "missing updated" _col(30) as res %16.0fc `m4'
>  as txt "  `v4'"
        di as smcl as txt _col(9) "nonmissing conflict" _col(30) as res %16.0fc 
> `m5' as txt "  `v5'"
        }
      - di as smcl as txt _col(5) "{hline 41}"
    -----------------------------------------
      ---------------------------------------------- end merge.present_table ---
    - }
    -------------------------------------------------------------- end merge ---
  - generate category_n = .
(18,327 missing values generated)
  - replace category_n = `N'
  = replace category_n = 6260
(18,327 real changes made)
  - label var category_n "N respondents in income level in post-merge dataset'"
    ------------------------------------------------------------ begin label ---
    - version 10.0
    - local vv : display "version " string(_caller()) ", missing:"
    - gettoken val : 0
    - if (strpos("`val'", "val") > 0 ) {
    = if (strpos("var", "val") > 0 ) {
      gettoken val 0 : 0
      syntax anything [, nofix]
      if "`fix'" != "" {
      local fix ", nofix"
      }
      gettoken var rest : anything
      while `"`rest'"' != "" {
      gettoken lab rest : rest
      local label "`lab'"
      }
      local vlist : list anything - lab
      if "`lab'" == "." {
      local lab ""
      }
      foreach var of varlist `vlist' {
      `vv' _label `val' `var' `lab' `fix'
      }
      }
    - else {
    - `vv' _label `macval(0)'
    = version 16, missing: _label var category_n "N respondents in income level 
> in post-merge dataset'"
    - }
    -------------------------------------------------------------- end label ---
  - di "Merged ASEC values with original Research dataset for inc_level " `inc_l
> evel' " ($`lower_bound'-`upper_bound') and year `y'."
  = di "Merged ASEC values with original Research dataset for inc_level " 1 " ($
> -100000-15000) and year 2019."
Merged ASEC values with original Research dataset for inc_level 1 ($-100000-1500
> 0) and year 2019.
  - tempfile temp_`inc_level'_`y'
  = tempfile temp_1_2019
  - save `temp_`inc_level'_`y'', replace
  = save /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.000005, repla
> ce
(note: file /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.000005 not
>  found)
file /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.000005 saved
  - di "Saved REDI data (with continuous data) for inc_level " `inc_level' " ($`
> lower_bound'-`upper_bound') and year `y' in file"
  = di "Saved REDI data (with continuous data) for inc_level " 1 " ($-100000-150
> 00) and year 2019 in file"
Saved REDI data (with continuous data) for inc_level 1 ($-100000-15000) and year
>  2019 in file
  - }
  - use `working_regex', clear
  = use /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.000003, clear
(Streamlined ACS data, 2019)
  - keep if `inc_cat_var' == `inc_level'
  = keep if acs_hhinc == 2
(292,683 observations deleted)
  - di "The current inc_level is: " `inc_level'
  = di "The current inc_level is: " 2
The current inc_level is: 2
  - if regexm(inc_decoded, "^[a-z/A-Z]+") == 1 {
    di "The inc_level " `inc_level' " is at the lowest end of the " "original Re
> search dataset income range"
    destring inc_decoded, ignore("Less than LESS THAN Under,$ ") generate(`inc_c
> at_var'_ub)
    gen `inc_cat_var'_lb = -100000
    di "Lower bound of -100,000 created for inc_level " `inc_level'
    }
  - else if regexm(inc_decoded, "[a-z/A-Z]+$") == 1 {
    di "The inc_level " `inc_level' " is at the highest end of the " "original R
> esearch dataset income range"
    destring inc_decoded, ignore("and over or over,$ or more OR MORE") generate(
> `inc_cat_var'_lb)
    gen `inc_cat_var'_ub = 999999
    di "Upper bound of 999999 created for inc_level " `inc_level'
    }
  - else if regexm(inc_decoded, "[.][a-z]") == 1 {
    di "The inc_level " `inc_level' " is all missing"
    gen `inc_cat_var'_lb = .
    gen `inc_cat_var'_ub = .
    di "Lower and upper bound of . created for inc_level " `inc_level'
    }
  - else if regexm(inc_decoded, "[0-9]+$") == 1 {
  - di "The inc_level " `inc_level' " has a lower and an upper level"
  = di "The inc_level " 2 " has a lower and an upper level"
The inc_level 2 has a lower and an upper level
  - split inc_decoded, parse("-" "to" "-" "to under" "to less than" "UP TO" "but
>  less than") ignore(" ,$") destring
    ------------------------------------------------------------ begin split ---
    - version 8
    - syntax varname(str) [if] [in] [, Generate(str) noTrim Parse(str asis) DEST
> RING force float Ignore(string asis) percent Limit(numlist int >0 max=1) ]
    - local verpre : display "version " %4.1f _caller() ":"
    - if "`destring'"=="" {
    = if "destring"=="" {
      foreach option in force float ignore percent {
      if `"``option''"'!="" {
      display as error "may not specify `option' without specifying destring"
      exit 198
      }
      }
      }
    - else {
    - if `"`ignore'"'!="" {
    = if `"" ,$""'!="" {
    - if _caller() >= 14 {
    - if ustrfindfirst(`"`ignore'"',",") & !ustrfindfirst(`"`ignore'"',`"""') {
    = if ustrfindfirst(`"" ,$""',",") & !ustrfindfirst(`"" ,$""',`"""') {
      display as error `"ignore string must be enclosed with quotes to ignore co
> mmas or use options"'
      exit 198
      }
    - }
    - `verpre' _parse_ignore `ignore'
    = version 16.0: _parse_ignore " ,$"
      -------------------------------------------------- begin _parse_ignore ---
      - version 14
      - sreturn clear
      - if _caller() < 14 {
        capture syntax [anything] , [ASChars] [ASBytes] [illegal]
        if !_rc {
        if "`aschars'`asbytes'`illegal'"!="" {
        display as error "may not specify options in the ignore option for Stata
>  version less than 14"
        exit 198
        }
        }
        sreturn local aschars 0
        sreturn local illegal 0
        }
      - else {
      - syntax [anything] , [ASChars] [ASBytes] [illegal]
      - if "`asbytes'"!="" {
      = if ""!="" {
        if "`aschars'"!="" {
        display as error "may specify only one of the ignore options aschars and
>  asbytes"
        exit 198
        }
        if "`illegal'"!="" {
        display as error "may not specify the ignore option illegal when specify
> ing asbytes"
        exit 198
        }
        }
      - if "`asbytes'"=="" {
      = if ""=="" {
      - if ustrinvalidcnt(`"`anything'"') {
      = if ustrinvalidcnt(`"" ,$""') {
        display as error "invalid Unicode characters may not be ignored when rem
> oving aschars"
        exit 198
        }
      - }
      - sreturn local aschars = "`asbytes'"==""
      = sreturn local aschars = ""==""
      - sreturn local illegal = "`illegal'"!=""
      = sreturn local illegal = ""!=""
      - capture sreturn local ignore `anything'
      = capture sreturn local ignore " ,$"
      - if _rc {
        sreturn local ignore `"`anything'"'
        }
      - }
      ---------------------------------------------------- end _parse_ignore ---
    - }
    - }
    - marksample touse, strok
    - qui count if `touse'
    = qui count if __000000
    - if r(N) == 0 {
      error 2000
      }
    - if `"`parse'"' == `""' | `"`parse'"' == `""""' {
    = if `""-" "to" "-" "to under" "to less than" "UP TO" "but less than""' == `
> ""' | `""-" "to" "-" "to under" "to less than" "UP TO" "but less than""' == `"
> """' {
      if "`trim'" != "" {
      di as err "parsing on spaces incompatible with notrim"
      exit 198
      }
      local parse `"" ""'
      local trm "trim"
      }
    - if `"`parse'"' == `""' | `"`parse'"' == `""""' {
    = if `""-" "to" "-" "to under" "to less than" "UP TO" "but less than""' == `
> ""' | `""-" "to" "-" "to under" "to less than" "UP TO" "but less than""' == `"
> """' {
      local parse `"" ""'
      local trm "trim"
      }
    - local nparse : word count `parse'
    = local nparse : word count "-" "to" "-" "to under" "to less than" "UP TO" "
> but less than"
    - tokenize `"`parse'"'
    = tokenize `""-" "to" "-" "to under" "to less than" "UP TO" "but less than""
> '
    - if `"`generate'"' != "" {
    = if `""' != "" {
      confirm name `generate'
      if `: word count `generate'' > 1 {
      di as err "invalid stub `generate'"
      exit 198
      }
      }
    - qui {
    - tempvar vw tp mp pl
    - gen int `tp' = 0
    = gen int __000002 = 0
    - gen int `mp' = 0
    = gen int __000003 = 0
    - gen int `pl' = 0
    = gen int __000004 = 0
    - gen str1 `vw' = ""
    = gen str1 __000001 = ""
    - if "`trim'" == "" {
    = if "" == "" {
    - replace `vw' = trim(`varlist') if `touse'
    = replace __000001 = trim(inc_decoded) if __000000
    - }
    - else {
      replace `vw' = `varlist' if `touse'
      }
    - }
    - if "`generate'" == "" {
    = if "" == "" {
    - local generate "`varlist'"
    = local generate "inc_decoded"
    - }
    - local j = 0
    - local go = 1
    - if "`limit'" == "" {
    = if "" == "" {
    - local limit .
    - }
    - qui while `go' & `j' < `limit' {
    = qui while 1 & 0 < . {
    - replace `mp' = .
    = replace __000003 = .
    - replace `pl' = 0
    = replace __000004 = 0
    - forval i = 1 / `nparse' {
    = forval i = 1 / 7 {
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"-"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"-"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"to"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"to"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"-"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"-"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"to under"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"to under"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"to less than"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"to less than"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"UP TO"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"UP TO"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"but less than"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"but less than"') if __000003 == __000002
    - }
    - local ++j
    - tempvar part`j'
    = tempvar part1
    - gen str1 `part`j'' = ""
    = gen str1 __000005 = ""
    - replace `part`j'' = substr(`vw', 1, `mp'-1) if `mp' < .
    = replace __000005 = substr(__000001, 1, __000003-1) if __000003 < .
    - replace `vw' = `trm'(substr(`vw', `mp'+`pl', .)) if `mp' < .
    = replace __000001 = (substr(__000001, __000003+__000004, .)) if __000003 < 
> .
    - replace `part`j'' = `vw' if `mp' >= .
    = replace __000005 = __000001 if __000003 >= .
    - replace `vw' = "" if `mp' >= .
    = replace __000001 = "" if __000003 >= .
    - local newvars "`newvars'`generate'`j' "
    = local newvars "inc_decoded1 "
    - capture assert `vw' == ""
    = capture assert __000001 == ""
    - local go = _rc
    - }
    - qui while `go' & `j' < `limit' {
    = qui while 9 & 1 < . {
    - replace `mp' = .
    = replace __000003 = .
    - replace `pl' = 0
    = replace __000004 = 0
    - forval i = 1 / `nparse' {
    = forval i = 1 / 7 {
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"-"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"-"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"to"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"to"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"-"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"-"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"to under"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"to under"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"to less than"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"to less than"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"UP TO"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"UP TO"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"but less than"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"but less than"') if __000003 == __000002
    - }
    - local ++j
    - tempvar part`j'
    = tempvar part2
    - gen str1 `part`j'' = ""
    = gen str1 __000006 = ""
    - replace `part`j'' = substr(`vw', 1, `mp'-1) if `mp' < .
    = replace __000006 = substr(__000001, 1, __000003-1) if __000003 < .
    - replace `vw' = `trm'(substr(`vw', `mp'+`pl', .)) if `mp' < .
    = replace __000001 = (substr(__000001, __000003+__000004, .)) if __000003 < 
> .
    - replace `part`j'' = `vw' if `mp' >= .
    = replace __000006 = __000001 if __000003 >= .
    - replace `vw' = "" if `mp' >= .
    = replace __000001 = "" if __000003 >= .
    - local newvars "`newvars'`generate'`j' "
    = local newvars "inc_decoded1 inc_decoded2 "
    - capture assert `vw' == ""
    = capture assert __000001 == ""
    - local go = _rc
    - }
    - qui while `go' & `j' < `limit' {
    = qui while 0 & 2 < . {
      replace `mp' = .
      replace `pl' = 0
      forval i = 1 / `nparse' {
      replace `tp' = index(`vw', `"``i''"')
      replace `mp' = min(`tp', `mp') if `tp'
      replace `pl' = length(`"``i''"') if `mp' == `tp'
      }
      local ++j
      tempvar part`j'
      gen str1 `part`j'' = ""
      replace `part`j'' = substr(`vw', 1, `mp'-1) if `mp' < .
      replace `vw' = `trm'(substr(`vw', `mp'+`pl', .)) if `mp' < .
      replace `part`j'' = `vw' if `mp' >= .
      replace `vw' = "" if `mp' >= .
      local newvars "`newvars'`generate'`j' "
      capture assert `vw' == ""
      local go = _rc
      }
    - capture confirm new var `newvars'
    = capture confirm new var inc_decoded1 inc_decoded2 
    - if _rc {
      di as err "cannot generate new variables using stub `generate'"
      exit _rc
      }
    - qui forval i = 1 / `j' {
    = qui forval i = 1 / 2 {
    - gen str1 `generate'`i' = ""
    = gen str1 inc_decoded1 = ""
    - replace `generate'`i' = `part`i''
    = replace inc_decoded1 = __000005
    - }
    - gen str1 `generate'`i' = ""
    = gen str1 inc_decoded2 = ""
    - replace `generate'`i' = `part`i''
    = replace inc_decoded2 = __000006
    - }
    - return local varlist "`newvars'"
    = return local varlist "inc_decoded1 inc_decoded2 "
    - return local nvars "`j'"
    = return local nvars "2"
    - local s = cond(`j' > 1, "s", "")
    = local s = cond(2 > 1, "s", "")
    - if "`destring'" != "" {
    = if "destring" != "" {
    - di as res "variable`s' born as string: "
    = di as res "variables born as string: "
variables born as string: 
    - }
    - else di as res "variable`s' created as string: "
    = else di as res "variables created as string: "
    - ds `newvars'
    = ds inc_decoded1 inc_decoded2 
      ------------------------------------------------------------- begin ds ---
      - version 9
      - local version : di "version " string(_caller()) ":"
      - if (_caller() <= 4) {
        `version' describe, simple
        exit
        }
      - else {
      - ds_util `0'
      = ds_util inc_decoded1 inc_decoded2 
        ------------------------------------------------------ begin ds_util ---
        - version 8
        - syntax [varlist] [, HAS(str asis) NOT(str asis) NOT2 INSEnsitive Detai
> l Alpha Varwidth(int 12) Skip(int 2) INDENT(int 0)]
        - if "`varlist'" == "" {
        = if "inc_decoded1 inc_decoded2" == "" {
          exit
          }
        - if !inrange(`indent',0,244) {
        = if !inrange(0,0,244) {
          di as err "indent() should be in the range 0..244"
          exit 198
          }
        - if !inrange(`varwidth',5,32) {
        = if !inrange(12,5,32) {
          di as err "varwidth() should be in the range 5..32"
          exit 198
          }
        - if !inrange(`skip',1,10) {
        = if !inrange(2,1,10) {
          di as err "skip() should be in the range 1..10"
          exit 198
          }
        - local nopts = (`"`has'"' != "") + (`"`not'"' != "") + ("`not2'" != "")
        = local nopts = (`""' != "") + (`""' != "") + ("" != "")
        - if `nopts' == 3 {
        = if 0 == 3 {
          di as err "may not combine options has(), not(), and not"
          exit 198
          }
        - else if `nopts' == 2 {
        = else if 0 == 2 {
          if (`"`has'"' == "") {
          di as err "may not combine options not() and not"
          exit 198
          }
          else if (`"`not'"' == "") {
          di as err "may not combine options has() and not"
          exit 198
          }
          else if (`"`not2'"' == "") {
          di as err "may not combine options has() and not()"
          exit 198
          }
          }
        - if `"`not'"' != "" {
        = if `""' != "" {
          local has `"`not'"'
          local opt "not"
          }
        - else if `"`has'"' != "" {
        = else if `""' != "" {
          local opt "has"
          }
        - local inse = "`insensitive'" != ""
        = local inse = "" != ""
        - if `"`has'"' != "" {
        = if `""' != "" {
          CheckHas `"`has'"' "`opt'" "`inse'"
          if "`what'" == "varl" | "`what'" == "vall" {
          VarlVall "`what'" `"`which'"' "`varlist'" "`inse'"
          }
          else if "`what'" == "f" {
          Format `"`which'"' "`varlist'" "`inse'"
          }
          else if "`what'" == "c" {
          Char `"`which'"' "`varlist'" "`inse'"
          }
          else if "`what'" == "t" {
          Type `"`which'"' "`varlist'"
          }
          if `"`not'"' != "" {
          local varlist : list varlist - vlist
          }
          else if `"`has'"' != "" {
          local varlist "`vlist'"
          }
          }
        - if `"`not2'"' != "" {
        = if `""' != "" {
          unab all : *
          local varlist : list all - varlist
          }
        - if "`varlist'" == "" {
        = if "inc_decoded1 inc_decoded2" == "" {
          exit
          }
        - if "`alpha'" != "" {
        = if "" != "" {
          local varlist : list sort varlist
          }
        - if "`detail'" != "" {
        = if "" != "" {
          describe `varlist'
          }
        - else {
        - local nvar : word count `varlist'
        = local nvar : word count inc_decoded1 inc_decoded2
        - local ncol = int((`:set linesize' + `skip') / (`varwidth' + `skip'))
        = local ncol = int((80 + 2) / (12 + 2))
        - local i 0
        - local vlist
        - foreach v of local varlist {
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" inc_decoded1"'
        - }
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" inc_decoded1 inc_decoded2"'
        - }
        - DisplayInCols txt `indent' `skip' 0 `vlist'
        = DisplayInCols txt 0 2 0  inc_decoded1 inc_decoded2
          -------------------------------------- begin ds_util.DisplayInCols ---
          - gettoken sty 0 : 0
          - gettoken indent 0 : 0
          - gettoken pad 0 : 0
          - gettoken wid 0 : 0
          - local indent = cond(`indent'==. | `indent'<0, 0, `indent')
          = local indent = cond(0==. | 0<0, 0, 0)
          - local pad = cond(`pad'==. | `pad'<1, 2, `pad')
          = local pad = cond(2==. | 2<1, 2, 2)
          - local wid = cond(`wid'==. | `wid'<0, 0, `wid')
          = local wid = cond(0==. | 0<0, 0, 0)
          - local n : list sizeof 0
          - if `n'==0 {
          = if 2==0 {
            exit
            }
          - foreach x of local 0 {
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(0, length(`"inc_decoded1"'))
          - }
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"inc_decoded2"'))
          - }
          - local wid = `wid' + `pad'
          = local wid = 12 + 2
          - local cols = int((`c(linesize)'+1-`indent')/`wid')
          = local cols = int((80+1-0)/14)
          - if `cols' < 2 {
          = if 5 < 2 {
            if `indent' {
            local col "_column(`=`indent'+1')"
            }
            foreach x of local 0 {
            di as `sty' `col' `"`x'"'
            }
            exit
            }
          - local lines = `n'/`cols'
          = local lines = 2/5
          - local lines = int(cond(`lines'>int(`lines'), `lines'+1, `lines'))
          = local lines = int(cond(.4>int(.4), .4+1, .4))
          - forvalues i=1(1)`lines' {
          = forvalues i=1(1)1 {
          - local top = min((`cols')*`lines'+`i', `n')
          = local top = min((5)*1+1, 2)
          - local col = `indent' + 1
          = local col = 0 + 1
          - forvalues j=`i'(`lines')`top' {
          = forvalues j=1(1)2 {
          - local x : word `j' of `0'
          = local x : word 1 of   inc_decoded1 inc_decoded2
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(1) "inc_decoded1" _c
inc_decoded1          - local col = `col' + `wid'
          = local col = 1 + 14
          - }
          - local x : word `j' of `0'
          = local x : word 2 of   inc_decoded1 inc_decoded2
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(15) "inc_decoded2" _c
              inc_decoded2          - local col = `col' + `wid'
          = local col = 15 + 14
          - }
          - di as `sty'
          = di as txt

          - }
          ---------------------------------------- end ds_util.DisplayInCols ---
        - }
        - return local varlist `varlist'
        = return local varlist inc_decoded1 inc_decoded2
        -------------------------------------------------------- end ds_util ---
      - exit
      --------------------------------------------------------------- end ds ---
    - if "`destring'" != "" {
    = if "destring" != "" {
    - if `"`ignore'"' != "" {
    = if `"" ,$""' != "" {
    - local ignore `"ignore(`ignore')"'
    = local ignore `"ignore(" ,$")"'
    - }
    - `verpre' destring `newvars', replace `force' `float' `ignore' `percent'
    = version 16.0: destring inc_decoded1 inc_decoded2 , replace   ignore(" ,$")
>  
      ------------------------------------------------------- begin destring ---
      - version 14
      - local cmdargs = `"`0'"'
      = local cmdargs = `"inc_decoded1 inc_decoded2 , replace   ignore(" ,$") "'
      - local verpre : display "version " %4.1f _caller() ":"
      - syntax [varlist], [Generate(string) replace] [force] [float] [Ignore(str
> ing asis)] [percent] [dpcomma]
      - if _caller() >= 14 {
      - if ustrpos(`"`ignore'"',",") & !ustrpos(`"`ignore'"',`"""') {
      = if ustrpos(`"" ,$""',",") & !ustrpos(`"" ,$""',`"""') {
        display as error `"ignore string must be enclosed with quotes to ignore 
> commas or use options"'
        exit 198
        }
      - }
      - `verpre' _parse_ignore `ignore'
      = version 16.0: _parse_ignore " ,$"
        ------------------------------------------------ begin _parse_ignore ---
        - version 14
        - sreturn clear
        - if _caller() < 14 {
          capture syntax [anything] , [ASChars] [ASBytes] [illegal]
          if !_rc {
          if "`aschars'`asbytes'`illegal'"!="" {
          display as error "may not specify options in the ignore option for Sta
> ta version less than 14"
          exit 198
          }
          }
          sreturn local aschars 0
          sreturn local illegal 0
          }
        - else {
        - syntax [anything] , [ASChars] [ASBytes] [illegal]
        - if "`asbytes'"!="" {
        = if ""!="" {
          if "`aschars'"!="" {
          display as error "may specify only one of the ignore options aschars a
> nd asbytes"
          exit 198
          }
          if "`illegal'"!="" {
          display as error "may not specify the ignore option illegal when speci
> fying asbytes"
          exit 198
          }
          }
        - if "`asbytes'"=="" {
        = if ""=="" {
        - if ustrinvalidcnt(`"`anything'"') {
        = if ustrinvalidcnt(`"" ,$""') {
          display as error "invalid Unicode characters may not be ignored when r
> emoving aschars"
          exit 198
          }
        - }
        - sreturn local aschars = "`asbytes'"==""
        = sreturn local aschars = ""==""
        - sreturn local illegal = "`illegal'"!=""
        = sreturn local illegal = ""!=""
        - capture sreturn local ignore `anything'
        = capture sreturn local ignore " ,$"
        - if _rc {
          sreturn local ignore `"`anything'"'
          }
        - }
        -------------------------------------------------- end _parse_ignore ---
      - if _caller() < 14 {
        local aschars 0
        syntax [varlist], [Generate(string) replace] [force] [float] [Ignore(str
> ing)] [percent] [dpcomma]
        }
      - else {
      - if `"`s(ignore)'"'!="" {
      = if `" ,$"'!="" {
      - local ignore `"`s(ignore)'"'
      = local ignore `" ,$"'
      - }
      - local aschars `s(aschars)'
      = local aschars 1
      - if `s(illegal)' {
      = if 0 {
        local illegal = ustrunescape("\ufffd")
        }
      - }
      - if "`percent'" == "percent" {
      = if "" == "percent" {
        if !ustrpos(`"`ignore'"', "%") {
        local ignore `"`ignore'%"'
        }
        }
      - if "`illegal'"!="" {
      = if ""!="" {
        local ignore `"`ignore'`illegal'"'
        }
      - if `"`float'"'!="" {
      = if `""'!="" {
        local gtype "float"
        }
      - else {
      - local gtype "double"
      - }
      - if "`generate'" != "" & "`replace'" != "" {
      = if "" != "" & "replace" != "" {
        di as err "options generate and replace are mutually exclusive"
        exit 198
        }
      - if "`generate'" == "" & "`replace'" == "" {
      = if "" == "" & "replace" == "" {
        di as err "must specify either generate or replace option"
        exit 198
        }
      - if "`generate'" != "" {
      = if "" != "" {
        local ct1: word count `varlist'
        local save "`varlist'"
        local 0 "`generate'"
        capture syntax newvarlist
        if _rc {
        di as err "generate() contains existing variable(s) and/or illegal varia
> ble name(s)"
        exit _rc
        }
        local generate "`varlist'"
        local varlist "`save'"
        local ct2: word count `generate'
        if `ct1' != `ct2' {
        di as err "number of variables in varlist must equal"
        di as err "number of variables in generate(newvarlist)"
        exit 198
        }
        }
      - local m 1
      - if `"`ignore'"' == "" {
      = if `" ,$"' == "" {
        local ignore ""
        }
      - if `aschars' {
      = if 1 {
      - local l = ustrlen(`"`ignore'"')
      = local l = ustrlen(`" ,$"')
      - }
      - else {
        local l = length(`"`ignore'"')
        }
      - while `m' <= `l' {
      = while 1 <= 3 {
      - if `aschars' {
      = if 1 {
      - local char`m' = usubstr(`"`ignore'"', `m', 1)
      = local char1 = usubstr(`" ,$"', 1, 1)
      - }
      - else {
        local char`m' = substr(`"`ignore'"', `m', 1)
        }
      - local m = `m' + 1
      = local m = 1 + 1
      - }
      - while `m' <= `l' {
      = while 2 <= 3 {
      - if `aschars' {
      = if 1 {
      - local char`m' = usubstr(`"`ignore'"', `m', 1)
      = local char2 = usubstr(`" ,$"', 2, 1)
      - }
      - else {
        local char`m' = substr(`"`ignore'"', `m', 1)
        }
      - local m = `m' + 1
      = local m = 2 + 1
      - }
      - while `m' <= `l' {
      = while 3 <= 3 {
      - if `aschars' {
      = if 1 {
      - local char`m' = usubstr(`"`ignore'"', `m', 1)
      = local char3 = usubstr(`" ,$"', 3, 1)
      - }
      - else {
        local char`m' = substr(`"`ignore'"', `m', 1)
        }
      - local m = `m' + 1
      = local m = 3 + 1
      - }
      - while `m' <= `l' {
      = while 4 <= 3 {
        if `aschars' {
        local char`m' = usubstr(`"`ignore'"', `m', 1)
        }
        else {
        local char`m' = substr(`"`ignore'"', `m', 1)
        }
        local m = `m' + 1
        }
      - if `aschars' {
      = if 1 {
      - local aswhat "character"
      - }
      - else {
        local aswhat "byte"
        }
      - if "`generate'"!="" {
      = if ""!="" {
        local genrep "generate"
        }
      - else {
      - local genrep "replace"
      - }
      - local tvars OLDVAR NEWVAR ismissing found topct
      - tempvar `tvars'
      = tempvar OLDVAR NEWVAR ismissing found topct
      - local varno 0
      - foreach var of varlist `varlist' {
      = foreach var of varlist inc_decoded1 inc_decoded2 {
      - local varno = `varno' + 1
      = local varno = 0 + 1
      - if "`generate'"!="" {
      = if ""!="" {
        local finalvarname : word `varno' of `generate'
        local finalprint "`finalvarname' "
        }
      - else {
      - local finalvarname "`var'"
      = local finalvarname "inc_decoded1"
      - local finalprint ""
      - }
      - capture confirm string variable `var'
      = capture confirm string variable inc_decoded1
      - if _rc != 0 {
        di as txt "`var' already numeric; no " as res "`genrep'"
        }
      - else {
      - qui gen `OLDVAR' = `var'
      = qui gen __000007 = inc_decoded1
      - local jj 1
      - local b
      - local bcnt = 0
      - local c
      - local makepct
      - while `"`char`jj''"' != "" {
      = while `" "' != "" {
      - capture drop `found'
      = capture drop __00000A
      - capture drop `topct'
      = capture drop __00000B
      - local t `"`char`jj''"'
      = local t `" "'
      - if `aschars' {
      = if 1 {
      - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
      = qui gen byte __00000A = ustrpos(__000007, `" "') != 0
      - }
      - else {
        qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
        }
      - qui summarize `found', meanonly
      = qui summarize __00000A, meanonly
      - if r(sum) > 0 {
      - if `"`t'"'=="`illegal'" {
      = if `" "'=="" {
        local b `"`b' illegal Unicode"'
        }
      - else if `"`t'"' == " " {
      = else if `" "' == " " {
      - local b `"`b' space"'
      = local b `" space"'
      - }
      - else {
        local b `"`b' `t'"'
        }
      - local ++bcnt
      - }
      - if `aschars' {
      = if 1 {
      - if `"`t'"'=="%" {
      = if `" "'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if ustrpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
      - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
      = qui replace __000007 = usubinstr(__000007, `" "', "", .)
      - }
      - else {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if strpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
        }
      - local jj = `jj' + 1
      = local jj = 1 + 1
      - }
      - while `"`char`jj''"' != "" {
      = while `","' != "" {
      - capture drop `found'
      = capture drop __00000A
      - capture drop `topct'
      = capture drop __00000B
      - local t `"`char`jj''"'
      = local t `","'
      - if `aschars' {
      = if 1 {
      - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
      = qui gen byte __00000A = ustrpos(__000007, `","') != 0
      - }
      - else {
        qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
        }
      - qui summarize `found', meanonly
      = qui summarize __00000A, meanonly
      - if r(sum) > 0 {
        if `"`t'"'=="`illegal'" {
        local b `"`b' illegal Unicode"'
        }
        else if `"`t'"' == " " {
        local b `"`b' space"'
        }
        else {
        local b `"`b' `t'"'
        }
        local ++bcnt
        }
      - if `aschars' {
      = if 1 {
      - if `"`t'"'=="%" {
      = if `","'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if ustrpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
      - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
      = qui replace __000007 = usubinstr(__000007, `","', "", .)
      - }
      - else {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if strpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
        }
      - local jj = `jj' + 1
      = local jj = 2 + 1
      - }
      - while `"`char`jj''"' != "" {
      = while `"$"' != "" {
      - capture drop `found'
      = capture drop __00000A
      - capture drop `topct'
      = capture drop __00000B
      - local t `"`char`jj''"'
      = local t `"$"'
      - if `aschars' {
      = if 1 {
      - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
      = qui gen byte __00000A = ustrpos(__000007, `"$"') != 0
      - }
      - else {
        qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
        }
      - qui summarize `found', meanonly
      = qui summarize __00000A, meanonly
      - if r(sum) > 0 {
        if `"`t'"'=="`illegal'" {
        local b `"`b' illegal Unicode"'
        }
        else if `"`t'"' == " " {
        local b `"`b' space"'
        }
        else {
        local b `"`b' `t'"'
        }
        local ++bcnt
        }
      - if `aschars' {
      = if 1 {
      - if `"`t'"'=="%" {
      = if `"$"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if ustrpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
      - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
      = qui replace __000007 = usubinstr(__000007, `"$"', "", .)
      - }
      - else {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if strpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
        }
      - local jj = `jj' + 1
      = local jj = 3 + 1
      - }
      - while `"`char`jj''"' != "" {
      = while `""' != "" {
        capture drop `found'
        capture drop `topct'
        local t `"`char`jj''"'
        if `aschars' {
        qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
        }
        else {
        qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
        }
        qui summarize `found', meanonly
        if r(sum) > 0 {
        if `"`t'"'=="`illegal'" {
        local b `"`b' illegal Unicode"'
        }
        else if `"`t'"' == " " {
        local b `"`b' space"'
        }
        else {
        local b `"`b' `t'"'
        }
        local ++bcnt
        }
        if `aschars' {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if ustrpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
        }
        else {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if strpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
        }
        local jj = `jj' + 1
        }
      - if _caller() >= 14 {
      - qui replace `OLDVAR' = ustrtrim(`OLDVAR')
      = qui replace __000007 = ustrtrim(__000007)
      - }
      - else {
        qui replace `OLDVAR' = strtrim(`OLDVAR')
        }
      - quietly gen byte `ismissing' = `OLDVAR'=="" | `OLDVAR'=="." | (strlen(`O
> LDVAR')==2 & inrange(`OLDVAR',".a",".z"))
      = quietly gen byte __000009 = __000007=="" | __000007=="." | (strlen(__000
> 007)==2 & inrange(__000007,".a",".z"))
      - if ("`dpcomma'" != "") {
      = if ("" != "") {
        qui replace `OLDVAR' = subinstr(`OLDVAR',".","X",.) if !`ismissing'
        qui replace `OLDVAR' = subinstr(`OLDVAR', ",", ".", 1) if !ustrregexm(`O
> LDVAR',"(,[a-z])|(^,$)")
        }
      - if _caller() >= 14 {
      - qui replace `OLDVAR' = ustrregexrf(`OLDVAR',"^0+","0")
      = qui replace __000007 = ustrregexrf(__000007,"^0+","0")
      - }
      - else {
        qui replace `OLDVAR' = regexr(`OLDVAR',"^0+","0")
        }
      - qui gen `gtype' `NEWVAR' = real(`OLDVAR')
      = qui gen double __000008 = real(__000007)
      - qui summarize `ismissing', meanonly
      = qui summarize __000009, meanonly
      - local oldmiss = r(sum)
      - qui count if missing(`NEWVAR')
      = qui count if missing(__000008)
      - local newmiss = r(N)
      - local flag = `oldmiss'!=`newmiss'
      = local flag = 0!=0
      - if `flag' & ("`force'" == "") {
      = if 0 & ("" == "") {
        if `"`ignore'"' != "" {
        di as txt "`var': contains " "`aswhat's not specified in " as res "ignor
> e()" as txt "; no " as res "`genrep'"
        }
        else {
        di as txt "`var': contains " "nonnumeric `aswhat's; no " as res "`genrep
> '"
        }
        }
      - else {
      - order `NEWVAR', after(`var')
      = order __000008, after(inc_decoded1)
        -------------------------------------------------------- begin order ---
        - version 11
        - if (_caller()<11) {
          _order `macval(0)'
          exit
          }
        - syntax varlist[, Before(varname) After(varname) first last SEQuential 
> ALPHAbetic]
        - if (`"`before'"' == "" & `"`after'"' == "" & "`first'" == "" & "`last'
> " == "" & "`alphabetic'" == "" & "`sequential'" == "") {
        = if (`""' == "" & `"inc_decoded1"' == "" & "" == "" & "" == "" & "" == 
> "" & "" == "") {
          _order `macval(0)'
          exit
          }
        - if (`"`before'"' != "" & `"`after'"' != "") {
        = if (`""' != "" & `"inc_decoded1"' != "") {
          dis as error "before() may not be combined with after()"
          exit 198
          }
        - if (`"`before'"' != "" & `"`first'"' != "") {
        = if (`""' != "" & `""' != "") {
          dis as error "before() may not be combined with first()"
          exit 198
          }
        - if (`"`before'"' != "" & `"`last'"' != "") {
        = if (`""' != "" & `""' != "") {
          dis as error "before() may not be combined with last()"
          exit 198
          }
        - if (`"`after'"' != "" & `"`before'"' != "") {
        = if (`"inc_decoded1"' != "" & `""' != "") {
          dis as error "after() may not be combined with before()"
          exit 198
          }
        - if (`"`after'"' != "" & `"`first'"' != "") {
        = if (`"inc_decoded1"' != "" & `""' != "") {
          dis as error "after() may not be combined with first()"
          exit 198
          }
        - if (`"`after'"' != "" & `"`last'"' != "") {
        = if (`"inc_decoded1"' != "" & `""' != "") {
          dis as error "after() may not be combined with last()"
          exit 198
          }
        - if ("`first'" != "" & "`last'" != "") {
        = if ("" != "" & "" != "") {
          dis as error "first may not be combined with last"
          exit 198
          }
        - if ("`sequential'" != "" & "`alphabetic'" != "") {
        = if ("" != "" & "" != "") {
          dis as error "sequential may not be combined with alphabetic"
          exit 198
          }
        - if ("`first'" != "") {
        = if ("" != "") {
          if "`alphabetic'" != "" {
          local varlist : list sort varlist
          }
          if "`sequential'" != "" {
          aorder `varlist'
          }
          else {
          _order `varlist'
          }
          }
        - if ("`last'" != "") {
        = if ("" != "") {
          unab vlist : _all
          local list : list vlist - varlist
          if "`alphabetic'" != "" {
          local varlist : list sort varlist
          }
          if "`sequential'" != "" {
          preserve
          keep `varlist'
          aorder `varlist'
          unab varlist : _all
          restore
          }
          _order `list' `varlist'
          }
        - if (`"`before'"' != "") {
        = if (`""' != "") {
          local test : list before in varlist
          if `test' {
          dis as err "varname specified in before() may not" " be in varlist"
          exit 198
          }
          if "`alphabetic'" != "" {
          local varlist : list sort varlist
          }
          if "`sequential'" != "" {
          preserve
          keep `varlist'
          aorder `varlist'
          unab varlist : _all
          restore
          }
          unab vlist : _all
          local vlist : list vlist - varlist
          local var_num : list posof "`before'" in vlist
          local var_num = `var_num' - 1
          local fvar : word 1 of `vlist'
          capture local lvar : word `var_num' of `vlist'
          if _rc {
          _order `varlist'
          exit
          }
          unab nlist : `fvar'-`lvar'
          local nlist : list nlist - varlist
          _order `nlist' `varlist'
          }
        - if (`"`after'"' != "") {
        = if (`"inc_decoded1"' != "") {
        - local test : list after in varlist
        - if `test' {
        = if 0 {
          dis as err "varname specified in after() may not" " be in varlist"
          exit 198
          }
        - if "`alphabetic'" != "" {
        = if "" != "" {
          local varlist : list sort varlist
          }
        - if "`sequential'" != "" {
        = if "" != "" {
          preserve
          keep `varlist'
          aorder `varlist'
          unab varlist : _all
          restore
          }
        - unab vlist : _all
          ------------------------------------------------------- begin unab ---
          - version 6
          - gettoken user 0: 0, parse(" :")
          - gettoken colon 0: 0, parse(" :")
          - if `"`colon'"' != ":" { error 198 }
          = if `":"' != ":" { error 198 }
          - syntax [varlist(default=empty)] [, MIN(integer 1) MAX(integer 120000
> ) NAME(string)]
          - c_local `user' `varlist'
          = c_local vlist year hhwt repwt cluster adjust statefip strata hhincom
> e_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 repwt10 r
> epwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 repwt20
>  repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt29 repwt
> 30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repwt39 rep
> wt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 repwt49 r
> epwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 repwt59
>  repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt68 repwt
> 69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repwt78 rep
> wt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp5 repwt
> p6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14 repwtp
> 15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwtp23 rep
> wtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 repwtp32 
> repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40 repwtp
> 41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwtp49 rep
> wtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 repwtp58 
> repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66 repwtp
> 67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwtp75 rep
> wtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __000000 __
> 000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_decoded2 
> __000007 __00000A __000009 __000008
          - local n : word count `varlist'
          = local n : word count year hhwt repwt cluster adjust statefip strata 
> hhincome_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 re
> pwt10 repwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 
> repwt20 repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt2
> 9 repwt30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repw
> t39 repwt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 re
> pwt49 repwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 
> repwt59 repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt6
> 8 repwt69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repw
> t78 repwt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp
> 5 repwtp6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14
>  repwtp15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwt
> p23 repwtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 re
> pwtp32 repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40
>  repwtp41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwt
> p49 repwtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 re
> pwtp58 repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66
>  repwtp67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwt
> p75 repwtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __00
> 0000 __000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_de
> coded2 __000007 __00000A __000009 __000008
          - if `n'>=`min' & `n'<=`max' { exit }
          = if 187>=1 & 187<=120000 { exit }
          --------------------------------------------------------- end unab ---
        - local vlist : list vlist - varlist
        - local var_num : list posof "`after'" in vlist
        = local var_num : list posof "inc_decoded1" in vlist
        - local fvar : word 1 of `vlist'
        = local fvar : word 1 of year hhwt repwt cluster adjust statefip strata 
> hhincome_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 re
> pwt10 repwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 
> repwt20 repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt2
> 9 repwt30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repw
> t39 repwt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 re
> pwt49 repwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 
> repwt59 repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt6
> 8 repwt69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repw
> t78 repwt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp
> 5 repwtp6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14
>  repwtp15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwt
> p23 repwtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 re
> pwtp32 repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40
>  repwtp41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwt
> p49 repwtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 re
> pwtp58 repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66
>  repwtp67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwt
> p75 repwtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __00
> 0000 __000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_de
> coded2 __000007 __00000A __000009
        - local lvar : word `var_num' of `vlist'
        = local lvar : word 182 of year hhwt repwt cluster adjust statefip strat
> a hhincome_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 
> repwt10 repwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt1
> 9 repwt20 repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repw
> t29 repwt30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 re
> pwt39 repwt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 
> repwt49 repwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt5
> 8 repwt59 repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repw
> t68 repwt69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 re
> pwt78 repwt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repw
> tp5 repwtp6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp
> 14 repwtp15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 rep
> wtp23 repwtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 
> repwtp32 repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp
> 40 repwtp41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 rep
> wtp49 repwtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 
> repwtp58 repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp
> 66 repwtp67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 rep
> wtp75 repwtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __
> 000000 __000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_
> decoded2 __000007 __00000A __000009
        - unab nlist : `fvar'-`lvar'
        = unab nlist : year-inc_decoded1
          ------------------------------------------------------- begin unab ---
          - version 6
          - gettoken user 0: 0, parse(" :")
          - gettoken colon 0: 0, parse(" :")
          - if `"`colon'"' != ":" { error 198 }
          = if `":"' != ":" { error 198 }
          - syntax [varlist(default=empty)] [, MIN(integer 1) MAX(integer 120000
> ) NAME(string)]
          - c_local `user' `varlist'
          = c_local nlist year hhwt repwt cluster adjust statefip strata hhincom
> e_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 repwt10 r
> epwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 repwt20
>  repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt29 repwt
> 30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repwt39 rep
> wt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 repwt49 r
> epwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 repwt59
>  repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt68 repwt
> 69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repwt78 rep
> wt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp5 repwt
> p6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14 repwtp
> 15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwtp23 rep
> wtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 repwtp32 
> repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40 repwtp
> 41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwtp49 rep
> wtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 repwtp58 
> repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66 repwtp
> 67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwtp75 rep
> wtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __000000 __
> 000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1
          - local n : word count `varlist'
          = local n : word count year hhwt repwt cluster adjust statefip strata 
> hhincome_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 re
> pwt10 repwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 
> repwt20 repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt2
> 9 repwt30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repw
> t39 repwt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 re
> pwt49 repwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 
> repwt59 repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt6
> 8 repwt69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repw
> t78 repwt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp
> 5 repwtp6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14
>  repwtp15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwt
> p23 repwtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 re
> pwtp32 repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40
>  repwtp41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwt
> p49 repwtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 re
> pwtp58 repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66
>  repwtp67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwt
> p75 repwtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __00
> 0000 __000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1
          - if `n'>=`min' & `n'<=`max' { exit }
          = if 182>=1 & 182<=120000 { exit }
          --------------------------------------------------------- end unab ---
        - local nlist : list nlist - varlist
        - _order `nlist' `varlist'
        = _order year hhwt repwt cluster adjust statefip strata hhincome_acs rep
> wt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 repwt10 repwt11 re
> pwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 repwt20 repwt21 
> repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt29 repwt30 repwt3
> 1 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repwt39 repwt40 repw
> t41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 repwt49 repwt50 re
> pwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 repwt59 repwt60 
> repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt68 repwt69 repwt7
> 0 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repwt78 repwt79 repw
> t80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp5 repwtp6 repwtp
> 7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14 repwtp15 repwtp
> 16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwtp23 repwtp24 rep
> wtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 repwtp32 repwtp33 
> repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40 repwtp41 repwtp
> 42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwtp49 repwtp50 rep
> wtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 repwtp58 repwtp59 
> repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66 repwtp67 repwtp
> 68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwtp75 repwtp76 rep
> wtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __000000 __000002 __
> 000003 __000004 __000001 __000005 __000006 inc_decoded1 __000008
        - }
        - if ("`alphabetic'" != "" & `"`before'"' == "" & `"`after'"' == "" & "`
> first'" == "" & "`last'" == "") {
        = if ("" != "" & `""' == "" & `"inc_decoded1"' == "" & "" == "" & "" == 
> "") {
          local vlist : list sort varlist
          _order `vlist'
          }
        - if ("`sequential'" != "" & `"`before'"' == "" & `"`after'"' == "" & "`
> first'" == "" & "`last'" == "") {
        = if ("" != "" & `""' == "" & `"inc_decoded1"' == "" & "" == "" & "" == 
> "") {
          aorder `varlist'
          }
        ---------------------------------------------------------- end order ---
      - if `aschars' {
      = if 1 {
      - local dispb `"`b'"'
      = local dispb `" space"'
      - }
      - else {
        local dispb = printablebytes(`"`b'"')
        }
      - local c = plural(`bcnt',strproper("`aswhat'")) + " removed " + plural(`b
> cnt',"was","were") + `":`dispb'"'
      = local c = plural(1,strproper("character")) + " removed " + plural(1,"was
> ","were") + `": space"'
      - if "`makepct'" != "" {
      = if "" != "" {
        if `makepct' {
        qui replace `NEWVAR' = `NEWVAR'/100
        }
        }
      - qui compress `NEWVAR'
      = qui compress __000008
      - local type : type `NEWVAR'
      = local type : type __000008
      - if `flag' {
      = if 0 {
        di as txt "`var': contains nonnumeric `aswhat's" _continue
        if `"`ignore'"'!="" {
        display " not specified in " as result "ignore()" _continue
        }
        if `"`b'"'=="" {
        display "; `finalprint'" as res "`genrep'd " as txt "as " as res "`type'
> " _continue
        }
        display
        }
      - if `"`b'"' != "" {
      = if `" space"' != "" {
      - di as txt "`var': " plural(`bcnt',"`aswhat'") as res `"`dispb'"' as txt 
> " removed; `finalprint'" as res "`genrep'd " as txt "as " as res "`type'"
      = di as txt "inc_decoded1: " plural(1,"character") as res `" space"' as tx
> t " removed; " as res "replaced " as txt "as " as res "int"
inc_decoded1: character space removed; replaced as int
      - }
      - else if `"`b'"' == "" & !`flag' {
      = else if `" space"' == "" & !0 {
        di as txt "`var': all characters numeric; " "`finalprint'" as res "`genr
> ep'd " as txt "as " as res "`type'"
        }
      - if `newmiss' != 0 {
      = if 0 != 0 {
        di as txt "(`newmiss' missing " plural(`newmiss',"value") " generated)"
        }
      - label variable `NEWVAR' `"`: variable label `var''"'
      = label variable __000008 `""'
        -------------------------------------------------------- begin label ---
        - version 10.0
        - local vv : display "version " string(_caller()) ", missing:"
        - gettoken val : 0
        - if (strpos("`val'", "val") > 0 ) {
        = if (strpos("variable", "val") > 0 ) {
          gettoken val 0 : 0
          syntax anything [, nofix]
          if "`fix'" != "" {
          local fix ", nofix"
          }
          gettoken var rest : anything
          while `"`rest'"' != "" {
          gettoken lab rest : rest
          local label "`lab'"
          }
          local vlist : list anything - lab
          if "`lab'" == "." {
          local lab ""
          }
          foreach var of varlist `vlist' {
          `vv' _label `val' `var' `lab' `fix'
          }
          }
        - else {
        - `vv' _label `macval(0)'
        = version 14, missing: _label variable __000008 `""'
        - }
        ---------------------------------------------------------- end label ---
      - char `NEWVAR'[destring] `c'
      = char __000008[destring] Character removed was: space
      - char `NEWVAR'[destring_cmd] `"destring `cmdargs'"'
      = char __000008[destring_cmd] `"destring inc_decoded1 inc_decoded2 , repla
> ce   ignore(" ,$") "'
      - char `var'[destring]
      = char inc_decoded1[destring]
      - char `var'[destring_cmd]
      = char inc_decoded1[destring_cmd]
      - if "`genrep'"=="generate" {
      = if "replace"=="generate" {
        Charcopy `var' `NEWVAR'
        rename `NEWVAR' `: word `varno' of `generate''
        }
      - else {
      - char rename `var' `NEWVAR'
      = char rename inc_decoded1 __000008
      - drop `var'
      = drop inc_decoded1
      - rename `NEWVAR' `var'
      = rename __000008 inc_decoded1
        ------------------------------------------------------- begin rename ---
        - version 12
        - mata: rename_cmd("`3'")
        = mata: rename_cmd("")
        --------------------------------------------------------- end rename ---
      - }
      - }
      - foreach varmac of local tvars {
      - capture drop ``varmac''
      = capture drop __000007
      - }
      - capture drop ``varmac''
      = capture drop __000008
      - }
      - capture drop ``varmac''
      = capture drop __000009
      - }
      - capture drop ``varmac''
      = capture drop __00000A
      - }
      - capture drop ``varmac''
      = capture drop __00000B
      - }
      - }
      - }
      - local varno = `varno' + 1
      = local varno = 1 + 1
      - if "`generate'"!="" {
      = if ""!="" {
        local finalvarname : word `varno' of `generate'
        local finalprint "`finalvarname' "
        }
      - else {
      - local finalvarname "`var'"
      = local finalvarname "inc_decoded2"
      - local finalprint ""
      - }
      - capture confirm string variable `var'
      = capture confirm string variable inc_decoded2
      - if _rc != 0 {
        di as txt "`var' already numeric; no " as res "`genrep'"
        }
      - else {
      - qui gen `OLDVAR' = `var'
      = qui gen __000007 = inc_decoded2
      - local jj 1
      - local b
      - local bcnt = 0
      - local c
      - local makepct
      - while `"`char`jj''"' != "" {
      = while `" "' != "" {
      - capture drop `found'
      = capture drop __00000A
      - capture drop `topct'
      = capture drop __00000B
      - local t `"`char`jj''"'
      = local t `" "'
      - if `aschars' {
      = if 1 {
      - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
      = qui gen byte __00000A = ustrpos(__000007, `" "') != 0
      - }
      - else {
        qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
        }
      - qui summarize `found', meanonly
      = qui summarize __00000A, meanonly
      - if r(sum) > 0 {
      - if `"`t'"'=="`illegal'" {
      = if `" "'=="" {
        local b `"`b' illegal Unicode"'
        }
      - else if `"`t'"' == " " {
      = else if `" "' == " " {
      - local b `"`b' space"'
      = local b `" space"'
      - }
      - else {
        local b `"`b' `t'"'
        }
      - local ++bcnt
      - }
      - if `aschars' {
      = if 1 {
      - if `"`t'"'=="%" {
      = if `" "'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if ustrpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
      - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
      = qui replace __000007 = usubinstr(__000007, `" "', "", .)
      - }
      - else {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if strpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
        }
      - local jj = `jj' + 1
      = local jj = 1 + 1
      - }
      - while `"`char`jj''"' != "" {
      = while `","' != "" {
      - capture drop `found'
      = capture drop __00000A
      - capture drop `topct'
      = capture drop __00000B
      - local t `"`char`jj''"'
      = local t `","'
      - if `aschars' {
      = if 1 {
      - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
      = qui gen byte __00000A = ustrpos(__000007, `","') != 0
      - }
      - else {
        qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
        }
      - qui summarize `found', meanonly
      = qui summarize __00000A, meanonly
      - if r(sum) > 0 {
        if `"`t'"'=="`illegal'" {
        local b `"`b' illegal Unicode"'
        }
        else if `"`t'"' == " " {
        local b `"`b' space"'
        }
        else {
        local b `"`b' `t'"'
        }
        local ++bcnt
        }
      - if `aschars' {
      = if 1 {
      - if `"`t'"'=="%" {
      = if `","'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if ustrpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
      - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
      = qui replace __000007 = usubinstr(__000007, `","', "", .)
      - }
      - else {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if strpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
        }
      - local jj = `jj' + 1
      = local jj = 2 + 1
      - }
      - while `"`char`jj''"' != "" {
      = while `"$"' != "" {
      - capture drop `found'
      = capture drop __00000A
      - capture drop `topct'
      = capture drop __00000B
      - local t `"`char`jj''"'
      = local t `"$"'
      - if `aschars' {
      = if 1 {
      - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
      = qui gen byte __00000A = ustrpos(__000007, `"$"') != 0
      - }
      - else {
        qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
        }
      - qui summarize `found', meanonly
      = qui summarize __00000A, meanonly
      - if r(sum) > 0 {
        if `"`t'"'=="`illegal'" {
        local b `"`b' illegal Unicode"'
        }
        else if `"`t'"' == " " {
        local b `"`b' space"'
        }
        else {
        local b `"`b' `t'"'
        }
        local ++bcnt
        }
      - if `aschars' {
      = if 1 {
      - if `"`t'"'=="%" {
      = if `"$"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if ustrpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
      - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
      = qui replace __000007 = usubinstr(__000007, `"$"', "", .)
      - }
      - else {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if strpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
        }
      - local jj = `jj' + 1
      = local jj = 3 + 1
      - }
      - while `"`char`jj''"' != "" {
      = while `""' != "" {
        capture drop `found'
        capture drop `topct'
        local t `"`char`jj''"'
        if `aschars' {
        qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
        }
        else {
        qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
        }
        qui summarize `found', meanonly
        if r(sum) > 0 {
        if `"`t'"'=="`illegal'" {
        local b `"`b' illegal Unicode"'
        }
        else if `"`t'"' == " " {
        local b `"`b' space"'
        }
        else {
        local b `"`b' `t'"'
        }
        local ++bcnt
        }
        if `aschars' {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if ustrpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
        }
        else {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if strpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
        }
        local jj = `jj' + 1
        }
      - if _caller() >= 14 {
      - qui replace `OLDVAR' = ustrtrim(`OLDVAR')
      = qui replace __000007 = ustrtrim(__000007)
      - }
      - else {
        qui replace `OLDVAR' = strtrim(`OLDVAR')
        }
      - quietly gen byte `ismissing' = `OLDVAR'=="" | `OLDVAR'=="." | (strlen(`O
> LDVAR')==2 & inrange(`OLDVAR',".a",".z"))
      = quietly gen byte __000009 = __000007=="" | __000007=="." | (strlen(__000
> 007)==2 & inrange(__000007,".a",".z"))
      - if ("`dpcomma'" != "") {
      = if ("" != "") {
        qui replace `OLDVAR' = subinstr(`OLDVAR',".","X",.) if !`ismissing'
        qui replace `OLDVAR' = subinstr(`OLDVAR', ",", ".", 1) if !ustrregexm(`O
> LDVAR',"(,[a-z])|(^,$)")
        }
      - if _caller() >= 14 {
      - qui replace `OLDVAR' = ustrregexrf(`OLDVAR',"^0+","0")
      = qui replace __000007 = ustrregexrf(__000007,"^0+","0")
      - }
      - else {
        qui replace `OLDVAR' = regexr(`OLDVAR',"^0+","0")
        }
      - qui gen `gtype' `NEWVAR' = real(`OLDVAR')
      = qui gen double __000008 = real(__000007)
      - qui summarize `ismissing', meanonly
      = qui summarize __000009, meanonly
      - local oldmiss = r(sum)
      - qui count if missing(`NEWVAR')
      = qui count if missing(__000008)
      - local newmiss = r(N)
      - local flag = `oldmiss'!=`newmiss'
      = local flag = 0!=0
      - if `flag' & ("`force'" == "") {
      = if 0 & ("" == "") {
        if `"`ignore'"' != "" {
        di as txt "`var': contains " "`aswhat's not specified in " as res "ignor
> e()" as txt "; no " as res "`genrep'"
        }
        else {
        di as txt "`var': contains " "nonnumeric `aswhat's; no " as res "`genrep
> '"
        }
        }
      - else {
      - order `NEWVAR', after(`var')
      = order __000008, after(inc_decoded2)
        -------------------------------------------------------- begin order ---
        - version 11
        - if (_caller()<11) {
          _order `macval(0)'
          exit
          }
        - syntax varlist[, Before(varname) After(varname) first last SEQuential 
> ALPHAbetic]
        - if (`"`before'"' == "" & `"`after'"' == "" & "`first'" == "" & "`last'
> " == "" & "`alphabetic'" == "" & "`sequential'" == "") {
        = if (`""' == "" & `"inc_decoded2"' == "" & "" == "" & "" == "" & "" == 
> "" & "" == "") {
          _order `macval(0)'
          exit
          }
        - if (`"`before'"' != "" & `"`after'"' != "") {
        = if (`""' != "" & `"inc_decoded2"' != "") {
          dis as error "before() may not be combined with after()"
          exit 198
          }
        - if (`"`before'"' != "" & `"`first'"' != "") {
        = if (`""' != "" & `""' != "") {
          dis as error "before() may not be combined with first()"
          exit 198
          }
        - if (`"`before'"' != "" & `"`last'"' != "") {
        = if (`""' != "" & `""' != "") {
          dis as error "before() may not be combined with last()"
          exit 198
          }
        - if (`"`after'"' != "" & `"`before'"' != "") {
        = if (`"inc_decoded2"' != "" & `""' != "") {
          dis as error "after() may not be combined with before()"
          exit 198
          }
        - if (`"`after'"' != "" & `"`first'"' != "") {
        = if (`"inc_decoded2"' != "" & `""' != "") {
          dis as error "after() may not be combined with first()"
          exit 198
          }
        - if (`"`after'"' != "" & `"`last'"' != "") {
        = if (`"inc_decoded2"' != "" & `""' != "") {
          dis as error "after() may not be combined with last()"
          exit 198
          }
        - if ("`first'" != "" & "`last'" != "") {
        = if ("" != "" & "" != "") {
          dis as error "first may not be combined with last"
          exit 198
          }
        - if ("`sequential'" != "" & "`alphabetic'" != "") {
        = if ("" != "" & "" != "") {
          dis as error "sequential may not be combined with alphabetic"
          exit 198
          }
        - if ("`first'" != "") {
        = if ("" != "") {
          if "`alphabetic'" != "" {
          local varlist : list sort varlist
          }
          if "`sequential'" != "" {
          aorder `varlist'
          }
          else {
          _order `varlist'
          }
          }
        - if ("`last'" != "") {
        = if ("" != "") {
          unab vlist : _all
          local list : list vlist - varlist
          if "`alphabetic'" != "" {
          local varlist : list sort varlist
          }
          if "`sequential'" != "" {
          preserve
          keep `varlist'
          aorder `varlist'
          unab varlist : _all
          restore
          }
          _order `list' `varlist'
          }
        - if (`"`before'"' != "") {
        = if (`""' != "") {
          local test : list before in varlist
          if `test' {
          dis as err "varname specified in before() may not" " be in varlist"
          exit 198
          }
          if "`alphabetic'" != "" {
          local varlist : list sort varlist
          }
          if "`sequential'" != "" {
          preserve
          keep `varlist'
          aorder `varlist'
          unab varlist : _all
          restore
          }
          unab vlist : _all
          local vlist : list vlist - varlist
          local var_num : list posof "`before'" in vlist
          local var_num = `var_num' - 1
          local fvar : word 1 of `vlist'
          capture local lvar : word `var_num' of `vlist'
          if _rc {
          _order `varlist'
          exit
          }
          unab nlist : `fvar'-`lvar'
          local nlist : list nlist - varlist
          _order `nlist' `varlist'
          }
        - if (`"`after'"' != "") {
        = if (`"inc_decoded2"' != "") {
        - local test : list after in varlist
        - if `test' {
        = if 0 {
          dis as err "varname specified in after() may not" " be in varlist"
          exit 198
          }
        - if "`alphabetic'" != "" {
        = if "" != "" {
          local varlist : list sort varlist
          }
        - if "`sequential'" != "" {
        = if "" != "" {
          preserve
          keep `varlist'
          aorder `varlist'
          unab varlist : _all
          restore
          }
        - unab vlist : _all
          ------------------------------------------------------- begin unab ---
          - version 6
          - gettoken user 0: 0, parse(" :")
          - gettoken colon 0: 0, parse(" :")
          - if `"`colon'"' != ":" { error 198 }
          = if `":"' != ":" { error 198 }
          - syntax [varlist(default=empty)] [, MIN(integer 1) MAX(integer 120000
> ) NAME(string)]
          - c_local `user' `varlist'
          = c_local vlist year hhwt repwt cluster adjust statefip strata hhincom
> e_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 repwt10 r
> epwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 repwt20
>  repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt29 repwt
> 30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repwt39 rep
> wt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 repwt49 r
> epwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 repwt59
>  repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt68 repwt
> 69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repwt78 rep
> wt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp5 repwt
> p6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14 repwtp
> 15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwtp23 rep
> wtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 repwtp32 
> repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40 repwtp
> 41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwtp49 rep
> wtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 repwtp58 
> repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66 repwtp
> 67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwtp75 rep
> wtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __000000 __
> 000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_decoded2 
> __000007 __00000A __000009 __000008
          - local n : word count `varlist'
          = local n : word count year hhwt repwt cluster adjust statefip strata 
> hhincome_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 re
> pwt10 repwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 
> repwt20 repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt2
> 9 repwt30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repw
> t39 repwt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 re
> pwt49 repwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 
> repwt59 repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt6
> 8 repwt69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repw
> t78 repwt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp
> 5 repwtp6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14
>  repwtp15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwt
> p23 repwtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 re
> pwtp32 repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40
>  repwtp41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwt
> p49 repwtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 re
> pwtp58 repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66
>  repwtp67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwt
> p75 repwtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __00
> 0000 __000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_de
> coded2 __000007 __00000A __000009 __000008
          - if `n'>=`min' & `n'<=`max' { exit }
          = if 187>=1 & 187<=120000 { exit }
          --------------------------------------------------------- end unab ---
        - local vlist : list vlist - varlist
        - local var_num : list posof "`after'" in vlist
        = local var_num : list posof "inc_decoded2" in vlist
        - local fvar : word 1 of `vlist'
        = local fvar : word 1 of year hhwt repwt cluster adjust statefip strata 
> hhincome_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 re
> pwt10 repwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 
> repwt20 repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt2
> 9 repwt30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repw
> t39 repwt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 re
> pwt49 repwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 
> repwt59 repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt6
> 8 repwt69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repw
> t78 repwt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp
> 5 repwtp6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14
>  repwtp15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwt
> p23 repwtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 re
> pwtp32 repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40
>  repwtp41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwt
> p49 repwtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 re
> pwtp58 repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66
>  repwtp67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwt
> p75 repwtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __00
> 0000 __000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_de
> coded2 __000007 __00000A __000009
        - local lvar : word `var_num' of `vlist'
        = local lvar : word 183 of year hhwt repwt cluster adjust statefip strat
> a hhincome_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 
> repwt10 repwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt1
> 9 repwt20 repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repw
> t29 repwt30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 re
> pwt39 repwt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 
> repwt49 repwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt5
> 8 repwt59 repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repw
> t68 repwt69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 re
> pwt78 repwt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repw
> tp5 repwtp6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp
> 14 repwtp15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 rep
> wtp23 repwtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 
> repwtp32 repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp
> 40 repwtp41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 rep
> wtp49 repwtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 
> repwtp58 repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp
> 66 repwtp67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 rep
> wtp75 repwtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __
> 000000 __000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_
> decoded2 __000007 __00000A __000009
        - unab nlist : `fvar'-`lvar'
        = unab nlist : year-inc_decoded2
          ------------------------------------------------------- begin unab ---
          - version 6
          - gettoken user 0: 0, parse(" :")
          - gettoken colon 0: 0, parse(" :")
          - if `"`colon'"' != ":" { error 198 }
          = if `":"' != ":" { error 198 }
          - syntax [varlist(default=empty)] [, MIN(integer 1) MAX(integer 120000
> ) NAME(string)]
          - c_local `user' `varlist'
          = c_local nlist year hhwt repwt cluster adjust statefip strata hhincom
> e_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 repwt10 r
> epwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 repwt20
>  repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt29 repwt
> 30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repwt39 rep
> wt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 repwt49 r
> epwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 repwt59
>  repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt68 repwt
> 69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repwt78 rep
> wt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp5 repwt
> p6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14 repwtp
> 15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwtp23 rep
> wtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 repwtp32 
> repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40 repwtp
> 41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwtp49 rep
> wtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 repwtp58 
> repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66 repwtp
> 67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwtp75 rep
> wtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __000000 __
> 000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_decoded2
          - local n : word count `varlist'
          = local n : word count year hhwt repwt cluster adjust statefip strata 
> hhincome_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 re
> pwt10 repwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 
> repwt20 repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt2
> 9 repwt30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repw
> t39 repwt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 re
> pwt49 repwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 
> repwt59 repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt6
> 8 repwt69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repw
> t78 repwt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp
> 5 repwtp6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14
>  repwtp15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwt
> p23 repwtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 re
> pwtp32 repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40
>  repwtp41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwt
> p49 repwtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 re
> pwtp58 repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66
>  repwtp67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwt
> p75 repwtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __00
> 0000 __000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_de
> coded2
          - if `n'>=`min' & `n'<=`max' { exit }
          = if 183>=1 & 183<=120000 { exit }
          --------------------------------------------------------- end unab ---
        - local nlist : list nlist - varlist
        - _order `nlist' `varlist'
        = _order year hhwt repwt cluster adjust statefip strata hhincome_acs rep
> wt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 repwt10 repwt11 re
> pwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 repwt20 repwt21 
> repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt29 repwt30 repwt3
> 1 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repwt39 repwt40 repw
> t41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 repwt49 repwt50 re
> pwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 repwt59 repwt60 
> repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt68 repwt69 repwt7
> 0 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repwt78 repwt79 repw
> t80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp5 repwtp6 repwtp
> 7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14 repwtp15 repwtp
> 16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwtp23 repwtp24 rep
> wtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 repwtp32 repwtp33 
> repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40 repwtp41 repwtp
> 42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwtp49 repwtp50 rep
> wtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 repwtp58 repwtp59 
> repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66 repwtp67 repwtp
> 68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwtp75 repwtp76 rep
> wtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __000000 __000002 __
> 000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_decoded2 __000008
        - }
        - if ("`alphabetic'" != "" & `"`before'"' == "" & `"`after'"' == "" & "`
> first'" == "" & "`last'" == "") {
        = if ("" != "" & `""' == "" & `"inc_decoded2"' == "" & "" == "" & "" == 
> "") {
          local vlist : list sort varlist
          _order `vlist'
          }
        - if ("`sequential'" != "" & `"`before'"' == "" & `"`after'"' == "" & "`
> first'" == "" & "`last'" == "") {
        = if ("" != "" & `""' == "" & `"inc_decoded2"' == "" & "" == "" & "" == 
> "") {
          aorder `varlist'
          }
        ---------------------------------------------------------- end order ---
      - if `aschars' {
      = if 1 {
      - local dispb `"`b'"'
      = local dispb `" space"'
      - }
      - else {
        local dispb = printablebytes(`"`b'"')
        }
      - local c = plural(`bcnt',strproper("`aswhat'")) + " removed " + plural(`b
> cnt',"was","were") + `":`dispb'"'
      = local c = plural(1,strproper("character")) + " removed " + plural(1,"was
> ","were") + `": space"'
      - if "`makepct'" != "" {
      = if "" != "" {
        if `makepct' {
        qui replace `NEWVAR' = `NEWVAR'/100
        }
        }
      - qui compress `NEWVAR'
      = qui compress __000008
      - local type : type `NEWVAR'
      = local type : type __000008
      - if `flag' {
      = if 0 {
        di as txt "`var': contains nonnumeric `aswhat's" _continue
        if `"`ignore'"'!="" {
        display " not specified in " as result "ignore()" _continue
        }
        if `"`b'"'=="" {
        display "; `finalprint'" as res "`genrep'd " as txt "as " as res "`type'
> " _continue
        }
        display
        }
      - if `"`b'"' != "" {
      = if `" space"' != "" {
      - di as txt "`var': " plural(`bcnt',"`aswhat'") as res `"`dispb'"' as txt 
> " removed; `finalprint'" as res "`genrep'd " as txt "as " as res "`type'"
      = di as txt "inc_decoded2: " plural(1,"character") as res `" space"' as tx
> t " removed; " as res "replaced " as txt "as " as res "int"
inc_decoded2: character space removed; replaced as int
      - }
      - else if `"`b'"' == "" & !`flag' {
      = else if `" space"' == "" & !0 {
        di as txt "`var': all characters numeric; " "`finalprint'" as res "`genr
> ep'd " as txt "as " as res "`type'"
        }
      - if `newmiss' != 0 {
      = if 0 != 0 {
        di as txt "(`newmiss' missing " plural(`newmiss',"value") " generated)"
        }
      - label variable `NEWVAR' `"`: variable label `var''"'
      = label variable __000008 `""'
        -------------------------------------------------------- begin label ---
        - version 10.0
        - local vv : display "version " string(_caller()) ", missing:"
        - gettoken val : 0
        - if (strpos("`val'", "val") > 0 ) {
        = if (strpos("variable", "val") > 0 ) {
          gettoken val 0 : 0
          syntax anything [, nofix]
          if "`fix'" != "" {
          local fix ", nofix"
          }
          gettoken var rest : anything
          while `"`rest'"' != "" {
          gettoken lab rest : rest
          local label "`lab'"
          }
          local vlist : list anything - lab
          if "`lab'" == "." {
          local lab ""
          }
          foreach var of varlist `vlist' {
          `vv' _label `val' `var' `lab' `fix'
          }
          }
        - else {
        - `vv' _label `macval(0)'
        = version 14, missing: _label variable __000008 `""'
        - }
        ---------------------------------------------------------- end label ---
      - char `NEWVAR'[destring] `c'
      = char __000008[destring] Character removed was: space
      - char `NEWVAR'[destring_cmd] `"destring `cmdargs'"'
      = char __000008[destring_cmd] `"destring inc_decoded1 inc_decoded2 , repla
> ce   ignore(" ,$") "'
      - char `var'[destring]
      = char inc_decoded2[destring]
      - char `var'[destring_cmd]
      = char inc_decoded2[destring_cmd]
      - if "`genrep'"=="generate" {
      = if "replace"=="generate" {
        Charcopy `var' `NEWVAR'
        rename `NEWVAR' `: word `varno' of `generate''
        }
      - else {
      - char rename `var' `NEWVAR'
      = char rename inc_decoded2 __000008
      - drop `var'
      = drop inc_decoded2
      - rename `NEWVAR' `var'
      = rename __000008 inc_decoded2
        ------------------------------------------------------- begin rename ---
        - version 12
        - mata: rename_cmd("`3'")
        = mata: rename_cmd("")
        --------------------------------------------------------- end rename ---
      - }
      - }
      - foreach varmac of local tvars {
      - capture drop ``varmac''
      = capture drop __000007
      - }
      - capture drop ``varmac''
      = capture drop __000008
      - }
      - capture drop ``varmac''
      = capture drop __000009
      - }
      - capture drop ``varmac''
      = capture drop __00000A
      - }
      - capture drop ``varmac''
      = capture drop __00000B
      - }
      - }
      - }
      --------------------------------------------------------- end destring ---
    - }
    -------------------------------------------------------------- end split ---
  - gen `inc_cat_var'_lb = inc_decoded1
  = gen acs_hhinc_lb = inc_decoded1
  - gen `inc_cat_var'_ub = inc_decoded2
  = gen acs_hhinc_ub = inc_decoded2
  - di "Lower bound of `inc_cat_var'_lb and upper bound of `inc_cat_var'_ub " "c
> reated for inc_level " `inc_level' "of the original Research " "dataset income
>  range"
  = di "Lower bound of acs_hhinc_lb and upper bound of acs_hhinc_ub " "created f
> or inc_level " 2 "of the original Research " "dataset income range"
Lower bound of acs_hhinc_lb and upper bound of acs_hhinc_ub created for inc_leve
> l 2of the original Research dataset income range
  - }
  - else {
    di as error "Error: The inc_level " `inc_level' " does not fit any of the ex
> isting regular expressions " "designs. Please email the REDI program creator a
> t " "mollymkingphd@gmail.com with information about this " "error and a list o
> f all of your income levels so she " "can update the program. Thank you for yo
> ur help!"
    error 999
    }
  - local upper_bound = `inc_cat_var'_ub
  = local upper_bound = acs_hhinc_ub
  - local lower_bound = `inc_cat_var'_lb
  = local lower_bound = acs_hhinc_lb
  - capture drop inc_decoded1 inc_decoded2
  - quietly summarize if `research_year' == `y' & `inc_cat_var' == `inc_level'
  = quietly summarize if year == 2019 & acs_hhinc == 2
  - local sample_size = r(N)
  - gen `inc_cat_var'_n = `sample_size'
  = gen acs_hhinc_n = 17748
  - label variable `inc_cat_var'_n "N in income level in research dataset"
  = label variable acs_hhinc_n "N in income level in research dataset"
    ------------------------------------------------------------ begin label ---
    - version 10.0
    - local vv : display "version " string(_caller()) ", missing:"
    - gettoken val : 0
    - if (strpos("`val'", "val") > 0 ) {
    = if (strpos("variable", "val") > 0 ) {
      gettoken val 0 : 0
      syntax anything [, nofix]
      if "`fix'" != "" {
      local fix ", nofix"
      }
      gettoken var rest : anything
      while `"`rest'"' != "" {
      gettoken lab rest : rest
      local label "`lab'"
      }
      local vlist : list anything - lab
      if "`lab'" == "." {
      local lab ""
      }
      foreach var of varlist `vlist' {
      `vv' _label `val' `var' `lab' `fix'
      }
      }
    - else {
    - `vv' _label `macval(0)'
    = version 16, missing: _label variable acs_hhinc_n "N in income level in res
> earch dataset"
    - }
    -------------------------------------------------------------- end label ---
  - keep if `research_year' == `y' & `inc_cat_var' == `inc_level'
  = keep if year == 2019 & acs_hhinc == 2
(0 observations deleted)
  - tempfile premerge_`inc_level'_`y'
  = tempfile premerge_2_2019
  - save `premerge_`inc_level'_`y'', replace
  = save /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.000006, repla
> ce
(note: file /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.000006 not
>  found)
file /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.000006 saved
  - di "Saved tempfile with upper and lower bounds of research data income level
> s"
Saved tempfile with upper and lower bounds of research data income levels
  - use `reference_dataset', clear
  = use ~/Documents/SocResearch/Dissertation/data/data_temp/redi13_cps_state_ca.
> dta, clear
(Streamlined CPS ASEC data, CA 2019)
  - di "Reference data open - Income type set as `inc_cat_var' income"
  = di "Reference data open - Income type set as acs_hhinc income"
Reference data open - Income type set as acs_hhinc income
  - keep if `ref_year' == `y' | `"`ref_year'"' == "nys" & `ref_income_var' >= `l
> ower_bound' & `ref_income_var' <= `upper_bound'
  = keep if year == 2019 | `"year"' == "nys" & hhincome >= 15000 & hhincome <= 2
> 5000
(0 observations deleted)
  - gen obs_no = _n
  - di "Observation number generated"
Observation number generated
  - save $temp/`ASECdata'_`ref_year'_inc`inc_level'.dta, replace
  = save ~/Documents/SocResearch/Dissertation/data/data_temp/_year_inc2.dta, rep
> lace
file ~/Documents/SocResearch/Dissertation/data/data_temp/_year_inc2.dta saved
  - di "Ref to keep income between $`lower_bound' and $`upper_bound' for `y' yea
> r."
  = di "Ref to keep income between $15000 and $25000 for 2019 year."
Ref to keep income between $15000 and $25000 for 2019 year.
  - quietly des
    -------------------------------------------------------------- begin des ---
    - local version : di "version " string(_caller()) ":"
    - `version' describe `0'
    = version 16: describe 
      ------------------------------------------------------- begin describe ---
      - version 9
      - local version : di "version " string(_caller()) ":"
      - syntax [anything] [using] [, SImple REPLACE *]
      - if ("`replace'"!="") {
      = if (""!="") {
        describe_mk `0'
        return add
        exit
        }
      - local varlist `"`anything'"'
      = local varlist `""'
      - if ("`simple'" == "") {
      = if ("" == "") {
      - `version' _describe `0'
      = version 16: _describe 
      - return add
      - }
      - else {
        if (`"`options'"' != "") {
        di as err "simple may not be combined with other options"
        exit 198
        }
        if (`"`using'"' != "") {
        qui `version' describe `varlist' `using', varlist
        if "`varlist'" == "" {
        local vars "`r(varlist)'"
        }
        else {
        local vars "`varlist'"
        }
        local wid = 2
        local n : list sizeof vars
        if `n'==0 {
        exit
        }
        if "`c(hasicu)'" == "1" {
        foreach x of local vars {
        local wid = max(`wid', udstrlen(`"`x'"'))
        }
        }
        else {
        foreach x of local vars {
        local wid = max(`wid', strlen(`"`x'"'))
        }
        }
        local wid = `wid' + 2
        local cols = int((`c(linesize)'+1)/`wid')
        if `cols' < 2 {
        foreach x of local `vars' {
        di as txt `col' `"`x'"'
        }
        exit
        }
        local lines = `n'/`cols'
        local lines = int(cond(`lines'>int(`lines'), `lines'+1, `lines'))
        forvalues i=1(1)`lines' {
        local top = min((`cols')*`lines'+`i', `n')
        local col = 1
        forvalues j=`i'(`lines')`top' {
        local x : word `j' of `vars'
        di as txt _column(`col') "`x'" _c
        local col = `col' + `wid'
        }
        di as txt
        }
        qui `version' describe `varlist' `using', short
        return add
        }
        else {
        ds `varlist'
        qui `version' _describe `varlist', short
        return add
        }
        }
      --------------------------------------------------------- end describe ---
    ---------------------------------------------------------------- end des ---
  - local N = r(N)
  - clear
    ------------------------------------------------------------ begin clear ---
    - if _caller() < 10 {
      _clear_9 `0'
      exit
      }
    - version 10
    - syntax [anything]
    - tokenize `anything'
    = tokenize 
    - if `"`2'"' != "" {
    = if `""' != "" {
      display as err "`2' not allowed"
      exit 198
      }
    - if "`1'"=="" {
    = if ""=="" {
    - drop _all
    - label drop _all
      ---------------------------------------------------------- begin label ---
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {
      = if (strpos("drop", "val") > 0 ) {
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {
        local fix ", nofix"
        }
        gettoken var rest : anything
        while `"`rest'"' != "" {
        gettoken lab rest : rest
        local label "`lab'"
        }
        local vlist : list anything - lab
        if "`lab'" == "." {
        local lab ""
        }
        foreach var of varlist `vlist' {
        `vv' _label `val' `var' `lab' `fix'
        }
        }
      - else {
      - `vv' _label `macval(0)'
      = version 10, missing: _label drop _all
      - }
      ------------------------------------------------------------ end label ---
    - }
    - else if "`1'"=="frames" {
    = else if ""=="frames" {
      frames reset
      }
    - else if "`1'"=="mata" {
    = else if ""=="mata" {
      mata: mata clear
      }
    - else if "`1'"=="python" {
    = else if ""=="python" {
      python clear
      }
    - else if inlist("`1'", "results", "matrix") {
    = else if inlist("", "results", "matrix") {
      return clear
      clearreturn
      ereturn clear
      sreturn clear
      _return drop _all
      if ("`1'" == "matrix") {
      matrix drop _all
      _est drop _all
      }
      }
    - else if "`1'"=="programs" {
    = else if ""=="programs" {
      program drop _all
      }
    - else if "`1'"=="ado" {
    = else if ""=="ado" {
      program drop _allado
      }
    - else if "`1'"=="rngstream" | "`1'"=="rngstreams" {
    = else if ""=="rngstream" | ""=="rngstreams" {
      set rngstream clear
      }
    - else if "`1'"=="*" | "`1'"=="all" {
    = else if ""=="*" | ""=="all" {
      capture mata: st_local("semmods", strofreal(sg__global.hasmodels()))
      capture
      if (0`semmods') {
      display as err "-clear all- not allowed while an SEM Builder is open"
      exit 1
      }
      drop _all
      frames reset
      label drop _all
      matrix drop _all
      scalar drop _all
      constraint drop _all
      eq drop _all
      file close _all
      postutil clear
      _return drop _all
      discard
      program drop _all
      timer clear
      mata: _st__put_cmd_clear()
      mata: mata clear
      python clear
      }
    - else {
      display as err "`1' not allowed"
      exit 198
      }
    -------------------------------------------------------------- end clear ---
  - set obs `sample_size'
  = set obs 17748
number of observations (_N) was 0, now 17,748
  - gen obs_no = runiformint(1, `N')
  = gen obs_no = runiformint(1, 6260)
  - merge m:1 obs_no using $temp/`ASECdata'_`ref_year'_inc`inc_level'.dta, keep(
> match) nogenerate
  = merge m:1 obs_no using ~/Documents/SocResearch/Dissertation/data/data_temp/_
> year_inc2.dta, keep(match) nogenerate
    ------------------------------------------------------------ begin merge ---
    - version 11
    - gettoken mtype 0 : 0, parse(" ,")
    - if (!strpos("`mtype'", ":") & "`mtype'"!="") {
    = if (!strpos("m:1", ":") & "m:1"!="") {
      if (_caller()>=11) {
      di as smcl as txt "{p}"
      di as smcl "(note: you are using old"
      di as smcl "{bf:merge} syntax; see"
      di as smcl "{bf:{help merge:[D] merge}} for new syntax)"
      di as smcl "{p_end}"
      }
      merge_10 `mtype' `0'
      exit
      }
    - local origmtype `"`mtype'"'
    = local origmtype `"m:1"'
    - mata: map_mtype(`"mtype"')
    - gettoken token : 0, parse(" ,")
    - if ("`token'"=="_n") {
    = if ("obs_no"=="_n") {
      if ("`mtype'"!="1:1") {
      error_seq_not11 "`mtype'" "`origmtype'"
      }
      gettoken token 0 : 0, parse(" ,")
      local mtype "_n"
      }
    - syntax [varlist(default=none)] using/ [, ASSERT(string) DEBUG GENerate(nam
> e) FORCE KEEP(string) KEEPUSing(string) noLabels NOGENerate noNOTEs REPLACE no
> REPort SORTED UPDATE ]
    - if ("`mtype'"!="_n") {
    = if ("m:1"!="_n") {
    - local origmtype `"`mtype'"'
    = local origmtype `"m:1"'
    - mata: map_mtype(`"mtype"')
    - if ("`varlist'"=="") {
    = if ("obs_no"=="") {
      error_mat_varlist "`mtype'" "`origmtype'"
      }
    - }
    - else {
      if ("`mtype'"=="_n") {
      if ("`varlist'"!="") {
      error_seq_varlist
      }
      }
      }
    - mata: fullfilename("using", "usingfull", "using")
    - mata: resultlist("assert")
    - mata: resultlist("keep")
    - if ("`generate'"!="") {
    = if (""!="") {
      if ("`nogenerate'"!="") {
      di as smcl err "{p}"
      di as smcl "options -generate()- and -nogenerate-"
      di as smcl "may not be specified together."
      di as smcl err "{p_end}"
      }
      confirm new var `generate'
      }
    - if ("`replace'"!="") {
    = if (""!="") {
      if ("`update'"=="") {
      error_replace
      }
      }
    - if ("`sorted'"=="" & "`mtype'"!="_n") {
    = if (""=="" & "m:1"!="_n") {
    - local sortedby : sortedby
    - checksort "`sortedby'" "`varlist'"
    = checksort "" "obs_no"
      ------------------------------------------------ begin merge.checksort ---
      - args is should
      - local i 0
      - return scalar sorted = 1
      - foreach v1 of local should {
      - local ++i
      - local v2 : word `i' of `is'
      = local v2 : word 1 of 
      - if ("`v1'"!="`v2'") {
      = if ("obs_no"!="") {
      - return scalar sorted = 0
      - continue, break
        }
        }
      -------------------------------------------------- end merge.checksort ---
    - if (!r(sorted)) {
    - sort `varlist'
    = sort obs_no
    - }
    - quietly describe using "`using'", varlist short
    = quietly describe using "~/Documents/SocResearch/Dissertation/data/data_tem
> p/_year_inc2.dta", varlist short
      ------------------------------------------------------- begin describe ---
      - version 9
      - local version : di "version " string(_caller()) ":"
      - syntax [anything] [using] [, SImple REPLACE *]
      - if ("`replace'"!="") {
      = if (""!="") {
        describe_mk `0'
        return add
        exit
        }
      - local varlist `"`anything'"'
      = local varlist `""'
      - if ("`simple'" == "") {
      = if ("" == "") {
      - `version' _describe `0'
      = version 11: _describe using "~/Documents/SocResearch/Dissertation/data/d
> ata_temp/_year_inc2.dta", varlist short
      - return add
      - }
      - else {
        if (`"`options'"' != "") {
        di as err "simple may not be combined with other options"
        exit 198
        }
        if (`"`using'"' != "") {
        qui `version' describe `varlist' `using', varlist
        if "`varlist'" == "" {
        local vars "`r(varlist)'"
        }
        else {
        local vars "`varlist'"
        }
        local wid = 2
        local n : list sizeof vars
        if `n'==0 {
        exit
        }
        if "`c(hasicu)'" == "1" {
        foreach x of local vars {
        local wid = max(`wid', udstrlen(`"`x'"'))
        }
        }
        else {
        foreach x of local vars {
        local wid = max(`wid', strlen(`"`x'"'))
        }
        }
        local wid = `wid' + 2
        local cols = int((`c(linesize)'+1)/`wid')
        if `cols' < 2 {
        foreach x of local `vars' {
        di as txt `col' `"`x'"'
        }
        exit
        }
        local lines = `n'/`cols'
        local lines = int(cond(`lines'>int(`lines'), `lines'+1, `lines'))
        forvalues i=1(1)`lines' {
        local top = min((`cols')*`lines'+`i', `n')
        local col = 1
        forvalues j=`i'(`lines')`top' {
        local x : word `j' of `vars'
        di as txt _column(`col') "`x'" _c
        local col = `col' + `wid'
        }
        di as txt
        }
        qui `version' describe `varlist' `using', short
        return add
        }
        else {
        ds `varlist'
        qui `version' _describe `varlist', short
        return add
        }
        }
      --------------------------------------------------------- end describe ---
    - local sortedby "`r(sortlist)'"
    = local sortedby ""
    - checksort "`sortedby'" "`varlist'"
    = checksort "" "obs_no"
      ------------------------------------------------ begin merge.checksort ---
      - args is should
      - local i 0
      - return scalar sorted = 1
      - foreach v1 of local should {
      - local ++i
      - local v2 : word `i' of `is'
      = local v2 : word 1 of 
      - if ("`v1'"!="`v2'") {
      = if ("obs_no"!="") {
      - return scalar sorted = 0
      - continue, break
        }
        }
      -------------------------------------------------- end merge.checksort ---
    - if (!r(sorted)) {
    - preserve
    - qui use "`using'", clear
    = qui use "~/Documents/SocResearch/Dissertation/data/data_temp/_year_inc2.dt
> a", clear
    - sort `varlist'
    = sort obs_no
    - tempfile using
    - qui save "`using'", replace
    = qui save "/var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.000008
> ", replace
    - restore
    - }
    - }
    - if ("`nogenerate'"!="") {
    = if ("nogenerate"!="") {
    - tempvar mergevar
    - local mergevaristemp 1
    - }
    - else {
      local mergevar = cond("`generate'"!="", "`generate'", "_merge")
      local mergevaristemp 0
      }
    - local options `update' `replace' `notes' `labels' _merge(`mergevar') `forc
> e'
    = local options     _merge(__000000) 
    - if (bsubstr("`mtype'", 1, 1)=="1") {
    = if (bsubstr("m:1", 1, 1)=="1") {
      local options `options' uniqmaster
      }
    - if (bsubstr("`mtype'", 3, 1)=="1") {
    = if (bsubstr("m:1", 3, 1)=="1") {
    - local options `options' uniqusing
    = local options _merge(__000000) uniqusing
    - }
    - if ("`keepusing'"!="") {
    = if (""!="") {
      local options `options' keep(`keepusing')
      }
    - if ("`keep'" !="" & !strpos("`keep'" , "2")) {
    = if ("3" !="" & !strpos("3" , "2")) {
    - local options `options' nokeep
    = local options _merge(__000000) uniqusing nokeep
    - }
    - if (_caller() > 15) {
    - local version : di "version " string(_caller()) ": "
    - }
    - local _merge `"`version'_merge `varlist' using "`using'", nowarn"'
    = local _merge `"version 16: _merge obs_no using "/var/folders/rp/96l526kj7y
> bdjr5vs5bqqjw80000gn/T//S_20065.000008", nowarn"'
    - local _merge `"`_merge' `options' tabulate(mresults)"'
    = local _merge `"version 16: _merge obs_no using "/var/folders/rp/96l526kj7y
> bdjr5vs5bqqjw80000gn/T//S_20065.000008", nowarn _merge(__000000) uniqusing nok
> eep tabulate(mresults)"'
    - if ("`debug'"!="") {
    = if (""!="") {
      di as txt _n "command is"
      di `"`_merge'"' _n
      }
    - `_merge'
    = version 16: _merge obs_no using "/var/folders/rp/96l526kj7ybdjr5vs5bqqjw80
> 000gn/T//S_20065.000008", nowarn _merge(__000000) uniqusing nokeep tabulate(mr
> esults)
    - if (!`mergevaristemp') {
    = if (!1) {
      capture label list _merge
      if (_rc) {
      label define _merge 1 "master only (1)" 2 "using only (2)" 3 "matched (3)"
>  4 "missing updated (4)" 5 "nonmissing conflict (5)"
      }
      label values `mergevar' _merge
      }
    - if ("`assert'"!="") {
    = if (""!="") {
      if (_caller() < 13) {
      buildexpr expr : `mergevar' "`assert'"
      capture assert `expr'
      if (_rc) {
      error_assert `mergevar' "`assert'"
      }
      }
      else {
      capture checkmresults "`mresults'" "`assert'"
      if (_rc) {
      error_assert `mergevar' "`assert'"
      }
      }
      }
    - if ("`keep'"!="") {
    = if ("3"!="") {
    - buildexpr expr : `mergevar' "`keep'"
    = buildexpr expr : __000000 "3"
      ------------------------------------------------ begin merge.buildexpr ---
      - args userexpr colon varname numbers
      - gettoken first numbers : numbers
      - local list `varname'==`first'
      = local list __000000==3
      - foreach el of local numbers {
        local list `list' | `varname'==`el'
        }
      - c_local `userexpr' "(`list')"
      = c_local expr "(__000000==3)"
      -------------------------------------------------- end merge.buildexpr ---
    - quietly keep if `expr'
    = quietly keep if (__000000==3)
    - }
    - if ("`mtype'"=="1:1") {
    = if ("m:1"=="1:1") {
      qui count if `mergevar'==2
      if (r(N)==0) {
      sort `varlist'
      }
      }
    - if (c(noisily) & "`report'"=="") {
    = if (c(noisily) & ""=="") {
    - local isupdate = ("`replace'"!="" | "`update'"!="")
    = local isupdate = (""!="" | ""!="")
    - present_table `isupdate' `mergevar' `mergevaristemp'
    = present_table 0 __000000 1
      -------------------------------------------- begin merge.present_table ---
      - args isupdate mergevar mergevaristemp
      - if (!`mergevaristemp') {
      = if (!1) {
        local v1 "(`mergevar'==1)"
        local v2 "(`mergevar'==2)"
        local v3 "(`mergevar'==3)"
        local v4 "(`mergevar'==4)"
        local v5 "(`mergevar'==5)"
        }
      - quietly {
      - count if `mergevar'==1
      = count if __000000==1
      - local m1 = r(N)
      - count if `mergevar'==2
      = count if __000000==2
      - local m2 = r(N)
      - if (`isupdate') {
      = if (0) {
        count if `mergevar'==3
        local m3 = r(N)
        count if `mergevar'==4
        local m4 = r(N)
        local m5 = _N - `m1' - `m2' - `m3' - `m4'
        }
      - else {
      - local m3 = _N - `m1' - `m2'
      = local m3 = _N - 0 - 0
      - }
      - }
      - di

      - di as smcl as txt _col(5) "Result" _col(38) "# of obs."
    Result                           # of obs.
      - di as smcl as txt _col(5) "{hline 41}"
    -----------------------------------------
      - di as smcl as txt _col(5) "not matched" _col(30) as res %16.0fc (`m1'+`m
> 2')
      = di as smcl as txt _col(5) "not matched" _col(30) as res %16.0fc (0+0)
    not matched                             0
      - if (`m1'|`m2') {
      = if (0|0) {
        di as smcl as txt _col(9) "from master" _col(30) as res %16.0fc `m1' as 
> txt "  `v1'"
        di as smcl as txt _col(9) "from using" _col(30) as res %16.0fc `m2' as t
> xt "  `v2'"
        di
        }
      - if (!`isupdate') {
      = if (!0) {
      - di as smcl as txt _col(5) "matched" _col(30) as res %16.0fc `m3' as txt 
> "  `v3'"
      = di as smcl as txt _col(5) "matched" _col(30) as res %16.0fc 17748 as txt
>  "  "
    matched                            17,748  
      - }
      - else {
        if (`m1'==0 & `m2'==0) {
        di
        }
        di as smcl as txt _col(5) "matched" _col(30) as res %16.0fc (`m3'+`m4'+`
> m5')
        di as smcl as txt _col(9) "not updated" _col(30) as res %16.0fc `m3' as 
> txt "  `v3'"
        di as smcl as txt _col(9) "missing updated" _col(30) as res %16.0fc `m4'
>  as txt "  `v4'"
        di as smcl as txt _col(9) "nonmissing conflict" _col(30) as res %16.0fc 
> `m5' as txt "  `v5'"
        }
      - di as smcl as txt _col(5) "{hline 41}"
    -----------------------------------------
      ---------------------------------------------- end merge.present_table ---
    - }
    -------------------------------------------------------------- end merge ---
  - save $temp/`ASECdata'_`ref_year'_inc`inc_level'.dta, replace
  = save ~/Documents/SocResearch/Dissertation/data/data_temp/_year_inc2.dta, rep
> lace
file ~/Documents/SocResearch/Dissertation/data/data_temp/_year_inc2.dta saved
  - gen id = _n
  - merge 1:1 id using `premerge_`inc_level'_`y''
  = merge 1:1 id using /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065
> .000006
    ------------------------------------------------------------ begin merge ---
    - version 11
    - gettoken mtype 0 : 0, parse(" ,")
    - if (!strpos("`mtype'", ":") & "`mtype'"!="") {
    = if (!strpos("1:1", ":") & "1:1"!="") {
      if (_caller()>=11) {
      di as smcl as txt "{p}"
      di as smcl "(note: you are using old"
      di as smcl "{bf:merge} syntax; see"
      di as smcl "{bf:{help merge:[D] merge}} for new syntax)"
      di as smcl "{p_end}"
      }
      merge_10 `mtype' `0'
      exit
      }
    - local origmtype `"`mtype'"'
    = local origmtype `"1:1"'
    - mata: map_mtype(`"mtype"')
    - gettoken token : 0, parse(" ,")
    - if ("`token'"=="_n") {
    = if ("id"=="_n") {
      if ("`mtype'"!="1:1") {
      error_seq_not11 "`mtype'" "`origmtype'"
      }
      gettoken token 0 : 0, parse(" ,")
      local mtype "_n"
      }
    - syntax [varlist(default=none)] using/ [, ASSERT(string) DEBUG GENerate(nam
> e) FORCE KEEP(string) KEEPUSing(string) noLabels NOGENerate noNOTEs REPLACE no
> REPort SORTED UPDATE ]
    - if ("`mtype'"!="_n") {
    = if ("1:1"!="_n") {
    - local origmtype `"`mtype'"'
    = local origmtype `"1:1"'
    - mata: map_mtype(`"mtype"')
    - if ("`varlist'"=="") {
    = if ("id"=="") {
      error_mat_varlist "`mtype'" "`origmtype'"
      }
    - }
    - else {
      if ("`mtype'"=="_n") {
      if ("`varlist'"!="") {
      error_seq_varlist
      }
      }
      }
    - mata: fullfilename("using", "usingfull", "using")
    - mata: resultlist("assert")
    - mata: resultlist("keep")
    - if ("`generate'"!="") {
    = if (""!="") {
      if ("`nogenerate'"!="") {
      di as smcl err "{p}"
      di as smcl "options -generate()- and -nogenerate-"
      di as smcl "may not be specified together."
      di as smcl err "{p_end}"
      }
      confirm new var `generate'
      }
    - if ("`replace'"!="") {
    = if (""!="") {
      if ("`update'"=="") {
      error_replace
      }
      }
    - if ("`sorted'"=="" & "`mtype'"!="_n") {
    = if (""=="" & "1:1"!="_n") {
    - local sortedby : sortedby
    - checksort "`sortedby'" "`varlist'"
    = checksort "" "id"
      ------------------------------------------------ begin merge.checksort ---
      - args is should
      - local i 0
      - return scalar sorted = 1
      - foreach v1 of local should {
      - local ++i
      - local v2 : word `i' of `is'
      = local v2 : word 1 of 
      - if ("`v1'"!="`v2'") {
      = if ("id"!="") {
      - return scalar sorted = 0
      - continue, break
        }
        }
      -------------------------------------------------- end merge.checksort ---
    - if (!r(sorted)) {
    - sort `varlist'
    = sort id
    - }
    - quietly describe using "`using'", varlist short
    = quietly describe using "/var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//
> S_20065.000006", varlist short
      ------------------------------------------------------- begin describe ---
      - version 9
      - local version : di "version " string(_caller()) ":"
      - syntax [anything] [using] [, SImple REPLACE *]
      - if ("`replace'"!="") {
      = if (""!="") {
        describe_mk `0'
        return add
        exit
        }
      - local varlist `"`anything'"'
      = local varlist `""'
      - if ("`simple'" == "") {
      = if ("" == "") {
      - `version' _describe `0'
      = version 11: _describe using "/var/folders/rp/96l526kj7ybdjr5vs5bqqjw8000
> 0gn/T//S_20065.000006", varlist short
      - return add
      - }
      - else {
        if (`"`options'"' != "") {
        di as err "simple may not be combined with other options"
        exit 198
        }
        if (`"`using'"' != "") {
        qui `version' describe `varlist' `using', varlist
        if "`varlist'" == "" {
        local vars "`r(varlist)'"
        }
        else {
        local vars "`varlist'"
        }
        local wid = 2
        local n : list sizeof vars
        if `n'==0 {
        exit
        }
        if "`c(hasicu)'" == "1" {
        foreach x of local vars {
        local wid = max(`wid', udstrlen(`"`x'"'))
        }
        }
        else {
        foreach x of local vars {
        local wid = max(`wid', strlen(`"`x'"'))
        }
        }
        local wid = `wid' + 2
        local cols = int((`c(linesize)'+1)/`wid')
        if `cols' < 2 {
        foreach x of local `vars' {
        di as txt `col' `"`x'"'
        }
        exit
        }
        local lines = `n'/`cols'
        local lines = int(cond(`lines'>int(`lines'), `lines'+1, `lines'))
        forvalues i=1(1)`lines' {
        local top = min((`cols')*`lines'+`i', `n')
        local col = 1
        forvalues j=`i'(`lines')`top' {
        local x : word `j' of `vars'
        di as txt _column(`col') "`x'" _c
        local col = `col' + `wid'
        }
        di as txt
        }
        qui `version' describe `varlist' `using', short
        return add
        }
        else {
        ds `varlist'
        qui `version' _describe `varlist', short
        return add
        }
        }
      --------------------------------------------------------- end describe ---
    - local sortedby "`r(sortlist)'"
    = local sortedby "year acs_hhinc"
    - checksort "`sortedby'" "`varlist'"
    = checksort "year acs_hhinc" "id"
      ------------------------------------------------ begin merge.checksort ---
      - args is should
      - local i 0
      - return scalar sorted = 1
      - foreach v1 of local should {
      - local ++i
      - local v2 : word `i' of `is'
      = local v2 : word 1 of year acs_hhinc
      - if ("`v1'"!="`v2'") {
      = if ("id"!="year") {
      - return scalar sorted = 0
      - continue, break
        }
        }
      -------------------------------------------------- end merge.checksort ---
    - if (!r(sorted)) {
    - preserve
    - qui use "`using'", clear
    = qui use "/var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.000006"
> , clear
    - sort `varlist'
    = sort id
    - tempfile using
    - qui save "`using'", replace
    = qui save "/var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.000008
> ", replace
    - restore
    - }
    - }
    - if ("`nogenerate'"!="") {
    = if (""!="") {
      tempvar mergevar
      local mergevaristemp 1
      }
    - else {
    - local mergevar = cond("`generate'"!="", "`generate'", "_merge")
    = local mergevar = cond(""!="", "", "_merge")
    - local mergevaristemp 0
    - }
    - local options `update' `replace' `notes' `labels' _merge(`mergevar') `forc
> e'
    = local options     _merge(_merge) 
    - if (bsubstr("`mtype'", 1, 1)=="1") {
    = if (bsubstr("1:1", 1, 1)=="1") {
    - local options `options' uniqmaster
    = local options _merge(_merge) uniqmaster
    - }
    - if (bsubstr("`mtype'", 3, 1)=="1") {
    = if (bsubstr("1:1", 3, 1)=="1") {
    - local options `options' uniqusing
    = local options _merge(_merge) uniqmaster uniqusing
    - }
    - if ("`keepusing'"!="") {
    = if (""!="") {
      local options `options' keep(`keepusing')
      }
    - if ("`keep'" !="" & !strpos("`keep'" , "2")) {
    = if ("" !="" & !strpos("" , "2")) {
      local options `options' nokeep
      }
    - if (_caller() > 15) {
    - local version : di "version " string(_caller()) ": "
    - }
    - local _merge `"`version'_merge `varlist' using "`using'", nowarn"'
    = local _merge `"version 16: _merge id using "/var/folders/rp/96l526kj7ybdjr
> 5vs5bqqjw80000gn/T//S_20065.000008", nowarn"'
    - local _merge `"`_merge' `options' tabulate(mresults)"'
    = local _merge `"version 16: _merge id using "/var/folders/rp/96l526kj7ybdjr
> 5vs5bqqjw80000gn/T//S_20065.000008", nowarn _merge(_merge) uniqmaster uniqusin
> g tabulate(mresults)"'
    - if ("`debug'"!="") {
    = if (""!="") {
      di as txt _n "command is"
      di `"`_merge'"' _n
      }
    - `_merge'
    = version 16: _merge id using "/var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000g
> n/T//S_20065.000008", nowarn _merge(_merge) uniqmaster uniqusing tabulate(mres
> ults)
(label statefip_lbl already defined)
    - if (!`mergevaristemp') {
    = if (!0) {
    - capture label list _merge
      ---------------------------------------------------------- begin label ---
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {
      = if (strpos("list", "val") > 0 ) {
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {
        local fix ", nofix"
        }
        gettoken var rest : anything
        while `"`rest'"' != "" {
        gettoken lab rest : rest
        local label "`lab'"
        }
        local vlist : list anything - lab
        if "`lab'" == "." {
        local lab ""
        }
        foreach var of varlist `vlist' {
        `vv' _label `val' `var' `lab' `fix'
        }
        }
      - else {
      - `vv' _label `macval(0)'
      = version 11, missing: _label list _merge
        }
      ------------------------------------------------------------ end label ---
    - if (_rc) {
    - label define _merge 1 "master only (1)" 2 "using only (2)" 3 "matched (3)"
>  4 "missing updated (4)" 5 "nonmissing conflict (5)"
      ---------------------------------------------------------- begin label ---
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {
      = if (strpos("define", "val") > 0 ) {
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {
        local fix ", nofix"
        }
        gettoken var rest : anything
        while `"`rest'"' != "" {
        gettoken lab rest : rest
        local label "`lab'"
        }
        local vlist : list anything - lab
        if "`lab'" == "." {
        local lab ""
        }
        foreach var of varlist `vlist' {
        `vv' _label `val' `var' `lab' `fix'
        }
        }
      - else {
      - `vv' _label `macval(0)'
      = version 11, missing: _label define _merge 1 "master only (1)" 2 "using o
> nly (2)" 3 "matched (3)" 4 "missing updated (4)" 5 "nonmissing conflict (5)"
      - }
      ------------------------------------------------------------ end label ---
    - }
    - label values `mergevar' _merge
    = label values _merge _merge
      ---------------------------------------------------------- begin label ---
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {
      = if (strpos("values", "val") > 0 ) {
      - gettoken val 0 : 0
      - syntax anything [, nofix]
      - if "`fix'" != "" {
      = if "" != "" {
        local fix ", nofix"
        }
      - gettoken var rest : anything
      - while `"`rest'"' != "" {
      = while `" _merge"' != "" {
      - gettoken lab rest : rest
      - local label "`lab'"
      = local label "_merge"
      - }
      - while `"`rest'"' != "" {
      = while `""' != "" {
        gettoken lab rest : rest
        local label "`lab'"
        }
      - local vlist : list anything - lab
      - if "`lab'" == "." {
      = if "_merge" == "." {
        local lab ""
        }
      - foreach var of varlist `vlist' {
      = foreach var of varlist _merge {
      - `vv' _label `val' `var' `lab' `fix'
      = version 11, missing: _label values _merge _merge 
      - }
      - }
      - else {
        `vv' _label `macval(0)'
        }
      ------------------------------------------------------------ end label ---
    - }
    - if ("`assert'"!="") {
    = if (""!="") {
      if (_caller() < 13) {
      buildexpr expr : `mergevar' "`assert'"
      capture assert `expr'
      if (_rc) {
      error_assert `mergevar' "`assert'"
      }
      }
      else {
      capture checkmresults "`mresults'" "`assert'"
      if (_rc) {
      error_assert `mergevar' "`assert'"
      }
      }
      }
    - if ("`keep'"!="") {
    = if (""!="") {
      buildexpr expr : `mergevar' "`keep'"
      quietly keep if `expr'
      }
    - if ("`mtype'"=="1:1") {
    = if ("1:1"=="1:1") {
    - qui count if `mergevar'==2
    = qui count if _merge==2
    - if (r(N)==0) {
    - sort `varlist'
    = sort id
    - }
    - }
    - if (c(noisily) & "`report'"=="") {
    = if (c(noisily) & ""=="") {
    - local isupdate = ("`replace'"!="" | "`update'"!="")
    = local isupdate = (""!="" | ""!="")
    - present_table `isupdate' `mergevar' `mergevaristemp'
    = present_table 0 _merge 0
      -------------------------------------------- begin merge.present_table ---
      - args isupdate mergevar mergevaristemp
      - if (!`mergevaristemp') {
      = if (!0) {
      - local v1 "(`mergevar'==1)"
      = local v1 "(_merge==1)"
      - local v2 "(`mergevar'==2)"
      = local v2 "(_merge==2)"
      - local v3 "(`mergevar'==3)"
      = local v3 "(_merge==3)"
      - local v4 "(`mergevar'==4)"
      = local v4 "(_merge==4)"
      - local v5 "(`mergevar'==5)"
      = local v5 "(_merge==5)"
      - }
      - quietly {
      - count if `mergevar'==1
      = count if _merge==1
      - local m1 = r(N)
      - count if `mergevar'==2
      = count if _merge==2
      - local m2 = r(N)
      - if (`isupdate') {
      = if (0) {
        count if `mergevar'==3
        local m3 = r(N)
        count if `mergevar'==4
        local m4 = r(N)
        local m5 = _N - `m1' - `m2' - `m3' - `m4'
        }
      - else {
      - local m3 = _N - `m1' - `m2'
      = local m3 = _N - 0 - 0
      - }
      - }
      - di

      - di as smcl as txt _col(5) "Result" _col(38) "# of obs."
    Result                           # of obs.
      - di as smcl as txt _col(5) "{hline 41}"
    -----------------------------------------
      - di as smcl as txt _col(5) "not matched" _col(30) as res %16.0fc (`m1'+`m
> 2')
      = di as smcl as txt _col(5) "not matched" _col(30) as res %16.0fc (0+0)
    not matched                             0
      - if (`m1'|`m2') {
      = if (0|0) {
        di as smcl as txt _col(9) "from master" _col(30) as res %16.0fc `m1' as 
> txt "  `v1'"
        di as smcl as txt _col(9) "from using" _col(30) as res %16.0fc `m2' as t
> xt "  `v2'"
        di
        }
      - if (!`isupdate') {
      = if (!0) {
      - di as smcl as txt _col(5) "matched" _col(30) as res %16.0fc `m3' as txt 
> "  `v3'"
      = di as smcl as txt _col(5) "matched" _col(30) as res %16.0fc 17748 as txt
>  "  (_merge==3)"
    matched                            17,748  (_merge==3)
      - }
      - else {
        if (`m1'==0 & `m2'==0) {
        di
        }
        di as smcl as txt _col(5) "matched" _col(30) as res %16.0fc (`m3'+`m4'+`
> m5')
        di as smcl as txt _col(9) "not updated" _col(30) as res %16.0fc `m3' as 
> txt "  `v3'"
        di as smcl as txt _col(9) "missing updated" _col(30) as res %16.0fc `m4'
>  as txt "  `v4'"
        di as smcl as txt _col(9) "nonmissing conflict" _col(30) as res %16.0fc 
> `m5' as txt "  `v5'"
        }
      - di as smcl as txt _col(5) "{hline 41}"
    -----------------------------------------
      ---------------------------------------------- end merge.present_table ---
    - }
    -------------------------------------------------------------- end merge ---
  - generate category_n = .
(17,748 missing values generated)
  - replace category_n = `N'
  = replace category_n = 6260
(17,748 real changes made)
  - label var category_n "N respondents in income level in post-merge dataset'"
    ------------------------------------------------------------ begin label ---
    - version 10.0
    - local vv : display "version " string(_caller()) ", missing:"
    - gettoken val : 0
    - if (strpos("`val'", "val") > 0 ) {
    = if (strpos("var", "val") > 0 ) {
      gettoken val 0 : 0
      syntax anything [, nofix]
      if "`fix'" != "" {
      local fix ", nofix"
      }
      gettoken var rest : anything
      while `"`rest'"' != "" {
      gettoken lab rest : rest
      local label "`lab'"
      }
      local vlist : list anything - lab
      if "`lab'" == "." {
      local lab ""
      }
      foreach var of varlist `vlist' {
      `vv' _label `val' `var' `lab' `fix'
      }
      }
    - else {
    - `vv' _label `macval(0)'
    = version 16, missing: _label var category_n "N respondents in income level 
> in post-merge dataset'"
    - }
    -------------------------------------------------------------- end label ---
  - di "Merged ASEC values with original Research dataset for inc_level " `inc_l
> evel' " ($`lower_bound'-`upper_bound') and year `y'."
  = di "Merged ASEC values with original Research dataset for inc_level " 2 " ($
> 15000-25000) and year 2019."
Merged ASEC values with original Research dataset for inc_level 2 ($15000-25000)
>  and year 2019.
  - tempfile temp_`inc_level'_`y'
  = tempfile temp_2_2019
  - save `temp_`inc_level'_`y'', replace
  = save /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.000007, repla
> ce
(note: file /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.000007 not
>  found)
file /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.000007 saved
  - di "Saved REDI data (with continuous data) for inc_level " `inc_level' " ($`
> lower_bound'-`upper_bound') and year `y' in file"
  = di "Saved REDI data (with continuous data) for inc_level " 2 " ($15000-25000
> ) and year 2019 in file"
Saved REDI data (with continuous data) for inc_level 2 ($15000-25000) and year 2
> 019 in file
  - }
  - use `working_regex', clear
  = use /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.000003, clear
(Streamlined ACS data, 2019)
  - keep if `inc_cat_var' == `inc_level'
  = keep if acs_hhinc == 3
(290,380 observations deleted)
  - di "The current inc_level is: " `inc_level'
  = di "The current inc_level is: " 3
The current inc_level is: 3
  - if regexm(inc_decoded, "^[a-z/A-Z]+") == 1 {
    di "The inc_level " `inc_level' " is at the lowest end of the " "original Re
> search dataset income range"
    destring inc_decoded, ignore("Less than LESS THAN Under,$ ") generate(`inc_c
> at_var'_ub)
    gen `inc_cat_var'_lb = -100000
    di "Lower bound of -100,000 created for inc_level " `inc_level'
    }
  - else if regexm(inc_decoded, "[a-z/A-Z]+$") == 1 {
    di "The inc_level " `inc_level' " is at the highest end of the " "original R
> esearch dataset income range"
    destring inc_decoded, ignore("and over or over,$ or more OR MORE") generate(
> `inc_cat_var'_lb)
    gen `inc_cat_var'_ub = 999999
    di "Upper bound of 999999 created for inc_level " `inc_level'
    }
  - else if regexm(inc_decoded, "[.][a-z]") == 1 {
    di "The inc_level " `inc_level' " is all missing"
    gen `inc_cat_var'_lb = .
    gen `inc_cat_var'_ub = .
    di "Lower and upper bound of . created for inc_level " `inc_level'
    }
  - else if regexm(inc_decoded, "[0-9]+$") == 1 {
  - di "The inc_level " `inc_level' " has a lower and an upper level"
  = di "The inc_level " 3 " has a lower and an upper level"
The inc_level 3 has a lower and an upper level
  - split inc_decoded, parse("-" "to" "-" "to under" "to less than" "UP TO" "but
>  less than") ignore(" ,$") destring
    ------------------------------------------------------------ begin split ---
    - version 8
    - syntax varname(str) [if] [in] [, Generate(str) noTrim Parse(str asis) DEST
> RING force float Ignore(string asis) percent Limit(numlist int >0 max=1) ]
    - local verpre : display "version " %4.1f _caller() ":"
    - if "`destring'"=="" {
    = if "destring"=="" {
      foreach option in force float ignore percent {
      if `"``option''"'!="" {
      display as error "may not specify `option' without specifying destring"
      exit 198
      }
      }
      }
    - else {
    - if `"`ignore'"'!="" {
    = if `"" ,$""'!="" {
    - if _caller() >= 14 {
    - if ustrfindfirst(`"`ignore'"',",") & !ustrfindfirst(`"`ignore'"',`"""') {
    = if ustrfindfirst(`"" ,$""',",") & !ustrfindfirst(`"" ,$""',`"""') {
      display as error `"ignore string must be enclosed with quotes to ignore co
> mmas or use options"'
      exit 198
      }
    - }
    - `verpre' _parse_ignore `ignore'
    = version 16.0: _parse_ignore " ,$"
      -------------------------------------------------- begin _parse_ignore ---
      - version 14
      - sreturn clear
      - if _caller() < 14 {
        capture syntax [anything] , [ASChars] [ASBytes] [illegal]
        if !_rc {
        if "`aschars'`asbytes'`illegal'"!="" {
        display as error "may not specify options in the ignore option for Stata
>  version less than 14"
        exit 198
        }
        }
        sreturn local aschars 0
        sreturn local illegal 0
        }
      - else {
      - syntax [anything] , [ASChars] [ASBytes] [illegal]
      - if "`asbytes'"!="" {
      = if ""!="" {
        if "`aschars'"!="" {
        display as error "may specify only one of the ignore options aschars and
>  asbytes"
        exit 198
        }
        if "`illegal'"!="" {
        display as error "may not specify the ignore option illegal when specify
> ing asbytes"
        exit 198
        }
        }
      - if "`asbytes'"=="" {
      = if ""=="" {
      - if ustrinvalidcnt(`"`anything'"') {
      = if ustrinvalidcnt(`"" ,$""') {
        display as error "invalid Unicode characters may not be ignored when rem
> oving aschars"
        exit 198
        }
      - }
      - sreturn local aschars = "`asbytes'"==""
      = sreturn local aschars = ""==""
      - sreturn local illegal = "`illegal'"!=""
      = sreturn local illegal = ""!=""
      - capture sreturn local ignore `anything'
      = capture sreturn local ignore " ,$"
      - if _rc {
        sreturn local ignore `"`anything'"'
        }
      - }
      ---------------------------------------------------- end _parse_ignore ---
    - }
    - }
    - marksample touse, strok
    - qui count if `touse'
    = qui count if __000000
    - if r(N) == 0 {
      error 2000
      }
    - if `"`parse'"' == `""' | `"`parse'"' == `""""' {
    = if `""-" "to" "-" "to under" "to less than" "UP TO" "but less than""' == `
> ""' | `""-" "to" "-" "to under" "to less than" "UP TO" "but less than""' == `"
> """' {
      if "`trim'" != "" {
      di as err "parsing on spaces incompatible with notrim"
      exit 198
      }
      local parse `"" ""'
      local trm "trim"
      }
    - if `"`parse'"' == `""' | `"`parse'"' == `""""' {
    = if `""-" "to" "-" "to under" "to less than" "UP TO" "but less than""' == `
> ""' | `""-" "to" "-" "to under" "to less than" "UP TO" "but less than""' == `"
> """' {
      local parse `"" ""'
      local trm "trim"
      }
    - local nparse : word count `parse'
    = local nparse : word count "-" "to" "-" "to under" "to less than" "UP TO" "
> but less than"
    - tokenize `"`parse'"'
    = tokenize `""-" "to" "-" "to under" "to less than" "UP TO" "but less than""
> '
    - if `"`generate'"' != "" {
    = if `""' != "" {
      confirm name `generate'
      if `: word count `generate'' > 1 {
      di as err "invalid stub `generate'"
      exit 198
      }
      }
    - qui {
    - tempvar vw tp mp pl
    - gen int `tp' = 0
    = gen int __000002 = 0
    - gen int `mp' = 0
    = gen int __000003 = 0
    - gen int `pl' = 0
    = gen int __000004 = 0
    - gen str1 `vw' = ""
    = gen str1 __000001 = ""
    - if "`trim'" == "" {
    = if "" == "" {
    - replace `vw' = trim(`varlist') if `touse'
    = replace __000001 = trim(inc_decoded) if __000000
    - }
    - else {
      replace `vw' = `varlist' if `touse'
      }
    - }
    - if "`generate'" == "" {
    = if "" == "" {
    - local generate "`varlist'"
    = local generate "inc_decoded"
    - }
    - local j = 0
    - local go = 1
    - if "`limit'" == "" {
    = if "" == "" {
    - local limit .
    - }
    - qui while `go' & `j' < `limit' {
    = qui while 1 & 0 < . {
    - replace `mp' = .
    = replace __000003 = .
    - replace `pl' = 0
    = replace __000004 = 0
    - forval i = 1 / `nparse' {
    = forval i = 1 / 7 {
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"-"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"-"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"to"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"to"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"-"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"-"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"to under"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"to under"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"to less than"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"to less than"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"UP TO"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"UP TO"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"but less than"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"but less than"') if __000003 == __000002
    - }
    - local ++j
    - tempvar part`j'
    = tempvar part1
    - gen str1 `part`j'' = ""
    = gen str1 __000005 = ""
    - replace `part`j'' = substr(`vw', 1, `mp'-1) if `mp' < .
    = replace __000005 = substr(__000001, 1, __000003-1) if __000003 < .
    - replace `vw' = `trm'(substr(`vw', `mp'+`pl', .)) if `mp' < .
    = replace __000001 = (substr(__000001, __000003+__000004, .)) if __000003 < 
> .
    - replace `part`j'' = `vw' if `mp' >= .
    = replace __000005 = __000001 if __000003 >= .
    - replace `vw' = "" if `mp' >= .
    = replace __000001 = "" if __000003 >= .
    - local newvars "`newvars'`generate'`j' "
    = local newvars "inc_decoded1 "
    - capture assert `vw' == ""
    = capture assert __000001 == ""
    - local go = _rc
    - }
    - qui while `go' & `j' < `limit' {
    = qui while 9 & 1 < . {
    - replace `mp' = .
    = replace __000003 = .
    - replace `pl' = 0
    = replace __000004 = 0
    - forval i = 1 / `nparse' {
    = forval i = 1 / 7 {
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"-"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"-"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"to"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"to"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"-"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"-"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"to under"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"to under"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"to less than"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"to less than"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"UP TO"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"UP TO"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"but less than"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"but less than"') if __000003 == __000002
    - }
    - local ++j
    - tempvar part`j'
    = tempvar part2
    - gen str1 `part`j'' = ""
    = gen str1 __000006 = ""
    - replace `part`j'' = substr(`vw', 1, `mp'-1) if `mp' < .
    = replace __000006 = substr(__000001, 1, __000003-1) if __000003 < .
    - replace `vw' = `trm'(substr(`vw', `mp'+`pl', .)) if `mp' < .
    = replace __000001 = (substr(__000001, __000003+__000004, .)) if __000003 < 
> .
    - replace `part`j'' = `vw' if `mp' >= .
    = replace __000006 = __000001 if __000003 >= .
    - replace `vw' = "" if `mp' >= .
    = replace __000001 = "" if __000003 >= .
    - local newvars "`newvars'`generate'`j' "
    = local newvars "inc_decoded1 inc_decoded2 "
    - capture assert `vw' == ""
    = capture assert __000001 == ""
    - local go = _rc
    - }
    - qui while `go' & `j' < `limit' {
    = qui while 0 & 2 < . {
      replace `mp' = .
      replace `pl' = 0
      forval i = 1 / `nparse' {
      replace `tp' = index(`vw', `"``i''"')
      replace `mp' = min(`tp', `mp') if `tp'
      replace `pl' = length(`"``i''"') if `mp' == `tp'
      }
      local ++j
      tempvar part`j'
      gen str1 `part`j'' = ""
      replace `part`j'' = substr(`vw', 1, `mp'-1) if `mp' < .
      replace `vw' = `trm'(substr(`vw', `mp'+`pl', .)) if `mp' < .
      replace `part`j'' = `vw' if `mp' >= .
      replace `vw' = "" if `mp' >= .
      local newvars "`newvars'`generate'`j' "
      capture assert `vw' == ""
      local go = _rc
      }
    - capture confirm new var `newvars'
    = capture confirm new var inc_decoded1 inc_decoded2 
    - if _rc {
      di as err "cannot generate new variables using stub `generate'"
      exit _rc
      }
    - qui forval i = 1 / `j' {
    = qui forval i = 1 / 2 {
    - gen str1 `generate'`i' = ""
    = gen str1 inc_decoded1 = ""
    - replace `generate'`i' = `part`i''
    = replace inc_decoded1 = __000005
    - }
    - gen str1 `generate'`i' = ""
    = gen str1 inc_decoded2 = ""
    - replace `generate'`i' = `part`i''
    = replace inc_decoded2 = __000006
    - }
    - return local varlist "`newvars'"
    = return local varlist "inc_decoded1 inc_decoded2 "
    - return local nvars "`j'"
    = return local nvars "2"
    - local s = cond(`j' > 1, "s", "")
    = local s = cond(2 > 1, "s", "")
    - if "`destring'" != "" {
    = if "destring" != "" {
    - di as res "variable`s' born as string: "
    = di as res "variables born as string: "
variables born as string: 
    - }
    - else di as res "variable`s' created as string: "
    = else di as res "variables created as string: "
    - ds `newvars'
    = ds inc_decoded1 inc_decoded2 
      ------------------------------------------------------------- begin ds ---
      - version 9
      - local version : di "version " string(_caller()) ":"
      - if (_caller() <= 4) {
        `version' describe, simple
        exit
        }
      - else {
      - ds_util `0'
      = ds_util inc_decoded1 inc_decoded2 
        ------------------------------------------------------ begin ds_util ---
        - version 8
        - syntax [varlist] [, HAS(str asis) NOT(str asis) NOT2 INSEnsitive Detai
> l Alpha Varwidth(int 12) Skip(int 2) INDENT(int 0)]
        - if "`varlist'" == "" {
        = if "inc_decoded1 inc_decoded2" == "" {
          exit
          }
        - if !inrange(`indent',0,244) {
        = if !inrange(0,0,244) {
          di as err "indent() should be in the range 0..244"
          exit 198
          }
        - if !inrange(`varwidth',5,32) {
        = if !inrange(12,5,32) {
          di as err "varwidth() should be in the range 5..32"
          exit 198
          }
        - if !inrange(`skip',1,10) {
        = if !inrange(2,1,10) {
          di as err "skip() should be in the range 1..10"
          exit 198
          }
        - local nopts = (`"`has'"' != "") + (`"`not'"' != "") + ("`not2'" != "")
        = local nopts = (`""' != "") + (`""' != "") + ("" != "")
        - if `nopts' == 3 {
        = if 0 == 3 {
          di as err "may not combine options has(), not(), and not"
          exit 198
          }
        - else if `nopts' == 2 {
        = else if 0 == 2 {
          if (`"`has'"' == "") {
          di as err "may not combine options not() and not"
          exit 198
          }
          else if (`"`not'"' == "") {
          di as err "may not combine options has() and not"
          exit 198
          }
          else if (`"`not2'"' == "") {
          di as err "may not combine options has() and not()"
          exit 198
          }
          }
        - if `"`not'"' != "" {
        = if `""' != "" {
          local has `"`not'"'
          local opt "not"
          }
        - else if `"`has'"' != "" {
        = else if `""' != "" {
          local opt "has"
          }
        - local inse = "`insensitive'" != ""
        = local inse = "" != ""
        - if `"`has'"' != "" {
        = if `""' != "" {
          CheckHas `"`has'"' "`opt'" "`inse'"
          if "`what'" == "varl" | "`what'" == "vall" {
          VarlVall "`what'" `"`which'"' "`varlist'" "`inse'"
          }
          else if "`what'" == "f" {
          Format `"`which'"' "`varlist'" "`inse'"
          }
          else if "`what'" == "c" {
          Char `"`which'"' "`varlist'" "`inse'"
          }
          else if "`what'" == "t" {
          Type `"`which'"' "`varlist'"
          }
          if `"`not'"' != "" {
          local varlist : list varlist - vlist
          }
          else if `"`has'"' != "" {
          local varlist "`vlist'"
          }
          }
        - if `"`not2'"' != "" {
        = if `""' != "" {
          unab all : *
          local varlist : list all - varlist
          }
        - if "`varlist'" == "" {
        = if "inc_decoded1 inc_decoded2" == "" {
          exit
          }
        - if "`alpha'" != "" {
        = if "" != "" {
          local varlist : list sort varlist
          }
        - if "`detail'" != "" {
        = if "" != "" {
          describe `varlist'
          }
        - else {
        - local nvar : word count `varlist'
        = local nvar : word count inc_decoded1 inc_decoded2
        - local ncol = int((`:set linesize' + `skip') / (`varwidth' + `skip'))
        = local ncol = int((80 + 2) / (12 + 2))
        - local i 0
        - local vlist
        - foreach v of local varlist {
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" inc_decoded1"'
        - }
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" inc_decoded1 inc_decoded2"'
        - }
        - DisplayInCols txt `indent' `skip' 0 `vlist'
        = DisplayInCols txt 0 2 0  inc_decoded1 inc_decoded2
          -------------------------------------- begin ds_util.DisplayInCols ---
          - gettoken sty 0 : 0
          - gettoken indent 0 : 0
          - gettoken pad 0 : 0
          - gettoken wid 0 : 0
          - local indent = cond(`indent'==. | `indent'<0, 0, `indent')
          = local indent = cond(0==. | 0<0, 0, 0)
          - local pad = cond(`pad'==. | `pad'<1, 2, `pad')
          = local pad = cond(2==. | 2<1, 2, 2)
          - local wid = cond(`wid'==. | `wid'<0, 0, `wid')
          = local wid = cond(0==. | 0<0, 0, 0)
          - local n : list sizeof 0
          - if `n'==0 {
          = if 2==0 {
            exit
            }
          - foreach x of local 0 {
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(0, length(`"inc_decoded1"'))
          - }
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"inc_decoded2"'))
          - }
          - local wid = `wid' + `pad'
          = local wid = 12 + 2
          - local cols = int((`c(linesize)'+1-`indent')/`wid')
          = local cols = int((80+1-0)/14)
          - if `cols' < 2 {
          = if 5 < 2 {
            if `indent' {
            local col "_column(`=`indent'+1')"
            }
            foreach x of local 0 {
            di as `sty' `col' `"`x'"'
            }
            exit
            }
          - local lines = `n'/`cols'
          = local lines = 2/5
          - local lines = int(cond(`lines'>int(`lines'), `lines'+1, `lines'))
          = local lines = int(cond(.4>int(.4), .4+1, .4))
          - forvalues i=1(1)`lines' {
          = forvalues i=1(1)1 {
          - local top = min((`cols')*`lines'+`i', `n')
          = local top = min((5)*1+1, 2)
          - local col = `indent' + 1
          = local col = 0 + 1
          - forvalues j=`i'(`lines')`top' {
          = forvalues j=1(1)2 {
          - local x : word `j' of `0'
          = local x : word 1 of   inc_decoded1 inc_decoded2
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(1) "inc_decoded1" _c
inc_decoded1          - local col = `col' + `wid'
          = local col = 1 + 14
          - }
          - local x : word `j' of `0'
          = local x : word 2 of   inc_decoded1 inc_decoded2
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(15) "inc_decoded2" _c
              inc_decoded2          - local col = `col' + `wid'
          = local col = 15 + 14
          - }
          - di as `sty'
          = di as txt

          - }
          ---------------------------------------- end ds_util.DisplayInCols ---
        - }
        - return local varlist `varlist'
        = return local varlist inc_decoded1 inc_decoded2
        -------------------------------------------------------- end ds_util ---
      - exit
      --------------------------------------------------------------- end ds ---
    - if "`destring'" != "" {
    = if "destring" != "" {
    - if `"`ignore'"' != "" {
    = if `"" ,$""' != "" {
    - local ignore `"ignore(`ignore')"'
    = local ignore `"ignore(" ,$")"'
    - }
    - `verpre' destring `newvars', replace `force' `float' `ignore' `percent'
    = version 16.0: destring inc_decoded1 inc_decoded2 , replace   ignore(" ,$")
>  
      ------------------------------------------------------- begin destring ---
      - version 14
      - local cmdargs = `"`0'"'
      = local cmdargs = `"inc_decoded1 inc_decoded2 , replace   ignore(" ,$") "'
      - local verpre : display "version " %4.1f _caller() ":"
      - syntax [varlist], [Generate(string) replace] [force] [float] [Ignore(str
> ing asis)] [percent] [dpcomma]
      - if _caller() >= 14 {
      - if ustrpos(`"`ignore'"',",") & !ustrpos(`"`ignore'"',`"""') {
      = if ustrpos(`"" ,$""',",") & !ustrpos(`"" ,$""',`"""') {
        display as error `"ignore string must be enclosed with quotes to ignore 
> commas or use options"'
        exit 198
        }
      - }
      - `verpre' _parse_ignore `ignore'
      = version 16.0: _parse_ignore " ,$"
        ------------------------------------------------ begin _parse_ignore ---
        - version 14
        - sreturn clear
        - if _caller() < 14 {
          capture syntax [anything] , [ASChars] [ASBytes] [illegal]
          if !_rc {
          if "`aschars'`asbytes'`illegal'"!="" {
          display as error "may not specify options in the ignore option for Sta
> ta version less than 14"
          exit 198
          }
          }
          sreturn local aschars 0
          sreturn local illegal 0
          }
        - else {
        - syntax [anything] , [ASChars] [ASBytes] [illegal]
        - if "`asbytes'"!="" {
        = if ""!="" {
          if "`aschars'"!="" {
          display as error "may specify only one of the ignore options aschars a
> nd asbytes"
          exit 198
          }
          if "`illegal'"!="" {
          display as error "may not specify the ignore option illegal when speci
> fying asbytes"
          exit 198
          }
          }
        - if "`asbytes'"=="" {
        = if ""=="" {
        - if ustrinvalidcnt(`"`anything'"') {
        = if ustrinvalidcnt(`"" ,$""') {
          display as error "invalid Unicode characters may not be ignored when r
> emoving aschars"
          exit 198
          }
        - }
        - sreturn local aschars = "`asbytes'"==""
        = sreturn local aschars = ""==""
        - sreturn local illegal = "`illegal'"!=""
        = sreturn local illegal = ""!=""
        - capture sreturn local ignore `anything'
        = capture sreturn local ignore " ,$"
        - if _rc {
          sreturn local ignore `"`anything'"'
          }
        - }
        -------------------------------------------------- end _parse_ignore ---
      - if _caller() < 14 {
        local aschars 0
        syntax [varlist], [Generate(string) replace] [force] [float] [Ignore(str
> ing)] [percent] [dpcomma]
        }
      - else {
      - if `"`s(ignore)'"'!="" {
      = if `" ,$"'!="" {
      - local ignore `"`s(ignore)'"'
      = local ignore `" ,$"'
      - }
      - local aschars `s(aschars)'
      = local aschars 1
      - if `s(illegal)' {
      = if 0 {
        local illegal = ustrunescape("\ufffd")
        }
      - }
      - if "`percent'" == "percent" {
      = if "" == "percent" {
        if !ustrpos(`"`ignore'"', "%") {
        local ignore `"`ignore'%"'
        }
        }
      - if "`illegal'"!="" {
      = if ""!="" {
        local ignore `"`ignore'`illegal'"'
        }
      - if `"`float'"'!="" {
      = if `""'!="" {
        local gtype "float"
        }
      - else {
      - local gtype "double"
      - }
      - if "`generate'" != "" & "`replace'" != "" {
      = if "" != "" & "replace" != "" {
        di as err "options generate and replace are mutually exclusive"
        exit 198
        }
      - if "`generate'" == "" & "`replace'" == "" {
      = if "" == "" & "replace" == "" {
        di as err "must specify either generate or replace option"
        exit 198
        }
      - if "`generate'" != "" {
      = if "" != "" {
        local ct1: word count `varlist'
        local save "`varlist'"
        local 0 "`generate'"
        capture syntax newvarlist
        if _rc {
        di as err "generate() contains existing variable(s) and/or illegal varia
> ble name(s)"
        exit _rc
        }
        local generate "`varlist'"
        local varlist "`save'"
        local ct2: word count `generate'
        if `ct1' != `ct2' {
        di as err "number of variables in varlist must equal"
        di as err "number of variables in generate(newvarlist)"
        exit 198
        }
        }
      - local m 1
      - if `"`ignore'"' == "" {
      = if `" ,$"' == "" {
        local ignore ""
        }
      - if `aschars' {
      = if 1 {
      - local l = ustrlen(`"`ignore'"')
      = local l = ustrlen(`" ,$"')
      - }
      - else {
        local l = length(`"`ignore'"')
        }
      - while `m' <= `l' {
      = while 1 <= 3 {
      - if `aschars' {
      = if 1 {
      - local char`m' = usubstr(`"`ignore'"', `m', 1)
      = local char1 = usubstr(`" ,$"', 1, 1)
      - }
      - else {
        local char`m' = substr(`"`ignore'"', `m', 1)
        }
      - local m = `m' + 1
      = local m = 1 + 1
      - }
      - while `m' <= `l' {
      = while 2 <= 3 {
      - if `aschars' {
      = if 1 {
      - local char`m' = usubstr(`"`ignore'"', `m', 1)
      = local char2 = usubstr(`" ,$"', 2, 1)
      - }
      - else {
        local char`m' = substr(`"`ignore'"', `m', 1)
        }
      - local m = `m' + 1
      = local m = 2 + 1
      - }
      - while `m' <= `l' {
      = while 3 <= 3 {
      - if `aschars' {
      = if 1 {
      - local char`m' = usubstr(`"`ignore'"', `m', 1)
      = local char3 = usubstr(`" ,$"', 3, 1)
      - }
      - else {
        local char`m' = substr(`"`ignore'"', `m', 1)
        }
      - local m = `m' + 1
      = local m = 3 + 1
      - }
      - while `m' <= `l' {
      = while 4 <= 3 {
        if `aschars' {
        local char`m' = usubstr(`"`ignore'"', `m', 1)
        }
        else {
        local char`m' = substr(`"`ignore'"', `m', 1)
        }
        local m = `m' + 1
        }
      - if `aschars' {
      = if 1 {
      - local aswhat "character"
      - }
      - else {
        local aswhat "byte"
        }
      - if "`generate'"!="" {
      = if ""!="" {
        local genrep "generate"
        }
      - else {
      - local genrep "replace"
      - }
      - local tvars OLDVAR NEWVAR ismissing found topct
      - tempvar `tvars'
      = tempvar OLDVAR NEWVAR ismissing found topct
      - local varno 0
      - foreach var of varlist `varlist' {
      = foreach var of varlist inc_decoded1 inc_decoded2 {
      - local varno = `varno' + 1
      = local varno = 0 + 1
      - if "`generate'"!="" {
      = if ""!="" {
        local finalvarname : word `varno' of `generate'
        local finalprint "`finalvarname' "
        }
      - else {
      - local finalvarname "`var'"
      = local finalvarname "inc_decoded1"
      - local finalprint ""
      - }
      - capture confirm string variable `var'
      = capture confirm string variable inc_decoded1
      - if _rc != 0 {
        di as txt "`var' already numeric; no " as res "`genrep'"
        }
      - else {
      - qui gen `OLDVAR' = `var'
      = qui gen __000007 = inc_decoded1
      - local jj 1
      - local b
      - local bcnt = 0
      - local c
      - local makepct
      - while `"`char`jj''"' != "" {
      = while `" "' != "" {
      - capture drop `found'
      = capture drop __00000A
      - capture drop `topct'
      = capture drop __00000B
      - local t `"`char`jj''"'
      = local t `" "'
      - if `aschars' {
      = if 1 {
      - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
      = qui gen byte __00000A = ustrpos(__000007, `" "') != 0
      - }
      - else {
        qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
        }
      - qui summarize `found', meanonly
      = qui summarize __00000A, meanonly
      - if r(sum) > 0 {
      - if `"`t'"'=="`illegal'" {
      = if `" "'=="" {
        local b `"`b' illegal Unicode"'
        }
      - else if `"`t'"' == " " {
      = else if `" "' == " " {
      - local b `"`b' space"'
      = local b `" space"'
      - }
      - else {
        local b `"`b' `t'"'
        }
      - local ++bcnt
      - }
      - if `aschars' {
      = if 1 {
      - if `"`t'"'=="%" {
      = if `" "'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if ustrpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
      - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
      = qui replace __000007 = usubinstr(__000007, `" "', "", .)
      - }
      - else {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if strpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
        }
      - local jj = `jj' + 1
      = local jj = 1 + 1
      - }
      - while `"`char`jj''"' != "" {
      = while `","' != "" {
      - capture drop `found'
      = capture drop __00000A
      - capture drop `topct'
      = capture drop __00000B
      - local t `"`char`jj''"'
      = local t `","'
      - if `aschars' {
      = if 1 {
      - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
      = qui gen byte __00000A = ustrpos(__000007, `","') != 0
      - }
      - else {
        qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
        }
      - qui summarize `found', meanonly
      = qui summarize __00000A, meanonly
      - if r(sum) > 0 {
        if `"`t'"'=="`illegal'" {
        local b `"`b' illegal Unicode"'
        }
        else if `"`t'"' == " " {
        local b `"`b' space"'
        }
        else {
        local b `"`b' `t'"'
        }
        local ++bcnt
        }
      - if `aschars' {
      = if 1 {
      - if `"`t'"'=="%" {
      = if `","'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if ustrpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
      - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
      = qui replace __000007 = usubinstr(__000007, `","', "", .)
      - }
      - else {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if strpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
        }
      - local jj = `jj' + 1
      = local jj = 2 + 1
      - }
      - while `"`char`jj''"' != "" {
      = while `"$"' != "" {
      - capture drop `found'
      = capture drop __00000A
      - capture drop `topct'
      = capture drop __00000B
      - local t `"`char`jj''"'
      = local t `"$"'
      - if `aschars' {
      = if 1 {
      - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
      = qui gen byte __00000A = ustrpos(__000007, `"$"') != 0
      - }
      - else {
        qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
        }
      - qui summarize `found', meanonly
      = qui summarize __00000A, meanonly
      - if r(sum) > 0 {
        if `"`t'"'=="`illegal'" {
        local b `"`b' illegal Unicode"'
        }
        else if `"`t'"' == " " {
        local b `"`b' space"'
        }
        else {
        local b `"`b' `t'"'
        }
        local ++bcnt
        }
      - if `aschars' {
      = if 1 {
      - if `"`t'"'=="%" {
      = if `"$"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if ustrpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
      - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
      = qui replace __000007 = usubinstr(__000007, `"$"', "", .)
      - }
      - else {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if strpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
        }
      - local jj = `jj' + 1
      = local jj = 3 + 1
      - }
      - while `"`char`jj''"' != "" {
      = while `""' != "" {
        capture drop `found'
        capture drop `topct'
        local t `"`char`jj''"'
        if `aschars' {
        qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
        }
        else {
        qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
        }
        qui summarize `found', meanonly
        if r(sum) > 0 {
        if `"`t'"'=="`illegal'" {
        local b `"`b' illegal Unicode"'
        }
        else if `"`t'"' == " " {
        local b `"`b' space"'
        }
        else {
        local b `"`b' `t'"'
        }
        local ++bcnt
        }
        if `aschars' {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if ustrpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
        }
        else {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if strpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
        }
        local jj = `jj' + 1
        }
      - if _caller() >= 14 {
      - qui replace `OLDVAR' = ustrtrim(`OLDVAR')
      = qui replace __000007 = ustrtrim(__000007)
      - }
      - else {
        qui replace `OLDVAR' = strtrim(`OLDVAR')
        }
      - quietly gen byte `ismissing' = `OLDVAR'=="" | `OLDVAR'=="." | (strlen(`O
> LDVAR')==2 & inrange(`OLDVAR',".a",".z"))
      = quietly gen byte __000009 = __000007=="" | __000007=="." | (strlen(__000
> 007)==2 & inrange(__000007,".a",".z"))
      - if ("`dpcomma'" != "") {
      = if ("" != "") {
        qui replace `OLDVAR' = subinstr(`OLDVAR',".","X",.) if !`ismissing'
        qui replace `OLDVAR' = subinstr(`OLDVAR', ",", ".", 1) if !ustrregexm(`O
> LDVAR',"(,[a-z])|(^,$)")
        }
      - if _caller() >= 14 {
      - qui replace `OLDVAR' = ustrregexrf(`OLDVAR',"^0+","0")
      = qui replace __000007 = ustrregexrf(__000007,"^0+","0")
      - }
      - else {
        qui replace `OLDVAR' = regexr(`OLDVAR',"^0+","0")
        }
      - qui gen `gtype' `NEWVAR' = real(`OLDVAR')
      = qui gen double __000008 = real(__000007)
      - qui summarize `ismissing', meanonly
      = qui summarize __000009, meanonly
      - local oldmiss = r(sum)
      - qui count if missing(`NEWVAR')
      = qui count if missing(__000008)
      - local newmiss = r(N)
      - local flag = `oldmiss'!=`newmiss'
      = local flag = 0!=0
      - if `flag' & ("`force'" == "") {
      = if 0 & ("" == "") {
        if `"`ignore'"' != "" {
        di as txt "`var': contains " "`aswhat's not specified in " as res "ignor
> e()" as txt "; no " as res "`genrep'"
        }
        else {
        di as txt "`var': contains " "nonnumeric `aswhat's; no " as res "`genrep
> '"
        }
        }
      - else {
      - order `NEWVAR', after(`var')
      = order __000008, after(inc_decoded1)
        -------------------------------------------------------- begin order ---
        - version 11
        - if (_caller()<11) {
          _order `macval(0)'
          exit
          }
        - syntax varlist[, Before(varname) After(varname) first last SEQuential 
> ALPHAbetic]
        - if (`"`before'"' == "" & `"`after'"' == "" & "`first'" == "" & "`last'
> " == "" & "`alphabetic'" == "" & "`sequential'" == "") {
        = if (`""' == "" & `"inc_decoded1"' == "" & "" == "" & "" == "" & "" == 
> "" & "" == "") {
          _order `macval(0)'
          exit
          }
        - if (`"`before'"' != "" & `"`after'"' != "") {
        = if (`""' != "" & `"inc_decoded1"' != "") {
          dis as error "before() may not be combined with after()"
          exit 198
          }
        - if (`"`before'"' != "" & `"`first'"' != "") {
        = if (`""' != "" & `""' != "") {
          dis as error "before() may not be combined with first()"
          exit 198
          }
        - if (`"`before'"' != "" & `"`last'"' != "") {
        = if (`""' != "" & `""' != "") {
          dis as error "before() may not be combined with last()"
          exit 198
          }
        - if (`"`after'"' != "" & `"`before'"' != "") {
        = if (`"inc_decoded1"' != "" & `""' != "") {
          dis as error "after() may not be combined with before()"
          exit 198
          }
        - if (`"`after'"' != "" & `"`first'"' != "") {
        = if (`"inc_decoded1"' != "" & `""' != "") {
          dis as error "after() may not be combined with first()"
          exit 198
          }
        - if (`"`after'"' != "" & `"`last'"' != "") {
        = if (`"inc_decoded1"' != "" & `""' != "") {
          dis as error "after() may not be combined with last()"
          exit 198
          }
        - if ("`first'" != "" & "`last'" != "") {
        = if ("" != "" & "" != "") {
          dis as error "first may not be combined with last"
          exit 198
          }
        - if ("`sequential'" != "" & "`alphabetic'" != "") {
        = if ("" != "" & "" != "") {
          dis as error "sequential may not be combined with alphabetic"
          exit 198
          }
        - if ("`first'" != "") {
        = if ("" != "") {
          if "`alphabetic'" != "" {
          local varlist : list sort varlist
          }
          if "`sequential'" != "" {
          aorder `varlist'
          }
          else {
          _order `varlist'
          }
          }
        - if ("`last'" != "") {
        = if ("" != "") {
          unab vlist : _all
          local list : list vlist - varlist
          if "`alphabetic'" != "" {
          local varlist : list sort varlist
          }
          if "`sequential'" != "" {
          preserve
          keep `varlist'
          aorder `varlist'
          unab varlist : _all
          restore
          }
          _order `list' `varlist'
          }
        - if (`"`before'"' != "") {
        = if (`""' != "") {
          local test : list before in varlist
          if `test' {
          dis as err "varname specified in before() may not" " be in varlist"
          exit 198
          }
          if "`alphabetic'" != "" {
          local varlist : list sort varlist
          }
          if "`sequential'" != "" {
          preserve
          keep `varlist'
          aorder `varlist'
          unab varlist : _all
          restore
          }
          unab vlist : _all
          local vlist : list vlist - varlist
          local var_num : list posof "`before'" in vlist
          local var_num = `var_num' - 1
          local fvar : word 1 of `vlist'
          capture local lvar : word `var_num' of `vlist'
          if _rc {
          _order `varlist'
          exit
          }
          unab nlist : `fvar'-`lvar'
          local nlist : list nlist - varlist
          _order `nlist' `varlist'
          }
        - if (`"`after'"' != "") {
        = if (`"inc_decoded1"' != "") {
        - local test : list after in varlist
        - if `test' {
        = if 0 {
          dis as err "varname specified in after() may not" " be in varlist"
          exit 198
          }
        - if "`alphabetic'" != "" {
        = if "" != "" {
          local varlist : list sort varlist
          }
        - if "`sequential'" != "" {
        = if "" != "" {
          preserve
          keep `varlist'
          aorder `varlist'
          unab varlist : _all
          restore
          }
        - unab vlist : _all
          ------------------------------------------------------- begin unab ---
          - version 6
          - gettoken user 0: 0, parse(" :")
          - gettoken colon 0: 0, parse(" :")
          - if `"`colon'"' != ":" { error 198 }
          = if `":"' != ":" { error 198 }
          - syntax [varlist(default=empty)] [, MIN(integer 1) MAX(integer 120000
> ) NAME(string)]
          - c_local `user' `varlist'
          = c_local vlist year hhwt repwt cluster adjust statefip strata hhincom
> e_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 repwt10 r
> epwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 repwt20
>  repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt29 repwt
> 30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repwt39 rep
> wt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 repwt49 r
> epwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 repwt59
>  repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt68 repwt
> 69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repwt78 rep
> wt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp5 repwt
> p6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14 repwtp
> 15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwtp23 rep
> wtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 repwtp32 
> repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40 repwtp
> 41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwtp49 rep
> wtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 repwtp58 
> repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66 repwtp
> 67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwtp75 rep
> wtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __000000 __
> 000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_decoded2 
> __000007 __00000A __000009 __000008
          - local n : word count `varlist'
          = local n : word count year hhwt repwt cluster adjust statefip strata 
> hhincome_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 re
> pwt10 repwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 
> repwt20 repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt2
> 9 repwt30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repw
> t39 repwt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 re
> pwt49 repwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 
> repwt59 repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt6
> 8 repwt69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repw
> t78 repwt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp
> 5 repwtp6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14
>  repwtp15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwt
> p23 repwtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 re
> pwtp32 repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40
>  repwtp41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwt
> p49 repwtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 re
> pwtp58 repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66
>  repwtp67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwt
> p75 repwtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __00
> 0000 __000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_de
> coded2 __000007 __00000A __000009 __000008
          - if `n'>=`min' & `n'<=`max' { exit }
          = if 187>=1 & 187<=120000 { exit }
          --------------------------------------------------------- end unab ---
        - local vlist : list vlist - varlist
        - local var_num : list posof "`after'" in vlist
        = local var_num : list posof "inc_decoded1" in vlist
        - local fvar : word 1 of `vlist'
        = local fvar : word 1 of year hhwt repwt cluster adjust statefip strata 
> hhincome_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 re
> pwt10 repwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 
> repwt20 repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt2
> 9 repwt30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repw
> t39 repwt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 re
> pwt49 repwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 
> repwt59 repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt6
> 8 repwt69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repw
> t78 repwt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp
> 5 repwtp6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14
>  repwtp15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwt
> p23 repwtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 re
> pwtp32 repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40
>  repwtp41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwt
> p49 repwtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 re
> pwtp58 repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66
>  repwtp67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwt
> p75 repwtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __00
> 0000 __000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_de
> coded2 __000007 __00000A __000009
        - local lvar : word `var_num' of `vlist'
        = local lvar : word 182 of year hhwt repwt cluster adjust statefip strat
> a hhincome_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 
> repwt10 repwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt1
> 9 repwt20 repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repw
> t29 repwt30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 re
> pwt39 repwt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 
> repwt49 repwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt5
> 8 repwt59 repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repw
> t68 repwt69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 re
> pwt78 repwt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repw
> tp5 repwtp6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp
> 14 repwtp15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 rep
> wtp23 repwtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 
> repwtp32 repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp
> 40 repwtp41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 rep
> wtp49 repwtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 
> repwtp58 repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp
> 66 repwtp67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 rep
> wtp75 repwtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __
> 000000 __000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_
> decoded2 __000007 __00000A __000009
        - unab nlist : `fvar'-`lvar'
        = unab nlist : year-inc_decoded1
          ------------------------------------------------------- begin unab ---
          - version 6
          - gettoken user 0: 0, parse(" :")
          - gettoken colon 0: 0, parse(" :")
          - if `"`colon'"' != ":" { error 198 }
          = if `":"' != ":" { error 198 }
          - syntax [varlist(default=empty)] [, MIN(integer 1) MAX(integer 120000
> ) NAME(string)]
          - c_local `user' `varlist'
          = c_local nlist year hhwt repwt cluster adjust statefip strata hhincom
> e_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 repwt10 r
> epwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 repwt20
>  repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt29 repwt
> 30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repwt39 rep
> wt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 repwt49 r
> epwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 repwt59
>  repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt68 repwt
> 69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repwt78 rep
> wt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp5 repwt
> p6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14 repwtp
> 15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwtp23 rep
> wtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 repwtp32 
> repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40 repwtp
> 41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwtp49 rep
> wtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 repwtp58 
> repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66 repwtp
> 67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwtp75 rep
> wtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __000000 __
> 000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1
          - local n : word count `varlist'
          = local n : word count year hhwt repwt cluster adjust statefip strata 
> hhincome_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 re
> pwt10 repwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 
> repwt20 repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt2
> 9 repwt30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repw
> t39 repwt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 re
> pwt49 repwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 
> repwt59 repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt6
> 8 repwt69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repw
> t78 repwt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp
> 5 repwtp6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14
>  repwtp15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwt
> p23 repwtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 re
> pwtp32 repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40
>  repwtp41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwt
> p49 repwtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 re
> pwtp58 repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66
>  repwtp67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwt
> p75 repwtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __00
> 0000 __000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1
          - if `n'>=`min' & `n'<=`max' { exit }
          = if 182>=1 & 182<=120000 { exit }
          --------------------------------------------------------- end unab ---
        - local nlist : list nlist - varlist
        - _order `nlist' `varlist'
        = _order year hhwt repwt cluster adjust statefip strata hhincome_acs rep
> wt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 repwt10 repwt11 re
> pwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 repwt20 repwt21 
> repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt29 repwt30 repwt3
> 1 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repwt39 repwt40 repw
> t41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 repwt49 repwt50 re
> pwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 repwt59 repwt60 
> repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt68 repwt69 repwt7
> 0 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repwt78 repwt79 repw
> t80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp5 repwtp6 repwtp
> 7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14 repwtp15 repwtp
> 16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwtp23 repwtp24 rep
> wtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 repwtp32 repwtp33 
> repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40 repwtp41 repwtp
> 42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwtp49 repwtp50 rep
> wtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 repwtp58 repwtp59 
> repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66 repwtp67 repwtp
> 68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwtp75 repwtp76 rep
> wtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __000000 __000002 __
> 000003 __000004 __000001 __000005 __000006 inc_decoded1 __000008
        - }
        - if ("`alphabetic'" != "" & `"`before'"' == "" & `"`after'"' == "" & "`
> first'" == "" & "`last'" == "") {
        = if ("" != "" & `""' == "" & `"inc_decoded1"' == "" & "" == "" & "" == 
> "") {
          local vlist : list sort varlist
          _order `vlist'
          }
        - if ("`sequential'" != "" & `"`before'"' == "" & `"`after'"' == "" & "`
> first'" == "" & "`last'" == "") {
        = if ("" != "" & `""' == "" & `"inc_decoded1"' == "" & "" == "" & "" == 
> "") {
          aorder `varlist'
          }
        ---------------------------------------------------------- end order ---
      - if `aschars' {
      = if 1 {
      - local dispb `"`b'"'
      = local dispb `" space"'
      - }
      - else {
        local dispb = printablebytes(`"`b'"')
        }
      - local c = plural(`bcnt',strproper("`aswhat'")) + " removed " + plural(`b
> cnt',"was","were") + `":`dispb'"'
      = local c = plural(1,strproper("character")) + " removed " + plural(1,"was
> ","were") + `": space"'
      - if "`makepct'" != "" {
      = if "" != "" {
        if `makepct' {
        qui replace `NEWVAR' = `NEWVAR'/100
        }
        }
      - qui compress `NEWVAR'
      = qui compress __000008
      - local type : type `NEWVAR'
      = local type : type __000008
      - if `flag' {
      = if 0 {
        di as txt "`var': contains nonnumeric `aswhat's" _continue
        if `"`ignore'"'!="" {
        display " not specified in " as result "ignore()" _continue
        }
        if `"`b'"'=="" {
        display "; `finalprint'" as res "`genrep'd " as txt "as " as res "`type'
> " _continue
        }
        display
        }
      - if `"`b'"' != "" {
      = if `" space"' != "" {
      - di as txt "`var': " plural(`bcnt',"`aswhat'") as res `"`dispb'"' as txt 
> " removed; `finalprint'" as res "`genrep'd " as txt "as " as res "`type'"
      = di as txt "inc_decoded1: " plural(1,"character") as res `" space"' as tx
> t " removed; " as res "replaced " as txt "as " as res "int"
inc_decoded1: character space removed; replaced as int
      - }
      - else if `"`b'"' == "" & !`flag' {
      = else if `" space"' == "" & !0 {
        di as txt "`var': all characters numeric; " "`finalprint'" as res "`genr
> ep'd " as txt "as " as res "`type'"
        }
      - if `newmiss' != 0 {
      = if 0 != 0 {
        di as txt "(`newmiss' missing " plural(`newmiss',"value") " generated)"
        }
      - label variable `NEWVAR' `"`: variable label `var''"'
      = label variable __000008 `""'
        -------------------------------------------------------- begin label ---
        - version 10.0
        - local vv : display "version " string(_caller()) ", missing:"
        - gettoken val : 0
        - if (strpos("`val'", "val") > 0 ) {
        = if (strpos("variable", "val") > 0 ) {
          gettoken val 0 : 0
          syntax anything [, nofix]
          if "`fix'" != "" {
          local fix ", nofix"
          }
          gettoken var rest : anything
          while `"`rest'"' != "" {
          gettoken lab rest : rest
          local label "`lab'"
          }
          local vlist : list anything - lab
          if "`lab'" == "." {
          local lab ""
          }
          foreach var of varlist `vlist' {
          `vv' _label `val' `var' `lab' `fix'
          }
          }
        - else {
        - `vv' _label `macval(0)'
        = version 14, missing: _label variable __000008 `""'
        - }
        ---------------------------------------------------------- end label ---
      - char `NEWVAR'[destring] `c'
      = char __000008[destring] Character removed was: space
      - char `NEWVAR'[destring_cmd] `"destring `cmdargs'"'
      = char __000008[destring_cmd] `"destring inc_decoded1 inc_decoded2 , repla
> ce   ignore(" ,$") "'
      - char `var'[destring]
      = char inc_decoded1[destring]
      - char `var'[destring_cmd]
      = char inc_decoded1[destring_cmd]
      - if "`genrep'"=="generate" {
      = if "replace"=="generate" {
        Charcopy `var' `NEWVAR'
        rename `NEWVAR' `: word `varno' of `generate''
        }
      - else {
      - char rename `var' `NEWVAR'
      = char rename inc_decoded1 __000008
      - drop `var'
      = drop inc_decoded1
      - rename `NEWVAR' `var'
      = rename __000008 inc_decoded1
        ------------------------------------------------------- begin rename ---
        - version 12
        - mata: rename_cmd("`3'")
        = mata: rename_cmd("")
        --------------------------------------------------------- end rename ---
      - }
      - }
      - foreach varmac of local tvars {
      - capture drop ``varmac''
      = capture drop __000007
      - }
      - capture drop ``varmac''
      = capture drop __000008
      - }
      - capture drop ``varmac''
      = capture drop __000009
      - }
      - capture drop ``varmac''
      = capture drop __00000A
      - }
      - capture drop ``varmac''
      = capture drop __00000B
      - }
      - }
      - }
      - local varno = `varno' + 1
      = local varno = 1 + 1
      - if "`generate'"!="" {
      = if ""!="" {
        local finalvarname : word `varno' of `generate'
        local finalprint "`finalvarname' "
        }
      - else {
      - local finalvarname "`var'"
      = local finalvarname "inc_decoded2"
      - local finalprint ""
      - }
      - capture confirm string variable `var'
      = capture confirm string variable inc_decoded2
      - if _rc != 0 {
        di as txt "`var' already numeric; no " as res "`genrep'"
        }
      - else {
      - qui gen `OLDVAR' = `var'
      = qui gen __000007 = inc_decoded2
      - local jj 1
      - local b
      - local bcnt = 0
      - local c
      - local makepct
      - while `"`char`jj''"' != "" {
      = while `" "' != "" {
      - capture drop `found'
      = capture drop __00000A
      - capture drop `topct'
      = capture drop __00000B
      - local t `"`char`jj''"'
      = local t `" "'
      - if `aschars' {
      = if 1 {
      - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
      = qui gen byte __00000A = ustrpos(__000007, `" "') != 0
      - }
      - else {
        qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
        }
      - qui summarize `found', meanonly
      = qui summarize __00000A, meanonly
      - if r(sum) > 0 {
      - if `"`t'"'=="`illegal'" {
      = if `" "'=="" {
        local b `"`b' illegal Unicode"'
        }
      - else if `"`t'"' == " " {
      = else if `" "' == " " {
      - local b `"`b' space"'
      = local b `" space"'
      - }
      - else {
        local b `"`b' `t'"'
        }
      - local ++bcnt
      - }
      - if `aschars' {
      = if 1 {
      - if `"`t'"'=="%" {
      = if `" "'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if ustrpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
      - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
      = qui replace __000007 = usubinstr(__000007, `" "', "", .)
      - }
      - else {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if strpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
        }
      - local jj = `jj' + 1
      = local jj = 1 + 1
      - }
      - while `"`char`jj''"' != "" {
      = while `","' != "" {
      - capture drop `found'
      = capture drop __00000A
      - capture drop `topct'
      = capture drop __00000B
      - local t `"`char`jj''"'
      = local t `","'
      - if `aschars' {
      = if 1 {
      - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
      = qui gen byte __00000A = ustrpos(__000007, `","') != 0
      - }
      - else {
        qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
        }
      - qui summarize `found', meanonly
      = qui summarize __00000A, meanonly
      - if r(sum) > 0 {
        if `"`t'"'=="`illegal'" {
        local b `"`b' illegal Unicode"'
        }
        else if `"`t'"' == " " {
        local b `"`b' space"'
        }
        else {
        local b `"`b' `t'"'
        }
        local ++bcnt
        }
      - if `aschars' {
      = if 1 {
      - if `"`t'"'=="%" {
      = if `","'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if ustrpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
      - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
      = qui replace __000007 = usubinstr(__000007, `","', "", .)
      - }
      - else {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if strpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
        }
      - local jj = `jj' + 1
      = local jj = 2 + 1
      - }
      - while `"`char`jj''"' != "" {
      = while `"$"' != "" {
      - capture drop `found'
      = capture drop __00000A
      - capture drop `topct'
      = capture drop __00000B
      - local t `"`char`jj''"'
      = local t `"$"'
      - if `aschars' {
      = if 1 {
      - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
      = qui gen byte __00000A = ustrpos(__000007, `"$"') != 0
      - }
      - else {
        qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
        }
      - qui summarize `found', meanonly
      = qui summarize __00000A, meanonly
      - if r(sum) > 0 {
        if `"`t'"'=="`illegal'" {
        local b `"`b' illegal Unicode"'
        }
        else if `"`t'"' == " " {
        local b `"`b' space"'
        }
        else {
        local b `"`b' `t'"'
        }
        local ++bcnt
        }
      - if `aschars' {
      = if 1 {
      - if `"`t'"'=="%" {
      = if `"$"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if ustrpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
      - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
      = qui replace __000007 = usubinstr(__000007, `"$"', "", .)
      - }
      - else {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if strpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
        }
      - local jj = `jj' + 1
      = local jj = 3 + 1
      - }
      - while `"`char`jj''"' != "" {
      = while `""' != "" {
        capture drop `found'
        capture drop `topct'
        local t `"`char`jj''"'
        if `aschars' {
        qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
        }
        else {
        qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
        }
        qui summarize `found', meanonly
        if r(sum) > 0 {
        if `"`t'"'=="`illegal'" {
        local b `"`b' illegal Unicode"'
        }
        else if `"`t'"' == " " {
        local b `"`b' space"'
        }
        else {
        local b `"`b' `t'"'
        }
        local ++bcnt
        }
        if `aschars' {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if ustrpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
        }
        else {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if strpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
        }
        local jj = `jj' + 1
        }
      - if _caller() >= 14 {
      - qui replace `OLDVAR' = ustrtrim(`OLDVAR')
      = qui replace __000007 = ustrtrim(__000007)
      - }
      - else {
        qui replace `OLDVAR' = strtrim(`OLDVAR')
        }
      - quietly gen byte `ismissing' = `OLDVAR'=="" | `OLDVAR'=="." | (strlen(`O
> LDVAR')==2 & inrange(`OLDVAR',".a",".z"))
      = quietly gen byte __000009 = __000007=="" | __000007=="." | (strlen(__000
> 007)==2 & inrange(__000007,".a",".z"))
      - if ("`dpcomma'" != "") {
      = if ("" != "") {
        qui replace `OLDVAR' = subinstr(`OLDVAR',".","X",.) if !`ismissing'
        qui replace `OLDVAR' = subinstr(`OLDVAR', ",", ".", 1) if !ustrregexm(`O
> LDVAR',"(,[a-z])|(^,$)")
        }
      - if _caller() >= 14 {
      - qui replace `OLDVAR' = ustrregexrf(`OLDVAR',"^0+","0")
      = qui replace __000007 = ustrregexrf(__000007,"^0+","0")
      - }
      - else {
        qui replace `OLDVAR' = regexr(`OLDVAR',"^0+","0")
        }
      - qui gen `gtype' `NEWVAR' = real(`OLDVAR')
      = qui gen double __000008 = real(__000007)
      - qui summarize `ismissing', meanonly
      = qui summarize __000009, meanonly
      - local oldmiss = r(sum)
      - qui count if missing(`NEWVAR')
      = qui count if missing(__000008)
      - local newmiss = r(N)
      - local flag = `oldmiss'!=`newmiss'
      = local flag = 0!=0
      - if `flag' & ("`force'" == "") {
      = if 0 & ("" == "") {
        if `"`ignore'"' != "" {
        di as txt "`var': contains " "`aswhat's not specified in " as res "ignor
> e()" as txt "; no " as res "`genrep'"
        }
        else {
        di as txt "`var': contains " "nonnumeric `aswhat's; no " as res "`genrep
> '"
        }
        }
      - else {
      - order `NEWVAR', after(`var')
      = order __000008, after(inc_decoded2)
        -------------------------------------------------------- begin order ---
        - version 11
        - if (_caller()<11) {
          _order `macval(0)'
          exit
          }
        - syntax varlist[, Before(varname) After(varname) first last SEQuential 
> ALPHAbetic]
        - if (`"`before'"' == "" & `"`after'"' == "" & "`first'" == "" & "`last'
> " == "" & "`alphabetic'" == "" & "`sequential'" == "") {
        = if (`""' == "" & `"inc_decoded2"' == "" & "" == "" & "" == "" & "" == 
> "" & "" == "") {
          _order `macval(0)'
          exit
          }
        - if (`"`before'"' != "" & `"`after'"' != "") {
        = if (`""' != "" & `"inc_decoded2"' != "") {
          dis as error "before() may not be combined with after()"
          exit 198
          }
        - if (`"`before'"' != "" & `"`first'"' != "") {
        = if (`""' != "" & `""' != "") {
          dis as error "before() may not be combined with first()"
          exit 198
          }
        - if (`"`before'"' != "" & `"`last'"' != "") {
        = if (`""' != "" & `""' != "") {
          dis as error "before() may not be combined with last()"
          exit 198
          }
        - if (`"`after'"' != "" & `"`before'"' != "") {
        = if (`"inc_decoded2"' != "" & `""' != "") {
          dis as error "after() may not be combined with before()"
          exit 198
          }
        - if (`"`after'"' != "" & `"`first'"' != "") {
        = if (`"inc_decoded2"' != "" & `""' != "") {
          dis as error "after() may not be combined with first()"
          exit 198
          }
        - if (`"`after'"' != "" & `"`last'"' != "") {
        = if (`"inc_decoded2"' != "" & `""' != "") {
          dis as error "after() may not be combined with last()"
          exit 198
          }
        - if ("`first'" != "" & "`last'" != "") {
        = if ("" != "" & "" != "") {
          dis as error "first may not be combined with last"
          exit 198
          }
        - if ("`sequential'" != "" & "`alphabetic'" != "") {
        = if ("" != "" & "" != "") {
          dis as error "sequential may not be combined with alphabetic"
          exit 198
          }
        - if ("`first'" != "") {
        = if ("" != "") {
          if "`alphabetic'" != "" {
          local varlist : list sort varlist
          }
          if "`sequential'" != "" {
          aorder `varlist'
          }
          else {
          _order `varlist'
          }
          }
        - if ("`last'" != "") {
        = if ("" != "") {
          unab vlist : _all
          local list : list vlist - varlist
          if "`alphabetic'" != "" {
          local varlist : list sort varlist
          }
          if "`sequential'" != "" {
          preserve
          keep `varlist'
          aorder `varlist'
          unab varlist : _all
          restore
          }
          _order `list' `varlist'
          }
        - if (`"`before'"' != "") {
        = if (`""' != "") {
          local test : list before in varlist
          if `test' {
          dis as err "varname specified in before() may not" " be in varlist"
          exit 198
          }
          if "`alphabetic'" != "" {
          local varlist : list sort varlist
          }
          if "`sequential'" != "" {
          preserve
          keep `varlist'
          aorder `varlist'
          unab varlist : _all
          restore
          }
          unab vlist : _all
          local vlist : list vlist - varlist
          local var_num : list posof "`before'" in vlist
          local var_num = `var_num' - 1
          local fvar : word 1 of `vlist'
          capture local lvar : word `var_num' of `vlist'
          if _rc {
          _order `varlist'
          exit
          }
          unab nlist : `fvar'-`lvar'
          local nlist : list nlist - varlist
          _order `nlist' `varlist'
          }
        - if (`"`after'"' != "") {
        = if (`"inc_decoded2"' != "") {
        - local test : list after in varlist
        - if `test' {
        = if 0 {
          dis as err "varname specified in after() may not" " be in varlist"
          exit 198
          }
        - if "`alphabetic'" != "" {
        = if "" != "" {
          local varlist : list sort varlist
          }
        - if "`sequential'" != "" {
        = if "" != "" {
          preserve
          keep `varlist'
          aorder `varlist'
          unab varlist : _all
          restore
          }
        - unab vlist : _all
          ------------------------------------------------------- begin unab ---
          - version 6
          - gettoken user 0: 0, parse(" :")
          - gettoken colon 0: 0, parse(" :")
          - if `"`colon'"' != ":" { error 198 }
          = if `":"' != ":" { error 198 }
          - syntax [varlist(default=empty)] [, MIN(integer 1) MAX(integer 120000
> ) NAME(string)]
          - c_local `user' `varlist'
          = c_local vlist year hhwt repwt cluster adjust statefip strata hhincom
> e_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 repwt10 r
> epwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 repwt20
>  repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt29 repwt
> 30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repwt39 rep
> wt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 repwt49 r
> epwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 repwt59
>  repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt68 repwt
> 69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repwt78 rep
> wt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp5 repwt
> p6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14 repwtp
> 15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwtp23 rep
> wtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 repwtp32 
> repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40 repwtp
> 41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwtp49 rep
> wtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 repwtp58 
> repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66 repwtp
> 67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwtp75 rep
> wtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __000000 __
> 000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_decoded2 
> __000007 __00000A __000009 __000008
          - local n : word count `varlist'
          = local n : word count year hhwt repwt cluster adjust statefip strata 
> hhincome_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 re
> pwt10 repwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 
> repwt20 repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt2
> 9 repwt30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repw
> t39 repwt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 re
> pwt49 repwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 
> repwt59 repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt6
> 8 repwt69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repw
> t78 repwt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp
> 5 repwtp6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14
>  repwtp15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwt
> p23 repwtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 re
> pwtp32 repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40
>  repwtp41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwt
> p49 repwtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 re
> pwtp58 repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66
>  repwtp67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwt
> p75 repwtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __00
> 0000 __000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_de
> coded2 __000007 __00000A __000009 __000008
          - if `n'>=`min' & `n'<=`max' { exit }
          = if 187>=1 & 187<=120000 { exit }
          --------------------------------------------------------- end unab ---
        - local vlist : list vlist - varlist
        - local var_num : list posof "`after'" in vlist
        = local var_num : list posof "inc_decoded2" in vlist
        - local fvar : word 1 of `vlist'
        = local fvar : word 1 of year hhwt repwt cluster adjust statefip strata 
> hhincome_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 re
> pwt10 repwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 
> repwt20 repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt2
> 9 repwt30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repw
> t39 repwt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 re
> pwt49 repwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 
> repwt59 repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt6
> 8 repwt69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repw
> t78 repwt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp
> 5 repwtp6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14
>  repwtp15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwt
> p23 repwtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 re
> pwtp32 repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40
>  repwtp41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwt
> p49 repwtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 re
> pwtp58 repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66
>  repwtp67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwt
> p75 repwtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __00
> 0000 __000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_de
> coded2 __000007 __00000A __000009
        - local lvar : word `var_num' of `vlist'
        = local lvar : word 183 of year hhwt repwt cluster adjust statefip strat
> a hhincome_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 
> repwt10 repwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt1
> 9 repwt20 repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repw
> t29 repwt30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 re
> pwt39 repwt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 
> repwt49 repwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt5
> 8 repwt59 repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repw
> t68 repwt69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 re
> pwt78 repwt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repw
> tp5 repwtp6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp
> 14 repwtp15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 rep
> wtp23 repwtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 
> repwtp32 repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp
> 40 repwtp41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 rep
> wtp49 repwtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 
> repwtp58 repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp
> 66 repwtp67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 rep
> wtp75 repwtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __
> 000000 __000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_
> decoded2 __000007 __00000A __000009
        - unab nlist : `fvar'-`lvar'
        = unab nlist : year-inc_decoded2
          ------------------------------------------------------- begin unab ---
          - version 6
          - gettoken user 0: 0, parse(" :")
          - gettoken colon 0: 0, parse(" :")
          - if `"`colon'"' != ":" { error 198 }
          = if `":"' != ":" { error 198 }
          - syntax [varlist(default=empty)] [, MIN(integer 1) MAX(integer 120000
> ) NAME(string)]
          - c_local `user' `varlist'
          = c_local nlist year hhwt repwt cluster adjust statefip strata hhincom
> e_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 repwt10 r
> epwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 repwt20
>  repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt29 repwt
> 30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repwt39 rep
> wt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 repwt49 r
> epwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 repwt59
>  repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt68 repwt
> 69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repwt78 rep
> wt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp5 repwt
> p6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14 repwtp
> 15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwtp23 rep
> wtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 repwtp32 
> repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40 repwtp
> 41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwtp49 rep
> wtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 repwtp58 
> repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66 repwtp
> 67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwtp75 rep
> wtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __000000 __
> 000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_decoded2
          - local n : word count `varlist'
          = local n : word count year hhwt repwt cluster adjust statefip strata 
> hhincome_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 re
> pwt10 repwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 
> repwt20 repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt2
> 9 repwt30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repw
> t39 repwt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 re
> pwt49 repwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 
> repwt59 repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt6
> 8 repwt69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repw
> t78 repwt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp
> 5 repwtp6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14
>  repwtp15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwt
> p23 repwtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 re
> pwtp32 repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40
>  repwtp41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwt
> p49 repwtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 re
> pwtp58 repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66
>  repwtp67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwt
> p75 repwtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __00
> 0000 __000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_de
> coded2
          - if `n'>=`min' & `n'<=`max' { exit }
          = if 183>=1 & 183<=120000 { exit }
          --------------------------------------------------------- end unab ---
        - local nlist : list nlist - varlist
        - _order `nlist' `varlist'
        = _order year hhwt repwt cluster adjust statefip strata hhincome_acs rep
> wt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 repwt10 repwt11 re
> pwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 repwt20 repwt21 
> repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt29 repwt30 repwt3
> 1 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repwt39 repwt40 repw
> t41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 repwt49 repwt50 re
> pwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 repwt59 repwt60 
> repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt68 repwt69 repwt7
> 0 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repwt78 repwt79 repw
> t80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp5 repwtp6 repwtp
> 7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14 repwtp15 repwtp
> 16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwtp23 repwtp24 rep
> wtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 repwtp32 repwtp33 
> repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40 repwtp41 repwtp
> 42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwtp49 repwtp50 rep
> wtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 repwtp58 repwtp59 
> repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66 repwtp67 repwtp
> 68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwtp75 repwtp76 rep
> wtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __000000 __000002 __
> 000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_decoded2 __000008
        - }
        - if ("`alphabetic'" != "" & `"`before'"' == "" & `"`after'"' == "" & "`
> first'" == "" & "`last'" == "") {
        = if ("" != "" & `""' == "" & `"inc_decoded2"' == "" & "" == "" & "" == 
> "") {
          local vlist : list sort varlist
          _order `vlist'
          }
        - if ("`sequential'" != "" & `"`before'"' == "" & `"`after'"' == "" & "`
> first'" == "" & "`last'" == "") {
        = if ("" != "" & `""' == "" & `"inc_decoded2"' == "" & "" == "" & "" == 
> "") {
          aorder `varlist'
          }
        ---------------------------------------------------------- end order ---
      - if `aschars' {
      = if 1 {
      - local dispb `"`b'"'
      = local dispb `" space"'
      - }
      - else {
        local dispb = printablebytes(`"`b'"')
        }
      - local c = plural(`bcnt',strproper("`aswhat'")) + " removed " + plural(`b
> cnt',"was","were") + `":`dispb'"'
      = local c = plural(1,strproper("character")) + " removed " + plural(1,"was
> ","were") + `": space"'
      - if "`makepct'" != "" {
      = if "" != "" {
        if `makepct' {
        qui replace `NEWVAR' = `NEWVAR'/100
        }
        }
      - qui compress `NEWVAR'
      = qui compress __000008
      - local type : type `NEWVAR'
      = local type : type __000008
      - if `flag' {
      = if 0 {
        di as txt "`var': contains nonnumeric `aswhat's" _continue
        if `"`ignore'"'!="" {
        display " not specified in " as result "ignore()" _continue
        }
        if `"`b'"'=="" {
        display "; `finalprint'" as res "`genrep'd " as txt "as " as res "`type'
> " _continue
        }
        display
        }
      - if `"`b'"' != "" {
      = if `" space"' != "" {
      - di as txt "`var': " plural(`bcnt',"`aswhat'") as res `"`dispb'"' as txt 
> " removed; `finalprint'" as res "`genrep'd " as txt "as " as res "`type'"
      = di as txt "inc_decoded2: " plural(1,"character") as res `" space"' as tx
> t " removed; " as res "replaced " as txt "as " as res "long"
inc_decoded2: character space removed; replaced as long
      - }
      - else if `"`b'"' == "" & !`flag' {
      = else if `" space"' == "" & !0 {
        di as txt "`var': all characters numeric; " "`finalprint'" as res "`genr
> ep'd " as txt "as " as res "`type'"
        }
      - if `newmiss' != 0 {
      = if 0 != 0 {
        di as txt "(`newmiss' missing " plural(`newmiss',"value") " generated)"
        }
      - label variable `NEWVAR' `"`: variable label `var''"'
      = label variable __000008 `""'
        -------------------------------------------------------- begin label ---
        - version 10.0
        - local vv : display "version " string(_caller()) ", missing:"
        - gettoken val : 0
        - if (strpos("`val'", "val") > 0 ) {
        = if (strpos("variable", "val") > 0 ) {
          gettoken val 0 : 0
          syntax anything [, nofix]
          if "`fix'" != "" {
          local fix ", nofix"
          }
          gettoken var rest : anything
          while `"`rest'"' != "" {
          gettoken lab rest : rest
          local label "`lab'"
          }
          local vlist : list anything - lab
          if "`lab'" == "." {
          local lab ""
          }
          foreach var of varlist `vlist' {
          `vv' _label `val' `var' `lab' `fix'
          }
          }
        - else {
        - `vv' _label `macval(0)'
        = version 14, missing: _label variable __000008 `""'
        - }
        ---------------------------------------------------------- end label ---
      - char `NEWVAR'[destring] `c'
      = char __000008[destring] Character removed was: space
      - char `NEWVAR'[destring_cmd] `"destring `cmdargs'"'
      = char __000008[destring_cmd] `"destring inc_decoded1 inc_decoded2 , repla
> ce   ignore(" ,$") "'
      - char `var'[destring]
      = char inc_decoded2[destring]
      - char `var'[destring_cmd]
      = char inc_decoded2[destring_cmd]
      - if "`genrep'"=="generate" {
      = if "replace"=="generate" {
        Charcopy `var' `NEWVAR'
        rename `NEWVAR' `: word `varno' of `generate''
        }
      - else {
      - char rename `var' `NEWVAR'
      = char rename inc_decoded2 __000008
      - drop `var'
      = drop inc_decoded2
      - rename `NEWVAR' `var'
      = rename __000008 inc_decoded2
        ------------------------------------------------------- begin rename ---
        - version 12
        - mata: rename_cmd("`3'")
        = mata: rename_cmd("")
        --------------------------------------------------------- end rename ---
      - }
      - }
      - foreach varmac of local tvars {
      - capture drop ``varmac''
      = capture drop __000007
      - }
      - capture drop ``varmac''
      = capture drop __000008
      - }
      - capture drop ``varmac''
      = capture drop __000009
      - }
      - capture drop ``varmac''
      = capture drop __00000A
      - }
      - capture drop ``varmac''
      = capture drop __00000B
      - }
      - }
      - }
      --------------------------------------------------------- end destring ---
    - }
    -------------------------------------------------------------- end split ---
  - gen `inc_cat_var'_lb = inc_decoded1
  = gen acs_hhinc_lb = inc_decoded1
  - gen `inc_cat_var'_ub = inc_decoded2
  = gen acs_hhinc_ub = inc_decoded2
  - di "Lower bound of `inc_cat_var'_lb and upper bound of `inc_cat_var'_ub " "c
> reated for inc_level " `inc_level' "of the original Research " "dataset income
>  range"
  = di "Lower bound of acs_hhinc_lb and upper bound of acs_hhinc_ub " "created f
> or inc_level " 3 "of the original Research " "dataset income range"
Lower bound of acs_hhinc_lb and upper bound of acs_hhinc_ub created for inc_leve
> l 3of the original Research dataset income range
  - }
  - else {
    di as error "Error: The inc_level " `inc_level' " does not fit any of the ex
> isting regular expressions " "designs. Please email the REDI program creator a
> t " "mollymkingphd@gmail.com with information about this " "error and a list o
> f all of your income levels so she " "can update the program. Thank you for yo
> ur help!"
    error 999
    }
  - local upper_bound = `inc_cat_var'_ub
  = local upper_bound = acs_hhinc_ub
  - local lower_bound = `inc_cat_var'_lb
  = local lower_bound = acs_hhinc_lb
  - capture drop inc_decoded1 inc_decoded2
  - quietly summarize if `research_year' == `y' & `inc_cat_var' == `inc_level'
  = quietly summarize if year == 2019 & acs_hhinc == 3
  - local sample_size = r(N)
  - gen `inc_cat_var'_n = `sample_size'
  = gen acs_hhinc_n = 20051
  - label variable `inc_cat_var'_n "N in income level in research dataset"
  = label variable acs_hhinc_n "N in income level in research dataset"
    ------------------------------------------------------------ begin label ---
    - version 10.0
    - local vv : display "version " string(_caller()) ", missing:"
    - gettoken val : 0
    - if (strpos("`val'", "val") > 0 ) {
    = if (strpos("variable", "val") > 0 ) {
      gettoken val 0 : 0
      syntax anything [, nofix]
      if "`fix'" != "" {
      local fix ", nofix"
      }
      gettoken var rest : anything
      while `"`rest'"' != "" {
      gettoken lab rest : rest
      local label "`lab'"
      }
      local vlist : list anything - lab
      if "`lab'" == "." {
      local lab ""
      }
      foreach var of varlist `vlist' {
      `vv' _label `val' `var' `lab' `fix'
      }
      }
    - else {
    - `vv' _label `macval(0)'
    = version 16, missing: _label variable acs_hhinc_n "N in income level in res
> earch dataset"
    - }
    -------------------------------------------------------------- end label ---
  - keep if `research_year' == `y' & `inc_cat_var' == `inc_level'
  = keep if year == 2019 & acs_hhinc == 3
(0 observations deleted)
  - tempfile premerge_`inc_level'_`y'
  = tempfile premerge_3_2019
  - save `premerge_`inc_level'_`y'', replace
  = save /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.000008, repla
> ce
(note: file /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.000008 not
>  found)
file /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.000008 saved
  - di "Saved tempfile with upper and lower bounds of research data income level
> s"
Saved tempfile with upper and lower bounds of research data income levels
  - use `reference_dataset', clear
  = use ~/Documents/SocResearch/Dissertation/data/data_temp/redi13_cps_state_ca.
> dta, clear
(Streamlined CPS ASEC data, CA 2019)
  - di "Reference data open - Income type set as `inc_cat_var' income"
  = di "Reference data open - Income type set as acs_hhinc income"
Reference data open - Income type set as acs_hhinc income
  - keep if `ref_year' == `y' | `"`ref_year'"' == "nys" & `ref_income_var' >= `l
> ower_bound' & `ref_income_var' <= `upper_bound'
  = keep if year == 2019 | `"year"' == "nys" & hhincome >= 25000 & hhincome <= 3
> 5000
(0 observations deleted)
  - gen obs_no = _n
  - di "Observation number generated"
Observation number generated
  - save $temp/`ASECdata'_`ref_year'_inc`inc_level'.dta, replace
  = save ~/Documents/SocResearch/Dissertation/data/data_temp/_year_inc3.dta, rep
> lace
file ~/Documents/SocResearch/Dissertation/data/data_temp/_year_inc3.dta saved
  - di "Ref to keep income between $`lower_bound' and $`upper_bound' for `y' yea
> r."
  = di "Ref to keep income between $25000 and $35000 for 2019 year."
Ref to keep income between $25000 and $35000 for 2019 year.
  - quietly des
    -------------------------------------------------------------- begin des ---
    - local version : di "version " string(_caller()) ":"
    - `version' describe `0'
    = version 16: describe 
      ------------------------------------------------------- begin describe ---
      - version 9
      - local version : di "version " string(_caller()) ":"
      - syntax [anything] [using] [, SImple REPLACE *]
      - if ("`replace'"!="") {
      = if (""!="") {
        describe_mk `0'
        return add
        exit
        }
      - local varlist `"`anything'"'
      = local varlist `""'
      - if ("`simple'" == "") {
      = if ("" == "") {
      - `version' _describe `0'
      = version 16: _describe 
      - return add
      - }
      - else {
        if (`"`options'"' != "") {
        di as err "simple may not be combined with other options"
        exit 198
        }
        if (`"`using'"' != "") {
        qui `version' describe `varlist' `using', varlist
        if "`varlist'" == "" {
        local vars "`r(varlist)'"
        }
        else {
        local vars "`varlist'"
        }
        local wid = 2
        local n : list sizeof vars
        if `n'==0 {
        exit
        }
        if "`c(hasicu)'" == "1" {
        foreach x of local vars {
        local wid = max(`wid', udstrlen(`"`x'"'))
        }
        }
        else {
        foreach x of local vars {
        local wid = max(`wid', strlen(`"`x'"'))
        }
        }
        local wid = `wid' + 2
        local cols = int((`c(linesize)'+1)/`wid')
        if `cols' < 2 {
        foreach x of local `vars' {
        di as txt `col' `"`x'"'
        }
        exit
        }
        local lines = `n'/`cols'
        local lines = int(cond(`lines'>int(`lines'), `lines'+1, `lines'))
        forvalues i=1(1)`lines' {
        local top = min((`cols')*`lines'+`i', `n')
        local col = 1
        forvalues j=`i'(`lines')`top' {
        local x : word `j' of `vars'
        di as txt _column(`col') "`x'" _c
        local col = `col' + `wid'
        }
        di as txt
        }
        qui `version' describe `varlist' `using', short
        return add
        }
        else {
        ds `varlist'
        qui `version' _describe `varlist', short
        return add
        }
        }
      --------------------------------------------------------- end describe ---
    ---------------------------------------------------------------- end des ---
  - local N = r(N)
  - clear
    ------------------------------------------------------------ begin clear ---
    - if _caller() < 10 {
      _clear_9 `0'
      exit
      }
    - version 10
    - syntax [anything]
    - tokenize `anything'
    = tokenize 
    - if `"`2'"' != "" {
    = if `""' != "" {
      display as err "`2' not allowed"
      exit 198
      }
    - if "`1'"=="" {
    = if ""=="" {
    - drop _all
    - label drop _all
      ---------------------------------------------------------- begin label ---
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {
      = if (strpos("drop", "val") > 0 ) {
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {
        local fix ", nofix"
        }
        gettoken var rest : anything
        while `"`rest'"' != "" {
        gettoken lab rest : rest
        local label "`lab'"
        }
        local vlist : list anything - lab
        if "`lab'" == "." {
        local lab ""
        }
        foreach var of varlist `vlist' {
        `vv' _label `val' `var' `lab' `fix'
        }
        }
      - else {
      - `vv' _label `macval(0)'
      = version 10, missing: _label drop _all
      - }
      ------------------------------------------------------------ end label ---
    - }
    - else if "`1'"=="frames" {
    = else if ""=="frames" {
      frames reset
      }
    - else if "`1'"=="mata" {
    = else if ""=="mata" {
      mata: mata clear
      }
    - else if "`1'"=="python" {
    = else if ""=="python" {
      python clear
      }
    - else if inlist("`1'", "results", "matrix") {
    = else if inlist("", "results", "matrix") {
      return clear
      clearreturn
      ereturn clear
      sreturn clear
      _return drop _all
      if ("`1'" == "matrix") {
      matrix drop _all
      _est drop _all
      }
      }
    - else if "`1'"=="programs" {
    = else if ""=="programs" {
      program drop _all
      }
    - else if "`1'"=="ado" {
    = else if ""=="ado" {
      program drop _allado
      }
    - else if "`1'"=="rngstream" | "`1'"=="rngstreams" {
    = else if ""=="rngstream" | ""=="rngstreams" {
      set rngstream clear
      }
    - else if "`1'"=="*" | "`1'"=="all" {
    = else if ""=="*" | ""=="all" {
      capture mata: st_local("semmods", strofreal(sg__global.hasmodels()))
      capture
      if (0`semmods') {
      display as err "-clear all- not allowed while an SEM Builder is open"
      exit 1
      }
      drop _all
      frames reset
      label drop _all
      matrix drop _all
      scalar drop _all
      constraint drop _all
      eq drop _all
      file close _all
      postutil clear
      _return drop _all
      discard
      program drop _all
      timer clear
      mata: _st__put_cmd_clear()
      mata: mata clear
      python clear
      }
    - else {
      display as err "`1' not allowed"
      exit 198
      }
    -------------------------------------------------------------- end clear ---
  - set obs `sample_size'
  = set obs 20051
number of observations (_N) was 0, now 20,051
  - gen obs_no = runiformint(1, `N')
  = gen obs_no = runiformint(1, 6260)
  - merge m:1 obs_no using $temp/`ASECdata'_`ref_year'_inc`inc_level'.dta, keep(
> match) nogenerate
  = merge m:1 obs_no using ~/Documents/SocResearch/Dissertation/data/data_temp/_
> year_inc3.dta, keep(match) nogenerate
    ------------------------------------------------------------ begin merge ---
    - version 11
    - gettoken mtype 0 : 0, parse(" ,")
    - if (!strpos("`mtype'", ":") & "`mtype'"!="") {
    = if (!strpos("m:1", ":") & "m:1"!="") {
      if (_caller()>=11) {
      di as smcl as txt "{p}"
      di as smcl "(note: you are using old"
      di as smcl "{bf:merge} syntax; see"
      di as smcl "{bf:{help merge:[D] merge}} for new syntax)"
      di as smcl "{p_end}"
      }
      merge_10 `mtype' `0'
      exit
      }
    - local origmtype `"`mtype'"'
    = local origmtype `"m:1"'
    - mata: map_mtype(`"mtype"')
    - gettoken token : 0, parse(" ,")
    - if ("`token'"=="_n") {
    = if ("obs_no"=="_n") {
      if ("`mtype'"!="1:1") {
      error_seq_not11 "`mtype'" "`origmtype'"
      }
      gettoken token 0 : 0, parse(" ,")
      local mtype "_n"
      }
    - syntax [varlist(default=none)] using/ [, ASSERT(string) DEBUG GENerate(nam
> e) FORCE KEEP(string) KEEPUSing(string) noLabels NOGENerate noNOTEs REPLACE no
> REPort SORTED UPDATE ]
    - if ("`mtype'"!="_n") {
    = if ("m:1"!="_n") {
    - local origmtype `"`mtype'"'
    = local origmtype `"m:1"'
    - mata: map_mtype(`"mtype"')
    - if ("`varlist'"=="") {
    = if ("obs_no"=="") {
      error_mat_varlist "`mtype'" "`origmtype'"
      }
    - }
    - else {
      if ("`mtype'"=="_n") {
      if ("`varlist'"!="") {
      error_seq_varlist
      }
      }
      }
    - mata: fullfilename("using", "usingfull", "using")
    - mata: resultlist("assert")
    - mata: resultlist("keep")
    - if ("`generate'"!="") {
    = if (""!="") {
      if ("`nogenerate'"!="") {
      di as smcl err "{p}"
      di as smcl "options -generate()- and -nogenerate-"
      di as smcl "may not be specified together."
      di as smcl err "{p_end}"
      }
      confirm new var `generate'
      }
    - if ("`replace'"!="") {
    = if (""!="") {
      if ("`update'"=="") {
      error_replace
      }
      }
    - if ("`sorted'"=="" & "`mtype'"!="_n") {
    = if (""=="" & "m:1"!="_n") {
    - local sortedby : sortedby
    - checksort "`sortedby'" "`varlist'"
    = checksort "" "obs_no"
      ------------------------------------------------ begin merge.checksort ---
      - args is should
      - local i 0
      - return scalar sorted = 1
      - foreach v1 of local should {
      - local ++i
      - local v2 : word `i' of `is'
      = local v2 : word 1 of 
      - if ("`v1'"!="`v2'") {
      = if ("obs_no"!="") {
      - return scalar sorted = 0
      - continue, break
        }
        }
      -------------------------------------------------- end merge.checksort ---
    - if (!r(sorted)) {
    - sort `varlist'
    = sort obs_no
    - }
    - quietly describe using "`using'", varlist short
    = quietly describe using "~/Documents/SocResearch/Dissertation/data/data_tem
> p/_year_inc3.dta", varlist short
      ------------------------------------------------------- begin describe ---
      - version 9
      - local version : di "version " string(_caller()) ":"
      - syntax [anything] [using] [, SImple REPLACE *]
      - if ("`replace'"!="") {
      = if (""!="") {
        describe_mk `0'
        return add
        exit
        }
      - local varlist `"`anything'"'
      = local varlist `""'
      - if ("`simple'" == "") {
      = if ("" == "") {
      - `version' _describe `0'
      = version 11: _describe using "~/Documents/SocResearch/Dissertation/data/d
> ata_temp/_year_inc3.dta", varlist short
      - return add
      - }
      - else {
        if (`"`options'"' != "") {
        di as err "simple may not be combined with other options"
        exit 198
        }
        if (`"`using'"' != "") {
        qui `version' describe `varlist' `using', varlist
        if "`varlist'" == "" {
        local vars "`r(varlist)'"
        }
        else {
        local vars "`varlist'"
        }
        local wid = 2
        local n : list sizeof vars
        if `n'==0 {
        exit
        }
        if "`c(hasicu)'" == "1" {
        foreach x of local vars {
        local wid = max(`wid', udstrlen(`"`x'"'))
        }
        }
        else {
        foreach x of local vars {
        local wid = max(`wid', strlen(`"`x'"'))
        }
        }
        local wid = `wid' + 2
        local cols = int((`c(linesize)'+1)/`wid')
        if `cols' < 2 {
        foreach x of local `vars' {
        di as txt `col' `"`x'"'
        }
        exit
        }
        local lines = `n'/`cols'
        local lines = int(cond(`lines'>int(`lines'), `lines'+1, `lines'))
        forvalues i=1(1)`lines' {
        local top = min((`cols')*`lines'+`i', `n')
        local col = 1
        forvalues j=`i'(`lines')`top' {
        local x : word `j' of `vars'
        di as txt _column(`col') "`x'" _c
        local col = `col' + `wid'
        }
        di as txt
        }
        qui `version' describe `varlist' `using', short
        return add
        }
        else {
        ds `varlist'
        qui `version' _describe `varlist', short
        return add
        }
        }
      --------------------------------------------------------- end describe ---
    - local sortedby "`r(sortlist)'"
    = local sortedby ""
    - checksort "`sortedby'" "`varlist'"
    = checksort "" "obs_no"
      ------------------------------------------------ begin merge.checksort ---
      - args is should
      - local i 0
      - return scalar sorted = 1
      - foreach v1 of local should {
      - local ++i
      - local v2 : word `i' of `is'
      = local v2 : word 1 of 
      - if ("`v1'"!="`v2'") {
      = if ("obs_no"!="") {
      - return scalar sorted = 0
      - continue, break
        }
        }
      -------------------------------------------------- end merge.checksort ---
    - if (!r(sorted)) {
    - preserve
    - qui use "`using'", clear
    = qui use "~/Documents/SocResearch/Dissertation/data/data_temp/_year_inc3.dt
> a", clear
    - sort `varlist'
    = sort obs_no
    - tempfile using
    - qui save "`using'", replace
    = qui save "/var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000a
> ", replace
    - restore
    - }
    - }
    - if ("`nogenerate'"!="") {
    = if ("nogenerate"!="") {
    - tempvar mergevar
    - local mergevaristemp 1
    - }
    - else {
      local mergevar = cond("`generate'"!="", "`generate'", "_merge")
      local mergevaristemp 0
      }
    - local options `update' `replace' `notes' `labels' _merge(`mergevar') `forc
> e'
    = local options     _merge(__000000) 
    - if (bsubstr("`mtype'", 1, 1)=="1") {
    = if (bsubstr("m:1", 1, 1)=="1") {
      local options `options' uniqmaster
      }
    - if (bsubstr("`mtype'", 3, 1)=="1") {
    = if (bsubstr("m:1", 3, 1)=="1") {
    - local options `options' uniqusing
    = local options _merge(__000000) uniqusing
    - }
    - if ("`keepusing'"!="") {
    = if (""!="") {
      local options `options' keep(`keepusing')
      }
    - if ("`keep'" !="" & !strpos("`keep'" , "2")) {
    = if ("3" !="" & !strpos("3" , "2")) {
    - local options `options' nokeep
    = local options _merge(__000000) uniqusing nokeep
    - }
    - if (_caller() > 15) {
    - local version : di "version " string(_caller()) ": "
    - }
    - local _merge `"`version'_merge `varlist' using "`using'", nowarn"'
    = local _merge `"version 16: _merge obs_no using "/var/folders/rp/96l526kj7y
> bdjr5vs5bqqjw80000gn/T//S_20065.00000a", nowarn"'
    - local _merge `"`_merge' `options' tabulate(mresults)"'
    = local _merge `"version 16: _merge obs_no using "/var/folders/rp/96l526kj7y
> bdjr5vs5bqqjw80000gn/T//S_20065.00000a", nowarn _merge(__000000) uniqusing nok
> eep tabulate(mresults)"'
    - if ("`debug'"!="") {
    = if (""!="") {
      di as txt _n "command is"
      di `"`_merge'"' _n
      }
    - `_merge'
    = version 16: _merge obs_no using "/var/folders/rp/96l526kj7ybdjr5vs5bqqjw80
> 000gn/T//S_20065.00000a", nowarn _merge(__000000) uniqusing nokeep tabulate(mr
> esults)
    - if (!`mergevaristemp') {
    = if (!1) {
      capture label list _merge
      if (_rc) {
      label define _merge 1 "master only (1)" 2 "using only (2)" 3 "matched (3)"
>  4 "missing updated (4)" 5 "nonmissing conflict (5)"
      }
      label values `mergevar' _merge
      }
    - if ("`assert'"!="") {
    = if (""!="") {
      if (_caller() < 13) {
      buildexpr expr : `mergevar' "`assert'"
      capture assert `expr'
      if (_rc) {
      error_assert `mergevar' "`assert'"
      }
      }
      else {
      capture checkmresults "`mresults'" "`assert'"
      if (_rc) {
      error_assert `mergevar' "`assert'"
      }
      }
      }
    - if ("`keep'"!="") {
    = if ("3"!="") {
    - buildexpr expr : `mergevar' "`keep'"
    = buildexpr expr : __000000 "3"
      ------------------------------------------------ begin merge.buildexpr ---
      - args userexpr colon varname numbers
      - gettoken first numbers : numbers
      - local list `varname'==`first'
      = local list __000000==3
      - foreach el of local numbers {
        local list `list' | `varname'==`el'
        }
      - c_local `userexpr' "(`list')"
      = c_local expr "(__000000==3)"
      -------------------------------------------------- end merge.buildexpr ---
    - quietly keep if `expr'
    = quietly keep if (__000000==3)
    - }
    - if ("`mtype'"=="1:1") {
    = if ("m:1"=="1:1") {
      qui count if `mergevar'==2
      if (r(N)==0) {
      sort `varlist'
      }
      }
    - if (c(noisily) & "`report'"=="") {
    = if (c(noisily) & ""=="") {
    - local isupdate = ("`replace'"!="" | "`update'"!="")
    = local isupdate = (""!="" | ""!="")
    - present_table `isupdate' `mergevar' `mergevaristemp'
    = present_table 0 __000000 1
      -------------------------------------------- begin merge.present_table ---
      - args isupdate mergevar mergevaristemp
      - if (!`mergevaristemp') {
      = if (!1) {
        local v1 "(`mergevar'==1)"
        local v2 "(`mergevar'==2)"
        local v3 "(`mergevar'==3)"
        local v4 "(`mergevar'==4)"
        local v5 "(`mergevar'==5)"
        }
      - quietly {
      - count if `mergevar'==1
      = count if __000000==1
      - local m1 = r(N)
      - count if `mergevar'==2
      = count if __000000==2
      - local m2 = r(N)
      - if (`isupdate') {
      = if (0) {
        count if `mergevar'==3
        local m3 = r(N)
        count if `mergevar'==4
        local m4 = r(N)
        local m5 = _N - `m1' - `m2' - `m3' - `m4'
        }
      - else {
      - local m3 = _N - `m1' - `m2'
      = local m3 = _N - 0 - 0
      - }
      - }
      - di

      - di as smcl as txt _col(5) "Result" _col(38) "# of obs."
    Result                           # of obs.
      - di as smcl as txt _col(5) "{hline 41}"
    -----------------------------------------
      - di as smcl as txt _col(5) "not matched" _col(30) as res %16.0fc (`m1'+`m
> 2')
      = di as smcl as txt _col(5) "not matched" _col(30) as res %16.0fc (0+0)
    not matched                             0
      - if (`m1'|`m2') {
      = if (0|0) {
        di as smcl as txt _col(9) "from master" _col(30) as res %16.0fc `m1' as 
> txt "  `v1'"
        di as smcl as txt _col(9) "from using" _col(30) as res %16.0fc `m2' as t
> xt "  `v2'"
        di
        }
      - if (!`isupdate') {
      = if (!0) {
      - di as smcl as txt _col(5) "matched" _col(30) as res %16.0fc `m3' as txt 
> "  `v3'"
      = di as smcl as txt _col(5) "matched" _col(30) as res %16.0fc 20051 as txt
>  "  "
    matched                            20,051  
      - }
      - else {
        if (`m1'==0 & `m2'==0) {
        di
        }
        di as smcl as txt _col(5) "matched" _col(30) as res %16.0fc (`m3'+`m4'+`
> m5')
        di as smcl as txt _col(9) "not updated" _col(30) as res %16.0fc `m3' as 
> txt "  `v3'"
        di as smcl as txt _col(9) "missing updated" _col(30) as res %16.0fc `m4'
>  as txt "  `v4'"
        di as smcl as txt _col(9) "nonmissing conflict" _col(30) as res %16.0fc 
> `m5' as txt "  `v5'"
        }
      - di as smcl as txt _col(5) "{hline 41}"
    -----------------------------------------
      ---------------------------------------------- end merge.present_table ---
    - }
    -------------------------------------------------------------- end merge ---
  - save $temp/`ASECdata'_`ref_year'_inc`inc_level'.dta, replace
  = save ~/Documents/SocResearch/Dissertation/data/data_temp/_year_inc3.dta, rep
> lace
file ~/Documents/SocResearch/Dissertation/data/data_temp/_year_inc3.dta saved
  - gen id = _n
  - merge 1:1 id using `premerge_`inc_level'_`y''
  = merge 1:1 id using /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065
> .000008
    ------------------------------------------------------------ begin merge ---
    - version 11
    - gettoken mtype 0 : 0, parse(" ,")
    - if (!strpos("`mtype'", ":") & "`mtype'"!="") {
    = if (!strpos("1:1", ":") & "1:1"!="") {
      if (_caller()>=11) {
      di as smcl as txt "{p}"
      di as smcl "(note: you are using old"
      di as smcl "{bf:merge} syntax; see"
      di as smcl "{bf:{help merge:[D] merge}} for new syntax)"
      di as smcl "{p_end}"
      }
      merge_10 `mtype' `0'
      exit
      }
    - local origmtype `"`mtype'"'
    = local origmtype `"1:1"'
    - mata: map_mtype(`"mtype"')
    - gettoken token : 0, parse(" ,")
    - if ("`token'"=="_n") {
    = if ("id"=="_n") {
      if ("`mtype'"!="1:1") {
      error_seq_not11 "`mtype'" "`origmtype'"
      }
      gettoken token 0 : 0, parse(" ,")
      local mtype "_n"
      }
    - syntax [varlist(default=none)] using/ [, ASSERT(string) DEBUG GENerate(nam
> e) FORCE KEEP(string) KEEPUSing(string) noLabels NOGENerate noNOTEs REPLACE no
> REPort SORTED UPDATE ]
    - if ("`mtype'"!="_n") {
    = if ("1:1"!="_n") {
    - local origmtype `"`mtype'"'
    = local origmtype `"1:1"'
    - mata: map_mtype(`"mtype"')
    - if ("`varlist'"=="") {
    = if ("id"=="") {
      error_mat_varlist "`mtype'" "`origmtype'"
      }
    - }
    - else {
      if ("`mtype'"=="_n") {
      if ("`varlist'"!="") {
      error_seq_varlist
      }
      }
      }
    - mata: fullfilename("using", "usingfull", "using")
    - mata: resultlist("assert")
    - mata: resultlist("keep")
    - if ("`generate'"!="") {
    = if (""!="") {
      if ("`nogenerate'"!="") {
      di as smcl err "{p}"
      di as smcl "options -generate()- and -nogenerate-"
      di as smcl "may not be specified together."
      di as smcl err "{p_end}"
      }
      confirm new var `generate'
      }
    - if ("`replace'"!="") {
    = if (""!="") {
      if ("`update'"=="") {
      error_replace
      }
      }
    - if ("`sorted'"=="" & "`mtype'"!="_n") {
    = if (""=="" & "1:1"!="_n") {
    - local sortedby : sortedby
    - checksort "`sortedby'" "`varlist'"
    = checksort "" "id"
      ------------------------------------------------ begin merge.checksort ---
      - args is should
      - local i 0
      - return scalar sorted = 1
      - foreach v1 of local should {
      - local ++i
      - local v2 : word `i' of `is'
      = local v2 : word 1 of 
      - if ("`v1'"!="`v2'") {
      = if ("id"!="") {
      - return scalar sorted = 0
      - continue, break
        }
        }
      -------------------------------------------------- end merge.checksort ---
    - if (!r(sorted)) {
    - sort `varlist'
    = sort id
    - }
    - quietly describe using "`using'", varlist short
    = quietly describe using "/var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//
> S_20065.000008", varlist short
      ------------------------------------------------------- begin describe ---
      - version 9
      - local version : di "version " string(_caller()) ":"
      - syntax [anything] [using] [, SImple REPLACE *]
      - if ("`replace'"!="") {
      = if (""!="") {
        describe_mk `0'
        return add
        exit
        }
      - local varlist `"`anything'"'
      = local varlist `""'
      - if ("`simple'" == "") {
      = if ("" == "") {
      - `version' _describe `0'
      = version 11: _describe using "/var/folders/rp/96l526kj7ybdjr5vs5bqqjw8000
> 0gn/T//S_20065.000008", varlist short
      - return add
      - }
      - else {
        if (`"`options'"' != "") {
        di as err "simple may not be combined with other options"
        exit 198
        }
        if (`"`using'"' != "") {
        qui `version' describe `varlist' `using', varlist
        if "`varlist'" == "" {
        local vars "`r(varlist)'"
        }
        else {
        local vars "`varlist'"
        }
        local wid = 2
        local n : list sizeof vars
        if `n'==0 {
        exit
        }
        if "`c(hasicu)'" == "1" {
        foreach x of local vars {
        local wid = max(`wid', udstrlen(`"`x'"'))
        }
        }
        else {
        foreach x of local vars {
        local wid = max(`wid', strlen(`"`x'"'))
        }
        }
        local wid = `wid' + 2
        local cols = int((`c(linesize)'+1)/`wid')
        if `cols' < 2 {
        foreach x of local `vars' {
        di as txt `col' `"`x'"'
        }
        exit
        }
        local lines = `n'/`cols'
        local lines = int(cond(`lines'>int(`lines'), `lines'+1, `lines'))
        forvalues i=1(1)`lines' {
        local top = min((`cols')*`lines'+`i', `n')
        local col = 1
        forvalues j=`i'(`lines')`top' {
        local x : word `j' of `vars'
        di as txt _column(`col') "`x'" _c
        local col = `col' + `wid'
        }
        di as txt
        }
        qui `version' describe `varlist' `using', short
        return add
        }
        else {
        ds `varlist'
        qui `version' _describe `varlist', short
        return add
        }
        }
      --------------------------------------------------------- end describe ---
    - local sortedby "`r(sortlist)'"
    = local sortedby "year acs_hhinc"
    - checksort "`sortedby'" "`varlist'"
    = checksort "year acs_hhinc" "id"
      ------------------------------------------------ begin merge.checksort ---
      - args is should
      - local i 0
      - return scalar sorted = 1
      - foreach v1 of local should {
      - local ++i
      - local v2 : word `i' of `is'
      = local v2 : word 1 of year acs_hhinc
      - if ("`v1'"!="`v2'") {
      = if ("id"!="year") {
      - return scalar sorted = 0
      - continue, break
        }
        }
      -------------------------------------------------- end merge.checksort ---
    - if (!r(sorted)) {
    - preserve
    - qui use "`using'", clear
    = qui use "/var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.000008"
> , clear
    - sort `varlist'
    = sort id
    - tempfile using
    - qui save "`using'", replace
    = qui save "/var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000a
> ", replace
    - restore
    - }
    - }
    - if ("`nogenerate'"!="") {
    = if (""!="") {
      tempvar mergevar
      local mergevaristemp 1
      }
    - else {
    - local mergevar = cond("`generate'"!="", "`generate'", "_merge")
    = local mergevar = cond(""!="", "", "_merge")
    - local mergevaristemp 0
    - }
    - local options `update' `replace' `notes' `labels' _merge(`mergevar') `forc
> e'
    = local options     _merge(_merge) 
    - if (bsubstr("`mtype'", 1, 1)=="1") {
    = if (bsubstr("1:1", 1, 1)=="1") {
    - local options `options' uniqmaster
    = local options _merge(_merge) uniqmaster
    - }
    - if (bsubstr("`mtype'", 3, 1)=="1") {
    = if (bsubstr("1:1", 3, 1)=="1") {
    - local options `options' uniqusing
    = local options _merge(_merge) uniqmaster uniqusing
    - }
    - if ("`keepusing'"!="") {
    = if (""!="") {
      local options `options' keep(`keepusing')
      }
    - if ("`keep'" !="" & !strpos("`keep'" , "2")) {
    = if ("" !="" & !strpos("" , "2")) {
      local options `options' nokeep
      }
    - if (_caller() > 15) {
    - local version : di "version " string(_caller()) ": "
    - }
    - local _merge `"`version'_merge `varlist' using "`using'", nowarn"'
    = local _merge `"version 16: _merge id using "/var/folders/rp/96l526kj7ybdjr
> 5vs5bqqjw80000gn/T//S_20065.00000a", nowarn"'
    - local _merge `"`_merge' `options' tabulate(mresults)"'
    = local _merge `"version 16: _merge id using "/var/folders/rp/96l526kj7ybdjr
> 5vs5bqqjw80000gn/T//S_20065.00000a", nowarn _merge(_merge) uniqmaster uniqusin
> g tabulate(mresults)"'
    - if ("`debug'"!="") {
    = if (""!="") {
      di as txt _n "command is"
      di `"`_merge'"' _n
      }
    - `_merge'
    = version 16: _merge id using "/var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000g
> n/T//S_20065.00000a", nowarn _merge(_merge) uniqmaster uniqusing tabulate(mres
> ults)
(label statefip_lbl already defined)
    - if (!`mergevaristemp') {
    = if (!0) {
    - capture label list _merge
      ---------------------------------------------------------- begin label ---
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {
      = if (strpos("list", "val") > 0 ) {
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {
        local fix ", nofix"
        }
        gettoken var rest : anything
        while `"`rest'"' != "" {
        gettoken lab rest : rest
        local label "`lab'"
        }
        local vlist : list anything - lab
        if "`lab'" == "." {
        local lab ""
        }
        foreach var of varlist `vlist' {
        `vv' _label `val' `var' `lab' `fix'
        }
        }
      - else {
      - `vv' _label `macval(0)'
      = version 11, missing: _label list _merge
        }
      ------------------------------------------------------------ end label ---
    - if (_rc) {
    - label define _merge 1 "master only (1)" 2 "using only (2)" 3 "matched (3)"
>  4 "missing updated (4)" 5 "nonmissing conflict (5)"
      ---------------------------------------------------------- begin label ---
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {
      = if (strpos("define", "val") > 0 ) {
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {
        local fix ", nofix"
        }
        gettoken var rest : anything
        while `"`rest'"' != "" {
        gettoken lab rest : rest
        local label "`lab'"
        }
        local vlist : list anything - lab
        if "`lab'" == "." {
        local lab ""
        }
        foreach var of varlist `vlist' {
        `vv' _label `val' `var' `lab' `fix'
        }
        }
      - else {
      - `vv' _label `macval(0)'
      = version 11, missing: _label define _merge 1 "master only (1)" 2 "using o
> nly (2)" 3 "matched (3)" 4 "missing updated (4)" 5 "nonmissing conflict (5)"
      - }
      ------------------------------------------------------------ end label ---
    - }
    - label values `mergevar' _merge
    = label values _merge _merge
      ---------------------------------------------------------- begin label ---
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {
      = if (strpos("values", "val") > 0 ) {
      - gettoken val 0 : 0
      - syntax anything [, nofix]
      - if "`fix'" != "" {
      = if "" != "" {
        local fix ", nofix"
        }
      - gettoken var rest : anything
      - while `"`rest'"' != "" {
      = while `" _merge"' != "" {
      - gettoken lab rest : rest
      - local label "`lab'"
      = local label "_merge"
      - }
      - while `"`rest'"' != "" {
      = while `""' != "" {
        gettoken lab rest : rest
        local label "`lab'"
        }
      - local vlist : list anything - lab
      - if "`lab'" == "." {
      = if "_merge" == "." {
        local lab ""
        }
      - foreach var of varlist `vlist' {
      = foreach var of varlist _merge {
      - `vv' _label `val' `var' `lab' `fix'
      = version 11, missing: _label values _merge _merge 
      - }
      - }
      - else {
        `vv' _label `macval(0)'
        }
      ------------------------------------------------------------ end label ---
    - }
    - if ("`assert'"!="") {
    = if (""!="") {
      if (_caller() < 13) {
      buildexpr expr : `mergevar' "`assert'"
      capture assert `expr'
      if (_rc) {
      error_assert `mergevar' "`assert'"
      }
      }
      else {
      capture checkmresults "`mresults'" "`assert'"
      if (_rc) {
      error_assert `mergevar' "`assert'"
      }
      }
      }
    - if ("`keep'"!="") {
    = if (""!="") {
      buildexpr expr : `mergevar' "`keep'"
      quietly keep if `expr'
      }
    - if ("`mtype'"=="1:1") {
    = if ("1:1"=="1:1") {
    - qui count if `mergevar'==2
    = qui count if _merge==2
    - if (r(N)==0) {
    - sort `varlist'
    = sort id
    - }
    - }
    - if (c(noisily) & "`report'"=="") {
    = if (c(noisily) & ""=="") {
    - local isupdate = ("`replace'"!="" | "`update'"!="")
    = local isupdate = (""!="" | ""!="")
    - present_table `isupdate' `mergevar' `mergevaristemp'
    = present_table 0 _merge 0
      -------------------------------------------- begin merge.present_table ---
      - args isupdate mergevar mergevaristemp
      - if (!`mergevaristemp') {
      = if (!0) {
      - local v1 "(`mergevar'==1)"
      = local v1 "(_merge==1)"
      - local v2 "(`mergevar'==2)"
      = local v2 "(_merge==2)"
      - local v3 "(`mergevar'==3)"
      = local v3 "(_merge==3)"
      - local v4 "(`mergevar'==4)"
      = local v4 "(_merge==4)"
      - local v5 "(`mergevar'==5)"
      = local v5 "(_merge==5)"
      - }
      - quietly {
      - count if `mergevar'==1
      = count if _merge==1
      - local m1 = r(N)
      - count if `mergevar'==2
      = count if _merge==2
      - local m2 = r(N)
      - if (`isupdate') {
      = if (0) {
        count if `mergevar'==3
        local m3 = r(N)
        count if `mergevar'==4
        local m4 = r(N)
        local m5 = _N - `m1' - `m2' - `m3' - `m4'
        }
      - else {
      - local m3 = _N - `m1' - `m2'
      = local m3 = _N - 0 - 0
      - }
      - }
      - di

      - di as smcl as txt _col(5) "Result" _col(38) "# of obs."
    Result                           # of obs.
      - di as smcl as txt _col(5) "{hline 41}"
    -----------------------------------------
      - di as smcl as txt _col(5) "not matched" _col(30) as res %16.0fc (`m1'+`m
> 2')
      = di as smcl as txt _col(5) "not matched" _col(30) as res %16.0fc (0+0)
    not matched                             0
      - if (`m1'|`m2') {
      = if (0|0) {
        di as smcl as txt _col(9) "from master" _col(30) as res %16.0fc `m1' as 
> txt "  `v1'"
        di as smcl as txt _col(9) "from using" _col(30) as res %16.0fc `m2' as t
> xt "  `v2'"
        di
        }
      - if (!`isupdate') {
      = if (!0) {
      - di as smcl as txt _col(5) "matched" _col(30) as res %16.0fc `m3' as txt 
> "  `v3'"
      = di as smcl as txt _col(5) "matched" _col(30) as res %16.0fc 20051 as txt
>  "  (_merge==3)"
    matched                            20,051  (_merge==3)
      - }
      - else {
        if (`m1'==0 & `m2'==0) {
        di
        }
        di as smcl as txt _col(5) "matched" _col(30) as res %16.0fc (`m3'+`m4'+`
> m5')
        di as smcl as txt _col(9) "not updated" _col(30) as res %16.0fc `m3' as 
> txt "  `v3'"
        di as smcl as txt _col(9) "missing updated" _col(30) as res %16.0fc `m4'
>  as txt "  `v4'"
        di as smcl as txt _col(9) "nonmissing conflict" _col(30) as res %16.0fc 
> `m5' as txt "  `v5'"
        }
      - di as smcl as txt _col(5) "{hline 41}"
    -----------------------------------------
      ---------------------------------------------- end merge.present_table ---
    - }
    -------------------------------------------------------------- end merge ---
  - generate category_n = .
(20,051 missing values generated)
  - replace category_n = `N'
  = replace category_n = 6260
(20,051 real changes made)
  - label var category_n "N respondents in income level in post-merge dataset'"
    ------------------------------------------------------------ begin label ---
    - version 10.0
    - local vv : display "version " string(_caller()) ", missing:"
    - gettoken val : 0
    - if (strpos("`val'", "val") > 0 ) {
    = if (strpos("var", "val") > 0 ) {
      gettoken val 0 : 0
      syntax anything [, nofix]
      if "`fix'" != "" {
      local fix ", nofix"
      }
      gettoken var rest : anything
      while `"`rest'"' != "" {
      gettoken lab rest : rest
      local label "`lab'"
      }
      local vlist : list anything - lab
      if "`lab'" == "." {
      local lab ""
      }
      foreach var of varlist `vlist' {
      `vv' _label `val' `var' `lab' `fix'
      }
      }
    - else {
    - `vv' _label `macval(0)'
    = version 16, missing: _label var category_n "N respondents in income level 
> in post-merge dataset'"
    - }
    -------------------------------------------------------------- end label ---
  - di "Merged ASEC values with original Research dataset for inc_level " `inc_l
> evel' " ($`lower_bound'-`upper_bound') and year `y'."
  = di "Merged ASEC values with original Research dataset for inc_level " 3 " ($
> 25000-35000) and year 2019."
Merged ASEC values with original Research dataset for inc_level 3 ($25000-35000)
>  and year 2019.
  - tempfile temp_`inc_level'_`y'
  = tempfile temp_3_2019
  - save `temp_`inc_level'_`y'', replace
  = save /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.000009, repla
> ce
(note: file /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.000009 not
>  found)
file /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.000009 saved
  - di "Saved REDI data (with continuous data) for inc_level " `inc_level' " ($`
> lower_bound'-`upper_bound') and year `y' in file"
  = di "Saved REDI data (with continuous data) for inc_level " 3 " ($25000-35000
> ) and year 2019 in file"
Saved REDI data (with continuous data) for inc_level 3 ($25000-35000) and year 2
> 019 in file
  - }
  - use `working_regex', clear
  = use /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.000003, clear
(Streamlined ACS data, 2019)
  - keep if `inc_cat_var' == `inc_level'
  = keep if acs_hhinc == 4
(277,852 observations deleted)
  - di "The current inc_level is: " `inc_level'
  = di "The current inc_level is: " 4
The current inc_level is: 4
  - if regexm(inc_decoded, "^[a-z/A-Z]+") == 1 {
    di "The inc_level " `inc_level' " is at the lowest end of the " "original Re
> search dataset income range"
    destring inc_decoded, ignore("Less than LESS THAN Under,$ ") generate(`inc_c
> at_var'_ub)
    gen `inc_cat_var'_lb = -100000
    di "Lower bound of -100,000 created for inc_level " `inc_level'
    }
  - else if regexm(inc_decoded, "[a-z/A-Z]+$") == 1 {
    di "The inc_level " `inc_level' " is at the highest end of the " "original R
> esearch dataset income range"
    destring inc_decoded, ignore("and over or over,$ or more OR MORE") generate(
> `inc_cat_var'_lb)
    gen `inc_cat_var'_ub = 999999
    di "Upper bound of 999999 created for inc_level " `inc_level'
    }
  - else if regexm(inc_decoded, "[.][a-z]") == 1 {
    di "The inc_level " `inc_level' " is all missing"
    gen `inc_cat_var'_lb = .
    gen `inc_cat_var'_ub = .
    di "Lower and upper bound of . created for inc_level " `inc_level'
    }
  - else if regexm(inc_decoded, "[0-9]+$") == 1 {
  - di "The inc_level " `inc_level' " has a lower and an upper level"
  = di "The inc_level " 4 " has a lower and an upper level"
The inc_level 4 has a lower and an upper level
  - split inc_decoded, parse("-" "to" "-" "to under" "to less than" "UP TO" "but
>  less than") ignore(" ,$") destring
    ------------------------------------------------------------ begin split ---
    - version 8
    - syntax varname(str) [if] [in] [, Generate(str) noTrim Parse(str asis) DEST
> RING force float Ignore(string asis) percent Limit(numlist int >0 max=1) ]
    - local verpre : display "version " %4.1f _caller() ":"
    - if "`destring'"=="" {
    = if "destring"=="" {
      foreach option in force float ignore percent {
      if `"``option''"'!="" {
      display as error "may not specify `option' without specifying destring"
      exit 198
      }
      }
      }
    - else {
    - if `"`ignore'"'!="" {
    = if `"" ,$""'!="" {
    - if _caller() >= 14 {
    - if ustrfindfirst(`"`ignore'"',",") & !ustrfindfirst(`"`ignore'"',`"""') {
    = if ustrfindfirst(`"" ,$""',",") & !ustrfindfirst(`"" ,$""',`"""') {
      display as error `"ignore string must be enclosed with quotes to ignore co
> mmas or use options"'
      exit 198
      }
    - }
    - `verpre' _parse_ignore `ignore'
    = version 16.0: _parse_ignore " ,$"
      -------------------------------------------------- begin _parse_ignore ---
      - version 14
      - sreturn clear
      - if _caller() < 14 {
        capture syntax [anything] , [ASChars] [ASBytes] [illegal]
        if !_rc {
        if "`aschars'`asbytes'`illegal'"!="" {
        display as error "may not specify options in the ignore option for Stata
>  version less than 14"
        exit 198
        }
        }
        sreturn local aschars 0
        sreturn local illegal 0
        }
      - else {
      - syntax [anything] , [ASChars] [ASBytes] [illegal]
      - if "`asbytes'"!="" {
      = if ""!="" {
        if "`aschars'"!="" {
        display as error "may specify only one of the ignore options aschars and
>  asbytes"
        exit 198
        }
        if "`illegal'"!="" {
        display as error "may not specify the ignore option illegal when specify
> ing asbytes"
        exit 198
        }
        }
      - if "`asbytes'"=="" {
      = if ""=="" {
      - if ustrinvalidcnt(`"`anything'"') {
      = if ustrinvalidcnt(`"" ,$""') {
        display as error "invalid Unicode characters may not be ignored when rem
> oving aschars"
        exit 198
        }
      - }
      - sreturn local aschars = "`asbytes'"==""
      = sreturn local aschars = ""==""
      - sreturn local illegal = "`illegal'"!=""
      = sreturn local illegal = ""!=""
      - capture sreturn local ignore `anything'
      = capture sreturn local ignore " ,$"
      - if _rc {
        sreturn local ignore `"`anything'"'
        }
      - }
      ---------------------------------------------------- end _parse_ignore ---
    - }
    - }
    - marksample touse, strok
    - qui count if `touse'
    = qui count if __000000
    - if r(N) == 0 {
      error 2000
      }
    - if `"`parse'"' == `""' | `"`parse'"' == `""""' {
    = if `""-" "to" "-" "to under" "to less than" "UP TO" "but less than""' == `
> ""' | `""-" "to" "-" "to under" "to less than" "UP TO" "but less than""' == `"
> """' {
      if "`trim'" != "" {
      di as err "parsing on spaces incompatible with notrim"
      exit 198
      }
      local parse `"" ""'
      local trm "trim"
      }
    - if `"`parse'"' == `""' | `"`parse'"' == `""""' {
    = if `""-" "to" "-" "to under" "to less than" "UP TO" "but less than""' == `
> ""' | `""-" "to" "-" "to under" "to less than" "UP TO" "but less than""' == `"
> """' {
      local parse `"" ""'
      local trm "trim"
      }
    - local nparse : word count `parse'
    = local nparse : word count "-" "to" "-" "to under" "to less than" "UP TO" "
> but less than"
    - tokenize `"`parse'"'
    = tokenize `""-" "to" "-" "to under" "to less than" "UP TO" "but less than""
> '
    - if `"`generate'"' != "" {
    = if `""' != "" {
      confirm name `generate'
      if `: word count `generate'' > 1 {
      di as err "invalid stub `generate'"
      exit 198
      }
      }
    - qui {
    - tempvar vw tp mp pl
    - gen int `tp' = 0
    = gen int __000002 = 0
    - gen int `mp' = 0
    = gen int __000003 = 0
    - gen int `pl' = 0
    = gen int __000004 = 0
    - gen str1 `vw' = ""
    = gen str1 __000001 = ""
    - if "`trim'" == "" {
    = if "" == "" {
    - replace `vw' = trim(`varlist') if `touse'
    = replace __000001 = trim(inc_decoded) if __000000
    - }
    - else {
      replace `vw' = `varlist' if `touse'
      }
    - }
    - if "`generate'" == "" {
    = if "" == "" {
    - local generate "`varlist'"
    = local generate "inc_decoded"
    - }
    - local j = 0
    - local go = 1
    - if "`limit'" == "" {
    = if "" == "" {
    - local limit .
    - }
    - qui while `go' & `j' < `limit' {
    = qui while 1 & 0 < . {
    - replace `mp' = .
    = replace __000003 = .
    - replace `pl' = 0
    = replace __000004 = 0
    - forval i = 1 / `nparse' {
    = forval i = 1 / 7 {
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"-"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"-"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"to"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"to"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"-"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"-"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"to under"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"to under"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"to less than"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"to less than"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"UP TO"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"UP TO"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"but less than"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"but less than"') if __000003 == __000002
    - }
    - local ++j
    - tempvar part`j'
    = tempvar part1
    - gen str1 `part`j'' = ""
    = gen str1 __000005 = ""
    - replace `part`j'' = substr(`vw', 1, `mp'-1) if `mp' < .
    = replace __000005 = substr(__000001, 1, __000003-1) if __000003 < .
    - replace `vw' = `trm'(substr(`vw', `mp'+`pl', .)) if `mp' < .
    = replace __000001 = (substr(__000001, __000003+__000004, .)) if __000003 < 
> .
    - replace `part`j'' = `vw' if `mp' >= .
    = replace __000005 = __000001 if __000003 >= .
    - replace `vw' = "" if `mp' >= .
    = replace __000001 = "" if __000003 >= .
    - local newvars "`newvars'`generate'`j' "
    = local newvars "inc_decoded1 "
    - capture assert `vw' == ""
    = capture assert __000001 == ""
    - local go = _rc
    - }
    - qui while `go' & `j' < `limit' {
    = qui while 9 & 1 < . {
    - replace `mp' = .
    = replace __000003 = .
    - replace `pl' = 0
    = replace __000004 = 0
    - forval i = 1 / `nparse' {
    = forval i = 1 / 7 {
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"-"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"-"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"to"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"to"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"-"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"-"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"to under"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"to under"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"to less than"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"to less than"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"UP TO"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"UP TO"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"but less than"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"but less than"') if __000003 == __000002
    - }
    - local ++j
    - tempvar part`j'
    = tempvar part2
    - gen str1 `part`j'' = ""
    = gen str1 __000006 = ""
    - replace `part`j'' = substr(`vw', 1, `mp'-1) if `mp' < .
    = replace __000006 = substr(__000001, 1, __000003-1) if __000003 < .
    - replace `vw' = `trm'(substr(`vw', `mp'+`pl', .)) if `mp' < .
    = replace __000001 = (substr(__000001, __000003+__000004, .)) if __000003 < 
> .
    - replace `part`j'' = `vw' if `mp' >= .
    = replace __000006 = __000001 if __000003 >= .
    - replace `vw' = "" if `mp' >= .
    = replace __000001 = "" if __000003 >= .
    - local newvars "`newvars'`generate'`j' "
    = local newvars "inc_decoded1 inc_decoded2 "
    - capture assert `vw' == ""
    = capture assert __000001 == ""
    - local go = _rc
    - }
    - qui while `go' & `j' < `limit' {
    = qui while 0 & 2 < . {
      replace `mp' = .
      replace `pl' = 0
      forval i = 1 / `nparse' {
      replace `tp' = index(`vw', `"``i''"')
      replace `mp' = min(`tp', `mp') if `tp'
      replace `pl' = length(`"``i''"') if `mp' == `tp'
      }
      local ++j
      tempvar part`j'
      gen str1 `part`j'' = ""
      replace `part`j'' = substr(`vw', 1, `mp'-1) if `mp' < .
      replace `vw' = `trm'(substr(`vw', `mp'+`pl', .)) if `mp' < .
      replace `part`j'' = `vw' if `mp' >= .
      replace `vw' = "" if `mp' >= .
      local newvars "`newvars'`generate'`j' "
      capture assert `vw' == ""
      local go = _rc
      }
    - capture confirm new var `newvars'
    = capture confirm new var inc_decoded1 inc_decoded2 
    - if _rc {
      di as err "cannot generate new variables using stub `generate'"
      exit _rc
      }
    - qui forval i = 1 / `j' {
    = qui forval i = 1 / 2 {
    - gen str1 `generate'`i' = ""
    = gen str1 inc_decoded1 = ""
    - replace `generate'`i' = `part`i''
    = replace inc_decoded1 = __000005
    - }
    - gen str1 `generate'`i' = ""
    = gen str1 inc_decoded2 = ""
    - replace `generate'`i' = `part`i''
    = replace inc_decoded2 = __000006
    - }
    - return local varlist "`newvars'"
    = return local varlist "inc_decoded1 inc_decoded2 "
    - return local nvars "`j'"
    = return local nvars "2"
    - local s = cond(`j' > 1, "s", "")
    = local s = cond(2 > 1, "s", "")
    - if "`destring'" != "" {
    = if "destring" != "" {
    - di as res "variable`s' born as string: "
    = di as res "variables born as string: "
variables born as string: 
    - }
    - else di as res "variable`s' created as string: "
    = else di as res "variables created as string: "
    - ds `newvars'
    = ds inc_decoded1 inc_decoded2 
      ------------------------------------------------------------- begin ds ---
      - version 9
      - local version : di "version " string(_caller()) ":"
      - if (_caller() <= 4) {
        `version' describe, simple
        exit
        }
      - else {
      - ds_util `0'
      = ds_util inc_decoded1 inc_decoded2 
        ------------------------------------------------------ begin ds_util ---
        - version 8
        - syntax [varlist] [, HAS(str asis) NOT(str asis) NOT2 INSEnsitive Detai
> l Alpha Varwidth(int 12) Skip(int 2) INDENT(int 0)]
        - if "`varlist'" == "" {
        = if "inc_decoded1 inc_decoded2" == "" {
          exit
          }
        - if !inrange(`indent',0,244) {
        = if !inrange(0,0,244) {
          di as err "indent() should be in the range 0..244"
          exit 198
          }
        - if !inrange(`varwidth',5,32) {
        = if !inrange(12,5,32) {
          di as err "varwidth() should be in the range 5..32"
          exit 198
          }
        - if !inrange(`skip',1,10) {
        = if !inrange(2,1,10) {
          di as err "skip() should be in the range 1..10"
          exit 198
          }
        - local nopts = (`"`has'"' != "") + (`"`not'"' != "") + ("`not2'" != "")
        = local nopts = (`""' != "") + (`""' != "") + ("" != "")
        - if `nopts' == 3 {
        = if 0 == 3 {
          di as err "may not combine options has(), not(), and not"
          exit 198
          }
        - else if `nopts' == 2 {
        = else if 0 == 2 {
          if (`"`has'"' == "") {
          di as err "may not combine options not() and not"
          exit 198
          }
          else if (`"`not'"' == "") {
          di as err "may not combine options has() and not"
          exit 198
          }
          else if (`"`not2'"' == "") {
          di as err "may not combine options has() and not()"
          exit 198
          }
          }
        - if `"`not'"' != "" {
        = if `""' != "" {
          local has `"`not'"'
          local opt "not"
          }
        - else if `"`has'"' != "" {
        = else if `""' != "" {
          local opt "has"
          }
        - local inse = "`insensitive'" != ""
        = local inse = "" != ""
        - if `"`has'"' != "" {
        = if `""' != "" {
          CheckHas `"`has'"' "`opt'" "`inse'"
          if "`what'" == "varl" | "`what'" == "vall" {
          VarlVall "`what'" `"`which'"' "`varlist'" "`inse'"
          }
          else if "`what'" == "f" {
          Format `"`which'"' "`varlist'" "`inse'"
          }
          else if "`what'" == "c" {
          Char `"`which'"' "`varlist'" "`inse'"
          }
          else if "`what'" == "t" {
          Type `"`which'"' "`varlist'"
          }
          if `"`not'"' != "" {
          local varlist : list varlist - vlist
          }
          else if `"`has'"' != "" {
          local varlist "`vlist'"
          }
          }
        - if `"`not2'"' != "" {
        = if `""' != "" {
          unab all : *
          local varlist : list all - varlist
          }
        - if "`varlist'" == "" {
        = if "inc_decoded1 inc_decoded2" == "" {
          exit
          }
        - if "`alpha'" != "" {
        = if "" != "" {
          local varlist : list sort varlist
          }
        - if "`detail'" != "" {
        = if "" != "" {
          describe `varlist'
          }
        - else {
        - local nvar : word count `varlist'
        = local nvar : word count inc_decoded1 inc_decoded2
        - local ncol = int((`:set linesize' + `skip') / (`varwidth' + `skip'))
        = local ncol = int((80 + 2) / (12 + 2))
        - local i 0
        - local vlist
        - foreach v of local varlist {
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" inc_decoded1"'
        - }
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" inc_decoded1 inc_decoded2"'
        - }
        - DisplayInCols txt `indent' `skip' 0 `vlist'
        = DisplayInCols txt 0 2 0  inc_decoded1 inc_decoded2
          -------------------------------------- begin ds_util.DisplayInCols ---
          - gettoken sty 0 : 0
          - gettoken indent 0 : 0
          - gettoken pad 0 : 0
          - gettoken wid 0 : 0
          - local indent = cond(`indent'==. | `indent'<0, 0, `indent')
          = local indent = cond(0==. | 0<0, 0, 0)
          - local pad = cond(`pad'==. | `pad'<1, 2, `pad')
          = local pad = cond(2==. | 2<1, 2, 2)
          - local wid = cond(`wid'==. | `wid'<0, 0, `wid')
          = local wid = cond(0==. | 0<0, 0, 0)
          - local n : list sizeof 0
          - if `n'==0 {
          = if 2==0 {
            exit
            }
          - foreach x of local 0 {
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(0, length(`"inc_decoded1"'))
          - }
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"inc_decoded2"'))
          - }
          - local wid = `wid' + `pad'
          = local wid = 12 + 2
          - local cols = int((`c(linesize)'+1-`indent')/`wid')
          = local cols = int((80+1-0)/14)
          - if `cols' < 2 {
          = if 5 < 2 {
            if `indent' {
            local col "_column(`=`indent'+1')"
            }
            foreach x of local 0 {
            di as `sty' `col' `"`x'"'
            }
            exit
            }
          - local lines = `n'/`cols'
          = local lines = 2/5
          - local lines = int(cond(`lines'>int(`lines'), `lines'+1, `lines'))
          = local lines = int(cond(.4>int(.4), .4+1, .4))
          - forvalues i=1(1)`lines' {
          = forvalues i=1(1)1 {
          - local top = min((`cols')*`lines'+`i', `n')
          = local top = min((5)*1+1, 2)
          - local col = `indent' + 1
          = local col = 0 + 1
          - forvalues j=`i'(`lines')`top' {
          = forvalues j=1(1)2 {
          - local x : word `j' of `0'
          = local x : word 1 of   inc_decoded1 inc_decoded2
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(1) "inc_decoded1" _c
inc_decoded1          - local col = `col' + `wid'
          = local col = 1 + 14
          - }
          - local x : word `j' of `0'
          = local x : word 2 of   inc_decoded1 inc_decoded2
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(15) "inc_decoded2" _c
              inc_decoded2          - local col = `col' + `wid'
          = local col = 15 + 14
          - }
          - di as `sty'
          = di as txt

          - }
          ---------------------------------------- end ds_util.DisplayInCols ---
        - }
        - return local varlist `varlist'
        = return local varlist inc_decoded1 inc_decoded2
        -------------------------------------------------------- end ds_util ---
      - exit
      --------------------------------------------------------------- end ds ---
    - if "`destring'" != "" {
    = if "destring" != "" {
    - if `"`ignore'"' != "" {
    = if `"" ,$""' != "" {
    - local ignore `"ignore(`ignore')"'
    = local ignore `"ignore(" ,$")"'
    - }
    - `verpre' destring `newvars', replace `force' `float' `ignore' `percent'
    = version 16.0: destring inc_decoded1 inc_decoded2 , replace   ignore(" ,$")
>  
      ------------------------------------------------------- begin destring ---
      - version 14
      - local cmdargs = `"`0'"'
      = local cmdargs = `"inc_decoded1 inc_decoded2 , replace   ignore(" ,$") "'
      - local verpre : display "version " %4.1f _caller() ":"
      - syntax [varlist], [Generate(string) replace] [force] [float] [Ignore(str
> ing asis)] [percent] [dpcomma]
      - if _caller() >= 14 {
      - if ustrpos(`"`ignore'"',",") & !ustrpos(`"`ignore'"',`"""') {
      = if ustrpos(`"" ,$""',",") & !ustrpos(`"" ,$""',`"""') {
        display as error `"ignore string must be enclosed with quotes to ignore 
> commas or use options"'
        exit 198
        }
      - }
      - `verpre' _parse_ignore `ignore'
      = version 16.0: _parse_ignore " ,$"
        ------------------------------------------------ begin _parse_ignore ---
        - version 14
        - sreturn clear
        - if _caller() < 14 {
          capture syntax [anything] , [ASChars] [ASBytes] [illegal]
          if !_rc {
          if "`aschars'`asbytes'`illegal'"!="" {
          display as error "may not specify options in the ignore option for Sta
> ta version less than 14"
          exit 198
          }
          }
          sreturn local aschars 0
          sreturn local illegal 0
          }
        - else {
        - syntax [anything] , [ASChars] [ASBytes] [illegal]
        - if "`asbytes'"!="" {
        = if ""!="" {
          if "`aschars'"!="" {
          display as error "may specify only one of the ignore options aschars a
> nd asbytes"
          exit 198
          }
          if "`illegal'"!="" {
          display as error "may not specify the ignore option illegal when speci
> fying asbytes"
          exit 198
          }
          }
        - if "`asbytes'"=="" {
        = if ""=="" {
        - if ustrinvalidcnt(`"`anything'"') {
        = if ustrinvalidcnt(`"" ,$""') {
          display as error "invalid Unicode characters may not be ignored when r
> emoving aschars"
          exit 198
          }
        - }
        - sreturn local aschars = "`asbytes'"==""
        = sreturn local aschars = ""==""
        - sreturn local illegal = "`illegal'"!=""
        = sreturn local illegal = ""!=""
        - capture sreturn local ignore `anything'
        = capture sreturn local ignore " ,$"
        - if _rc {
          sreturn local ignore `"`anything'"'
          }
        - }
        -------------------------------------------------- end _parse_ignore ---
      - if _caller() < 14 {
        local aschars 0
        syntax [varlist], [Generate(string) replace] [force] [float] [Ignore(str
> ing)] [percent] [dpcomma]
        }
      - else {
      - if `"`s(ignore)'"'!="" {
      = if `" ,$"'!="" {
      - local ignore `"`s(ignore)'"'
      = local ignore `" ,$"'
      - }
      - local aschars `s(aschars)'
      = local aschars 1
      - if `s(illegal)' {
      = if 0 {
        local illegal = ustrunescape("\ufffd")
        }
      - }
      - if "`percent'" == "percent" {
      = if "" == "percent" {
        if !ustrpos(`"`ignore'"', "%") {
        local ignore `"`ignore'%"'
        }
        }
      - if "`illegal'"!="" {
      = if ""!="" {
        local ignore `"`ignore'`illegal'"'
        }
      - if `"`float'"'!="" {
      = if `""'!="" {
        local gtype "float"
        }
      - else {
      - local gtype "double"
      - }
      - if "`generate'" != "" & "`replace'" != "" {
      = if "" != "" & "replace" != "" {
        di as err "options generate and replace are mutually exclusive"
        exit 198
        }
      - if "`generate'" == "" & "`replace'" == "" {
      = if "" == "" & "replace" == "" {
        di as err "must specify either generate or replace option"
        exit 198
        }
      - if "`generate'" != "" {
      = if "" != "" {
        local ct1: word count `varlist'
        local save "`varlist'"
        local 0 "`generate'"
        capture syntax newvarlist
        if _rc {
        di as err "generate() contains existing variable(s) and/or illegal varia
> ble name(s)"
        exit _rc
        }
        local generate "`varlist'"
        local varlist "`save'"
        local ct2: word count `generate'
        if `ct1' != `ct2' {
        di as err "number of variables in varlist must equal"
        di as err "number of variables in generate(newvarlist)"
        exit 198
        }
        }
      - local m 1
      - if `"`ignore'"' == "" {
      = if `" ,$"' == "" {
        local ignore ""
        }
      - if `aschars' {
      = if 1 {
      - local l = ustrlen(`"`ignore'"')
      = local l = ustrlen(`" ,$"')
      - }
      - else {
        local l = length(`"`ignore'"')
        }
      - while `m' <= `l' {
      = while 1 <= 3 {
      - if `aschars' {
      = if 1 {
      - local char`m' = usubstr(`"`ignore'"', `m', 1)
      = local char1 = usubstr(`" ,$"', 1, 1)
      - }
      - else {
        local char`m' = substr(`"`ignore'"', `m', 1)
        }
      - local m = `m' + 1
      = local m = 1 + 1
      - }
      - while `m' <= `l' {
      = while 2 <= 3 {
      - if `aschars' {
      = if 1 {
      - local char`m' = usubstr(`"`ignore'"', `m', 1)
      = local char2 = usubstr(`" ,$"', 2, 1)
      - }
      - else {
        local char`m' = substr(`"`ignore'"', `m', 1)
        }
      - local m = `m' + 1
      = local m = 2 + 1
      - }
      - while `m' <= `l' {
      = while 3 <= 3 {
      - if `aschars' {
      = if 1 {
      - local char`m' = usubstr(`"`ignore'"', `m', 1)
      = local char3 = usubstr(`" ,$"', 3, 1)
      - }
      - else {
        local char`m' = substr(`"`ignore'"', `m', 1)
        }
      - local m = `m' + 1
      = local m = 3 + 1
      - }
      - while `m' <= `l' {
      = while 4 <= 3 {
        if `aschars' {
        local char`m' = usubstr(`"`ignore'"', `m', 1)
        }
        else {
        local char`m' = substr(`"`ignore'"', `m', 1)
        }
        local m = `m' + 1
        }
      - if `aschars' {
      = if 1 {
      - local aswhat "character"
      - }
      - else {
        local aswhat "byte"
        }
      - if "`generate'"!="" {
      = if ""!="" {
        local genrep "generate"
        }
      - else {
      - local genrep "replace"
      - }
      - local tvars OLDVAR NEWVAR ismissing found topct
      - tempvar `tvars'
      = tempvar OLDVAR NEWVAR ismissing found topct
      - local varno 0
      - foreach var of varlist `varlist' {
      = foreach var of varlist inc_decoded1 inc_decoded2 {
      - local varno = `varno' + 1
      = local varno = 0 + 1
      - if "`generate'"!="" {
      = if ""!="" {
        local finalvarname : word `varno' of `generate'
        local finalprint "`finalvarname' "
        }
      - else {
      - local finalvarname "`var'"
      = local finalvarname "inc_decoded1"
      - local finalprint ""
      - }
      - capture confirm string variable `var'
      = capture confirm string variable inc_decoded1
      - if _rc != 0 {
        di as txt "`var' already numeric; no " as res "`genrep'"
        }
      - else {
      - qui gen `OLDVAR' = `var'
      = qui gen __000007 = inc_decoded1
      - local jj 1
      - local b
      - local bcnt = 0
      - local c
      - local makepct
      - while `"`char`jj''"' != "" {
      = while `" "' != "" {
      - capture drop `found'
      = capture drop __00000A
      - capture drop `topct'
      = capture drop __00000B
      - local t `"`char`jj''"'
      = local t `" "'
      - if `aschars' {
      = if 1 {
      - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
      = qui gen byte __00000A = ustrpos(__000007, `" "') != 0
      - }
      - else {
        qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
        }
      - qui summarize `found', meanonly
      = qui summarize __00000A, meanonly
      - if r(sum) > 0 {
      - if `"`t'"'=="`illegal'" {
      = if `" "'=="" {
        local b `"`b' illegal Unicode"'
        }
      - else if `"`t'"' == " " {
      = else if `" "' == " " {
      - local b `"`b' space"'
      = local b `" space"'
      - }
      - else {
        local b `"`b' `t'"'
        }
      - local ++bcnt
      - }
      - if `aschars' {
      = if 1 {
      - if `"`t'"'=="%" {
      = if `" "'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if ustrpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
      - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
      = qui replace __000007 = usubinstr(__000007, `" "', "", .)
      - }
      - else {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if strpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
        }
      - local jj = `jj' + 1
      = local jj = 1 + 1
      - }
      - while `"`char`jj''"' != "" {
      = while `","' != "" {
      - capture drop `found'
      = capture drop __00000A
      - capture drop `topct'
      = capture drop __00000B
      - local t `"`char`jj''"'
      = local t `","'
      - if `aschars' {
      = if 1 {
      - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
      = qui gen byte __00000A = ustrpos(__000007, `","') != 0
      - }
      - else {
        qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
        }
      - qui summarize `found', meanonly
      = qui summarize __00000A, meanonly
      - if r(sum) > 0 {
        if `"`t'"'=="`illegal'" {
        local b `"`b' illegal Unicode"'
        }
        else if `"`t'"' == " " {
        local b `"`b' space"'
        }
        else {
        local b `"`b' `t'"'
        }
        local ++bcnt
        }
      - if `aschars' {
      = if 1 {
      - if `"`t'"'=="%" {
      = if `","'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if ustrpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
      - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
      = qui replace __000007 = usubinstr(__000007, `","', "", .)
      - }
      - else {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if strpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
        }
      - local jj = `jj' + 1
      = local jj = 2 + 1
      - }
      - while `"`char`jj''"' != "" {
      = while `"$"' != "" {
      - capture drop `found'
      = capture drop __00000A
      - capture drop `topct'
      = capture drop __00000B
      - local t `"`char`jj''"'
      = local t `"$"'
      - if `aschars' {
      = if 1 {
      - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
      = qui gen byte __00000A = ustrpos(__000007, `"$"') != 0
      - }
      - else {
        qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
        }
      - qui summarize `found', meanonly
      = qui summarize __00000A, meanonly
      - if r(sum) > 0 {
        if `"`t'"'=="`illegal'" {
        local b `"`b' illegal Unicode"'
        }
        else if `"`t'"' == " " {
        local b `"`b' space"'
        }
        else {
        local b `"`b' `t'"'
        }
        local ++bcnt
        }
      - if `aschars' {
      = if 1 {
      - if `"`t'"'=="%" {
      = if `"$"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if ustrpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
      - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
      = qui replace __000007 = usubinstr(__000007, `"$"', "", .)
      - }
      - else {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if strpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
        }
      - local jj = `jj' + 1
      = local jj = 3 + 1
      - }
      - while `"`char`jj''"' != "" {
      = while `""' != "" {
        capture drop `found'
        capture drop `topct'
        local t `"`char`jj''"'
        if `aschars' {
        qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
        }
        else {
        qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
        }
        qui summarize `found', meanonly
        if r(sum) > 0 {
        if `"`t'"'=="`illegal'" {
        local b `"`b' illegal Unicode"'
        }
        else if `"`t'"' == " " {
        local b `"`b' space"'
        }
        else {
        local b `"`b' `t'"'
        }
        local ++bcnt
        }
        if `aschars' {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if ustrpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
        }
        else {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if strpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
        }
        local jj = `jj' + 1
        }
      - if _caller() >= 14 {
      - qui replace `OLDVAR' = ustrtrim(`OLDVAR')
      = qui replace __000007 = ustrtrim(__000007)
      - }
      - else {
        qui replace `OLDVAR' = strtrim(`OLDVAR')
        }
      - quietly gen byte `ismissing' = `OLDVAR'=="" | `OLDVAR'=="." | (strlen(`O
> LDVAR')==2 & inrange(`OLDVAR',".a",".z"))
      = quietly gen byte __000009 = __000007=="" | __000007=="." | (strlen(__000
> 007)==2 & inrange(__000007,".a",".z"))
      - if ("`dpcomma'" != "") {
      = if ("" != "") {
        qui replace `OLDVAR' = subinstr(`OLDVAR',".","X",.) if !`ismissing'
        qui replace `OLDVAR' = subinstr(`OLDVAR', ",", ".", 1) if !ustrregexm(`O
> LDVAR',"(,[a-z])|(^,$)")
        }
      - if _caller() >= 14 {
      - qui replace `OLDVAR' = ustrregexrf(`OLDVAR',"^0+","0")
      = qui replace __000007 = ustrregexrf(__000007,"^0+","0")
      - }
      - else {
        qui replace `OLDVAR' = regexr(`OLDVAR',"^0+","0")
        }
      - qui gen `gtype' `NEWVAR' = real(`OLDVAR')
      = qui gen double __000008 = real(__000007)
      - qui summarize `ismissing', meanonly
      = qui summarize __000009, meanonly
      - local oldmiss = r(sum)
      - qui count if missing(`NEWVAR')
      = qui count if missing(__000008)
      - local newmiss = r(N)
      - local flag = `oldmiss'!=`newmiss'
      = local flag = 0!=0
      - if `flag' & ("`force'" == "") {
      = if 0 & ("" == "") {
        if `"`ignore'"' != "" {
        di as txt "`var': contains " "`aswhat's not specified in " as res "ignor
> e()" as txt "; no " as res "`genrep'"
        }
        else {
        di as txt "`var': contains " "nonnumeric `aswhat's; no " as res "`genrep
> '"
        }
        }
      - else {
      - order `NEWVAR', after(`var')
      = order __000008, after(inc_decoded1)
        -------------------------------------------------------- begin order ---
        - version 11
        - if (_caller()<11) {
          _order `macval(0)'
          exit
          }
        - syntax varlist[, Before(varname) After(varname) first last SEQuential 
> ALPHAbetic]
        - if (`"`before'"' == "" & `"`after'"' == "" & "`first'" == "" & "`last'
> " == "" & "`alphabetic'" == "" & "`sequential'" == "") {
        = if (`""' == "" & `"inc_decoded1"' == "" & "" == "" & "" == "" & "" == 
> "" & "" == "") {
          _order `macval(0)'
          exit
          }
        - if (`"`before'"' != "" & `"`after'"' != "") {
        = if (`""' != "" & `"inc_decoded1"' != "") {
          dis as error "before() may not be combined with after()"
          exit 198
          }
        - if (`"`before'"' != "" & `"`first'"' != "") {
        = if (`""' != "" & `""' != "") {
          dis as error "before() may not be combined with first()"
          exit 198
          }
        - if (`"`before'"' != "" & `"`last'"' != "") {
        = if (`""' != "" & `""' != "") {
          dis as error "before() may not be combined with last()"
          exit 198
          }
        - if (`"`after'"' != "" & `"`before'"' != "") {
        = if (`"inc_decoded1"' != "" & `""' != "") {
          dis as error "after() may not be combined with before()"
          exit 198
          }
        - if (`"`after'"' != "" & `"`first'"' != "") {
        = if (`"inc_decoded1"' != "" & `""' != "") {
          dis as error "after() may not be combined with first()"
          exit 198
          }
        - if (`"`after'"' != "" & `"`last'"' != "") {
        = if (`"inc_decoded1"' != "" & `""' != "") {
          dis as error "after() may not be combined with last()"
          exit 198
          }
        - if ("`first'" != "" & "`last'" != "") {
        = if ("" != "" & "" != "") {
          dis as error "first may not be combined with last"
          exit 198
          }
        - if ("`sequential'" != "" & "`alphabetic'" != "") {
        = if ("" != "" & "" != "") {
          dis as error "sequential may not be combined with alphabetic"
          exit 198
          }
        - if ("`first'" != "") {
        = if ("" != "") {
          if "`alphabetic'" != "" {
          local varlist : list sort varlist
          }
          if "`sequential'" != "" {
          aorder `varlist'
          }
          else {
          _order `varlist'
          }
          }
        - if ("`last'" != "") {
        = if ("" != "") {
          unab vlist : _all
          local list : list vlist - varlist
          if "`alphabetic'" != "" {
          local varlist : list sort varlist
          }
          if "`sequential'" != "" {
          preserve
          keep `varlist'
          aorder `varlist'
          unab varlist : _all
          restore
          }
          _order `list' `varlist'
          }
        - if (`"`before'"' != "") {
        = if (`""' != "") {
          local test : list before in varlist
          if `test' {
          dis as err "varname specified in before() may not" " be in varlist"
          exit 198
          }
          if "`alphabetic'" != "" {
          local varlist : list sort varlist
          }
          if "`sequential'" != "" {
          preserve
          keep `varlist'
          aorder `varlist'
          unab varlist : _all
          restore
          }
          unab vlist : _all
          local vlist : list vlist - varlist
          local var_num : list posof "`before'" in vlist
          local var_num = `var_num' - 1
          local fvar : word 1 of `vlist'
          capture local lvar : word `var_num' of `vlist'
          if _rc {
          _order `varlist'
          exit
          }
          unab nlist : `fvar'-`lvar'
          local nlist : list nlist - varlist
          _order `nlist' `varlist'
          }
        - if (`"`after'"' != "") {
        = if (`"inc_decoded1"' != "") {
        - local test : list after in varlist
        - if `test' {
        = if 0 {
          dis as err "varname specified in after() may not" " be in varlist"
          exit 198
          }
        - if "`alphabetic'" != "" {
        = if "" != "" {
          local varlist : list sort varlist
          }
        - if "`sequential'" != "" {
        = if "" != "" {
          preserve
          keep `varlist'
          aorder `varlist'
          unab varlist : _all
          restore
          }
        - unab vlist : _all
          ------------------------------------------------------- begin unab ---
          - version 6
          - gettoken user 0: 0, parse(" :")
          - gettoken colon 0: 0, parse(" :")
          - if `"`colon'"' != ":" { error 198 }
          = if `":"' != ":" { error 198 }
          - syntax [varlist(default=empty)] [, MIN(integer 1) MAX(integer 120000
> ) NAME(string)]
          - c_local `user' `varlist'
          = c_local vlist year hhwt repwt cluster adjust statefip strata hhincom
> e_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 repwt10 r
> epwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 repwt20
>  repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt29 repwt
> 30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repwt39 rep
> wt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 repwt49 r
> epwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 repwt59
>  repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt68 repwt
> 69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repwt78 rep
> wt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp5 repwt
> p6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14 repwtp
> 15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwtp23 rep
> wtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 repwtp32 
> repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40 repwtp
> 41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwtp49 rep
> wtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 repwtp58 
> repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66 repwtp
> 67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwtp75 rep
> wtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __000000 __
> 000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_decoded2 
> __000007 __00000A __000009 __000008
          - local n : word count `varlist'
          = local n : word count year hhwt repwt cluster adjust statefip strata 
> hhincome_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 re
> pwt10 repwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 
> repwt20 repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt2
> 9 repwt30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repw
> t39 repwt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 re
> pwt49 repwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 
> repwt59 repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt6
> 8 repwt69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repw
> t78 repwt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp
> 5 repwtp6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14
>  repwtp15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwt
> p23 repwtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 re
> pwtp32 repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40
>  repwtp41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwt
> p49 repwtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 re
> pwtp58 repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66
>  repwtp67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwt
> p75 repwtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __00
> 0000 __000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_de
> coded2 __000007 __00000A __000009 __000008
          - if `n'>=`min' & `n'<=`max' { exit }
          = if 187>=1 & 187<=120000 { exit }
          --------------------------------------------------------- end unab ---
        - local vlist : list vlist - varlist
        - local var_num : list posof "`after'" in vlist
        = local var_num : list posof "inc_decoded1" in vlist
        - local fvar : word 1 of `vlist'
        = local fvar : word 1 of year hhwt repwt cluster adjust statefip strata 
> hhincome_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 re
> pwt10 repwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 
> repwt20 repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt2
> 9 repwt30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repw
> t39 repwt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 re
> pwt49 repwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 
> repwt59 repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt6
> 8 repwt69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repw
> t78 repwt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp
> 5 repwtp6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14
>  repwtp15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwt
> p23 repwtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 re
> pwtp32 repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40
>  repwtp41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwt
> p49 repwtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 re
> pwtp58 repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66
>  repwtp67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwt
> p75 repwtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __00
> 0000 __000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_de
> coded2 __000007 __00000A __000009
        - local lvar : word `var_num' of `vlist'
        = local lvar : word 182 of year hhwt repwt cluster adjust statefip strat
> a hhincome_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 
> repwt10 repwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt1
> 9 repwt20 repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repw
> t29 repwt30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 re
> pwt39 repwt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 
> repwt49 repwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt5
> 8 repwt59 repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repw
> t68 repwt69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 re
> pwt78 repwt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repw
> tp5 repwtp6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp
> 14 repwtp15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 rep
> wtp23 repwtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 
> repwtp32 repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp
> 40 repwtp41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 rep
> wtp49 repwtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 
> repwtp58 repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp
> 66 repwtp67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 rep
> wtp75 repwtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __
> 000000 __000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_
> decoded2 __000007 __00000A __000009
        - unab nlist : `fvar'-`lvar'
        = unab nlist : year-inc_decoded1
          ------------------------------------------------------- begin unab ---
          - version 6
          - gettoken user 0: 0, parse(" :")
          - gettoken colon 0: 0, parse(" :")
          - if `"`colon'"' != ":" { error 198 }
          = if `":"' != ":" { error 198 }
          - syntax [varlist(default=empty)] [, MIN(integer 1) MAX(integer 120000
> ) NAME(string)]
          - c_local `user' `varlist'
          = c_local nlist year hhwt repwt cluster adjust statefip strata hhincom
> e_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 repwt10 r
> epwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 repwt20
>  repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt29 repwt
> 30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repwt39 rep
> wt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 repwt49 r
> epwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 repwt59
>  repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt68 repwt
> 69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repwt78 rep
> wt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp5 repwt
> p6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14 repwtp
> 15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwtp23 rep
> wtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 repwtp32 
> repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40 repwtp
> 41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwtp49 rep
> wtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 repwtp58 
> repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66 repwtp
> 67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwtp75 rep
> wtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __000000 __
> 000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1
          - local n : word count `varlist'
          = local n : word count year hhwt repwt cluster adjust statefip strata 
> hhincome_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 re
> pwt10 repwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 
> repwt20 repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt2
> 9 repwt30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repw
> t39 repwt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 re
> pwt49 repwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 
> repwt59 repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt6
> 8 repwt69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repw
> t78 repwt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp
> 5 repwtp6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14
>  repwtp15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwt
> p23 repwtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 re
> pwtp32 repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40
>  repwtp41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwt
> p49 repwtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 re
> pwtp58 repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66
>  repwtp67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwt
> p75 repwtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __00
> 0000 __000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1
          - if `n'>=`min' & `n'<=`max' { exit }
          = if 182>=1 & 182<=120000 { exit }
          --------------------------------------------------------- end unab ---
        - local nlist : list nlist - varlist
        - _order `nlist' `varlist'
        = _order year hhwt repwt cluster adjust statefip strata hhincome_acs rep
> wt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 repwt10 repwt11 re
> pwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 repwt20 repwt21 
> repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt29 repwt30 repwt3
> 1 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repwt39 repwt40 repw
> t41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 repwt49 repwt50 re
> pwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 repwt59 repwt60 
> repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt68 repwt69 repwt7
> 0 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repwt78 repwt79 repw
> t80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp5 repwtp6 repwtp
> 7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14 repwtp15 repwtp
> 16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwtp23 repwtp24 rep
> wtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 repwtp32 repwtp33 
> repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40 repwtp41 repwtp
> 42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwtp49 repwtp50 rep
> wtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 repwtp58 repwtp59 
> repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66 repwtp67 repwtp
> 68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwtp75 repwtp76 rep
> wtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __000000 __000002 __
> 000003 __000004 __000001 __000005 __000006 inc_decoded1 __000008
        - }
        - if ("`alphabetic'" != "" & `"`before'"' == "" & `"`after'"' == "" & "`
> first'" == "" & "`last'" == "") {
        = if ("" != "" & `""' == "" & `"inc_decoded1"' == "" & "" == "" & "" == 
> "") {
          local vlist : list sort varlist
          _order `vlist'
          }
        - if ("`sequential'" != "" & `"`before'"' == "" & `"`after'"' == "" & "`
> first'" == "" & "`last'" == "") {
        = if ("" != "" & `""' == "" & `"inc_decoded1"' == "" & "" == "" & "" == 
> "") {
          aorder `varlist'
          }
        ---------------------------------------------------------- end order ---
      - if `aschars' {
      = if 1 {
      - local dispb `"`b'"'
      = local dispb `" space"'
      - }
      - else {
        local dispb = printablebytes(`"`b'"')
        }
      - local c = plural(`bcnt',strproper("`aswhat'")) + " removed " + plural(`b
> cnt',"was","were") + `":`dispb'"'
      = local c = plural(1,strproper("character")) + " removed " + plural(1,"was
> ","were") + `": space"'
      - if "`makepct'" != "" {
      = if "" != "" {
        if `makepct' {
        qui replace `NEWVAR' = `NEWVAR'/100
        }
        }
      - qui compress `NEWVAR'
      = qui compress __000008
      - local type : type `NEWVAR'
      = local type : type __000008
      - if `flag' {
      = if 0 {
        di as txt "`var': contains nonnumeric `aswhat's" _continue
        if `"`ignore'"'!="" {
        display " not specified in " as result "ignore()" _continue
        }
        if `"`b'"'=="" {
        display "; `finalprint'" as res "`genrep'd " as txt "as " as res "`type'
> " _continue
        }
        display
        }
      - if `"`b'"' != "" {
      = if `" space"' != "" {
      - di as txt "`var': " plural(`bcnt',"`aswhat'") as res `"`dispb'"' as txt 
> " removed; `finalprint'" as res "`genrep'd " as txt "as " as res "`type'"
      = di as txt "inc_decoded1: " plural(1,"character") as res `" space"' as tx
> t " removed; " as res "replaced " as txt "as " as res "long"
inc_decoded1: character space removed; replaced as long
      - }
      - else if `"`b'"' == "" & !`flag' {
      = else if `" space"' == "" & !0 {
        di as txt "`var': all characters numeric; " "`finalprint'" as res "`genr
> ep'd " as txt "as " as res "`type'"
        }
      - if `newmiss' != 0 {
      = if 0 != 0 {
        di as txt "(`newmiss' missing " plural(`newmiss',"value") " generated)"
        }
      - label variable `NEWVAR' `"`: variable label `var''"'
      = label variable __000008 `""'
        -------------------------------------------------------- begin label ---
        - version 10.0
        - local vv : display "version " string(_caller()) ", missing:"
        - gettoken val : 0
        - if (strpos("`val'", "val") > 0 ) {
        = if (strpos("variable", "val") > 0 ) {
          gettoken val 0 : 0
          syntax anything [, nofix]
          if "`fix'" != "" {
          local fix ", nofix"
          }
          gettoken var rest : anything
          while `"`rest'"' != "" {
          gettoken lab rest : rest
          local label "`lab'"
          }
          local vlist : list anything - lab
          if "`lab'" == "." {
          local lab ""
          }
          foreach var of varlist `vlist' {
          `vv' _label `val' `var' `lab' `fix'
          }
          }
        - else {
        - `vv' _label `macval(0)'
        = version 14, missing: _label variable __000008 `""'
        - }
        ---------------------------------------------------------- end label ---
      - char `NEWVAR'[destring] `c'
      = char __000008[destring] Character removed was: space
      - char `NEWVAR'[destring_cmd] `"destring `cmdargs'"'
      = char __000008[destring_cmd] `"destring inc_decoded1 inc_decoded2 , repla
> ce   ignore(" ,$") "'
      - char `var'[destring]
      = char inc_decoded1[destring]
      - char `var'[destring_cmd]
      = char inc_decoded1[destring_cmd]
      - if "`genrep'"=="generate" {
      = if "replace"=="generate" {
        Charcopy `var' `NEWVAR'
        rename `NEWVAR' `: word `varno' of `generate''
        }
      - else {
      - char rename `var' `NEWVAR'
      = char rename inc_decoded1 __000008
      - drop `var'
      = drop inc_decoded1
      - rename `NEWVAR' `var'
      = rename __000008 inc_decoded1
        ------------------------------------------------------- begin rename ---
        - version 12
        - mata: rename_cmd("`3'")
        = mata: rename_cmd("")
        --------------------------------------------------------- end rename ---
      - }
      - }
      - foreach varmac of local tvars {
      - capture drop ``varmac''
      = capture drop __000007
      - }
      - capture drop ``varmac''
      = capture drop __000008
      - }
      - capture drop ``varmac''
      = capture drop __000009
      - }
      - capture drop ``varmac''
      = capture drop __00000A
      - }
      - capture drop ``varmac''
      = capture drop __00000B
      - }
      - }
      - }
      - local varno = `varno' + 1
      = local varno = 1 + 1
      - if "`generate'"!="" {
      = if ""!="" {
        local finalvarname : word `varno' of `generate'
        local finalprint "`finalvarname' "
        }
      - else {
      - local finalvarname "`var'"
      = local finalvarname "inc_decoded2"
      - local finalprint ""
      - }
      - capture confirm string variable `var'
      = capture confirm string variable inc_decoded2
      - if _rc != 0 {
        di as txt "`var' already numeric; no " as res "`genrep'"
        }
      - else {
      - qui gen `OLDVAR' = `var'
      = qui gen __000007 = inc_decoded2
      - local jj 1
      - local b
      - local bcnt = 0
      - local c
      - local makepct
      - while `"`char`jj''"' != "" {
      = while `" "' != "" {
      - capture drop `found'
      = capture drop __00000A
      - capture drop `topct'
      = capture drop __00000B
      - local t `"`char`jj''"'
      = local t `" "'
      - if `aschars' {
      = if 1 {
      - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
      = qui gen byte __00000A = ustrpos(__000007, `" "') != 0
      - }
      - else {
        qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
        }
      - qui summarize `found', meanonly
      = qui summarize __00000A, meanonly
      - if r(sum) > 0 {
      - if `"`t'"'=="`illegal'" {
      = if `" "'=="" {
        local b `"`b' illegal Unicode"'
        }
      - else if `"`t'"' == " " {
      = else if `" "' == " " {
      - local b `"`b' space"'
      = local b `" space"'
      - }
      - else {
        local b `"`b' `t'"'
        }
      - local ++bcnt
      - }
      - if `aschars' {
      = if 1 {
      - if `"`t'"'=="%" {
      = if `" "'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if ustrpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
      - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
      = qui replace __000007 = usubinstr(__000007, `" "', "", .)
      - }
      - else {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if strpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
        }
      - local jj = `jj' + 1
      = local jj = 1 + 1
      - }
      - while `"`char`jj''"' != "" {
      = while `","' != "" {
      - capture drop `found'
      = capture drop __00000A
      - capture drop `topct'
      = capture drop __00000B
      - local t `"`char`jj''"'
      = local t `","'
      - if `aschars' {
      = if 1 {
      - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
      = qui gen byte __00000A = ustrpos(__000007, `","') != 0
      - }
      - else {
        qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
        }
      - qui summarize `found', meanonly
      = qui summarize __00000A, meanonly
      - if r(sum) > 0 {
        if `"`t'"'=="`illegal'" {
        local b `"`b' illegal Unicode"'
        }
        else if `"`t'"' == " " {
        local b `"`b' space"'
        }
        else {
        local b `"`b' `t'"'
        }
        local ++bcnt
        }
      - if `aschars' {
      = if 1 {
      - if `"`t'"'=="%" {
      = if `","'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if ustrpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
      - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
      = qui replace __000007 = usubinstr(__000007, `","', "", .)
      - }
      - else {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if strpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
        }
      - local jj = `jj' + 1
      = local jj = 2 + 1
      - }
      - while `"`char`jj''"' != "" {
      = while `"$"' != "" {
      - capture drop `found'
      = capture drop __00000A
      - capture drop `topct'
      = capture drop __00000B
      - local t `"`char`jj''"'
      = local t `"$"'
      - if `aschars' {
      = if 1 {
      - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
      = qui gen byte __00000A = ustrpos(__000007, `"$"') != 0
      - }
      - else {
        qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
        }
      - qui summarize `found', meanonly
      = qui summarize __00000A, meanonly
      - if r(sum) > 0 {
        if `"`t'"'=="`illegal'" {
        local b `"`b' illegal Unicode"'
        }
        else if `"`t'"' == " " {
        local b `"`b' space"'
        }
        else {
        local b `"`b' `t'"'
        }
        local ++bcnt
        }
      - if `aschars' {
      = if 1 {
      - if `"`t'"'=="%" {
      = if `"$"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if ustrpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
      - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
      = qui replace __000007 = usubinstr(__000007, `"$"', "", .)
      - }
      - else {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if strpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
        }
      - local jj = `jj' + 1
      = local jj = 3 + 1
      - }
      - while `"`char`jj''"' != "" {
      = while `""' != "" {
        capture drop `found'
        capture drop `topct'
        local t `"`char`jj''"'
        if `aschars' {
        qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
        }
        else {
        qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
        }
        qui summarize `found', meanonly
        if r(sum) > 0 {
        if `"`t'"'=="`illegal'" {
        local b `"`b' illegal Unicode"'
        }
        else if `"`t'"' == " " {
        local b `"`b' space"'
        }
        else {
        local b `"`b' `t'"'
        }
        local ++bcnt
        }
        if `aschars' {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if ustrpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
        }
        else {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if strpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
        }
        local jj = `jj' + 1
        }
      - if _caller() >= 14 {
      - qui replace `OLDVAR' = ustrtrim(`OLDVAR')
      = qui replace __000007 = ustrtrim(__000007)
      - }
      - else {
        qui replace `OLDVAR' = strtrim(`OLDVAR')
        }
      - quietly gen byte `ismissing' = `OLDVAR'=="" | `OLDVAR'=="." | (strlen(`O
> LDVAR')==2 & inrange(`OLDVAR',".a",".z"))
      = quietly gen byte __000009 = __000007=="" | __000007=="." | (strlen(__000
> 007)==2 & inrange(__000007,".a",".z"))
      - if ("`dpcomma'" != "") {
      = if ("" != "") {
        qui replace `OLDVAR' = subinstr(`OLDVAR',".","X",.) if !`ismissing'
        qui replace `OLDVAR' = subinstr(`OLDVAR', ",", ".", 1) if !ustrregexm(`O
> LDVAR',"(,[a-z])|(^,$)")
        }
      - if _caller() >= 14 {
      - qui replace `OLDVAR' = ustrregexrf(`OLDVAR',"^0+","0")
      = qui replace __000007 = ustrregexrf(__000007,"^0+","0")
      - }
      - else {
        qui replace `OLDVAR' = regexr(`OLDVAR',"^0+","0")
        }
      - qui gen `gtype' `NEWVAR' = real(`OLDVAR')
      = qui gen double __000008 = real(__000007)
      - qui summarize `ismissing', meanonly
      = qui summarize __000009, meanonly
      - local oldmiss = r(sum)
      - qui count if missing(`NEWVAR')
      = qui count if missing(__000008)
      - local newmiss = r(N)
      - local flag = `oldmiss'!=`newmiss'
      = local flag = 0!=0
      - if `flag' & ("`force'" == "") {
      = if 0 & ("" == "") {
        if `"`ignore'"' != "" {
        di as txt "`var': contains " "`aswhat's not specified in " as res "ignor
> e()" as txt "; no " as res "`genrep'"
        }
        else {
        di as txt "`var': contains " "nonnumeric `aswhat's; no " as res "`genrep
> '"
        }
        }
      - else {
      - order `NEWVAR', after(`var')
      = order __000008, after(inc_decoded2)
        -------------------------------------------------------- begin order ---
        - version 11
        - if (_caller()<11) {
          _order `macval(0)'
          exit
          }
        - syntax varlist[, Before(varname) After(varname) first last SEQuential 
> ALPHAbetic]
        - if (`"`before'"' == "" & `"`after'"' == "" & "`first'" == "" & "`last'
> " == "" & "`alphabetic'" == "" & "`sequential'" == "") {
        = if (`""' == "" & `"inc_decoded2"' == "" & "" == "" & "" == "" & "" == 
> "" & "" == "") {
          _order `macval(0)'
          exit
          }
        - if (`"`before'"' != "" & `"`after'"' != "") {
        = if (`""' != "" & `"inc_decoded2"' != "") {
          dis as error "before() may not be combined with after()"
          exit 198
          }
        - if (`"`before'"' != "" & `"`first'"' != "") {
        = if (`""' != "" & `""' != "") {
          dis as error "before() may not be combined with first()"
          exit 198
          }
        - if (`"`before'"' != "" & `"`last'"' != "") {
        = if (`""' != "" & `""' != "") {
          dis as error "before() may not be combined with last()"
          exit 198
          }
        - if (`"`after'"' != "" & `"`before'"' != "") {
        = if (`"inc_decoded2"' != "" & `""' != "") {
          dis as error "after() may not be combined with before()"
          exit 198
          }
        - if (`"`after'"' != "" & `"`first'"' != "") {
        = if (`"inc_decoded2"' != "" & `""' != "") {
          dis as error "after() may not be combined with first()"
          exit 198
          }
        - if (`"`after'"' != "" & `"`last'"' != "") {
        = if (`"inc_decoded2"' != "" & `""' != "") {
          dis as error "after() may not be combined with last()"
          exit 198
          }
        - if ("`first'" != "" & "`last'" != "") {
        = if ("" != "" & "" != "") {
          dis as error "first may not be combined with last"
          exit 198
          }
        - if ("`sequential'" != "" & "`alphabetic'" != "") {
        = if ("" != "" & "" != "") {
          dis as error "sequential may not be combined with alphabetic"
          exit 198
          }
        - if ("`first'" != "") {
        = if ("" != "") {
          if "`alphabetic'" != "" {
          local varlist : list sort varlist
          }
          if "`sequential'" != "" {
          aorder `varlist'
          }
          else {
          _order `varlist'
          }
          }
        - if ("`last'" != "") {
        = if ("" != "") {
          unab vlist : _all
          local list : list vlist - varlist
          if "`alphabetic'" != "" {
          local varlist : list sort varlist
          }
          if "`sequential'" != "" {
          preserve
          keep `varlist'
          aorder `varlist'
          unab varlist : _all
          restore
          }
          _order `list' `varlist'
          }
        - if (`"`before'"' != "") {
        = if (`""' != "") {
          local test : list before in varlist
          if `test' {
          dis as err "varname specified in before() may not" " be in varlist"
          exit 198
          }
          if "`alphabetic'" != "" {
          local varlist : list sort varlist
          }
          if "`sequential'" != "" {
          preserve
          keep `varlist'
          aorder `varlist'
          unab varlist : _all
          restore
          }
          unab vlist : _all
          local vlist : list vlist - varlist
          local var_num : list posof "`before'" in vlist
          local var_num = `var_num' - 1
          local fvar : word 1 of `vlist'
          capture local lvar : word `var_num' of `vlist'
          if _rc {
          _order `varlist'
          exit
          }
          unab nlist : `fvar'-`lvar'
          local nlist : list nlist - varlist
          _order `nlist' `varlist'
          }
        - if (`"`after'"' != "") {
        = if (`"inc_decoded2"' != "") {
        - local test : list after in varlist
        - if `test' {
        = if 0 {
          dis as err "varname specified in after() may not" " be in varlist"
          exit 198
          }
        - if "`alphabetic'" != "" {
        = if "" != "" {
          local varlist : list sort varlist
          }
        - if "`sequential'" != "" {
        = if "" != "" {
          preserve
          keep `varlist'
          aorder `varlist'
          unab varlist : _all
          restore
          }
        - unab vlist : _all
          ------------------------------------------------------- begin unab ---
          - version 6
          - gettoken user 0: 0, parse(" :")
          - gettoken colon 0: 0, parse(" :")
          - if `"`colon'"' != ":" { error 198 }
          = if `":"' != ":" { error 198 }
          - syntax [varlist(default=empty)] [, MIN(integer 1) MAX(integer 120000
> ) NAME(string)]
          - c_local `user' `varlist'
          = c_local vlist year hhwt repwt cluster adjust statefip strata hhincom
> e_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 repwt10 r
> epwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 repwt20
>  repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt29 repwt
> 30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repwt39 rep
> wt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 repwt49 r
> epwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 repwt59
>  repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt68 repwt
> 69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repwt78 rep
> wt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp5 repwt
> p6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14 repwtp
> 15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwtp23 rep
> wtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 repwtp32 
> repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40 repwtp
> 41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwtp49 rep
> wtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 repwtp58 
> repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66 repwtp
> 67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwtp75 rep
> wtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __000000 __
> 000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_decoded2 
> __000007 __00000A __000009 __000008
          - local n : word count `varlist'
          = local n : word count year hhwt repwt cluster adjust statefip strata 
> hhincome_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 re
> pwt10 repwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 
> repwt20 repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt2
> 9 repwt30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repw
> t39 repwt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 re
> pwt49 repwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 
> repwt59 repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt6
> 8 repwt69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repw
> t78 repwt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp
> 5 repwtp6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14
>  repwtp15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwt
> p23 repwtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 re
> pwtp32 repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40
>  repwtp41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwt
> p49 repwtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 re
> pwtp58 repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66
>  repwtp67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwt
> p75 repwtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __00
> 0000 __000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_de
> coded2 __000007 __00000A __000009 __000008
          - if `n'>=`min' & `n'<=`max' { exit }
          = if 187>=1 & 187<=120000 { exit }
          --------------------------------------------------------- end unab ---
        - local vlist : list vlist - varlist
        - local var_num : list posof "`after'" in vlist
        = local var_num : list posof "inc_decoded2" in vlist
        - local fvar : word 1 of `vlist'
        = local fvar : word 1 of year hhwt repwt cluster adjust statefip strata 
> hhincome_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 re
> pwt10 repwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 
> repwt20 repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt2
> 9 repwt30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repw
> t39 repwt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 re
> pwt49 repwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 
> repwt59 repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt6
> 8 repwt69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repw
> t78 repwt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp
> 5 repwtp6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14
>  repwtp15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwt
> p23 repwtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 re
> pwtp32 repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40
>  repwtp41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwt
> p49 repwtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 re
> pwtp58 repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66
>  repwtp67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwt
> p75 repwtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __00
> 0000 __000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_de
> coded2 __000007 __00000A __000009
        - local lvar : word `var_num' of `vlist'
        = local lvar : word 183 of year hhwt repwt cluster adjust statefip strat
> a hhincome_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 
> repwt10 repwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt1
> 9 repwt20 repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repw
> t29 repwt30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 re
> pwt39 repwt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 
> repwt49 repwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt5
> 8 repwt59 repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repw
> t68 repwt69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 re
> pwt78 repwt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repw
> tp5 repwtp6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp
> 14 repwtp15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 rep
> wtp23 repwtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 
> repwtp32 repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp
> 40 repwtp41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 rep
> wtp49 repwtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 
> repwtp58 repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp
> 66 repwtp67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 rep
> wtp75 repwtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __
> 000000 __000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_
> decoded2 __000007 __00000A __000009
        - unab nlist : `fvar'-`lvar'
        = unab nlist : year-inc_decoded2
          ------------------------------------------------------- begin unab ---
          - version 6
          - gettoken user 0: 0, parse(" :")
          - gettoken colon 0: 0, parse(" :")
          - if `"`colon'"' != ":" { error 198 }
          = if `":"' != ":" { error 198 }
          - syntax [varlist(default=empty)] [, MIN(integer 1) MAX(integer 120000
> ) NAME(string)]
          - c_local `user' `varlist'
          = c_local nlist year hhwt repwt cluster adjust statefip strata hhincom
> e_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 repwt10 r
> epwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 repwt20
>  repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt29 repwt
> 30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repwt39 rep
> wt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 repwt49 r
> epwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 repwt59
>  repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt68 repwt
> 69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repwt78 rep
> wt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp5 repwt
> p6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14 repwtp
> 15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwtp23 rep
> wtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 repwtp32 
> repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40 repwtp
> 41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwtp49 rep
> wtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 repwtp58 
> repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66 repwtp
> 67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwtp75 rep
> wtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __000000 __
> 000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_decoded2
          - local n : word count `varlist'
          = local n : word count year hhwt repwt cluster adjust statefip strata 
> hhincome_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 re
> pwt10 repwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 
> repwt20 repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt2
> 9 repwt30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repw
> t39 repwt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 re
> pwt49 repwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 
> repwt59 repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt6
> 8 repwt69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repw
> t78 repwt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp
> 5 repwtp6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14
>  repwtp15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwt
> p23 repwtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 re
> pwtp32 repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40
>  repwtp41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwt
> p49 repwtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 re
> pwtp58 repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66
>  repwtp67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwt
> p75 repwtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __00
> 0000 __000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_de
> coded2
          - if `n'>=`min' & `n'<=`max' { exit }
          = if 183>=1 & 183<=120000 { exit }
          --------------------------------------------------------- end unab ---
        - local nlist : list nlist - varlist
        - _order `nlist' `varlist'
        = _order year hhwt repwt cluster adjust statefip strata hhincome_acs rep
> wt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 repwt10 repwt11 re
> pwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 repwt20 repwt21 
> repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt29 repwt30 repwt3
> 1 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repwt39 repwt40 repw
> t41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 repwt49 repwt50 re
> pwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 repwt59 repwt60 
> repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt68 repwt69 repwt7
> 0 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repwt78 repwt79 repw
> t80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp5 repwtp6 repwtp
> 7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14 repwtp15 repwtp
> 16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwtp23 repwtp24 rep
> wtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 repwtp32 repwtp33 
> repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40 repwtp41 repwtp
> 42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwtp49 repwtp50 rep
> wtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 repwtp58 repwtp59 
> repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66 repwtp67 repwtp
> 68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwtp75 repwtp76 rep
> wtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __000000 __000002 __
> 000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_decoded2 __000008
        - }
        - if ("`alphabetic'" != "" & `"`before'"' == "" & `"`after'"' == "" & "`
> first'" == "" & "`last'" == "") {
        = if ("" != "" & `""' == "" & `"inc_decoded2"' == "" & "" == "" & "" == 
> "") {
          local vlist : list sort varlist
          _order `vlist'
          }
        - if ("`sequential'" != "" & `"`before'"' == "" & `"`after'"' == "" & "`
> first'" == "" & "`last'" == "") {
        = if ("" != "" & `""' == "" & `"inc_decoded2"' == "" & "" == "" & "" == 
> "") {
          aorder `varlist'
          }
        ---------------------------------------------------------- end order ---
      - if `aschars' {
      = if 1 {
      - local dispb `"`b'"'
      = local dispb `" space"'
      - }
      - else {
        local dispb = printablebytes(`"`b'"')
        }
      - local c = plural(`bcnt',strproper("`aswhat'")) + " removed " + plural(`b
> cnt',"was","were") + `":`dispb'"'
      = local c = plural(1,strproper("character")) + " removed " + plural(1,"was
> ","were") + `": space"'
      - if "`makepct'" != "" {
      = if "" != "" {
        if `makepct' {
        qui replace `NEWVAR' = `NEWVAR'/100
        }
        }
      - qui compress `NEWVAR'
      = qui compress __000008
      - local type : type `NEWVAR'
      = local type : type __000008
      - if `flag' {
      = if 0 {
        di as txt "`var': contains nonnumeric `aswhat's" _continue
        if `"`ignore'"'!="" {
        display " not specified in " as result "ignore()" _continue
        }
        if `"`b'"'=="" {
        display "; `finalprint'" as res "`genrep'd " as txt "as " as res "`type'
> " _continue
        }
        display
        }
      - if `"`b'"' != "" {
      = if `" space"' != "" {
      - di as txt "`var': " plural(`bcnt',"`aswhat'") as res `"`dispb'"' as txt 
> " removed; `finalprint'" as res "`genrep'd " as txt "as " as res "`type'"
      = di as txt "inc_decoded2: " plural(1,"character") as res `" space"' as tx
> t " removed; " as res "replaced " as txt "as " as res "long"
inc_decoded2: character space removed; replaced as long
      - }
      - else if `"`b'"' == "" & !`flag' {
      = else if `" space"' == "" & !0 {
        di as txt "`var': all characters numeric; " "`finalprint'" as res "`genr
> ep'd " as txt "as " as res "`type'"
        }
      - if `newmiss' != 0 {
      = if 0 != 0 {
        di as txt "(`newmiss' missing " plural(`newmiss',"value") " generated)"
        }
      - label variable `NEWVAR' `"`: variable label `var''"'
      = label variable __000008 `""'
        -------------------------------------------------------- begin label ---
        - version 10.0
        - local vv : display "version " string(_caller()) ", missing:"
        - gettoken val : 0
        - if (strpos("`val'", "val") > 0 ) {
        = if (strpos("variable", "val") > 0 ) {
          gettoken val 0 : 0
          syntax anything [, nofix]
          if "`fix'" != "" {
          local fix ", nofix"
          }
          gettoken var rest : anything
          while `"`rest'"' != "" {
          gettoken lab rest : rest
          local label "`lab'"
          }
          local vlist : list anything - lab
          if "`lab'" == "." {
          local lab ""
          }
          foreach var of varlist `vlist' {
          `vv' _label `val' `var' `lab' `fix'
          }
          }
        - else {
        - `vv' _label `macval(0)'
        = version 14, missing: _label variable __000008 `""'
        - }
        ---------------------------------------------------------- end label ---
      - char `NEWVAR'[destring] `c'
      = char __000008[destring] Character removed was: space
      - char `NEWVAR'[destring_cmd] `"destring `cmdargs'"'
      = char __000008[destring_cmd] `"destring inc_decoded1 inc_decoded2 , repla
> ce   ignore(" ,$") "'
      - char `var'[destring]
      = char inc_decoded2[destring]
      - char `var'[destring_cmd]
      = char inc_decoded2[destring_cmd]
      - if "`genrep'"=="generate" {
      = if "replace"=="generate" {
        Charcopy `var' `NEWVAR'
        rename `NEWVAR' `: word `varno' of `generate''
        }
      - else {
      - char rename `var' `NEWVAR'
      = char rename inc_decoded2 __000008
      - drop `var'
      = drop inc_decoded2
      - rename `NEWVAR' `var'
      = rename __000008 inc_decoded2
        ------------------------------------------------------- begin rename ---
        - version 12
        - mata: rename_cmd("`3'")
        = mata: rename_cmd("")
        --------------------------------------------------------- end rename ---
      - }
      - }
      - foreach varmac of local tvars {
      - capture drop ``varmac''
      = capture drop __000007
      - }
      - capture drop ``varmac''
      = capture drop __000008
      - }
      - capture drop ``varmac''
      = capture drop __000009
      - }
      - capture drop ``varmac''
      = capture drop __00000A
      - }
      - capture drop ``varmac''
      = capture drop __00000B
      - }
      - }
      - }
      --------------------------------------------------------- end destring ---
    - }
    -------------------------------------------------------------- end split ---
  - gen `inc_cat_var'_lb = inc_decoded1
  = gen acs_hhinc_lb = inc_decoded1
  - gen `inc_cat_var'_ub = inc_decoded2
  = gen acs_hhinc_ub = inc_decoded2
  - di "Lower bound of `inc_cat_var'_lb and upper bound of `inc_cat_var'_ub " "c
> reated for inc_level " `inc_level' "of the original Research " "dataset income
>  range"
  = di "Lower bound of acs_hhinc_lb and upper bound of acs_hhinc_ub " "created f
> or inc_level " 4 "of the original Research " "dataset income range"
Lower bound of acs_hhinc_lb and upper bound of acs_hhinc_ub created for inc_leve
> l 4of the original Research dataset income range
  - }
  - else {
    di as error "Error: The inc_level " `inc_level' " does not fit any of the ex
> isting regular expressions " "designs. Please email the REDI program creator a
> t " "mollymkingphd@gmail.com with information about this " "error and a list o
> f all of your income levels so she " "can update the program. Thank you for yo
> ur help!"
    error 999
    }
  - local upper_bound = `inc_cat_var'_ub
  = local upper_bound = acs_hhinc_ub
  - local lower_bound = `inc_cat_var'_lb
  = local lower_bound = acs_hhinc_lb
  - capture drop inc_decoded1 inc_decoded2
  - quietly summarize if `research_year' == `y' & `inc_cat_var' == `inc_level'
  = quietly summarize if year == 2019 & acs_hhinc == 4
  - local sample_size = r(N)
  - gen `inc_cat_var'_n = `sample_size'
  = gen acs_hhinc_n = 32579
  - label variable `inc_cat_var'_n "N in income level in research dataset"
  = label variable acs_hhinc_n "N in income level in research dataset"
    ------------------------------------------------------------ begin label ---
    - version 10.0
    - local vv : display "version " string(_caller()) ", missing:"
    - gettoken val : 0
    - if (strpos("`val'", "val") > 0 ) {
    = if (strpos("variable", "val") > 0 ) {
      gettoken val 0 : 0
      syntax anything [, nofix]
      if "`fix'" != "" {
      local fix ", nofix"
      }
      gettoken var rest : anything
      while `"`rest'"' != "" {
      gettoken lab rest : rest
      local label "`lab'"
      }
      local vlist : list anything - lab
      if "`lab'" == "." {
      local lab ""
      }
      foreach var of varlist `vlist' {
      `vv' _label `val' `var' `lab' `fix'
      }
      }
    - else {
    - `vv' _label `macval(0)'
    = version 16, missing: _label variable acs_hhinc_n "N in income level in res
> earch dataset"
    - }
    -------------------------------------------------------------- end label ---
  - keep if `research_year' == `y' & `inc_cat_var' == `inc_level'
  = keep if year == 2019 & acs_hhinc == 4
(0 observations deleted)
  - tempfile premerge_`inc_level'_`y'
  = tempfile premerge_4_2019
  - save `premerge_`inc_level'_`y'', replace
  = save /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000a, repla
> ce
(note: file /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000a not
>  found)
file /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000a saved
  - di "Saved tempfile with upper and lower bounds of research data income level
> s"
Saved tempfile with upper and lower bounds of research data income levels
  - use `reference_dataset', clear
  = use ~/Documents/SocResearch/Dissertation/data/data_temp/redi13_cps_state_ca.
> dta, clear
(Streamlined CPS ASEC data, CA 2019)
  - di "Reference data open - Income type set as `inc_cat_var' income"
  = di "Reference data open - Income type set as acs_hhinc income"
Reference data open - Income type set as acs_hhinc income
  - keep if `ref_year' == `y' | `"`ref_year'"' == "nys" & `ref_income_var' >= `l
> ower_bound' & `ref_income_var' <= `upper_bound'
  = keep if year == 2019 | `"year"' == "nys" & hhincome >= 35000 & hhincome <= 5
> 0000
(0 observations deleted)
  - gen obs_no = _n
  - di "Observation number generated"
Observation number generated
  - save $temp/`ASECdata'_`ref_year'_inc`inc_level'.dta, replace
  = save ~/Documents/SocResearch/Dissertation/data/data_temp/_year_inc4.dta, rep
> lace
file ~/Documents/SocResearch/Dissertation/data/data_temp/_year_inc4.dta saved
  - di "Ref to keep income between $`lower_bound' and $`upper_bound' for `y' yea
> r."
  = di "Ref to keep income between $35000 and $50000 for 2019 year."
Ref to keep income between $35000 and $50000 for 2019 year.
  - quietly des
    -------------------------------------------------------------- begin des ---
    - local version : di "version " string(_caller()) ":"
    - `version' describe `0'
    = version 16: describe 
      ------------------------------------------------------- begin describe ---
      - version 9
      - local version : di "version " string(_caller()) ":"
      - syntax [anything] [using] [, SImple REPLACE *]
      - if ("`replace'"!="") {
      = if (""!="") {
        describe_mk `0'
        return add
        exit
        }
      - local varlist `"`anything'"'
      = local varlist `""'
      - if ("`simple'" == "") {
      = if ("" == "") {
      - `version' _describe `0'
      = version 16: _describe 
      - return add
      - }
      - else {
        if (`"`options'"' != "") {
        di as err "simple may not be combined with other options"
        exit 198
        }
        if (`"`using'"' != "") {
        qui `version' describe `varlist' `using', varlist
        if "`varlist'" == "" {
        local vars "`r(varlist)'"
        }
        else {
        local vars "`varlist'"
        }
        local wid = 2
        local n : list sizeof vars
        if `n'==0 {
        exit
        }
        if "`c(hasicu)'" == "1" {
        foreach x of local vars {
        local wid = max(`wid', udstrlen(`"`x'"'))
        }
        }
        else {
        foreach x of local vars {
        local wid = max(`wid', strlen(`"`x'"'))
        }
        }
        local wid = `wid' + 2
        local cols = int((`c(linesize)'+1)/`wid')
        if `cols' < 2 {
        foreach x of local `vars' {
        di as txt `col' `"`x'"'
        }
        exit
        }
        local lines = `n'/`cols'
        local lines = int(cond(`lines'>int(`lines'), `lines'+1, `lines'))
        forvalues i=1(1)`lines' {
        local top = min((`cols')*`lines'+`i', `n')
        local col = 1
        forvalues j=`i'(`lines')`top' {
        local x : word `j' of `vars'
        di as txt _column(`col') "`x'" _c
        local col = `col' + `wid'
        }
        di as txt
        }
        qui `version' describe `varlist' `using', short
        return add
        }
        else {
        ds `varlist'
        qui `version' _describe `varlist', short
        return add
        }
        }
      --------------------------------------------------------- end describe ---
    ---------------------------------------------------------------- end des ---
  - local N = r(N)
  - clear
    ------------------------------------------------------------ begin clear ---
    - if _caller() < 10 {
      _clear_9 `0'
      exit
      }
    - version 10
    - syntax [anything]
    - tokenize `anything'
    = tokenize 
    - if `"`2'"' != "" {
    = if `""' != "" {
      display as err "`2' not allowed"
      exit 198
      }
    - if "`1'"=="" {
    = if ""=="" {
    - drop _all
    - label drop _all
      ---------------------------------------------------------- begin label ---
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {
      = if (strpos("drop", "val") > 0 ) {
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {
        local fix ", nofix"
        }
        gettoken var rest : anything
        while `"`rest'"' != "" {
        gettoken lab rest : rest
        local label "`lab'"
        }
        local vlist : list anything - lab
        if "`lab'" == "." {
        local lab ""
        }
        foreach var of varlist `vlist' {
        `vv' _label `val' `var' `lab' `fix'
        }
        }
      - else {
      - `vv' _label `macval(0)'
      = version 10, missing: _label drop _all
      - }
      ------------------------------------------------------------ end label ---
    - }
    - else if "`1'"=="frames" {
    = else if ""=="frames" {
      frames reset
      }
    - else if "`1'"=="mata" {
    = else if ""=="mata" {
      mata: mata clear
      }
    - else if "`1'"=="python" {
    = else if ""=="python" {
      python clear
      }
    - else if inlist("`1'", "results", "matrix") {
    = else if inlist("", "results", "matrix") {
      return clear
      clearreturn
      ereturn clear
      sreturn clear
      _return drop _all
      if ("`1'" == "matrix") {
      matrix drop _all
      _est drop _all
      }
      }
    - else if "`1'"=="programs" {
    = else if ""=="programs" {
      program drop _all
      }
    - else if "`1'"=="ado" {
    = else if ""=="ado" {
      program drop _allado
      }
    - else if "`1'"=="rngstream" | "`1'"=="rngstreams" {
    = else if ""=="rngstream" | ""=="rngstreams" {
      set rngstream clear
      }
    - else if "`1'"=="*" | "`1'"=="all" {
    = else if ""=="*" | ""=="all" {
      capture mata: st_local("semmods", strofreal(sg__global.hasmodels()))
      capture
      if (0`semmods') {
      display as err "-clear all- not allowed while an SEM Builder is open"
      exit 1
      }
      drop _all
      frames reset
      label drop _all
      matrix drop _all
      scalar drop _all
      constraint drop _all
      eq drop _all
      file close _all
      postutil clear
      _return drop _all
      discard
      program drop _all
      timer clear
      mata: _st__put_cmd_clear()
      mata: mata clear
      python clear
      }
    - else {
      display as err "`1' not allowed"
      exit 198
      }
    -------------------------------------------------------------- end clear ---
  - set obs `sample_size'
  = set obs 32579
number of observations (_N) was 0, now 32,579
  - gen obs_no = runiformint(1, `N')
  = gen obs_no = runiformint(1, 6260)
  - merge m:1 obs_no using $temp/`ASECdata'_`ref_year'_inc`inc_level'.dta, keep(
> match) nogenerate
  = merge m:1 obs_no using ~/Documents/SocResearch/Dissertation/data/data_temp/_
> year_inc4.dta, keep(match) nogenerate
    ------------------------------------------------------------ begin merge ---
    - version 11
    - gettoken mtype 0 : 0, parse(" ,")
    - if (!strpos("`mtype'", ":") & "`mtype'"!="") {
    = if (!strpos("m:1", ":") & "m:1"!="") {
      if (_caller()>=11) {
      di as smcl as txt "{p}"
      di as smcl "(note: you are using old"
      di as smcl "{bf:merge} syntax; see"
      di as smcl "{bf:{help merge:[D] merge}} for new syntax)"
      di as smcl "{p_end}"
      }
      merge_10 `mtype' `0'
      exit
      }
    - local origmtype `"`mtype'"'
    = local origmtype `"m:1"'
    - mata: map_mtype(`"mtype"')
    - gettoken token : 0, parse(" ,")
    - if ("`token'"=="_n") {
    = if ("obs_no"=="_n") {
      if ("`mtype'"!="1:1") {
      error_seq_not11 "`mtype'" "`origmtype'"
      }
      gettoken token 0 : 0, parse(" ,")
      local mtype "_n"
      }
    - syntax [varlist(default=none)] using/ [, ASSERT(string) DEBUG GENerate(nam
> e) FORCE KEEP(string) KEEPUSing(string) noLabels NOGENerate noNOTEs REPLACE no
> REPort SORTED UPDATE ]
    - if ("`mtype'"!="_n") {
    = if ("m:1"!="_n") {
    - local origmtype `"`mtype'"'
    = local origmtype `"m:1"'
    - mata: map_mtype(`"mtype"')
    - if ("`varlist'"=="") {
    = if ("obs_no"=="") {
      error_mat_varlist "`mtype'" "`origmtype'"
      }
    - }
    - else {
      if ("`mtype'"=="_n") {
      if ("`varlist'"!="") {
      error_seq_varlist
      }
      }
      }
    - mata: fullfilename("using", "usingfull", "using")
    - mata: resultlist("assert")
    - mata: resultlist("keep")
    - if ("`generate'"!="") {
    = if (""!="") {
      if ("`nogenerate'"!="") {
      di as smcl err "{p}"
      di as smcl "options -generate()- and -nogenerate-"
      di as smcl "may not be specified together."
      di as smcl err "{p_end}"
      }
      confirm new var `generate'
      }
    - if ("`replace'"!="") {
    = if (""!="") {
      if ("`update'"=="") {
      error_replace
      }
      }
    - if ("`sorted'"=="" & "`mtype'"!="_n") {
    = if (""=="" & "m:1"!="_n") {
    - local sortedby : sortedby
    - checksort "`sortedby'" "`varlist'"
    = checksort "" "obs_no"
      ------------------------------------------------ begin merge.checksort ---
      - args is should
      - local i 0
      - return scalar sorted = 1
      - foreach v1 of local should {
      - local ++i
      - local v2 : word `i' of `is'
      = local v2 : word 1 of 
      - if ("`v1'"!="`v2'") {
      = if ("obs_no"!="") {
      - return scalar sorted = 0
      - continue, break
        }
        }
      -------------------------------------------------- end merge.checksort ---
    - if (!r(sorted)) {
    - sort `varlist'
    = sort obs_no
    - }
    - quietly describe using "`using'", varlist short
    = quietly describe using "~/Documents/SocResearch/Dissertation/data/data_tem
> p/_year_inc4.dta", varlist short
      ------------------------------------------------------- begin describe ---
      - version 9
      - local version : di "version " string(_caller()) ":"
      - syntax [anything] [using] [, SImple REPLACE *]
      - if ("`replace'"!="") {
      = if (""!="") {
        describe_mk `0'
        return add
        exit
        }
      - local varlist `"`anything'"'
      = local varlist `""'
      - if ("`simple'" == "") {
      = if ("" == "") {
      - `version' _describe `0'
      = version 11: _describe using "~/Documents/SocResearch/Dissertation/data/d
> ata_temp/_year_inc4.dta", varlist short
      - return add
      - }
      - else {
        if (`"`options'"' != "") {
        di as err "simple may not be combined with other options"
        exit 198
        }
        if (`"`using'"' != "") {
        qui `version' describe `varlist' `using', varlist
        if "`varlist'" == "" {
        local vars "`r(varlist)'"
        }
        else {
        local vars "`varlist'"
        }
        local wid = 2
        local n : list sizeof vars
        if `n'==0 {
        exit
        }
        if "`c(hasicu)'" == "1" {
        foreach x of local vars {
        local wid = max(`wid', udstrlen(`"`x'"'))
        }
        }
        else {
        foreach x of local vars {
        local wid = max(`wid', strlen(`"`x'"'))
        }
        }
        local wid = `wid' + 2
        local cols = int((`c(linesize)'+1)/`wid')
        if `cols' < 2 {
        foreach x of local `vars' {
        di as txt `col' `"`x'"'
        }
        exit
        }
        local lines = `n'/`cols'
        local lines = int(cond(`lines'>int(`lines'), `lines'+1, `lines'))
        forvalues i=1(1)`lines' {
        local top = min((`cols')*`lines'+`i', `n')
        local col = 1
        forvalues j=`i'(`lines')`top' {
        local x : word `j' of `vars'
        di as txt _column(`col') "`x'" _c
        local col = `col' + `wid'
        }
        di as txt
        }
        qui `version' describe `varlist' `using', short
        return add
        }
        else {
        ds `varlist'
        qui `version' _describe `varlist', short
        return add
        }
        }
      --------------------------------------------------------- end describe ---
    - local sortedby "`r(sortlist)'"
    = local sortedby ""
    - checksort "`sortedby'" "`varlist'"
    = checksort "" "obs_no"
      ------------------------------------------------ begin merge.checksort ---
      - args is should
      - local i 0
      - return scalar sorted = 1
      - foreach v1 of local should {
      - local ++i
      - local v2 : word `i' of `is'
      = local v2 : word 1 of 
      - if ("`v1'"!="`v2'") {
      = if ("obs_no"!="") {
      - return scalar sorted = 0
      - continue, break
        }
        }
      -------------------------------------------------- end merge.checksort ---
    - if (!r(sorted)) {
    - preserve
    - qui use "`using'", clear
    = qui use "~/Documents/SocResearch/Dissertation/data/data_temp/_year_inc4.dt
> a", clear
    - sort `varlist'
    = sort obs_no
    - tempfile using
    - qui save "`using'", replace
    = qui save "/var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000c
> ", replace
    - restore
    - }
    - }
    - if ("`nogenerate'"!="") {
    = if ("nogenerate"!="") {
    - tempvar mergevar
    - local mergevaristemp 1
    - }
    - else {
      local mergevar = cond("`generate'"!="", "`generate'", "_merge")
      local mergevaristemp 0
      }
    - local options `update' `replace' `notes' `labels' _merge(`mergevar') `forc
> e'
    = local options     _merge(__000000) 
    - if (bsubstr("`mtype'", 1, 1)=="1") {
    = if (bsubstr("m:1", 1, 1)=="1") {
      local options `options' uniqmaster
      }
    - if (bsubstr("`mtype'", 3, 1)=="1") {
    = if (bsubstr("m:1", 3, 1)=="1") {
    - local options `options' uniqusing
    = local options _merge(__000000) uniqusing
    - }
    - if ("`keepusing'"!="") {
    = if (""!="") {
      local options `options' keep(`keepusing')
      }
    - if ("`keep'" !="" & !strpos("`keep'" , "2")) {
    = if ("3" !="" & !strpos("3" , "2")) {
    - local options `options' nokeep
    = local options _merge(__000000) uniqusing nokeep
    - }
    - if (_caller() > 15) {
    - local version : di "version " string(_caller()) ": "
    - }
    - local _merge `"`version'_merge `varlist' using "`using'", nowarn"'
    = local _merge `"version 16: _merge obs_no using "/var/folders/rp/96l526kj7y
> bdjr5vs5bqqjw80000gn/T//S_20065.00000c", nowarn"'
    - local _merge `"`_merge' `options' tabulate(mresults)"'
    = local _merge `"version 16: _merge obs_no using "/var/folders/rp/96l526kj7y
> bdjr5vs5bqqjw80000gn/T//S_20065.00000c", nowarn _merge(__000000) uniqusing nok
> eep tabulate(mresults)"'
    - if ("`debug'"!="") {
    = if (""!="") {
      di as txt _n "command is"
      di `"`_merge'"' _n
      }
    - `_merge'
    = version 16: _merge obs_no using "/var/folders/rp/96l526kj7ybdjr5vs5bqqjw80
> 000gn/T//S_20065.00000c", nowarn _merge(__000000) uniqusing nokeep tabulate(mr
> esults)
    - if (!`mergevaristemp') {
    = if (!1) {
      capture label list _merge
      if (_rc) {
      label define _merge 1 "master only (1)" 2 "using only (2)" 3 "matched (3)"
>  4 "missing updated (4)" 5 "nonmissing conflict (5)"
      }
      label values `mergevar' _merge
      }
    - if ("`assert'"!="") {
    = if (""!="") {
      if (_caller() < 13) {
      buildexpr expr : `mergevar' "`assert'"
      capture assert `expr'
      if (_rc) {
      error_assert `mergevar' "`assert'"
      }
      }
      else {
      capture checkmresults "`mresults'" "`assert'"
      if (_rc) {
      error_assert `mergevar' "`assert'"
      }
      }
      }
    - if ("`keep'"!="") {
    = if ("3"!="") {
    - buildexpr expr : `mergevar' "`keep'"
    = buildexpr expr : __000000 "3"
      ------------------------------------------------ begin merge.buildexpr ---
      - args userexpr colon varname numbers
      - gettoken first numbers : numbers
      - local list `varname'==`first'
      = local list __000000==3
      - foreach el of local numbers {
        local list `list' | `varname'==`el'
        }
      - c_local `userexpr' "(`list')"
      = c_local expr "(__000000==3)"
      -------------------------------------------------- end merge.buildexpr ---
    - quietly keep if `expr'
    = quietly keep if (__000000==3)
    - }
    - if ("`mtype'"=="1:1") {
    = if ("m:1"=="1:1") {
      qui count if `mergevar'==2
      if (r(N)==0) {
      sort `varlist'
      }
      }
    - if (c(noisily) & "`report'"=="") {
    = if (c(noisily) & ""=="") {
    - local isupdate = ("`replace'"!="" | "`update'"!="")
    = local isupdate = (""!="" | ""!="")
    - present_table `isupdate' `mergevar' `mergevaristemp'
    = present_table 0 __000000 1
      -------------------------------------------- begin merge.present_table ---
      - args isupdate mergevar mergevaristemp
      - if (!`mergevaristemp') {
      = if (!1) {
        local v1 "(`mergevar'==1)"
        local v2 "(`mergevar'==2)"
        local v3 "(`mergevar'==3)"
        local v4 "(`mergevar'==4)"
        local v5 "(`mergevar'==5)"
        }
      - quietly {
      - count if `mergevar'==1
      = count if __000000==1
      - local m1 = r(N)
      - count if `mergevar'==2
      = count if __000000==2
      - local m2 = r(N)
      - if (`isupdate') {
      = if (0) {
        count if `mergevar'==3
        local m3 = r(N)
        count if `mergevar'==4
        local m4 = r(N)
        local m5 = _N - `m1' - `m2' - `m3' - `m4'
        }
      - else {
      - local m3 = _N - `m1' - `m2'
      = local m3 = _N - 0 - 0
      - }
      - }
      - di

      - di as smcl as txt _col(5) "Result" _col(38) "# of obs."
    Result                           # of obs.
      - di as smcl as txt _col(5) "{hline 41}"
    -----------------------------------------
      - di as smcl as txt _col(5) "not matched" _col(30) as res %16.0fc (`m1'+`m
> 2')
      = di as smcl as txt _col(5) "not matched" _col(30) as res %16.0fc (0+0)
    not matched                             0
      - if (`m1'|`m2') {
      = if (0|0) {
        di as smcl as txt _col(9) "from master" _col(30) as res %16.0fc `m1' as 
> txt "  `v1'"
        di as smcl as txt _col(9) "from using" _col(30) as res %16.0fc `m2' as t
> xt "  `v2'"
        di
        }
      - if (!`isupdate') {
      = if (!0) {
      - di as smcl as txt _col(5) "matched" _col(30) as res %16.0fc `m3' as txt 
> "  `v3'"
      = di as smcl as txt _col(5) "matched" _col(30) as res %16.0fc 32579 as txt
>  "  "
    matched                            32,579  
      - }
      - else {
        if (`m1'==0 & `m2'==0) {
        di
        }
        di as smcl as txt _col(5) "matched" _col(30) as res %16.0fc (`m3'+`m4'+`
> m5')
        di as smcl as txt _col(9) "not updated" _col(30) as res %16.0fc `m3' as 
> txt "  `v3'"
        di as smcl as txt _col(9) "missing updated" _col(30) as res %16.0fc `m4'
>  as txt "  `v4'"
        di as smcl as txt _col(9) "nonmissing conflict" _col(30) as res %16.0fc 
> `m5' as txt "  `v5'"
        }
      - di as smcl as txt _col(5) "{hline 41}"
    -----------------------------------------
      ---------------------------------------------- end merge.present_table ---
    - }
    -------------------------------------------------------------- end merge ---
  - save $temp/`ASECdata'_`ref_year'_inc`inc_level'.dta, replace
  = save ~/Documents/SocResearch/Dissertation/data/data_temp/_year_inc4.dta, rep
> lace
file ~/Documents/SocResearch/Dissertation/data/data_temp/_year_inc4.dta saved
  - gen id = _n
  - merge 1:1 id using `premerge_`inc_level'_`y''
  = merge 1:1 id using /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065
> .00000a
    ------------------------------------------------------------ begin merge ---
    - version 11
    - gettoken mtype 0 : 0, parse(" ,")
    - if (!strpos("`mtype'", ":") & "`mtype'"!="") {
    = if (!strpos("1:1", ":") & "1:1"!="") {
      if (_caller()>=11) {
      di as smcl as txt "{p}"
      di as smcl "(note: you are using old"
      di as smcl "{bf:merge} syntax; see"
      di as smcl "{bf:{help merge:[D] merge}} for new syntax)"
      di as smcl "{p_end}"
      }
      merge_10 `mtype' `0'
      exit
      }
    - local origmtype `"`mtype'"'
    = local origmtype `"1:1"'
    - mata: map_mtype(`"mtype"')
    - gettoken token : 0, parse(" ,")
    - if ("`token'"=="_n") {
    = if ("id"=="_n") {
      if ("`mtype'"!="1:1") {
      error_seq_not11 "`mtype'" "`origmtype'"
      }
      gettoken token 0 : 0, parse(" ,")
      local mtype "_n"
      }
    - syntax [varlist(default=none)] using/ [, ASSERT(string) DEBUG GENerate(nam
> e) FORCE KEEP(string) KEEPUSing(string) noLabels NOGENerate noNOTEs REPLACE no
> REPort SORTED UPDATE ]
    - if ("`mtype'"!="_n") {
    = if ("1:1"!="_n") {
    - local origmtype `"`mtype'"'
    = local origmtype `"1:1"'
    - mata: map_mtype(`"mtype"')
    - if ("`varlist'"=="") {
    = if ("id"=="") {
      error_mat_varlist "`mtype'" "`origmtype'"
      }
    - }
    - else {
      if ("`mtype'"=="_n") {
      if ("`varlist'"!="") {
      error_seq_varlist
      }
      }
      }
    - mata: fullfilename("using", "usingfull", "using")
    - mata: resultlist("assert")
    - mata: resultlist("keep")
    - if ("`generate'"!="") {
    = if (""!="") {
      if ("`nogenerate'"!="") {
      di as smcl err "{p}"
      di as smcl "options -generate()- and -nogenerate-"
      di as smcl "may not be specified together."
      di as smcl err "{p_end}"
      }
      confirm new var `generate'
      }
    - if ("`replace'"!="") {
    = if (""!="") {
      if ("`update'"=="") {
      error_replace
      }
      }
    - if ("`sorted'"=="" & "`mtype'"!="_n") {
    = if (""=="" & "1:1"!="_n") {
    - local sortedby : sortedby
    - checksort "`sortedby'" "`varlist'"
    = checksort "" "id"
      ------------------------------------------------ begin merge.checksort ---
      - args is should
      - local i 0
      - return scalar sorted = 1
      - foreach v1 of local should {
      - local ++i
      - local v2 : word `i' of `is'
      = local v2 : word 1 of 
      - if ("`v1'"!="`v2'") {
      = if ("id"!="") {
      - return scalar sorted = 0
      - continue, break
        }
        }
      -------------------------------------------------- end merge.checksort ---
    - if (!r(sorted)) {
    - sort `varlist'
    = sort id
    - }
    - quietly describe using "`using'", varlist short
    = quietly describe using "/var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//
> S_20065.00000a", varlist short
      ------------------------------------------------------- begin describe ---
      - version 9
      - local version : di "version " string(_caller()) ":"
      - syntax [anything] [using] [, SImple REPLACE *]
      - if ("`replace'"!="") {
      = if (""!="") {
        describe_mk `0'
        return add
        exit
        }
      - local varlist `"`anything'"'
      = local varlist `""'
      - if ("`simple'" == "") {
      = if ("" == "") {
      - `version' _describe `0'
      = version 11: _describe using "/var/folders/rp/96l526kj7ybdjr5vs5bqqjw8000
> 0gn/T//S_20065.00000a", varlist short
      - return add
      - }
      - else {
        if (`"`options'"' != "") {
        di as err "simple may not be combined with other options"
        exit 198
        }
        if (`"`using'"' != "") {
        qui `version' describe `varlist' `using', varlist
        if "`varlist'" == "" {
        local vars "`r(varlist)'"
        }
        else {
        local vars "`varlist'"
        }
        local wid = 2
        local n : list sizeof vars
        if `n'==0 {
        exit
        }
        if "`c(hasicu)'" == "1" {
        foreach x of local vars {
        local wid = max(`wid', udstrlen(`"`x'"'))
        }
        }
        else {
        foreach x of local vars {
        local wid = max(`wid', strlen(`"`x'"'))
        }
        }
        local wid = `wid' + 2
        local cols = int((`c(linesize)'+1)/`wid')
        if `cols' < 2 {
        foreach x of local `vars' {
        di as txt `col' `"`x'"'
        }
        exit
        }
        local lines = `n'/`cols'
        local lines = int(cond(`lines'>int(`lines'), `lines'+1, `lines'))
        forvalues i=1(1)`lines' {
        local top = min((`cols')*`lines'+`i', `n')
        local col = 1
        forvalues j=`i'(`lines')`top' {
        local x : word `j' of `vars'
        di as txt _column(`col') "`x'" _c
        local col = `col' + `wid'
        }
        di as txt
        }
        qui `version' describe `varlist' `using', short
        return add
        }
        else {
        ds `varlist'
        qui `version' _describe `varlist', short
        return add
        }
        }
      --------------------------------------------------------- end describe ---
    - local sortedby "`r(sortlist)'"
    = local sortedby "year acs_hhinc"
    - checksort "`sortedby'" "`varlist'"
    = checksort "year acs_hhinc" "id"
      ------------------------------------------------ begin merge.checksort ---
      - args is should
      - local i 0
      - return scalar sorted = 1
      - foreach v1 of local should {
      - local ++i
      - local v2 : word `i' of `is'
      = local v2 : word 1 of year acs_hhinc
      - if ("`v1'"!="`v2'") {
      = if ("id"!="year") {
      - return scalar sorted = 0
      - continue, break
        }
        }
      -------------------------------------------------- end merge.checksort ---
    - if (!r(sorted)) {
    - preserve
    - qui use "`using'", clear
    = qui use "/var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000a"
> , clear
    - sort `varlist'
    = sort id
    - tempfile using
    - qui save "`using'", replace
    = qui save "/var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000c
> ", replace
    - restore
    - }
    - }
    - if ("`nogenerate'"!="") {
    = if (""!="") {
      tempvar mergevar
      local mergevaristemp 1
      }
    - else {
    - local mergevar = cond("`generate'"!="", "`generate'", "_merge")
    = local mergevar = cond(""!="", "", "_merge")
    - local mergevaristemp 0
    - }
    - local options `update' `replace' `notes' `labels' _merge(`mergevar') `forc
> e'
    = local options     _merge(_merge) 
    - if (bsubstr("`mtype'", 1, 1)=="1") {
    = if (bsubstr("1:1", 1, 1)=="1") {
    - local options `options' uniqmaster
    = local options _merge(_merge) uniqmaster
    - }
    - if (bsubstr("`mtype'", 3, 1)=="1") {
    = if (bsubstr("1:1", 3, 1)=="1") {
    - local options `options' uniqusing
    = local options _merge(_merge) uniqmaster uniqusing
    - }
    - if ("`keepusing'"!="") {
    = if (""!="") {
      local options `options' keep(`keepusing')
      }
    - if ("`keep'" !="" & !strpos("`keep'" , "2")) {
    = if ("" !="" & !strpos("" , "2")) {
      local options `options' nokeep
      }
    - if (_caller() > 15) {
    - local version : di "version " string(_caller()) ": "
    - }
    - local _merge `"`version'_merge `varlist' using "`using'", nowarn"'
    = local _merge `"version 16: _merge id using "/var/folders/rp/96l526kj7ybdjr
> 5vs5bqqjw80000gn/T//S_20065.00000c", nowarn"'
    - local _merge `"`_merge' `options' tabulate(mresults)"'
    = local _merge `"version 16: _merge id using "/var/folders/rp/96l526kj7ybdjr
> 5vs5bqqjw80000gn/T//S_20065.00000c", nowarn _merge(_merge) uniqmaster uniqusin
> g tabulate(mresults)"'
    - if ("`debug'"!="") {
    = if (""!="") {
      di as txt _n "command is"
      di `"`_merge'"' _n
      }
    - `_merge'
    = version 16: _merge id using "/var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000g
> n/T//S_20065.00000c", nowarn _merge(_merge) uniqmaster uniqusing tabulate(mres
> ults)
(label statefip_lbl already defined)
    - if (!`mergevaristemp') {
    = if (!0) {
    - capture label list _merge
      ---------------------------------------------------------- begin label ---
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {
      = if (strpos("list", "val") > 0 ) {
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {
        local fix ", nofix"
        }
        gettoken var rest : anything
        while `"`rest'"' != "" {
        gettoken lab rest : rest
        local label "`lab'"
        }
        local vlist : list anything - lab
        if "`lab'" == "." {
        local lab ""
        }
        foreach var of varlist `vlist' {
        `vv' _label `val' `var' `lab' `fix'
        }
        }
      - else {
      - `vv' _label `macval(0)'
      = version 11, missing: _label list _merge
        }
      ------------------------------------------------------------ end label ---
    - if (_rc) {
    - label define _merge 1 "master only (1)" 2 "using only (2)" 3 "matched (3)"
>  4 "missing updated (4)" 5 "nonmissing conflict (5)"
      ---------------------------------------------------------- begin label ---
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {
      = if (strpos("define", "val") > 0 ) {
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {
        local fix ", nofix"
        }
        gettoken var rest : anything
        while `"`rest'"' != "" {
        gettoken lab rest : rest
        local label "`lab'"
        }
        local vlist : list anything - lab
        if "`lab'" == "." {
        local lab ""
        }
        foreach var of varlist `vlist' {
        `vv' _label `val' `var' `lab' `fix'
        }
        }
      - else {
      - `vv' _label `macval(0)'
      = version 11, missing: _label define _merge 1 "master only (1)" 2 "using o
> nly (2)" 3 "matched (3)" 4 "missing updated (4)" 5 "nonmissing conflict (5)"
      - }
      ------------------------------------------------------------ end label ---
    - }
    - label values `mergevar' _merge
    = label values _merge _merge
      ---------------------------------------------------------- begin label ---
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {
      = if (strpos("values", "val") > 0 ) {
      - gettoken val 0 : 0
      - syntax anything [, nofix]
      - if "`fix'" != "" {
      = if "" != "" {
        local fix ", nofix"
        }
      - gettoken var rest : anything
      - while `"`rest'"' != "" {
      = while `" _merge"' != "" {
      - gettoken lab rest : rest
      - local label "`lab'"
      = local label "_merge"
      - }
      - while `"`rest'"' != "" {
      = while `""' != "" {
        gettoken lab rest : rest
        local label "`lab'"
        }
      - local vlist : list anything - lab
      - if "`lab'" == "." {
      = if "_merge" == "." {
        local lab ""
        }
      - foreach var of varlist `vlist' {
      = foreach var of varlist _merge {
      - `vv' _label `val' `var' `lab' `fix'
      = version 11, missing: _label values _merge _merge 
      - }
      - }
      - else {
        `vv' _label `macval(0)'
        }
      ------------------------------------------------------------ end label ---
    - }
    - if ("`assert'"!="") {
    = if (""!="") {
      if (_caller() < 13) {
      buildexpr expr : `mergevar' "`assert'"
      capture assert `expr'
      if (_rc) {
      error_assert `mergevar' "`assert'"
      }
      }
      else {
      capture checkmresults "`mresults'" "`assert'"
      if (_rc) {
      error_assert `mergevar' "`assert'"
      }
      }
      }
    - if ("`keep'"!="") {
    = if (""!="") {
      buildexpr expr : `mergevar' "`keep'"
      quietly keep if `expr'
      }
    - if ("`mtype'"=="1:1") {
    = if ("1:1"=="1:1") {
    - qui count if `mergevar'==2
    = qui count if _merge==2
    - if (r(N)==0) {
    - sort `varlist'
    = sort id
    - }
    - }
    - if (c(noisily) & "`report'"=="") {
    = if (c(noisily) & ""=="") {
    - local isupdate = ("`replace'"!="" | "`update'"!="")
    = local isupdate = (""!="" | ""!="")
    - present_table `isupdate' `mergevar' `mergevaristemp'
    = present_table 0 _merge 0
      -------------------------------------------- begin merge.present_table ---
      - args isupdate mergevar mergevaristemp
      - if (!`mergevaristemp') {
      = if (!0) {
      - local v1 "(`mergevar'==1)"
      = local v1 "(_merge==1)"
      - local v2 "(`mergevar'==2)"
      = local v2 "(_merge==2)"
      - local v3 "(`mergevar'==3)"
      = local v3 "(_merge==3)"
      - local v4 "(`mergevar'==4)"
      = local v4 "(_merge==4)"
      - local v5 "(`mergevar'==5)"
      = local v5 "(_merge==5)"
      - }
      - quietly {
      - count if `mergevar'==1
      = count if _merge==1
      - local m1 = r(N)
      - count if `mergevar'==2
      = count if _merge==2
      - local m2 = r(N)
      - if (`isupdate') {
      = if (0) {
        count if `mergevar'==3
        local m3 = r(N)
        count if `mergevar'==4
        local m4 = r(N)
        local m5 = _N - `m1' - `m2' - `m3' - `m4'
        }
      - else {
      - local m3 = _N - `m1' - `m2'
      = local m3 = _N - 0 - 0
      - }
      - }
      - di

      - di as smcl as txt _col(5) "Result" _col(38) "# of obs."
    Result                           # of obs.
      - di as smcl as txt _col(5) "{hline 41}"
    -----------------------------------------
      - di as smcl as txt _col(5) "not matched" _col(30) as res %16.0fc (`m1'+`m
> 2')
      = di as smcl as txt _col(5) "not matched" _col(30) as res %16.0fc (0+0)
    not matched                             0
      - if (`m1'|`m2') {
      = if (0|0) {
        di as smcl as txt _col(9) "from master" _col(30) as res %16.0fc `m1' as 
> txt "  `v1'"
        di as smcl as txt _col(9) "from using" _col(30) as res %16.0fc `m2' as t
> xt "  `v2'"
        di
        }
      - if (!`isupdate') {
      = if (!0) {
      - di as smcl as txt _col(5) "matched" _col(30) as res %16.0fc `m3' as txt 
> "  `v3'"
      = di as smcl as txt _col(5) "matched" _col(30) as res %16.0fc 32579 as txt
>  "  (_merge==3)"
    matched                            32,579  (_merge==3)
      - }
      - else {
        if (`m1'==0 & `m2'==0) {
        di
        }
        di as smcl as txt _col(5) "matched" _col(30) as res %16.0fc (`m3'+`m4'+`
> m5')
        di as smcl as txt _col(9) "not updated" _col(30) as res %16.0fc `m3' as 
> txt "  `v3'"
        di as smcl as txt _col(9) "missing updated" _col(30) as res %16.0fc `m4'
>  as txt "  `v4'"
        di as smcl as txt _col(9) "nonmissing conflict" _col(30) as res %16.0fc 
> `m5' as txt "  `v5'"
        }
      - di as smcl as txt _col(5) "{hline 41}"
    -----------------------------------------
      ---------------------------------------------- end merge.present_table ---
    - }
    -------------------------------------------------------------- end merge ---
  - generate category_n = .
(32,579 missing values generated)
  - replace category_n = `N'
  = replace category_n = 6260
(32,579 real changes made)
  - label var category_n "N respondents in income level in post-merge dataset'"
    ------------------------------------------------------------ begin label ---
    - version 10.0
    - local vv : display "version " string(_caller()) ", missing:"
    - gettoken val : 0
    - if (strpos("`val'", "val") > 0 ) {
    = if (strpos("var", "val") > 0 ) {
      gettoken val 0 : 0
      syntax anything [, nofix]
      if "`fix'" != "" {
      local fix ", nofix"
      }
      gettoken var rest : anything
      while `"`rest'"' != "" {
      gettoken lab rest : rest
      local label "`lab'"
      }
      local vlist : list anything - lab
      if "`lab'" == "." {
      local lab ""
      }
      foreach var of varlist `vlist' {
      `vv' _label `val' `var' `lab' `fix'
      }
      }
    - else {
    - `vv' _label `macval(0)'
    = version 16, missing: _label var category_n "N respondents in income level 
> in post-merge dataset'"
    - }
    -------------------------------------------------------------- end label ---
  - di "Merged ASEC values with original Research dataset for inc_level " `inc_l
> evel' " ($`lower_bound'-`upper_bound') and year `y'."
  = di "Merged ASEC values with original Research dataset for inc_level " 4 " ($
> 35000-50000) and year 2019."
Merged ASEC values with original Research dataset for inc_level 4 ($35000-50000)
>  and year 2019.
  - tempfile temp_`inc_level'_`y'
  = tempfile temp_4_2019
  - save `temp_`inc_level'_`y'', replace
  = save /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000b, repla
> ce
(note: file /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000b not
>  found)
file /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000b saved
  - di "Saved REDI data (with continuous data) for inc_level " `inc_level' " ($`
> lower_bound'-`upper_bound') and year `y' in file"
  = di "Saved REDI data (with continuous data) for inc_level " 4 " ($35000-50000
> ) and year 2019 in file"
Saved REDI data (with continuous data) for inc_level 4 ($35000-50000) and year 2
> 019 in file
  - }
  - use `working_regex', clear
  = use /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.000003, clear
(Streamlined ACS data, 2019)
  - keep if `inc_cat_var' == `inc_level'
  = keep if acs_hhinc == 5
(259,396 observations deleted)
  - di "The current inc_level is: " `inc_level'
  = di "The current inc_level is: " 5
The current inc_level is: 5
  - if regexm(inc_decoded, "^[a-z/A-Z]+") == 1 {
    di "The inc_level " `inc_level' " is at the lowest end of the " "original Re
> search dataset income range"
    destring inc_decoded, ignore("Less than LESS THAN Under,$ ") generate(`inc_c
> at_var'_ub)
    gen `inc_cat_var'_lb = -100000
    di "Lower bound of -100,000 created for inc_level " `inc_level'
    }
  - else if regexm(inc_decoded, "[a-z/A-Z]+$") == 1 {
    di "The inc_level " `inc_level' " is at the highest end of the " "original R
> esearch dataset income range"
    destring inc_decoded, ignore("and over or over,$ or more OR MORE") generate(
> `inc_cat_var'_lb)
    gen `inc_cat_var'_ub = 999999
    di "Upper bound of 999999 created for inc_level " `inc_level'
    }
  - else if regexm(inc_decoded, "[.][a-z]") == 1 {
    di "The inc_level " `inc_level' " is all missing"
    gen `inc_cat_var'_lb = .
    gen `inc_cat_var'_ub = .
    di "Lower and upper bound of . created for inc_level " `inc_level'
    }
  - else if regexm(inc_decoded, "[0-9]+$") == 1 {
  - di "The inc_level " `inc_level' " has a lower and an upper level"
  = di "The inc_level " 5 " has a lower and an upper level"
The inc_level 5 has a lower and an upper level
  - split inc_decoded, parse("-" "to" "-" "to under" "to less than" "UP TO" "but
>  less than") ignore(" ,$") destring
    ------------------------------------------------------------ begin split ---
    - version 8
    - syntax varname(str) [if] [in] [, Generate(str) noTrim Parse(str asis) DEST
> RING force float Ignore(string asis) percent Limit(numlist int >0 max=1) ]
    - local verpre : display "version " %4.1f _caller() ":"
    - if "`destring'"=="" {
    = if "destring"=="" {
      foreach option in force float ignore percent {
      if `"``option''"'!="" {
      display as error "may not specify `option' without specifying destring"
      exit 198
      }
      }
      }
    - else {
    - if `"`ignore'"'!="" {
    = if `"" ,$""'!="" {
    - if _caller() >= 14 {
    - if ustrfindfirst(`"`ignore'"',",") & !ustrfindfirst(`"`ignore'"',`"""') {
    = if ustrfindfirst(`"" ,$""',",") & !ustrfindfirst(`"" ,$""',`"""') {
      display as error `"ignore string must be enclosed with quotes to ignore co
> mmas or use options"'
      exit 198
      }
    - }
    - `verpre' _parse_ignore `ignore'
    = version 16.0: _parse_ignore " ,$"
      -------------------------------------------------- begin _parse_ignore ---
      - version 14
      - sreturn clear
      - if _caller() < 14 {
        capture syntax [anything] , [ASChars] [ASBytes] [illegal]
        if !_rc {
        if "`aschars'`asbytes'`illegal'"!="" {
        display as error "may not specify options in the ignore option for Stata
>  version less than 14"
        exit 198
        }
        }
        sreturn local aschars 0
        sreturn local illegal 0
        }
      - else {
      - syntax [anything] , [ASChars] [ASBytes] [illegal]
      - if "`asbytes'"!="" {
      = if ""!="" {
        if "`aschars'"!="" {
        display as error "may specify only one of the ignore options aschars and
>  asbytes"
        exit 198
        }
        if "`illegal'"!="" {
        display as error "may not specify the ignore option illegal when specify
> ing asbytes"
        exit 198
        }
        }
      - if "`asbytes'"=="" {
      = if ""=="" {
      - if ustrinvalidcnt(`"`anything'"') {
      = if ustrinvalidcnt(`"" ,$""') {
        display as error "invalid Unicode characters may not be ignored when rem
> oving aschars"
        exit 198
        }
      - }
      - sreturn local aschars = "`asbytes'"==""
      = sreturn local aschars = ""==""
      - sreturn local illegal = "`illegal'"!=""
      = sreturn local illegal = ""!=""
      - capture sreturn local ignore `anything'
      = capture sreturn local ignore " ,$"
      - if _rc {
        sreturn local ignore `"`anything'"'
        }
      - }
      ---------------------------------------------------- end _parse_ignore ---
    - }
    - }
    - marksample touse, strok
    - qui count if `touse'
    = qui count if __000000
    - if r(N) == 0 {
      error 2000
      }
    - if `"`parse'"' == `""' | `"`parse'"' == `""""' {
    = if `""-" "to" "-" "to under" "to less than" "UP TO" "but less than""' == `
> ""' | `""-" "to" "-" "to under" "to less than" "UP TO" "but less than""' == `"
> """' {
      if "`trim'" != "" {
      di as err "parsing on spaces incompatible with notrim"
      exit 198
      }
      local parse `"" ""'
      local trm "trim"
      }
    - if `"`parse'"' == `""' | `"`parse'"' == `""""' {
    = if `""-" "to" "-" "to under" "to less than" "UP TO" "but less than""' == `
> ""' | `""-" "to" "-" "to under" "to less than" "UP TO" "but less than""' == `"
> """' {
      local parse `"" ""'
      local trm "trim"
      }
    - local nparse : word count `parse'
    = local nparse : word count "-" "to" "-" "to under" "to less than" "UP TO" "
> but less than"
    - tokenize `"`parse'"'
    = tokenize `""-" "to" "-" "to under" "to less than" "UP TO" "but less than""
> '
    - if `"`generate'"' != "" {
    = if `""' != "" {
      confirm name `generate'
      if `: word count `generate'' > 1 {
      di as err "invalid stub `generate'"
      exit 198
      }
      }
    - qui {
    - tempvar vw tp mp pl
    - gen int `tp' = 0
    = gen int __000002 = 0
    - gen int `mp' = 0
    = gen int __000003 = 0
    - gen int `pl' = 0
    = gen int __000004 = 0
    - gen str1 `vw' = ""
    = gen str1 __000001 = ""
    - if "`trim'" == "" {
    = if "" == "" {
    - replace `vw' = trim(`varlist') if `touse'
    = replace __000001 = trim(inc_decoded) if __000000
    - }
    - else {
      replace `vw' = `varlist' if `touse'
      }
    - }
    - if "`generate'" == "" {
    = if "" == "" {
    - local generate "`varlist'"
    = local generate "inc_decoded"
    - }
    - local j = 0
    - local go = 1
    - if "`limit'" == "" {
    = if "" == "" {
    - local limit .
    - }
    - qui while `go' & `j' < `limit' {
    = qui while 1 & 0 < . {
    - replace `mp' = .
    = replace __000003 = .
    - replace `pl' = 0
    = replace __000004 = 0
    - forval i = 1 / `nparse' {
    = forval i = 1 / 7 {
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"-"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"-"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"to"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"to"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"-"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"-"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"to under"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"to under"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"to less than"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"to less than"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"UP TO"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"UP TO"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"but less than"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"but less than"') if __000003 == __000002
    - }
    - local ++j
    - tempvar part`j'
    = tempvar part1
    - gen str1 `part`j'' = ""
    = gen str1 __000005 = ""
    - replace `part`j'' = substr(`vw', 1, `mp'-1) if `mp' < .
    = replace __000005 = substr(__000001, 1, __000003-1) if __000003 < .
    - replace `vw' = `trm'(substr(`vw', `mp'+`pl', .)) if `mp' < .
    = replace __000001 = (substr(__000001, __000003+__000004, .)) if __000003 < 
> .
    - replace `part`j'' = `vw' if `mp' >= .
    = replace __000005 = __000001 if __000003 >= .
    - replace `vw' = "" if `mp' >= .
    = replace __000001 = "" if __000003 >= .
    - local newvars "`newvars'`generate'`j' "
    = local newvars "inc_decoded1 "
    - capture assert `vw' == ""
    = capture assert __000001 == ""
    - local go = _rc
    - }
    - qui while `go' & `j' < `limit' {
    = qui while 9 & 1 < . {
    - replace `mp' = .
    = replace __000003 = .
    - replace `pl' = 0
    = replace __000004 = 0
    - forval i = 1 / `nparse' {
    = forval i = 1 / 7 {
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"-"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"-"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"to"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"to"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"-"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"-"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"to under"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"to under"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"to less than"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"to less than"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"UP TO"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"UP TO"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"but less than"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"but less than"') if __000003 == __000002
    - }
    - local ++j
    - tempvar part`j'
    = tempvar part2
    - gen str1 `part`j'' = ""
    = gen str1 __000006 = ""
    - replace `part`j'' = substr(`vw', 1, `mp'-1) if `mp' < .
    = replace __000006 = substr(__000001, 1, __000003-1) if __000003 < .
    - replace `vw' = `trm'(substr(`vw', `mp'+`pl', .)) if `mp' < .
    = replace __000001 = (substr(__000001, __000003+__000004, .)) if __000003 < 
> .
    - replace `part`j'' = `vw' if `mp' >= .
    = replace __000006 = __000001 if __000003 >= .
    - replace `vw' = "" if `mp' >= .
    = replace __000001 = "" if __000003 >= .
    - local newvars "`newvars'`generate'`j' "
    = local newvars "inc_decoded1 inc_decoded2 "
    - capture assert `vw' == ""
    = capture assert __000001 == ""
    - local go = _rc
    - }
    - qui while `go' & `j' < `limit' {
    = qui while 0 & 2 < . {
      replace `mp' = .
      replace `pl' = 0
      forval i = 1 / `nparse' {
      replace `tp' = index(`vw', `"``i''"')
      replace `mp' = min(`tp', `mp') if `tp'
      replace `pl' = length(`"``i''"') if `mp' == `tp'
      }
      local ++j
      tempvar part`j'
      gen str1 `part`j'' = ""
      replace `part`j'' = substr(`vw', 1, `mp'-1) if `mp' < .
      replace `vw' = `trm'(substr(`vw', `mp'+`pl', .)) if `mp' < .
      replace `part`j'' = `vw' if `mp' >= .
      replace `vw' = "" if `mp' >= .
      local newvars "`newvars'`generate'`j' "
      capture assert `vw' == ""
      local go = _rc
      }
    - capture confirm new var `newvars'
    = capture confirm new var inc_decoded1 inc_decoded2 
    - if _rc {
      di as err "cannot generate new variables using stub `generate'"
      exit _rc
      }
    - qui forval i = 1 / `j' {
    = qui forval i = 1 / 2 {
    - gen str1 `generate'`i' = ""
    = gen str1 inc_decoded1 = ""
    - replace `generate'`i' = `part`i''
    = replace inc_decoded1 = __000005
    - }
    - gen str1 `generate'`i' = ""
    = gen str1 inc_decoded2 = ""
    - replace `generate'`i' = `part`i''
    = replace inc_decoded2 = __000006
    - }
    - return local varlist "`newvars'"
    = return local varlist "inc_decoded1 inc_decoded2 "
    - return local nvars "`j'"
    = return local nvars "2"
    - local s = cond(`j' > 1, "s", "")
    = local s = cond(2 > 1, "s", "")
    - if "`destring'" != "" {
    = if "destring" != "" {
    - di as res "variable`s' born as string: "
    = di as res "variables born as string: "
variables born as string: 
    - }
    - else di as res "variable`s' created as string: "
    = else di as res "variables created as string: "
    - ds `newvars'
    = ds inc_decoded1 inc_decoded2 
      ------------------------------------------------------------- begin ds ---
      - version 9
      - local version : di "version " string(_caller()) ":"
      - if (_caller() <= 4) {
        `version' describe, simple
        exit
        }
      - else {
      - ds_util `0'
      = ds_util inc_decoded1 inc_decoded2 
        ------------------------------------------------------ begin ds_util ---
        - version 8
        - syntax [varlist] [, HAS(str asis) NOT(str asis) NOT2 INSEnsitive Detai
> l Alpha Varwidth(int 12) Skip(int 2) INDENT(int 0)]
        - if "`varlist'" == "" {
        = if "inc_decoded1 inc_decoded2" == "" {
          exit
          }
        - if !inrange(`indent',0,244) {
        = if !inrange(0,0,244) {
          di as err "indent() should be in the range 0..244"
          exit 198
          }
        - if !inrange(`varwidth',5,32) {
        = if !inrange(12,5,32) {
          di as err "varwidth() should be in the range 5..32"
          exit 198
          }
        - if !inrange(`skip',1,10) {
        = if !inrange(2,1,10) {
          di as err "skip() should be in the range 1..10"
          exit 198
          }
        - local nopts = (`"`has'"' != "") + (`"`not'"' != "") + ("`not2'" != "")
        = local nopts = (`""' != "") + (`""' != "") + ("" != "")
        - if `nopts' == 3 {
        = if 0 == 3 {
          di as err "may not combine options has(), not(), and not"
          exit 198
          }
        - else if `nopts' == 2 {
        = else if 0 == 2 {
          if (`"`has'"' == "") {
          di as err "may not combine options not() and not"
          exit 198
          }
          else if (`"`not'"' == "") {
          di as err "may not combine options has() and not"
          exit 198
          }
          else if (`"`not2'"' == "") {
          di as err "may not combine options has() and not()"
          exit 198
          }
          }
        - if `"`not'"' != "" {
        = if `""' != "" {
          local has `"`not'"'
          local opt "not"
          }
        - else if `"`has'"' != "" {
        = else if `""' != "" {
          local opt "has"
          }
        - local inse = "`insensitive'" != ""
        = local inse = "" != ""
        - if `"`has'"' != "" {
        = if `""' != "" {
          CheckHas `"`has'"' "`opt'" "`inse'"
          if "`what'" == "varl" | "`what'" == "vall" {
          VarlVall "`what'" `"`which'"' "`varlist'" "`inse'"
          }
          else if "`what'" == "f" {
          Format `"`which'"' "`varlist'" "`inse'"
          }
          else if "`what'" == "c" {
          Char `"`which'"' "`varlist'" "`inse'"
          }
          else if "`what'" == "t" {
          Type `"`which'"' "`varlist'"
          }
          if `"`not'"' != "" {
          local varlist : list varlist - vlist
          }
          else if `"`has'"' != "" {
          local varlist "`vlist'"
          }
          }
        - if `"`not2'"' != "" {
        = if `""' != "" {
          unab all : *
          local varlist : list all - varlist
          }
        - if "`varlist'" == "" {
        = if "inc_decoded1 inc_decoded2" == "" {
          exit
          }
        - if "`alpha'" != "" {
        = if "" != "" {
          local varlist : list sort varlist
          }
        - if "`detail'" != "" {
        = if "" != "" {
          describe `varlist'
          }
        - else {
        - local nvar : word count `varlist'
        = local nvar : word count inc_decoded1 inc_decoded2
        - local ncol = int((`:set linesize' + `skip') / (`varwidth' + `skip'))
        = local ncol = int((80 + 2) / (12 + 2))
        - local i 0
        - local vlist
        - foreach v of local varlist {
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" inc_decoded1"'
        - }
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" inc_decoded1 inc_decoded2"'
        - }
        - DisplayInCols txt `indent' `skip' 0 `vlist'
        = DisplayInCols txt 0 2 0  inc_decoded1 inc_decoded2
          -------------------------------------- begin ds_util.DisplayInCols ---
          - gettoken sty 0 : 0
          - gettoken indent 0 : 0
          - gettoken pad 0 : 0
          - gettoken wid 0 : 0
          - local indent = cond(`indent'==. | `indent'<0, 0, `indent')
          = local indent = cond(0==. | 0<0, 0, 0)
          - local pad = cond(`pad'==. | `pad'<1, 2, `pad')
          = local pad = cond(2==. | 2<1, 2, 2)
          - local wid = cond(`wid'==. | `wid'<0, 0, `wid')
          = local wid = cond(0==. | 0<0, 0, 0)
          - local n : list sizeof 0
          - if `n'==0 {
          = if 2==0 {
            exit
            }
          - foreach x of local 0 {
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(0, length(`"inc_decoded1"'))
          - }
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"inc_decoded2"'))
          - }
          - local wid = `wid' + `pad'
          = local wid = 12 + 2
          - local cols = int((`c(linesize)'+1-`indent')/`wid')
          = local cols = int((80+1-0)/14)
          - if `cols' < 2 {
          = if 5 < 2 {
            if `indent' {
            local col "_column(`=`indent'+1')"
            }
            foreach x of local 0 {
            di as `sty' `col' `"`x'"'
            }
            exit
            }
          - local lines = `n'/`cols'
          = local lines = 2/5
          - local lines = int(cond(`lines'>int(`lines'), `lines'+1, `lines'))
          = local lines = int(cond(.4>int(.4), .4+1, .4))
          - forvalues i=1(1)`lines' {
          = forvalues i=1(1)1 {
          - local top = min((`cols')*`lines'+`i', `n')
          = local top = min((5)*1+1, 2)
          - local col = `indent' + 1
          = local col = 0 + 1
          - forvalues j=`i'(`lines')`top' {
          = forvalues j=1(1)2 {
          - local x : word `j' of `0'
          = local x : word 1 of   inc_decoded1 inc_decoded2
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(1) "inc_decoded1" _c
inc_decoded1          - local col = `col' + `wid'
          = local col = 1 + 14
          - }
          - local x : word `j' of `0'
          = local x : word 2 of   inc_decoded1 inc_decoded2
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(15) "inc_decoded2" _c
              inc_decoded2          - local col = `col' + `wid'
          = local col = 15 + 14
          - }
          - di as `sty'
          = di as txt

          - }
          ---------------------------------------- end ds_util.DisplayInCols ---
        - }
        - return local varlist `varlist'
        = return local varlist inc_decoded1 inc_decoded2
        -------------------------------------------------------- end ds_util ---
      - exit
      --------------------------------------------------------------- end ds ---
    - if "`destring'" != "" {
    = if "destring" != "" {
    - if `"`ignore'"' != "" {
    = if `"" ,$""' != "" {
    - local ignore `"ignore(`ignore')"'
    = local ignore `"ignore(" ,$")"'
    - }
    - `verpre' destring `newvars', replace `force' `float' `ignore' `percent'
    = version 16.0: destring inc_decoded1 inc_decoded2 , replace   ignore(" ,$")
>  
      ------------------------------------------------------- begin destring ---
      - version 14
      - local cmdargs = `"`0'"'
      = local cmdargs = `"inc_decoded1 inc_decoded2 , replace   ignore(" ,$") "'
      - local verpre : display "version " %4.1f _caller() ":"
      - syntax [varlist], [Generate(string) replace] [force] [float] [Ignore(str
> ing asis)] [percent] [dpcomma]
      - if _caller() >= 14 {
      - if ustrpos(`"`ignore'"',",") & !ustrpos(`"`ignore'"',`"""') {
      = if ustrpos(`"" ,$""',",") & !ustrpos(`"" ,$""',`"""') {
        display as error `"ignore string must be enclosed with quotes to ignore 
> commas or use options"'
        exit 198
        }
      - }
      - `verpre' _parse_ignore `ignore'
      = version 16.0: _parse_ignore " ,$"
        ------------------------------------------------ begin _parse_ignore ---
        - version 14
        - sreturn clear
        - if _caller() < 14 {
          capture syntax [anything] , [ASChars] [ASBytes] [illegal]
          if !_rc {
          if "`aschars'`asbytes'`illegal'"!="" {
          display as error "may not specify options in the ignore option for Sta
> ta version less than 14"
          exit 198
          }
          }
          sreturn local aschars 0
          sreturn local illegal 0
          }
        - else {
        - syntax [anything] , [ASChars] [ASBytes] [illegal]
        - if "`asbytes'"!="" {
        = if ""!="" {
          if "`aschars'"!="" {
          display as error "may specify only one of the ignore options aschars a
> nd asbytes"
          exit 198
          }
          if "`illegal'"!="" {
          display as error "may not specify the ignore option illegal when speci
> fying asbytes"
          exit 198
          }
          }
        - if "`asbytes'"=="" {
        = if ""=="" {
        - if ustrinvalidcnt(`"`anything'"') {
        = if ustrinvalidcnt(`"" ,$""') {
          display as error "invalid Unicode characters may not be ignored when r
> emoving aschars"
          exit 198
          }
        - }
        - sreturn local aschars = "`asbytes'"==""
        = sreturn local aschars = ""==""
        - sreturn local illegal = "`illegal'"!=""
        = sreturn local illegal = ""!=""
        - capture sreturn local ignore `anything'
        = capture sreturn local ignore " ,$"
        - if _rc {
          sreturn local ignore `"`anything'"'
          }
        - }
        -------------------------------------------------- end _parse_ignore ---
      - if _caller() < 14 {
        local aschars 0
        syntax [varlist], [Generate(string) replace] [force] [float] [Ignore(str
> ing)] [percent] [dpcomma]
        }
      - else {
      - if `"`s(ignore)'"'!="" {
      = if `" ,$"'!="" {
      - local ignore `"`s(ignore)'"'
      = local ignore `" ,$"'
      - }
      - local aschars `s(aschars)'
      = local aschars 1
      - if `s(illegal)' {
      = if 0 {
        local illegal = ustrunescape("\ufffd")
        }
      - }
      - if "`percent'" == "percent" {
      = if "" == "percent" {
        if !ustrpos(`"`ignore'"', "%") {
        local ignore `"`ignore'%"'
        }
        }
      - if "`illegal'"!="" {
      = if ""!="" {
        local ignore `"`ignore'`illegal'"'
        }
      - if `"`float'"'!="" {
      = if `""'!="" {
        local gtype "float"
        }
      - else {
      - local gtype "double"
      - }
      - if "`generate'" != "" & "`replace'" != "" {
      = if "" != "" & "replace" != "" {
        di as err "options generate and replace are mutually exclusive"
        exit 198
        }
      - if "`generate'" == "" & "`replace'" == "" {
      = if "" == "" & "replace" == "" {
        di as err "must specify either generate or replace option"
        exit 198
        }
      - if "`generate'" != "" {
      = if "" != "" {
        local ct1: word count `varlist'
        local save "`varlist'"
        local 0 "`generate'"
        capture syntax newvarlist
        if _rc {
        di as err "generate() contains existing variable(s) and/or illegal varia
> ble name(s)"
        exit _rc
        }
        local generate "`varlist'"
        local varlist "`save'"
        local ct2: word count `generate'
        if `ct1' != `ct2' {
        di as err "number of variables in varlist must equal"
        di as err "number of variables in generate(newvarlist)"
        exit 198
        }
        }
      - local m 1
      - if `"`ignore'"' == "" {
      = if `" ,$"' == "" {
        local ignore ""
        }
      - if `aschars' {
      = if 1 {
      - local l = ustrlen(`"`ignore'"')
      = local l = ustrlen(`" ,$"')
      - }
      - else {
        local l = length(`"`ignore'"')
        }
      - while `m' <= `l' {
      = while 1 <= 3 {
      - if `aschars' {
      = if 1 {
      - local char`m' = usubstr(`"`ignore'"', `m', 1)
      = local char1 = usubstr(`" ,$"', 1, 1)
      - }
      - else {
        local char`m' = substr(`"`ignore'"', `m', 1)
        }
      - local m = `m' + 1
      = local m = 1 + 1
      - }
      - while `m' <= `l' {
      = while 2 <= 3 {
      - if `aschars' {
      = if 1 {
      - local char`m' = usubstr(`"`ignore'"', `m', 1)
      = local char2 = usubstr(`" ,$"', 2, 1)
      - }
      - else {
        local char`m' = substr(`"`ignore'"', `m', 1)
        }
      - local m = `m' + 1
      = local m = 2 + 1
      - }
      - while `m' <= `l' {
      = while 3 <= 3 {
      - if `aschars' {
      = if 1 {
      - local char`m' = usubstr(`"`ignore'"', `m', 1)
      = local char3 = usubstr(`" ,$"', 3, 1)
      - }
      - else {
        local char`m' = substr(`"`ignore'"', `m', 1)
        }
      - local m = `m' + 1
      = local m = 3 + 1
      - }
      - while `m' <= `l' {
      = while 4 <= 3 {
        if `aschars' {
        local char`m' = usubstr(`"`ignore'"', `m', 1)
        }
        else {
        local char`m' = substr(`"`ignore'"', `m', 1)
        }
        local m = `m' + 1
        }
      - if `aschars' {
      = if 1 {
      - local aswhat "character"
      - }
      - else {
        local aswhat "byte"
        }
      - if "`generate'"!="" {
      = if ""!="" {
        local genrep "generate"
        }
      - else {
      - local genrep "replace"
      - }
      - local tvars OLDVAR NEWVAR ismissing found topct
      - tempvar `tvars'
      = tempvar OLDVAR NEWVAR ismissing found topct
      - local varno 0
      - foreach var of varlist `varlist' {
      = foreach var of varlist inc_decoded1 inc_decoded2 {
      - local varno = `varno' + 1
      = local varno = 0 + 1
      - if "`generate'"!="" {
      = if ""!="" {
        local finalvarname : word `varno' of `generate'
        local finalprint "`finalvarname' "
        }
      - else {
      - local finalvarname "`var'"
      = local finalvarname "inc_decoded1"
      - local finalprint ""
      - }
      - capture confirm string variable `var'
      = capture confirm string variable inc_decoded1
      - if _rc != 0 {
        di as txt "`var' already numeric; no " as res "`genrep'"
        }
      - else {
      - qui gen `OLDVAR' = `var'
      = qui gen __000007 = inc_decoded1
      - local jj 1
      - local b
      - local bcnt = 0
      - local c
      - local makepct
      - while `"`char`jj''"' != "" {
      = while `" "' != "" {
      - capture drop `found'
      = capture drop __00000A
      - capture drop `topct'
      = capture drop __00000B
      - local t `"`char`jj''"'
      = local t `" "'
      - if `aschars' {
      = if 1 {
      - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
      = qui gen byte __00000A = ustrpos(__000007, `" "') != 0
      - }
      - else {
        qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
        }
      - qui summarize `found', meanonly
      = qui summarize __00000A, meanonly
      - if r(sum) > 0 {
      - if `"`t'"'=="`illegal'" {
      = if `" "'=="" {
        local b `"`b' illegal Unicode"'
        }
      - else if `"`t'"' == " " {
      = else if `" "' == " " {
      - local b `"`b' space"'
      = local b `" space"'
      - }
      - else {
        local b `"`b' `t'"'
        }
      - local ++bcnt
      - }
      - if `aschars' {
      = if 1 {
      - if `"`t'"'=="%" {
      = if `" "'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if ustrpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
      - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
      = qui replace __000007 = usubinstr(__000007, `" "', "", .)
      - }
      - else {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if strpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
        }
      - local jj = `jj' + 1
      = local jj = 1 + 1
      - }
      - while `"`char`jj''"' != "" {
      = while `","' != "" {
      - capture drop `found'
      = capture drop __00000A
      - capture drop `topct'
      = capture drop __00000B
      - local t `"`char`jj''"'
      = local t `","'
      - if `aschars' {
      = if 1 {
      - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
      = qui gen byte __00000A = ustrpos(__000007, `","') != 0
      - }
      - else {
        qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
        }
      - qui summarize `found', meanonly
      = qui summarize __00000A, meanonly
      - if r(sum) > 0 {
        if `"`t'"'=="`illegal'" {
        local b `"`b' illegal Unicode"'
        }
        else if `"`t'"' == " " {
        local b `"`b' space"'
        }
        else {
        local b `"`b' `t'"'
        }
        local ++bcnt
        }
      - if `aschars' {
      = if 1 {
      - if `"`t'"'=="%" {
      = if `","'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if ustrpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
      - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
      = qui replace __000007 = usubinstr(__000007, `","', "", .)
      - }
      - else {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if strpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
        }
      - local jj = `jj' + 1
      = local jj = 2 + 1
      - }
      - while `"`char`jj''"' != "" {
      = while `"$"' != "" {
      - capture drop `found'
      = capture drop __00000A
      - capture drop `topct'
      = capture drop __00000B
      - local t `"`char`jj''"'
      = local t `"$"'
      - if `aschars' {
      = if 1 {
      - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
      = qui gen byte __00000A = ustrpos(__000007, `"$"') != 0
      - }
      - else {
        qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
        }
      - qui summarize `found', meanonly
      = qui summarize __00000A, meanonly
      - if r(sum) > 0 {
        if `"`t'"'=="`illegal'" {
        local b `"`b' illegal Unicode"'
        }
        else if `"`t'"' == " " {
        local b `"`b' space"'
        }
        else {
        local b `"`b' `t'"'
        }
        local ++bcnt
        }
      - if `aschars' {
      = if 1 {
      - if `"`t'"'=="%" {
      = if `"$"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if ustrpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
      - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
      = qui replace __000007 = usubinstr(__000007, `"$"', "", .)
      - }
      - else {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if strpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
        }
      - local jj = `jj' + 1
      = local jj = 3 + 1
      - }
      - while `"`char`jj''"' != "" {
      = while `""' != "" {
        capture drop `found'
        capture drop `topct'
        local t `"`char`jj''"'
        if `aschars' {
        qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
        }
        else {
        qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
        }
        qui summarize `found', meanonly
        if r(sum) > 0 {
        if `"`t'"'=="`illegal'" {
        local b `"`b' illegal Unicode"'
        }
        else if `"`t'"' == " " {
        local b `"`b' space"'
        }
        else {
        local b `"`b' `t'"'
        }
        local ++bcnt
        }
        if `aschars' {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if ustrpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
        }
        else {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if strpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
        }
        local jj = `jj' + 1
        }
      - if _caller() >= 14 {
      - qui replace `OLDVAR' = ustrtrim(`OLDVAR')
      = qui replace __000007 = ustrtrim(__000007)
      - }
      - else {
        qui replace `OLDVAR' = strtrim(`OLDVAR')
        }
      - quietly gen byte `ismissing' = `OLDVAR'=="" | `OLDVAR'=="." | (strlen(`O
> LDVAR')==2 & inrange(`OLDVAR',".a",".z"))
      = quietly gen byte __000009 = __000007=="" | __000007=="." | (strlen(__000
> 007)==2 & inrange(__000007,".a",".z"))
      - if ("`dpcomma'" != "") {
      = if ("" != "") {
        qui replace `OLDVAR' = subinstr(`OLDVAR',".","X",.) if !`ismissing'
        qui replace `OLDVAR' = subinstr(`OLDVAR', ",", ".", 1) if !ustrregexm(`O
> LDVAR',"(,[a-z])|(^,$)")
        }
      - if _caller() >= 14 {
      - qui replace `OLDVAR' = ustrregexrf(`OLDVAR',"^0+","0")
      = qui replace __000007 = ustrregexrf(__000007,"^0+","0")
      - }
      - else {
        qui replace `OLDVAR' = regexr(`OLDVAR',"^0+","0")
        }
      - qui gen `gtype' `NEWVAR' = real(`OLDVAR')
      = qui gen double __000008 = real(__000007)
      - qui summarize `ismissing', meanonly
      = qui summarize __000009, meanonly
      - local oldmiss = r(sum)
      - qui count if missing(`NEWVAR')
      = qui count if missing(__000008)
      - local newmiss = r(N)
      - local flag = `oldmiss'!=`newmiss'
      = local flag = 0!=0
      - if `flag' & ("`force'" == "") {
      = if 0 & ("" == "") {
        if `"`ignore'"' != "" {
        di as txt "`var': contains " "`aswhat's not specified in " as res "ignor
> e()" as txt "; no " as res "`genrep'"
        }
        else {
        di as txt "`var': contains " "nonnumeric `aswhat's; no " as res "`genrep
> '"
        }
        }
      - else {
      - order `NEWVAR', after(`var')
      = order __000008, after(inc_decoded1)
        -------------------------------------------------------- begin order ---
        - version 11
        - if (_caller()<11) {
          _order `macval(0)'
          exit
          }
        - syntax varlist[, Before(varname) After(varname) first last SEQuential 
> ALPHAbetic]
        - if (`"`before'"' == "" & `"`after'"' == "" & "`first'" == "" & "`last'
> " == "" & "`alphabetic'" == "" & "`sequential'" == "") {
        = if (`""' == "" & `"inc_decoded1"' == "" & "" == "" & "" == "" & "" == 
> "" & "" == "") {
          _order `macval(0)'
          exit
          }
        - if (`"`before'"' != "" & `"`after'"' != "") {
        = if (`""' != "" & `"inc_decoded1"' != "") {
          dis as error "before() may not be combined with after()"
          exit 198
          }
        - if (`"`before'"' != "" & `"`first'"' != "") {
        = if (`""' != "" & `""' != "") {
          dis as error "before() may not be combined with first()"
          exit 198
          }
        - if (`"`before'"' != "" & `"`last'"' != "") {
        = if (`""' != "" & `""' != "") {
          dis as error "before() may not be combined with last()"
          exit 198
          }
        - if (`"`after'"' != "" & `"`before'"' != "") {
        = if (`"inc_decoded1"' != "" & `""' != "") {
          dis as error "after() may not be combined with before()"
          exit 198
          }
        - if (`"`after'"' != "" & `"`first'"' != "") {
        = if (`"inc_decoded1"' != "" & `""' != "") {
          dis as error "after() may not be combined with first()"
          exit 198
          }
        - if (`"`after'"' != "" & `"`last'"' != "") {
        = if (`"inc_decoded1"' != "" & `""' != "") {
          dis as error "after() may not be combined with last()"
          exit 198
          }
        - if ("`first'" != "" & "`last'" != "") {
        = if ("" != "" & "" != "") {
          dis as error "first may not be combined with last"
          exit 198
          }
        - if ("`sequential'" != "" & "`alphabetic'" != "") {
        = if ("" != "" & "" != "") {
          dis as error "sequential may not be combined with alphabetic"
          exit 198
          }
        - if ("`first'" != "") {
        = if ("" != "") {
          if "`alphabetic'" != "" {
          local varlist : list sort varlist
          }
          if "`sequential'" != "" {
          aorder `varlist'
          }
          else {
          _order `varlist'
          }
          }
        - if ("`last'" != "") {
        = if ("" != "") {
          unab vlist : _all
          local list : list vlist - varlist
          if "`alphabetic'" != "" {
          local varlist : list sort varlist
          }
          if "`sequential'" != "" {
          preserve
          keep `varlist'
          aorder `varlist'
          unab varlist : _all
          restore
          }
          _order `list' `varlist'
          }
        - if (`"`before'"' != "") {
        = if (`""' != "") {
          local test : list before in varlist
          if `test' {
          dis as err "varname specified in before() may not" " be in varlist"
          exit 198
          }
          if "`alphabetic'" != "" {
          local varlist : list sort varlist
          }
          if "`sequential'" != "" {
          preserve
          keep `varlist'
          aorder `varlist'
          unab varlist : _all
          restore
          }
          unab vlist : _all
          local vlist : list vlist - varlist
          local var_num : list posof "`before'" in vlist
          local var_num = `var_num' - 1
          local fvar : word 1 of `vlist'
          capture local lvar : word `var_num' of `vlist'
          if _rc {
          _order `varlist'
          exit
          }
          unab nlist : `fvar'-`lvar'
          local nlist : list nlist - varlist
          _order `nlist' `varlist'
          }
        - if (`"`after'"' != "") {
        = if (`"inc_decoded1"' != "") {
        - local test : list after in varlist
        - if `test' {
        = if 0 {
          dis as err "varname specified in after() may not" " be in varlist"
          exit 198
          }
        - if "`alphabetic'" != "" {
        = if "" != "" {
          local varlist : list sort varlist
          }
        - if "`sequential'" != "" {
        = if "" != "" {
          preserve
          keep `varlist'
          aorder `varlist'
          unab varlist : _all
          restore
          }
        - unab vlist : _all
          ------------------------------------------------------- begin unab ---
          - version 6
          - gettoken user 0: 0, parse(" :")
          - gettoken colon 0: 0, parse(" :")
          - if `"`colon'"' != ":" { error 198 }
          = if `":"' != ":" { error 198 }
          - syntax [varlist(default=empty)] [, MIN(integer 1) MAX(integer 120000
> ) NAME(string)]
          - c_local `user' `varlist'
          = c_local vlist year hhwt repwt cluster adjust statefip strata hhincom
> e_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 repwt10 r
> epwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 repwt20
>  repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt29 repwt
> 30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repwt39 rep
> wt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 repwt49 r
> epwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 repwt59
>  repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt68 repwt
> 69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repwt78 rep
> wt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp5 repwt
> p6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14 repwtp
> 15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwtp23 rep
> wtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 repwtp32 
> repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40 repwtp
> 41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwtp49 rep
> wtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 repwtp58 
> repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66 repwtp
> 67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwtp75 rep
> wtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __000000 __
> 000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_decoded2 
> __000007 __00000A __000009 __000008
          - local n : word count `varlist'
          = local n : word count year hhwt repwt cluster adjust statefip strata 
> hhincome_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 re
> pwt10 repwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 
> repwt20 repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt2
> 9 repwt30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repw
> t39 repwt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 re
> pwt49 repwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 
> repwt59 repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt6
> 8 repwt69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repw
> t78 repwt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp
> 5 repwtp6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14
>  repwtp15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwt
> p23 repwtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 re
> pwtp32 repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40
>  repwtp41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwt
> p49 repwtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 re
> pwtp58 repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66
>  repwtp67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwt
> p75 repwtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __00
> 0000 __000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_de
> coded2 __000007 __00000A __000009 __000008
          - if `n'>=`min' & `n'<=`max' { exit }
          = if 187>=1 & 187<=120000 { exit }
          --------------------------------------------------------- end unab ---
        - local vlist : list vlist - varlist
        - local var_num : list posof "`after'" in vlist
        = local var_num : list posof "inc_decoded1" in vlist
        - local fvar : word 1 of `vlist'
        = local fvar : word 1 of year hhwt repwt cluster adjust statefip strata 
> hhincome_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 re
> pwt10 repwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 
> repwt20 repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt2
> 9 repwt30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repw
> t39 repwt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 re
> pwt49 repwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 
> repwt59 repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt6
> 8 repwt69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repw
> t78 repwt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp
> 5 repwtp6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14
>  repwtp15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwt
> p23 repwtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 re
> pwtp32 repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40
>  repwtp41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwt
> p49 repwtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 re
> pwtp58 repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66
>  repwtp67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwt
> p75 repwtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __00
> 0000 __000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_de
> coded2 __000007 __00000A __000009
        - local lvar : word `var_num' of `vlist'
        = local lvar : word 182 of year hhwt repwt cluster adjust statefip strat
> a hhincome_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 
> repwt10 repwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt1
> 9 repwt20 repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repw
> t29 repwt30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 re
> pwt39 repwt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 
> repwt49 repwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt5
> 8 repwt59 repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repw
> t68 repwt69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 re
> pwt78 repwt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repw
> tp5 repwtp6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp
> 14 repwtp15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 rep
> wtp23 repwtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 
> repwtp32 repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp
> 40 repwtp41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 rep
> wtp49 repwtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 
> repwtp58 repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp
> 66 repwtp67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 rep
> wtp75 repwtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __
> 000000 __000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_
> decoded2 __000007 __00000A __000009
        - unab nlist : `fvar'-`lvar'
        = unab nlist : year-inc_decoded1
          ------------------------------------------------------- begin unab ---
          - version 6
          - gettoken user 0: 0, parse(" :")
          - gettoken colon 0: 0, parse(" :")
          - if `"`colon'"' != ":" { error 198 }
          = if `":"' != ":" { error 198 }
          - syntax [varlist(default=empty)] [, MIN(integer 1) MAX(integer 120000
> ) NAME(string)]
          - c_local `user' `varlist'
          = c_local nlist year hhwt repwt cluster adjust statefip strata hhincom
> e_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 repwt10 r
> epwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 repwt20
>  repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt29 repwt
> 30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repwt39 rep
> wt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 repwt49 r
> epwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 repwt59
>  repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt68 repwt
> 69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repwt78 rep
> wt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp5 repwt
> p6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14 repwtp
> 15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwtp23 rep
> wtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 repwtp32 
> repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40 repwtp
> 41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwtp49 rep
> wtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 repwtp58 
> repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66 repwtp
> 67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwtp75 rep
> wtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __000000 __
> 000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1
          - local n : word count `varlist'
          = local n : word count year hhwt repwt cluster adjust statefip strata 
> hhincome_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 re
> pwt10 repwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 
> repwt20 repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt2
> 9 repwt30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repw
> t39 repwt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 re
> pwt49 repwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 
> repwt59 repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt6
> 8 repwt69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repw
> t78 repwt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp
> 5 repwtp6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14
>  repwtp15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwt
> p23 repwtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 re
> pwtp32 repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40
>  repwtp41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwt
> p49 repwtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 re
> pwtp58 repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66
>  repwtp67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwt
> p75 repwtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __00
> 0000 __000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1
          - if `n'>=`min' & `n'<=`max' { exit }
          = if 182>=1 & 182<=120000 { exit }
          --------------------------------------------------------- end unab ---
        - local nlist : list nlist - varlist
        - _order `nlist' `varlist'
        = _order year hhwt repwt cluster adjust statefip strata hhincome_acs rep
> wt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 repwt10 repwt11 re
> pwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 repwt20 repwt21 
> repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt29 repwt30 repwt3
> 1 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repwt39 repwt40 repw
> t41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 repwt49 repwt50 re
> pwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 repwt59 repwt60 
> repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt68 repwt69 repwt7
> 0 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repwt78 repwt79 repw
> t80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp5 repwtp6 repwtp
> 7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14 repwtp15 repwtp
> 16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwtp23 repwtp24 rep
> wtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 repwtp32 repwtp33 
> repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40 repwtp41 repwtp
> 42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwtp49 repwtp50 rep
> wtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 repwtp58 repwtp59 
> repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66 repwtp67 repwtp
> 68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwtp75 repwtp76 rep
> wtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __000000 __000002 __
> 000003 __000004 __000001 __000005 __000006 inc_decoded1 __000008
        - }
        - if ("`alphabetic'" != "" & `"`before'"' == "" & `"`after'"' == "" & "`
> first'" == "" & "`last'" == "") {
        = if ("" != "" & `""' == "" & `"inc_decoded1"' == "" & "" == "" & "" == 
> "") {
          local vlist : list sort varlist
          _order `vlist'
          }
        - if ("`sequential'" != "" & `"`before'"' == "" & `"`after'"' == "" & "`
> first'" == "" & "`last'" == "") {
        = if ("" != "" & `""' == "" & `"inc_decoded1"' == "" & "" == "" & "" == 
> "") {
          aorder `varlist'
          }
        ---------------------------------------------------------- end order ---
      - if `aschars' {
      = if 1 {
      - local dispb `"`b'"'
      = local dispb `" space"'
      - }
      - else {
        local dispb = printablebytes(`"`b'"')
        }
      - local c = plural(`bcnt',strproper("`aswhat'")) + " removed " + plural(`b
> cnt',"was","were") + `":`dispb'"'
      = local c = plural(1,strproper("character")) + " removed " + plural(1,"was
> ","were") + `": space"'
      - if "`makepct'" != "" {
      = if "" != "" {
        if `makepct' {
        qui replace `NEWVAR' = `NEWVAR'/100
        }
        }
      - qui compress `NEWVAR'
      = qui compress __000008
      - local type : type `NEWVAR'
      = local type : type __000008
      - if `flag' {
      = if 0 {
        di as txt "`var': contains nonnumeric `aswhat's" _continue
        if `"`ignore'"'!="" {
        display " not specified in " as result "ignore()" _continue
        }
        if `"`b'"'=="" {
        display "; `finalprint'" as res "`genrep'd " as txt "as " as res "`type'
> " _continue
        }
        display
        }
      - if `"`b'"' != "" {
      = if `" space"' != "" {
      - di as txt "`var': " plural(`bcnt',"`aswhat'") as res `"`dispb'"' as txt 
> " removed; `finalprint'" as res "`genrep'd " as txt "as " as res "`type'"
      = di as txt "inc_decoded1: " plural(1,"character") as res `" space"' as tx
> t " removed; " as res "replaced " as txt "as " as res "long"
inc_decoded1: character space removed; replaced as long
      - }
      - else if `"`b'"' == "" & !`flag' {
      = else if `" space"' == "" & !0 {
        di as txt "`var': all characters numeric; " "`finalprint'" as res "`genr
> ep'd " as txt "as " as res "`type'"
        }
      - if `newmiss' != 0 {
      = if 0 != 0 {
        di as txt "(`newmiss' missing " plural(`newmiss',"value") " generated)"
        }
      - label variable `NEWVAR' `"`: variable label `var''"'
      = label variable __000008 `""'
        -------------------------------------------------------- begin label ---
        - version 10.0
        - local vv : display "version " string(_caller()) ", missing:"
        - gettoken val : 0
        - if (strpos("`val'", "val") > 0 ) {
        = if (strpos("variable", "val") > 0 ) {
          gettoken val 0 : 0
          syntax anything [, nofix]
          if "`fix'" != "" {
          local fix ", nofix"
          }
          gettoken var rest : anything
          while `"`rest'"' != "" {
          gettoken lab rest : rest
          local label "`lab'"
          }
          local vlist : list anything - lab
          if "`lab'" == "." {
          local lab ""
          }
          foreach var of varlist `vlist' {
          `vv' _label `val' `var' `lab' `fix'
          }
          }
        - else {
        - `vv' _label `macval(0)'
        = version 14, missing: _label variable __000008 `""'
        - }
        ---------------------------------------------------------- end label ---
      - char `NEWVAR'[destring] `c'
      = char __000008[destring] Character removed was: space
      - char `NEWVAR'[destring_cmd] `"destring `cmdargs'"'
      = char __000008[destring_cmd] `"destring inc_decoded1 inc_decoded2 , repla
> ce   ignore(" ,$") "'
      - char `var'[destring]
      = char inc_decoded1[destring]
      - char `var'[destring_cmd]
      = char inc_decoded1[destring_cmd]
      - if "`genrep'"=="generate" {
      = if "replace"=="generate" {
        Charcopy `var' `NEWVAR'
        rename `NEWVAR' `: word `varno' of `generate''
        }
      - else {
      - char rename `var' `NEWVAR'
      = char rename inc_decoded1 __000008
      - drop `var'
      = drop inc_decoded1
      - rename `NEWVAR' `var'
      = rename __000008 inc_decoded1
        ------------------------------------------------------- begin rename ---
        - version 12
        - mata: rename_cmd("`3'")
        = mata: rename_cmd("")
        --------------------------------------------------------- end rename ---
      - }
      - }
      - foreach varmac of local tvars {
      - capture drop ``varmac''
      = capture drop __000007
      - }
      - capture drop ``varmac''
      = capture drop __000008
      - }
      - capture drop ``varmac''
      = capture drop __000009
      - }
      - capture drop ``varmac''
      = capture drop __00000A
      - }
      - capture drop ``varmac''
      = capture drop __00000B
      - }
      - }
      - }
      - local varno = `varno' + 1
      = local varno = 1 + 1
      - if "`generate'"!="" {
      = if ""!="" {
        local finalvarname : word `varno' of `generate'
        local finalprint "`finalvarname' "
        }
      - else {
      - local finalvarname "`var'"
      = local finalvarname "inc_decoded2"
      - local finalprint ""
      - }
      - capture confirm string variable `var'
      = capture confirm string variable inc_decoded2
      - if _rc != 0 {
        di as txt "`var' already numeric; no " as res "`genrep'"
        }
      - else {
      - qui gen `OLDVAR' = `var'
      = qui gen __000007 = inc_decoded2
      - local jj 1
      - local b
      - local bcnt = 0
      - local c
      - local makepct
      - while `"`char`jj''"' != "" {
      = while `" "' != "" {
      - capture drop `found'
      = capture drop __00000A
      - capture drop `topct'
      = capture drop __00000B
      - local t `"`char`jj''"'
      = local t `" "'
      - if `aschars' {
      = if 1 {
      - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
      = qui gen byte __00000A = ustrpos(__000007, `" "') != 0
      - }
      - else {
        qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
        }
      - qui summarize `found', meanonly
      = qui summarize __00000A, meanonly
      - if r(sum) > 0 {
      - if `"`t'"'=="`illegal'" {
      = if `" "'=="" {
        local b `"`b' illegal Unicode"'
        }
      - else if `"`t'"' == " " {
      = else if `" "' == " " {
      - local b `"`b' space"'
      = local b `" space"'
      - }
      - else {
        local b `"`b' `t'"'
        }
      - local ++bcnt
      - }
      - if `aschars' {
      = if 1 {
      - if `"`t'"'=="%" {
      = if `" "'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if ustrpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
      - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
      = qui replace __000007 = usubinstr(__000007, `" "', "", .)
      - }
      - else {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if strpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
        }
      - local jj = `jj' + 1
      = local jj = 1 + 1
      - }
      - while `"`char`jj''"' != "" {
      = while `","' != "" {
      - capture drop `found'
      = capture drop __00000A
      - capture drop `topct'
      = capture drop __00000B
      - local t `"`char`jj''"'
      = local t `","'
      - if `aschars' {
      = if 1 {
      - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
      = qui gen byte __00000A = ustrpos(__000007, `","') != 0
      - }
      - else {
        qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
        }
      - qui summarize `found', meanonly
      = qui summarize __00000A, meanonly
      - if r(sum) > 0 {
        if `"`t'"'=="`illegal'" {
        local b `"`b' illegal Unicode"'
        }
        else if `"`t'"' == " " {
        local b `"`b' space"'
        }
        else {
        local b `"`b' `t'"'
        }
        local ++bcnt
        }
      - if `aschars' {
      = if 1 {
      - if `"`t'"'=="%" {
      = if `","'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if ustrpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
      - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
      = qui replace __000007 = usubinstr(__000007, `","', "", .)
      - }
      - else {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if strpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
        }
      - local jj = `jj' + 1
      = local jj = 2 + 1
      - }
      - while `"`char`jj''"' != "" {
      = while `"$"' != "" {
      - capture drop `found'
      = capture drop __00000A
      - capture drop `topct'
      = capture drop __00000B
      - local t `"`char`jj''"'
      = local t `"$"'
      - if `aschars' {
      = if 1 {
      - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
      = qui gen byte __00000A = ustrpos(__000007, `"$"') != 0
      - }
      - else {
        qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
        }
      - qui summarize `found', meanonly
      = qui summarize __00000A, meanonly
      - if r(sum) > 0 {
        if `"`t'"'=="`illegal'" {
        local b `"`b' illegal Unicode"'
        }
        else if `"`t'"' == " " {
        local b `"`b' space"'
        }
        else {
        local b `"`b' `t'"'
        }
        local ++bcnt
        }
      - if `aschars' {
      = if 1 {
      - if `"`t'"'=="%" {
      = if `"$"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if ustrpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
      - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
      = qui replace __000007 = usubinstr(__000007, `"$"', "", .)
      - }
      - else {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if strpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
        }
      - local jj = `jj' + 1
      = local jj = 3 + 1
      - }
      - while `"`char`jj''"' != "" {
      = while `""' != "" {
        capture drop `found'
        capture drop `topct'
        local t `"`char`jj''"'
        if `aschars' {
        qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
        }
        else {
        qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
        }
        qui summarize `found', meanonly
        if r(sum) > 0 {
        if `"`t'"'=="`illegal'" {
        local b `"`b' illegal Unicode"'
        }
        else if `"`t'"' == " " {
        local b `"`b' space"'
        }
        else {
        local b `"`b' `t'"'
        }
        local ++bcnt
        }
        if `aschars' {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if ustrpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
        }
        else {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if strpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
        }
        local jj = `jj' + 1
        }
      - if _caller() >= 14 {
      - qui replace `OLDVAR' = ustrtrim(`OLDVAR')
      = qui replace __000007 = ustrtrim(__000007)
      - }
      - else {
        qui replace `OLDVAR' = strtrim(`OLDVAR')
        }
      - quietly gen byte `ismissing' = `OLDVAR'=="" | `OLDVAR'=="." | (strlen(`O
> LDVAR')==2 & inrange(`OLDVAR',".a",".z"))
      = quietly gen byte __000009 = __000007=="" | __000007=="." | (strlen(__000
> 007)==2 & inrange(__000007,".a",".z"))
      - if ("`dpcomma'" != "") {
      = if ("" != "") {
        qui replace `OLDVAR' = subinstr(`OLDVAR',".","X",.) if !`ismissing'
        qui replace `OLDVAR' = subinstr(`OLDVAR', ",", ".", 1) if !ustrregexm(`O
> LDVAR',"(,[a-z])|(^,$)")
        }
      - if _caller() >= 14 {
      - qui replace `OLDVAR' = ustrregexrf(`OLDVAR',"^0+","0")
      = qui replace __000007 = ustrregexrf(__000007,"^0+","0")
      - }
      - else {
        qui replace `OLDVAR' = regexr(`OLDVAR',"^0+","0")
        }
      - qui gen `gtype' `NEWVAR' = real(`OLDVAR')
      = qui gen double __000008 = real(__000007)
      - qui summarize `ismissing', meanonly
      = qui summarize __000009, meanonly
      - local oldmiss = r(sum)
      - qui count if missing(`NEWVAR')
      = qui count if missing(__000008)
      - local newmiss = r(N)
      - local flag = `oldmiss'!=`newmiss'
      = local flag = 0!=0
      - if `flag' & ("`force'" == "") {
      = if 0 & ("" == "") {
        if `"`ignore'"' != "" {
        di as txt "`var': contains " "`aswhat's not specified in " as res "ignor
> e()" as txt "; no " as res "`genrep'"
        }
        else {
        di as txt "`var': contains " "nonnumeric `aswhat's; no " as res "`genrep
> '"
        }
        }
      - else {
      - order `NEWVAR', after(`var')
      = order __000008, after(inc_decoded2)
        -------------------------------------------------------- begin order ---
        - version 11
        - if (_caller()<11) {
          _order `macval(0)'
          exit
          }
        - syntax varlist[, Before(varname) After(varname) first last SEQuential 
> ALPHAbetic]
        - if (`"`before'"' == "" & `"`after'"' == "" & "`first'" == "" & "`last'
> " == "" & "`alphabetic'" == "" & "`sequential'" == "") {
        = if (`""' == "" & `"inc_decoded2"' == "" & "" == "" & "" == "" & "" == 
> "" & "" == "") {
          _order `macval(0)'
          exit
          }
        - if (`"`before'"' != "" & `"`after'"' != "") {
        = if (`""' != "" & `"inc_decoded2"' != "") {
          dis as error "before() may not be combined with after()"
          exit 198
          }
        - if (`"`before'"' != "" & `"`first'"' != "") {
        = if (`""' != "" & `""' != "") {
          dis as error "before() may not be combined with first()"
          exit 198
          }
        - if (`"`before'"' != "" & `"`last'"' != "") {
        = if (`""' != "" & `""' != "") {
          dis as error "before() may not be combined with last()"
          exit 198
          }
        - if (`"`after'"' != "" & `"`before'"' != "") {
        = if (`"inc_decoded2"' != "" & `""' != "") {
          dis as error "after() may not be combined with before()"
          exit 198
          }
        - if (`"`after'"' != "" & `"`first'"' != "") {
        = if (`"inc_decoded2"' != "" & `""' != "") {
          dis as error "after() may not be combined with first()"
          exit 198
          }
        - if (`"`after'"' != "" & `"`last'"' != "") {
        = if (`"inc_decoded2"' != "" & `""' != "") {
          dis as error "after() may not be combined with last()"
          exit 198
          }
        - if ("`first'" != "" & "`last'" != "") {
        = if ("" != "" & "" != "") {
          dis as error "first may not be combined with last"
          exit 198
          }
        - if ("`sequential'" != "" & "`alphabetic'" != "") {
        = if ("" != "" & "" != "") {
          dis as error "sequential may not be combined with alphabetic"
          exit 198
          }
        - if ("`first'" != "") {
        = if ("" != "") {
          if "`alphabetic'" != "" {
          local varlist : list sort varlist
          }
          if "`sequential'" != "" {
          aorder `varlist'
          }
          else {
          _order `varlist'
          }
          }
        - if ("`last'" != "") {
        = if ("" != "") {
          unab vlist : _all
          local list : list vlist - varlist
          if "`alphabetic'" != "" {
          local varlist : list sort varlist
          }
          if "`sequential'" != "" {
          preserve
          keep `varlist'
          aorder `varlist'
          unab varlist : _all
          restore
          }
          _order `list' `varlist'
          }
        - if (`"`before'"' != "") {
        = if (`""' != "") {
          local test : list before in varlist
          if `test' {
          dis as err "varname specified in before() may not" " be in varlist"
          exit 198
          }
          if "`alphabetic'" != "" {
          local varlist : list sort varlist
          }
          if "`sequential'" != "" {
          preserve
          keep `varlist'
          aorder `varlist'
          unab varlist : _all
          restore
          }
          unab vlist : _all
          local vlist : list vlist - varlist
          local var_num : list posof "`before'" in vlist
          local var_num = `var_num' - 1
          local fvar : word 1 of `vlist'
          capture local lvar : word `var_num' of `vlist'
          if _rc {
          _order `varlist'
          exit
          }
          unab nlist : `fvar'-`lvar'
          local nlist : list nlist - varlist
          _order `nlist' `varlist'
          }
        - if (`"`after'"' != "") {
        = if (`"inc_decoded2"' != "") {
        - local test : list after in varlist
        - if `test' {
        = if 0 {
          dis as err "varname specified in after() may not" " be in varlist"
          exit 198
          }
        - if "`alphabetic'" != "" {
        = if "" != "" {
          local varlist : list sort varlist
          }
        - if "`sequential'" != "" {
        = if "" != "" {
          preserve
          keep `varlist'
          aorder `varlist'
          unab varlist : _all
          restore
          }
        - unab vlist : _all
          ------------------------------------------------------- begin unab ---
          - version 6
          - gettoken user 0: 0, parse(" :")
          - gettoken colon 0: 0, parse(" :")
          - if `"`colon'"' != ":" { error 198 }
          = if `":"' != ":" { error 198 }
          - syntax [varlist(default=empty)] [, MIN(integer 1) MAX(integer 120000
> ) NAME(string)]
          - c_local `user' `varlist'
          = c_local vlist year hhwt repwt cluster adjust statefip strata hhincom
> e_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 repwt10 r
> epwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 repwt20
>  repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt29 repwt
> 30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repwt39 rep
> wt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 repwt49 r
> epwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 repwt59
>  repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt68 repwt
> 69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repwt78 rep
> wt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp5 repwt
> p6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14 repwtp
> 15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwtp23 rep
> wtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 repwtp32 
> repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40 repwtp
> 41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwtp49 rep
> wtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 repwtp58 
> repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66 repwtp
> 67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwtp75 rep
> wtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __000000 __
> 000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_decoded2 
> __000007 __00000A __000009 __000008
          - local n : word count `varlist'
          = local n : word count year hhwt repwt cluster adjust statefip strata 
> hhincome_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 re
> pwt10 repwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 
> repwt20 repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt2
> 9 repwt30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repw
> t39 repwt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 re
> pwt49 repwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 
> repwt59 repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt6
> 8 repwt69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repw
> t78 repwt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp
> 5 repwtp6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14
>  repwtp15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwt
> p23 repwtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 re
> pwtp32 repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40
>  repwtp41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwt
> p49 repwtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 re
> pwtp58 repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66
>  repwtp67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwt
> p75 repwtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __00
> 0000 __000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_de
> coded2 __000007 __00000A __000009 __000008
          - if `n'>=`min' & `n'<=`max' { exit }
          = if 187>=1 & 187<=120000 { exit }
          --------------------------------------------------------- end unab ---
        - local vlist : list vlist - varlist
        - local var_num : list posof "`after'" in vlist
        = local var_num : list posof "inc_decoded2" in vlist
        - local fvar : word 1 of `vlist'
        = local fvar : word 1 of year hhwt repwt cluster adjust statefip strata 
> hhincome_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 re
> pwt10 repwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 
> repwt20 repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt2
> 9 repwt30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repw
> t39 repwt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 re
> pwt49 repwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 
> repwt59 repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt6
> 8 repwt69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repw
> t78 repwt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp
> 5 repwtp6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14
>  repwtp15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwt
> p23 repwtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 re
> pwtp32 repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40
>  repwtp41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwt
> p49 repwtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 re
> pwtp58 repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66
>  repwtp67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwt
> p75 repwtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __00
> 0000 __000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_de
> coded2 __000007 __00000A __000009
        - local lvar : word `var_num' of `vlist'
        = local lvar : word 183 of year hhwt repwt cluster adjust statefip strat
> a hhincome_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 
> repwt10 repwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt1
> 9 repwt20 repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repw
> t29 repwt30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 re
> pwt39 repwt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 
> repwt49 repwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt5
> 8 repwt59 repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repw
> t68 repwt69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 re
> pwt78 repwt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repw
> tp5 repwtp6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp
> 14 repwtp15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 rep
> wtp23 repwtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 
> repwtp32 repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp
> 40 repwtp41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 rep
> wtp49 repwtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 
> repwtp58 repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp
> 66 repwtp67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 rep
> wtp75 repwtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __
> 000000 __000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_
> decoded2 __000007 __00000A __000009
        - unab nlist : `fvar'-`lvar'
        = unab nlist : year-inc_decoded2
          ------------------------------------------------------- begin unab ---
          - version 6
          - gettoken user 0: 0, parse(" :")
          - gettoken colon 0: 0, parse(" :")
          - if `"`colon'"' != ":" { error 198 }
          = if `":"' != ":" { error 198 }
          - syntax [varlist(default=empty)] [, MIN(integer 1) MAX(integer 120000
> ) NAME(string)]
          - c_local `user' `varlist'
          = c_local nlist year hhwt repwt cluster adjust statefip strata hhincom
> e_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 repwt10 r
> epwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 repwt20
>  repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt29 repwt
> 30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repwt39 rep
> wt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 repwt49 r
> epwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 repwt59
>  repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt68 repwt
> 69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repwt78 rep
> wt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp5 repwt
> p6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14 repwtp
> 15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwtp23 rep
> wtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 repwtp32 
> repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40 repwtp
> 41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwtp49 rep
> wtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 repwtp58 
> repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66 repwtp
> 67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwtp75 rep
> wtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __000000 __
> 000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_decoded2
          - local n : word count `varlist'
          = local n : word count year hhwt repwt cluster adjust statefip strata 
> hhincome_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 re
> pwt10 repwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 
> repwt20 repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt2
> 9 repwt30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repw
> t39 repwt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 re
> pwt49 repwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 
> repwt59 repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt6
> 8 repwt69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repw
> t78 repwt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp
> 5 repwtp6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14
>  repwtp15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwt
> p23 repwtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 re
> pwtp32 repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40
>  repwtp41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwt
> p49 repwtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 re
> pwtp58 repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66
>  repwtp67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwt
> p75 repwtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __00
> 0000 __000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_de
> coded2
          - if `n'>=`min' & `n'<=`max' { exit }
          = if 183>=1 & 183<=120000 { exit }
          --------------------------------------------------------- end unab ---
        - local nlist : list nlist - varlist
        - _order `nlist' `varlist'
        = _order year hhwt repwt cluster adjust statefip strata hhincome_acs rep
> wt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 repwt10 repwt11 re
> pwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 repwt20 repwt21 
> repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt29 repwt30 repwt3
> 1 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repwt39 repwt40 repw
> t41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 repwt49 repwt50 re
> pwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 repwt59 repwt60 
> repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt68 repwt69 repwt7
> 0 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repwt78 repwt79 repw
> t80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp5 repwtp6 repwtp
> 7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14 repwtp15 repwtp
> 16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwtp23 repwtp24 rep
> wtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 repwtp32 repwtp33 
> repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40 repwtp41 repwtp
> 42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwtp49 repwtp50 rep
> wtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 repwtp58 repwtp59 
> repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66 repwtp67 repwtp
> 68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwtp75 repwtp76 rep
> wtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __000000 __000002 __
> 000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_decoded2 __000008
        - }
        - if ("`alphabetic'" != "" & `"`before'"' == "" & `"`after'"' == "" & "`
> first'" == "" & "`last'" == "") {
        = if ("" != "" & `""' == "" & `"inc_decoded2"' == "" & "" == "" & "" == 
> "") {
          local vlist : list sort varlist
          _order `vlist'
          }
        - if ("`sequential'" != "" & `"`before'"' == "" & `"`after'"' == "" & "`
> first'" == "" & "`last'" == "") {
        = if ("" != "" & `""' == "" & `"inc_decoded2"' == "" & "" == "" & "" == 
> "") {
          aorder `varlist'
          }
        ---------------------------------------------------------- end order ---
      - if `aschars' {
      = if 1 {
      - local dispb `"`b'"'
      = local dispb `" space"'
      - }
      - else {
        local dispb = printablebytes(`"`b'"')
        }
      - local c = plural(`bcnt',strproper("`aswhat'")) + " removed " + plural(`b
> cnt',"was","were") + `":`dispb'"'
      = local c = plural(1,strproper("character")) + " removed " + plural(1,"was
> ","were") + `": space"'
      - if "`makepct'" != "" {
      = if "" != "" {
        if `makepct' {
        qui replace `NEWVAR' = `NEWVAR'/100
        }
        }
      - qui compress `NEWVAR'
      = qui compress __000008
      - local type : type `NEWVAR'
      = local type : type __000008
      - if `flag' {
      = if 0 {
        di as txt "`var': contains nonnumeric `aswhat's" _continue
        if `"`ignore'"'!="" {
        display " not specified in " as result "ignore()" _continue
        }
        if `"`b'"'=="" {
        display "; `finalprint'" as res "`genrep'd " as txt "as " as res "`type'
> " _continue
        }
        display
        }
      - if `"`b'"' != "" {
      = if `" space"' != "" {
      - di as txt "`var': " plural(`bcnt',"`aswhat'") as res `"`dispb'"' as txt 
> " removed; `finalprint'" as res "`genrep'd " as txt "as " as res "`type'"
      = di as txt "inc_decoded2: " plural(1,"character") as res `" space"' as tx
> t " removed; " as res "replaced " as txt "as " as res "long"
inc_decoded2: character space removed; replaced as long
      - }
      - else if `"`b'"' == "" & !`flag' {
      = else if `" space"' == "" & !0 {
        di as txt "`var': all characters numeric; " "`finalprint'" as res "`genr
> ep'd " as txt "as " as res "`type'"
        }
      - if `newmiss' != 0 {
      = if 0 != 0 {
        di as txt "(`newmiss' missing " plural(`newmiss',"value") " generated)"
        }
      - label variable `NEWVAR' `"`: variable label `var''"'
      = label variable __000008 `""'
        -------------------------------------------------------- begin label ---
        - version 10.0
        - local vv : display "version " string(_caller()) ", missing:"
        - gettoken val : 0
        - if (strpos("`val'", "val") > 0 ) {
        = if (strpos("variable", "val") > 0 ) {
          gettoken val 0 : 0
          syntax anything [, nofix]
          if "`fix'" != "" {
          local fix ", nofix"
          }
          gettoken var rest : anything
          while `"`rest'"' != "" {
          gettoken lab rest : rest
          local label "`lab'"
          }
          local vlist : list anything - lab
          if "`lab'" == "." {
          local lab ""
          }
          foreach var of varlist `vlist' {
          `vv' _label `val' `var' `lab' `fix'
          }
          }
        - else {
        - `vv' _label `macval(0)'
        = version 14, missing: _label variable __000008 `""'
        - }
        ---------------------------------------------------------- end label ---
      - char `NEWVAR'[destring] `c'
      = char __000008[destring] Character removed was: space
      - char `NEWVAR'[destring_cmd] `"destring `cmdargs'"'
      = char __000008[destring_cmd] `"destring inc_decoded1 inc_decoded2 , repla
> ce   ignore(" ,$") "'
      - char `var'[destring]
      = char inc_decoded2[destring]
      - char `var'[destring_cmd]
      = char inc_decoded2[destring_cmd]
      - if "`genrep'"=="generate" {
      = if "replace"=="generate" {
        Charcopy `var' `NEWVAR'
        rename `NEWVAR' `: word `varno' of `generate''
        }
      - else {
      - char rename `var' `NEWVAR'
      = char rename inc_decoded2 __000008
      - drop `var'
      = drop inc_decoded2
      - rename `NEWVAR' `var'
      = rename __000008 inc_decoded2
        ------------------------------------------------------- begin rename ---
        - version 12
        - mata: rename_cmd("`3'")
        = mata: rename_cmd("")
        --------------------------------------------------------- end rename ---
      - }
      - }
      - foreach varmac of local tvars {
      - capture drop ``varmac''
      = capture drop __000007
      - }
      - capture drop ``varmac''
      = capture drop __000008
      - }
      - capture drop ``varmac''
      = capture drop __000009
      - }
      - capture drop ``varmac''
      = capture drop __00000A
      - }
      - capture drop ``varmac''
      = capture drop __00000B
      - }
      - }
      - }
      --------------------------------------------------------- end destring ---
    - }
    -------------------------------------------------------------- end split ---
  - gen `inc_cat_var'_lb = inc_decoded1
  = gen acs_hhinc_lb = inc_decoded1
  - gen `inc_cat_var'_ub = inc_decoded2
  = gen acs_hhinc_ub = inc_decoded2
  - di "Lower bound of `inc_cat_var'_lb and upper bound of `inc_cat_var'_ub " "c
> reated for inc_level " `inc_level' "of the original Research " "dataset income
>  range"
  = di "Lower bound of acs_hhinc_lb and upper bound of acs_hhinc_ub " "created f
> or inc_level " 5 "of the original Research " "dataset income range"
Lower bound of acs_hhinc_lb and upper bound of acs_hhinc_ub created for inc_leve
> l 5of the original Research dataset income range
  - }
  - else {
    di as error "Error: The inc_level " `inc_level' " does not fit any of the ex
> isting regular expressions " "designs. Please email the REDI program creator a
> t " "mollymkingphd@gmail.com with information about this " "error and a list o
> f all of your income levels so she " "can update the program. Thank you for yo
> ur help!"
    error 999
    }
  - local upper_bound = `inc_cat_var'_ub
  = local upper_bound = acs_hhinc_ub
  - local lower_bound = `inc_cat_var'_lb
  = local lower_bound = acs_hhinc_lb
  - capture drop inc_decoded1 inc_decoded2
  - quietly summarize if `research_year' == `y' & `inc_cat_var' == `inc_level'
  = quietly summarize if year == 2019 & acs_hhinc == 5
  - local sample_size = r(N)
  - gen `inc_cat_var'_n = `sample_size'
  = gen acs_hhinc_n = 51035
  - label variable `inc_cat_var'_n "N in income level in research dataset"
  = label variable acs_hhinc_n "N in income level in research dataset"
    ------------------------------------------------------------ begin label ---
    - version 10.0
    - local vv : display "version " string(_caller()) ", missing:"
    - gettoken val : 0
    - if (strpos("`val'", "val") > 0 ) {
    = if (strpos("variable", "val") > 0 ) {
      gettoken val 0 : 0
      syntax anything [, nofix]
      if "`fix'" != "" {
      local fix ", nofix"
      }
      gettoken var rest : anything
      while `"`rest'"' != "" {
      gettoken lab rest : rest
      local label "`lab'"
      }
      local vlist : list anything - lab
      if "`lab'" == "." {
      local lab ""
      }
      foreach var of varlist `vlist' {
      `vv' _label `val' `var' `lab' `fix'
      }
      }
    - else {
    - `vv' _label `macval(0)'
    = version 16, missing: _label variable acs_hhinc_n "N in income level in res
> earch dataset"
    - }
    -------------------------------------------------------------- end label ---
  - keep if `research_year' == `y' & `inc_cat_var' == `inc_level'
  = keep if year == 2019 & acs_hhinc == 5
(0 observations deleted)
  - tempfile premerge_`inc_level'_`y'
  = tempfile premerge_5_2019
  - save `premerge_`inc_level'_`y'', replace
  = save /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000c, repla
> ce
(note: file /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000c not
>  found)
file /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000c saved
  - di "Saved tempfile with upper and lower bounds of research data income level
> s"
Saved tempfile with upper and lower bounds of research data income levels
  - use `reference_dataset', clear
  = use ~/Documents/SocResearch/Dissertation/data/data_temp/redi13_cps_state_ca.
> dta, clear
(Streamlined CPS ASEC data, CA 2019)
  - di "Reference data open - Income type set as `inc_cat_var' income"
  = di "Reference data open - Income type set as acs_hhinc income"
Reference data open - Income type set as acs_hhinc income
  - keep if `ref_year' == `y' | `"`ref_year'"' == "nys" & `ref_income_var' >= `l
> ower_bound' & `ref_income_var' <= `upper_bound'
  = keep if year == 2019 | `"year"' == "nys" & hhincome >= 50000 & hhincome <= 7
> 5000
(0 observations deleted)
  - gen obs_no = _n
  - di "Observation number generated"
Observation number generated
  - save $temp/`ASECdata'_`ref_year'_inc`inc_level'.dta, replace
  = save ~/Documents/SocResearch/Dissertation/data/data_temp/_year_inc5.dta, rep
> lace
file ~/Documents/SocResearch/Dissertation/data/data_temp/_year_inc5.dta saved
  - di "Ref to keep income between $`lower_bound' and $`upper_bound' for `y' yea
> r."
  = di "Ref to keep income between $50000 and $75000 for 2019 year."
Ref to keep income between $50000 and $75000 for 2019 year.
  - quietly des
    -------------------------------------------------------------- begin des ---
    - local version : di "version " string(_caller()) ":"
    - `version' describe `0'
    = version 16: describe 
      ------------------------------------------------------- begin describe ---
      - version 9
      - local version : di "version " string(_caller()) ":"
      - syntax [anything] [using] [, SImple REPLACE *]
      - if ("`replace'"!="") {
      = if (""!="") {
        describe_mk `0'
        return add
        exit
        }
      - local varlist `"`anything'"'
      = local varlist `""'
      - if ("`simple'" == "") {
      = if ("" == "") {
      - `version' _describe `0'
      = version 16: _describe 
      - return add
      - }
      - else {
        if (`"`options'"' != "") {
        di as err "simple may not be combined with other options"
        exit 198
        }
        if (`"`using'"' != "") {
        qui `version' describe `varlist' `using', varlist
        if "`varlist'" == "" {
        local vars "`r(varlist)'"
        }
        else {
        local vars "`varlist'"
        }
        local wid = 2
        local n : list sizeof vars
        if `n'==0 {
        exit
        }
        if "`c(hasicu)'" == "1" {
        foreach x of local vars {
        local wid = max(`wid', udstrlen(`"`x'"'))
        }
        }
        else {
        foreach x of local vars {
        local wid = max(`wid', strlen(`"`x'"'))
        }
        }
        local wid = `wid' + 2
        local cols = int((`c(linesize)'+1)/`wid')
        if `cols' < 2 {
        foreach x of local `vars' {
        di as txt `col' `"`x'"'
        }
        exit
        }
        local lines = `n'/`cols'
        local lines = int(cond(`lines'>int(`lines'), `lines'+1, `lines'))
        forvalues i=1(1)`lines' {
        local top = min((`cols')*`lines'+`i', `n')
        local col = 1
        forvalues j=`i'(`lines')`top' {
        local x : word `j' of `vars'
        di as txt _column(`col') "`x'" _c
        local col = `col' + `wid'
        }
        di as txt
        }
        qui `version' describe `varlist' `using', short
        return add
        }
        else {
        ds `varlist'
        qui `version' _describe `varlist', short
        return add
        }
        }
      --------------------------------------------------------- end describe ---
    ---------------------------------------------------------------- end des ---
  - local N = r(N)
  - clear
    ------------------------------------------------------------ begin clear ---
    - if _caller() < 10 {
      _clear_9 `0'
      exit
      }
    - version 10
    - syntax [anything]
    - tokenize `anything'
    = tokenize 
    - if `"`2'"' != "" {
    = if `""' != "" {
      display as err "`2' not allowed"
      exit 198
      }
    - if "`1'"=="" {
    = if ""=="" {
    - drop _all
    - label drop _all
      ---------------------------------------------------------- begin label ---
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {
      = if (strpos("drop", "val") > 0 ) {
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {
        local fix ", nofix"
        }
        gettoken var rest : anything
        while `"`rest'"' != "" {
        gettoken lab rest : rest
        local label "`lab'"
        }
        local vlist : list anything - lab
        if "`lab'" == "." {
        local lab ""
        }
        foreach var of varlist `vlist' {
        `vv' _label `val' `var' `lab' `fix'
        }
        }
      - else {
      - `vv' _label `macval(0)'
      = version 10, missing: _label drop _all
      - }
      ------------------------------------------------------------ end label ---
    - }
    - else if "`1'"=="frames" {
    = else if ""=="frames" {
      frames reset
      }
    - else if "`1'"=="mata" {
    = else if ""=="mata" {
      mata: mata clear
      }
    - else if "`1'"=="python" {
    = else if ""=="python" {
      python clear
      }
    - else if inlist("`1'", "results", "matrix") {
    = else if inlist("", "results", "matrix") {
      return clear
      clearreturn
      ereturn clear
      sreturn clear
      _return drop _all
      if ("`1'" == "matrix") {
      matrix drop _all
      _est drop _all
      }
      }
    - else if "`1'"=="programs" {
    = else if ""=="programs" {
      program drop _all
      }
    - else if "`1'"=="ado" {
    = else if ""=="ado" {
      program drop _allado
      }
    - else if "`1'"=="rngstream" | "`1'"=="rngstreams" {
    = else if ""=="rngstream" | ""=="rngstreams" {
      set rngstream clear
      }
    - else if "`1'"=="*" | "`1'"=="all" {
    = else if ""=="*" | ""=="all" {
      capture mata: st_local("semmods", strofreal(sg__global.hasmodels()))
      capture
      if (0`semmods') {
      display as err "-clear all- not allowed while an SEM Builder is open"
      exit 1
      }
      drop _all
      frames reset
      label drop _all
      matrix drop _all
      scalar drop _all
      constraint drop _all
      eq drop _all
      file close _all
      postutil clear
      _return drop _all
      discard
      program drop _all
      timer clear
      mata: _st__put_cmd_clear()
      mata: mata clear
      python clear
      }
    - else {
      display as err "`1' not allowed"
      exit 198
      }
    -------------------------------------------------------------- end clear ---
  - set obs `sample_size'
  = set obs 51035
number of observations (_N) was 0, now 51,035
  - gen obs_no = runiformint(1, `N')
  = gen obs_no = runiformint(1, 6260)
  - merge m:1 obs_no using $temp/`ASECdata'_`ref_year'_inc`inc_level'.dta, keep(
> match) nogenerate
  = merge m:1 obs_no using ~/Documents/SocResearch/Dissertation/data/data_temp/_
> year_inc5.dta, keep(match) nogenerate
    ------------------------------------------------------------ begin merge ---
    - version 11
    - gettoken mtype 0 : 0, parse(" ,")
    - if (!strpos("`mtype'", ":") & "`mtype'"!="") {
    = if (!strpos("m:1", ":") & "m:1"!="") {
      if (_caller()>=11) {
      di as smcl as txt "{p}"
      di as smcl "(note: you are using old"
      di as smcl "{bf:merge} syntax; see"
      di as smcl "{bf:{help merge:[D] merge}} for new syntax)"
      di as smcl "{p_end}"
      }
      merge_10 `mtype' `0'
      exit
      }
    - local origmtype `"`mtype'"'
    = local origmtype `"m:1"'
    - mata: map_mtype(`"mtype"')
    - gettoken token : 0, parse(" ,")
    - if ("`token'"=="_n") {
    = if ("obs_no"=="_n") {
      if ("`mtype'"!="1:1") {
      error_seq_not11 "`mtype'" "`origmtype'"
      }
      gettoken token 0 : 0, parse(" ,")
      local mtype "_n"
      }
    - syntax [varlist(default=none)] using/ [, ASSERT(string) DEBUG GENerate(nam
> e) FORCE KEEP(string) KEEPUSing(string) noLabels NOGENerate noNOTEs REPLACE no
> REPort SORTED UPDATE ]
    - if ("`mtype'"!="_n") {
    = if ("m:1"!="_n") {
    - local origmtype `"`mtype'"'
    = local origmtype `"m:1"'
    - mata: map_mtype(`"mtype"')
    - if ("`varlist'"=="") {
    = if ("obs_no"=="") {
      error_mat_varlist "`mtype'" "`origmtype'"
      }
    - }
    - else {
      if ("`mtype'"=="_n") {
      if ("`varlist'"!="") {
      error_seq_varlist
      }
      }
      }
    - mata: fullfilename("using", "usingfull", "using")
    - mata: resultlist("assert")
    - mata: resultlist("keep")
    - if ("`generate'"!="") {
    = if (""!="") {
      if ("`nogenerate'"!="") {
      di as smcl err "{p}"
      di as smcl "options -generate()- and -nogenerate-"
      di as smcl "may not be specified together."
      di as smcl err "{p_end}"
      }
      confirm new var `generate'
      }
    - if ("`replace'"!="") {
    = if (""!="") {
      if ("`update'"=="") {
      error_replace
      }
      }
    - if ("`sorted'"=="" & "`mtype'"!="_n") {
    = if (""=="" & "m:1"!="_n") {
    - local sortedby : sortedby
    - checksort "`sortedby'" "`varlist'"
    = checksort "" "obs_no"
      ------------------------------------------------ begin merge.checksort ---
      - args is should
      - local i 0
      - return scalar sorted = 1
      - foreach v1 of local should {
      - local ++i
      - local v2 : word `i' of `is'
      = local v2 : word 1 of 
      - if ("`v1'"!="`v2'") {
      = if ("obs_no"!="") {
      - return scalar sorted = 0
      - continue, break
        }
        }
      -------------------------------------------------- end merge.checksort ---
    - if (!r(sorted)) {
    - sort `varlist'
    = sort obs_no
    - }
    - quietly describe using "`using'", varlist short
    = quietly describe using "~/Documents/SocResearch/Dissertation/data/data_tem
> p/_year_inc5.dta", varlist short
      ------------------------------------------------------- begin describe ---
      - version 9
      - local version : di "version " string(_caller()) ":"
      - syntax [anything] [using] [, SImple REPLACE *]
      - if ("`replace'"!="") {
      = if (""!="") {
        describe_mk `0'
        return add
        exit
        }
      - local varlist `"`anything'"'
      = local varlist `""'
      - if ("`simple'" == "") {
      = if ("" == "") {
      - `version' _describe `0'
      = version 11: _describe using "~/Documents/SocResearch/Dissertation/data/d
> ata_temp/_year_inc5.dta", varlist short
      - return add
      - }
      - else {
        if (`"`options'"' != "") {
        di as err "simple may not be combined with other options"
        exit 198
        }
        if (`"`using'"' != "") {
        qui `version' describe `varlist' `using', varlist
        if "`varlist'" == "" {
        local vars "`r(varlist)'"
        }
        else {
        local vars "`varlist'"
        }
        local wid = 2
        local n : list sizeof vars
        if `n'==0 {
        exit
        }
        if "`c(hasicu)'" == "1" {
        foreach x of local vars {
        local wid = max(`wid', udstrlen(`"`x'"'))
        }
        }
        else {
        foreach x of local vars {
        local wid = max(`wid', strlen(`"`x'"'))
        }
        }
        local wid = `wid' + 2
        local cols = int((`c(linesize)'+1)/`wid')
        if `cols' < 2 {
        foreach x of local `vars' {
        di as txt `col' `"`x'"'
        }
        exit
        }
        local lines = `n'/`cols'
        local lines = int(cond(`lines'>int(`lines'), `lines'+1, `lines'))
        forvalues i=1(1)`lines' {
        local top = min((`cols')*`lines'+`i', `n')
        local col = 1
        forvalues j=`i'(`lines')`top' {
        local x : word `j' of `vars'
        di as txt _column(`col') "`x'" _c
        local col = `col' + `wid'
        }
        di as txt
        }
        qui `version' describe `varlist' `using', short
        return add
        }
        else {
        ds `varlist'
        qui `version' _describe `varlist', short
        return add
        }
        }
      --------------------------------------------------------- end describe ---
    - local sortedby "`r(sortlist)'"
    = local sortedby ""
    - checksort "`sortedby'" "`varlist'"
    = checksort "" "obs_no"
      ------------------------------------------------ begin merge.checksort ---
      - args is should
      - local i 0
      - return scalar sorted = 1
      - foreach v1 of local should {
      - local ++i
      - local v2 : word `i' of `is'
      = local v2 : word 1 of 
      - if ("`v1'"!="`v2'") {
      = if ("obs_no"!="") {
      - return scalar sorted = 0
      - continue, break
        }
        }
      -------------------------------------------------- end merge.checksort ---
    - if (!r(sorted)) {
    - preserve
    - qui use "`using'", clear
    = qui use "~/Documents/SocResearch/Dissertation/data/data_temp/_year_inc5.dt
> a", clear
    - sort `varlist'
    = sort obs_no
    - tempfile using
    - qui save "`using'", replace
    = qui save "/var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000e
> ", replace
    - restore
    - }
    - }
    - if ("`nogenerate'"!="") {
    = if ("nogenerate"!="") {
    - tempvar mergevar
    - local mergevaristemp 1
    - }
    - else {
      local mergevar = cond("`generate'"!="", "`generate'", "_merge")
      local mergevaristemp 0
      }
    - local options `update' `replace' `notes' `labels' _merge(`mergevar') `forc
> e'
    = local options     _merge(__000000) 
    - if (bsubstr("`mtype'", 1, 1)=="1") {
    = if (bsubstr("m:1", 1, 1)=="1") {
      local options `options' uniqmaster
      }
    - if (bsubstr("`mtype'", 3, 1)=="1") {
    = if (bsubstr("m:1", 3, 1)=="1") {
    - local options `options' uniqusing
    = local options _merge(__000000) uniqusing
    - }
    - if ("`keepusing'"!="") {
    = if (""!="") {
      local options `options' keep(`keepusing')
      }
    - if ("`keep'" !="" & !strpos("`keep'" , "2")) {
    = if ("3" !="" & !strpos("3" , "2")) {
    - local options `options' nokeep
    = local options _merge(__000000) uniqusing nokeep
    - }
    - if (_caller() > 15) {
    - local version : di "version " string(_caller()) ": "
    - }
    - local _merge `"`version'_merge `varlist' using "`using'", nowarn"'
    = local _merge `"version 16: _merge obs_no using "/var/folders/rp/96l526kj7y
> bdjr5vs5bqqjw80000gn/T//S_20065.00000e", nowarn"'
    - local _merge `"`_merge' `options' tabulate(mresults)"'
    = local _merge `"version 16: _merge obs_no using "/var/folders/rp/96l526kj7y
> bdjr5vs5bqqjw80000gn/T//S_20065.00000e", nowarn _merge(__000000) uniqusing nok
> eep tabulate(mresults)"'
    - if ("`debug'"!="") {
    = if (""!="") {
      di as txt _n "command is"
      di `"`_merge'"' _n
      }
    - `_merge'
    = version 16: _merge obs_no using "/var/folders/rp/96l526kj7ybdjr5vs5bqqjw80
> 000gn/T//S_20065.00000e", nowarn _merge(__000000) uniqusing nokeep tabulate(mr
> esults)
    - if (!`mergevaristemp') {
    = if (!1) {
      capture label list _merge
      if (_rc) {
      label define _merge 1 "master only (1)" 2 "using only (2)" 3 "matched (3)"
>  4 "missing updated (4)" 5 "nonmissing conflict (5)"
      }
      label values `mergevar' _merge
      }
    - if ("`assert'"!="") {
    = if (""!="") {
      if (_caller() < 13) {
      buildexpr expr : `mergevar' "`assert'"
      capture assert `expr'
      if (_rc) {
      error_assert `mergevar' "`assert'"
      }
      }
      else {
      capture checkmresults "`mresults'" "`assert'"
      if (_rc) {
      error_assert `mergevar' "`assert'"
      }
      }
      }
    - if ("`keep'"!="") {
    = if ("3"!="") {
    - buildexpr expr : `mergevar' "`keep'"
    = buildexpr expr : __000000 "3"
      ------------------------------------------------ begin merge.buildexpr ---
      - args userexpr colon varname numbers
      - gettoken first numbers : numbers
      - local list `varname'==`first'
      = local list __000000==3
      - foreach el of local numbers {
        local list `list' | `varname'==`el'
        }
      - c_local `userexpr' "(`list')"
      = c_local expr "(__000000==3)"
      -------------------------------------------------- end merge.buildexpr ---
    - quietly keep if `expr'
    = quietly keep if (__000000==3)
    - }
    - if ("`mtype'"=="1:1") {
    = if ("m:1"=="1:1") {
      qui count if `mergevar'==2
      if (r(N)==0) {
      sort `varlist'
      }
      }
    - if (c(noisily) & "`report'"=="") {
    = if (c(noisily) & ""=="") {
    - local isupdate = ("`replace'"!="" | "`update'"!="")
    = local isupdate = (""!="" | ""!="")
    - present_table `isupdate' `mergevar' `mergevaristemp'
    = present_table 0 __000000 1
      -------------------------------------------- begin merge.present_table ---
      - args isupdate mergevar mergevaristemp
      - if (!`mergevaristemp') {
      = if (!1) {
        local v1 "(`mergevar'==1)"
        local v2 "(`mergevar'==2)"
        local v3 "(`mergevar'==3)"
        local v4 "(`mergevar'==4)"
        local v5 "(`mergevar'==5)"
        }
      - quietly {
      - count if `mergevar'==1
      = count if __000000==1
      - local m1 = r(N)
      - count if `mergevar'==2
      = count if __000000==2
      - local m2 = r(N)
      - if (`isupdate') {
      = if (0) {
        count if `mergevar'==3
        local m3 = r(N)
        count if `mergevar'==4
        local m4 = r(N)
        local m5 = _N - `m1' - `m2' - `m3' - `m4'
        }
      - else {
      - local m3 = _N - `m1' - `m2'
      = local m3 = _N - 0 - 0
      - }
      - }
      - di

      - di as smcl as txt _col(5) "Result" _col(38) "# of obs."
    Result                           # of obs.
      - di as smcl as txt _col(5) "{hline 41}"
    -----------------------------------------
      - di as smcl as txt _col(5) "not matched" _col(30) as res %16.0fc (`m1'+`m
> 2')
      = di as smcl as txt _col(5) "not matched" _col(30) as res %16.0fc (0+0)
    not matched                             0
      - if (`m1'|`m2') {
      = if (0|0) {
        di as smcl as txt _col(9) "from master" _col(30) as res %16.0fc `m1' as 
> txt "  `v1'"
        di as smcl as txt _col(9) "from using" _col(30) as res %16.0fc `m2' as t
> xt "  `v2'"
        di
        }
      - if (!`isupdate') {
      = if (!0) {
      - di as smcl as txt _col(5) "matched" _col(30) as res %16.0fc `m3' as txt 
> "  `v3'"
      = di as smcl as txt _col(5) "matched" _col(30) as res %16.0fc 51035 as txt
>  "  "
    matched                            51,035  
      - }
      - else {
        if (`m1'==0 & `m2'==0) {
        di
        }
        di as smcl as txt _col(5) "matched" _col(30) as res %16.0fc (`m3'+`m4'+`
> m5')
        di as smcl as txt _col(9) "not updated" _col(30) as res %16.0fc `m3' as 
> txt "  `v3'"
        di as smcl as txt _col(9) "missing updated" _col(30) as res %16.0fc `m4'
>  as txt "  `v4'"
        di as smcl as txt _col(9) "nonmissing conflict" _col(30) as res %16.0fc 
> `m5' as txt "  `v5'"
        }
      - di as smcl as txt _col(5) "{hline 41}"
    -----------------------------------------
      ---------------------------------------------- end merge.present_table ---
    - }
    -------------------------------------------------------------- end merge ---
  - save $temp/`ASECdata'_`ref_year'_inc`inc_level'.dta, replace
  = save ~/Documents/SocResearch/Dissertation/data/data_temp/_year_inc5.dta, rep
> lace
file ~/Documents/SocResearch/Dissertation/data/data_temp/_year_inc5.dta saved
  - gen id = _n
  - merge 1:1 id using `premerge_`inc_level'_`y''
  = merge 1:1 id using /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065
> .00000c
    ------------------------------------------------------------ begin merge ---
    - version 11
    - gettoken mtype 0 : 0, parse(" ,")
    - if (!strpos("`mtype'", ":") & "`mtype'"!="") {
    = if (!strpos("1:1", ":") & "1:1"!="") {
      if (_caller()>=11) {
      di as smcl as txt "{p}"
      di as smcl "(note: you are using old"
      di as smcl "{bf:merge} syntax; see"
      di as smcl "{bf:{help merge:[D] merge}} for new syntax)"
      di as smcl "{p_end}"
      }
      merge_10 `mtype' `0'
      exit
      }
    - local origmtype `"`mtype'"'
    = local origmtype `"1:1"'
    - mata: map_mtype(`"mtype"')
    - gettoken token : 0, parse(" ,")
    - if ("`token'"=="_n") {
    = if ("id"=="_n") {
      if ("`mtype'"!="1:1") {
      error_seq_not11 "`mtype'" "`origmtype'"
      }
      gettoken token 0 : 0, parse(" ,")
      local mtype "_n"
      }
    - syntax [varlist(default=none)] using/ [, ASSERT(string) DEBUG GENerate(nam
> e) FORCE KEEP(string) KEEPUSing(string) noLabels NOGENerate noNOTEs REPLACE no
> REPort SORTED UPDATE ]
    - if ("`mtype'"!="_n") {
    = if ("1:1"!="_n") {
    - local origmtype `"`mtype'"'
    = local origmtype `"1:1"'
    - mata: map_mtype(`"mtype"')
    - if ("`varlist'"=="") {
    = if ("id"=="") {
      error_mat_varlist "`mtype'" "`origmtype'"
      }
    - }
    - else {
      if ("`mtype'"=="_n") {
      if ("`varlist'"!="") {
      error_seq_varlist
      }
      }
      }
    - mata: fullfilename("using", "usingfull", "using")
    - mata: resultlist("assert")
    - mata: resultlist("keep")
    - if ("`generate'"!="") {
    = if (""!="") {
      if ("`nogenerate'"!="") {
      di as smcl err "{p}"
      di as smcl "options -generate()- and -nogenerate-"
      di as smcl "may not be specified together."
      di as smcl err "{p_end}"
      }
      confirm new var `generate'
      }
    - if ("`replace'"!="") {
    = if (""!="") {
      if ("`update'"=="") {
      error_replace
      }
      }
    - if ("`sorted'"=="" & "`mtype'"!="_n") {
    = if (""=="" & "1:1"!="_n") {
    - local sortedby : sortedby
    - checksort "`sortedby'" "`varlist'"
    = checksort "" "id"
      ------------------------------------------------ begin merge.checksort ---
      - args is should
      - local i 0
      - return scalar sorted = 1
      - foreach v1 of local should {
      - local ++i
      - local v2 : word `i' of `is'
      = local v2 : word 1 of 
      - if ("`v1'"!="`v2'") {
      = if ("id"!="") {
      - return scalar sorted = 0
      - continue, break
        }
        }
      -------------------------------------------------- end merge.checksort ---
    - if (!r(sorted)) {
    - sort `varlist'
    = sort id
    - }
    - quietly describe using "`using'", varlist short
    = quietly describe using "/var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//
> S_20065.00000c", varlist short
      ------------------------------------------------------- begin describe ---
      - version 9
      - local version : di "version " string(_caller()) ":"
      - syntax [anything] [using] [, SImple REPLACE *]
      - if ("`replace'"!="") {
      = if (""!="") {
        describe_mk `0'
        return add
        exit
        }
      - local varlist `"`anything'"'
      = local varlist `""'
      - if ("`simple'" == "") {
      = if ("" == "") {
      - `version' _describe `0'
      = version 11: _describe using "/var/folders/rp/96l526kj7ybdjr5vs5bqqjw8000
> 0gn/T//S_20065.00000c", varlist short
      - return add
      - }
      - else {
        if (`"`options'"' != "") {
        di as err "simple may not be combined with other options"
        exit 198
        }
        if (`"`using'"' != "") {
        qui `version' describe `varlist' `using', varlist
        if "`varlist'" == "" {
        local vars "`r(varlist)'"
        }
        else {
        local vars "`varlist'"
        }
        local wid = 2
        local n : list sizeof vars
        if `n'==0 {
        exit
        }
        if "`c(hasicu)'" == "1" {
        foreach x of local vars {
        local wid = max(`wid', udstrlen(`"`x'"'))
        }
        }
        else {
        foreach x of local vars {
        local wid = max(`wid', strlen(`"`x'"'))
        }
        }
        local wid = `wid' + 2
        local cols = int((`c(linesize)'+1)/`wid')
        if `cols' < 2 {
        foreach x of local `vars' {
        di as txt `col' `"`x'"'
        }
        exit
        }
        local lines = `n'/`cols'
        local lines = int(cond(`lines'>int(`lines'), `lines'+1, `lines'))
        forvalues i=1(1)`lines' {
        local top = min((`cols')*`lines'+`i', `n')
        local col = 1
        forvalues j=`i'(`lines')`top' {
        local x : word `j' of `vars'
        di as txt _column(`col') "`x'" _c
        local col = `col' + `wid'
        }
        di as txt
        }
        qui `version' describe `varlist' `using', short
        return add
        }
        else {
        ds `varlist'
        qui `version' _describe `varlist', short
        return add
        }
        }
      --------------------------------------------------------- end describe ---
    - local sortedby "`r(sortlist)'"
    = local sortedby "year acs_hhinc"
    - checksort "`sortedby'" "`varlist'"
    = checksort "year acs_hhinc" "id"
      ------------------------------------------------ begin merge.checksort ---
      - args is should
      - local i 0
      - return scalar sorted = 1
      - foreach v1 of local should {
      - local ++i
      - local v2 : word `i' of `is'
      = local v2 : word 1 of year acs_hhinc
      - if ("`v1'"!="`v2'") {
      = if ("id"!="year") {
      - return scalar sorted = 0
      - continue, break
        }
        }
      -------------------------------------------------- end merge.checksort ---
    - if (!r(sorted)) {
    - preserve
    - qui use "`using'", clear
    = qui use "/var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000c"
> , clear
    - sort `varlist'
    = sort id
    - tempfile using
    - qui save "`using'", replace
    = qui save "/var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000e
> ", replace
    - restore
    - }
    - }
    - if ("`nogenerate'"!="") {
    = if (""!="") {
      tempvar mergevar
      local mergevaristemp 1
      }
    - else {
    - local mergevar = cond("`generate'"!="", "`generate'", "_merge")
    = local mergevar = cond(""!="", "", "_merge")
    - local mergevaristemp 0
    - }
    - local options `update' `replace' `notes' `labels' _merge(`mergevar') `forc
> e'
    = local options     _merge(_merge) 
    - if (bsubstr("`mtype'", 1, 1)=="1") {
    = if (bsubstr("1:1", 1, 1)=="1") {
    - local options `options' uniqmaster
    = local options _merge(_merge) uniqmaster
    - }
    - if (bsubstr("`mtype'", 3, 1)=="1") {
    = if (bsubstr("1:1", 3, 1)=="1") {
    - local options `options' uniqusing
    = local options _merge(_merge) uniqmaster uniqusing
    - }
    - if ("`keepusing'"!="") {
    = if (""!="") {
      local options `options' keep(`keepusing')
      }
    - if ("`keep'" !="" & !strpos("`keep'" , "2")) {
    = if ("" !="" & !strpos("" , "2")) {
      local options `options' nokeep
      }
    - if (_caller() > 15) {
    - local version : di "version " string(_caller()) ": "
    - }
    - local _merge `"`version'_merge `varlist' using "`using'", nowarn"'
    = local _merge `"version 16: _merge id using "/var/folders/rp/96l526kj7ybdjr
> 5vs5bqqjw80000gn/T//S_20065.00000e", nowarn"'
    - local _merge `"`_merge' `options' tabulate(mresults)"'
    = local _merge `"version 16: _merge id using "/var/folders/rp/96l526kj7ybdjr
> 5vs5bqqjw80000gn/T//S_20065.00000e", nowarn _merge(_merge) uniqmaster uniqusin
> g tabulate(mresults)"'
    - if ("`debug'"!="") {
    = if (""!="") {
      di as txt _n "command is"
      di `"`_merge'"' _n
      }
    - `_merge'
    = version 16: _merge id using "/var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000g
> n/T//S_20065.00000e", nowarn _merge(_merge) uniqmaster uniqusing tabulate(mres
> ults)
(label statefip_lbl already defined)
    - if (!`mergevaristemp') {
    = if (!0) {
    - capture label list _merge
      ---------------------------------------------------------- begin label ---
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {
      = if (strpos("list", "val") > 0 ) {
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {
        local fix ", nofix"
        }
        gettoken var rest : anything
        while `"`rest'"' != "" {
        gettoken lab rest : rest
        local label "`lab'"
        }
        local vlist : list anything - lab
        if "`lab'" == "." {
        local lab ""
        }
        foreach var of varlist `vlist' {
        `vv' _label `val' `var' `lab' `fix'
        }
        }
      - else {
      - `vv' _label `macval(0)'
      = version 11, missing: _label list _merge
        }
      ------------------------------------------------------------ end label ---
    - if (_rc) {
    - label define _merge 1 "master only (1)" 2 "using only (2)" 3 "matched (3)"
>  4 "missing updated (4)" 5 "nonmissing conflict (5)"
      ---------------------------------------------------------- begin label ---
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {
      = if (strpos("define", "val") > 0 ) {
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {
        local fix ", nofix"
        }
        gettoken var rest : anything
        while `"`rest'"' != "" {
        gettoken lab rest : rest
        local label "`lab'"
        }
        local vlist : list anything - lab
        if "`lab'" == "." {
        local lab ""
        }
        foreach var of varlist `vlist' {
        `vv' _label `val' `var' `lab' `fix'
        }
        }
      - else {
      - `vv' _label `macval(0)'
      = version 11, missing: _label define _merge 1 "master only (1)" 2 "using o
> nly (2)" 3 "matched (3)" 4 "missing updated (4)" 5 "nonmissing conflict (5)"
      - }
      ------------------------------------------------------------ end label ---
    - }
    - label values `mergevar' _merge
    = label values _merge _merge
      ---------------------------------------------------------- begin label ---
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {
      = if (strpos("values", "val") > 0 ) {
      - gettoken val 0 : 0
      - syntax anything [, nofix]
      - if "`fix'" != "" {
      = if "" != "" {
        local fix ", nofix"
        }
      - gettoken var rest : anything
      - while `"`rest'"' != "" {
      = while `" _merge"' != "" {
      - gettoken lab rest : rest
      - local label "`lab'"
      = local label "_merge"
      - }
      - while `"`rest'"' != "" {
      = while `""' != "" {
        gettoken lab rest : rest
        local label "`lab'"
        }
      - local vlist : list anything - lab
      - if "`lab'" == "." {
      = if "_merge" == "." {
        local lab ""
        }
      - foreach var of varlist `vlist' {
      = foreach var of varlist _merge {
      - `vv' _label `val' `var' `lab' `fix'
      = version 11, missing: _label values _merge _merge 
      - }
      - }
      - else {
        `vv' _label `macval(0)'
        }
      ------------------------------------------------------------ end label ---
    - }
    - if ("`assert'"!="") {
    = if (""!="") {
      if (_caller() < 13) {
      buildexpr expr : `mergevar' "`assert'"
      capture assert `expr'
      if (_rc) {
      error_assert `mergevar' "`assert'"
      }
      }
      else {
      capture checkmresults "`mresults'" "`assert'"
      if (_rc) {
      error_assert `mergevar' "`assert'"
      }
      }
      }
    - if ("`keep'"!="") {
    = if (""!="") {
      buildexpr expr : `mergevar' "`keep'"
      quietly keep if `expr'
      }
    - if ("`mtype'"=="1:1") {
    = if ("1:1"=="1:1") {
    - qui count if `mergevar'==2
    = qui count if _merge==2
    - if (r(N)==0) {
    - sort `varlist'
    = sort id
    - }
    - }
    - if (c(noisily) & "`report'"=="") {
    = if (c(noisily) & ""=="") {
    - local isupdate = ("`replace'"!="" | "`update'"!="")
    = local isupdate = (""!="" | ""!="")
    - present_table `isupdate' `mergevar' `mergevaristemp'
    = present_table 0 _merge 0
      -------------------------------------------- begin merge.present_table ---
      - args isupdate mergevar mergevaristemp
      - if (!`mergevaristemp') {
      = if (!0) {
      - local v1 "(`mergevar'==1)"
      = local v1 "(_merge==1)"
      - local v2 "(`mergevar'==2)"
      = local v2 "(_merge==2)"
      - local v3 "(`mergevar'==3)"
      = local v3 "(_merge==3)"
      - local v4 "(`mergevar'==4)"
      = local v4 "(_merge==4)"
      - local v5 "(`mergevar'==5)"
      = local v5 "(_merge==5)"
      - }
      - quietly {
      - count if `mergevar'==1
      = count if _merge==1
      - local m1 = r(N)
      - count if `mergevar'==2
      = count if _merge==2
      - local m2 = r(N)
      - if (`isupdate') {
      = if (0) {
        count if `mergevar'==3
        local m3 = r(N)
        count if `mergevar'==4
        local m4 = r(N)
        local m5 = _N - `m1' - `m2' - `m3' - `m4'
        }
      - else {
      - local m3 = _N - `m1' - `m2'
      = local m3 = _N - 0 - 0
      - }
      - }
      - di

      - di as smcl as txt _col(5) "Result" _col(38) "# of obs."
    Result                           # of obs.
      - di as smcl as txt _col(5) "{hline 41}"
    -----------------------------------------
      - di as smcl as txt _col(5) "not matched" _col(30) as res %16.0fc (`m1'+`m
> 2')
      = di as smcl as txt _col(5) "not matched" _col(30) as res %16.0fc (0+0)
    not matched                             0
      - if (`m1'|`m2') {
      = if (0|0) {
        di as smcl as txt _col(9) "from master" _col(30) as res %16.0fc `m1' as 
> txt "  `v1'"
        di as smcl as txt _col(9) "from using" _col(30) as res %16.0fc `m2' as t
> xt "  `v2'"
        di
        }
      - if (!`isupdate') {
      = if (!0) {
      - di as smcl as txt _col(5) "matched" _col(30) as res %16.0fc `m3' as txt 
> "  `v3'"
      = di as smcl as txt _col(5) "matched" _col(30) as res %16.0fc 51035 as txt
>  "  (_merge==3)"
    matched                            51,035  (_merge==3)
      - }
      - else {
        if (`m1'==0 & `m2'==0) {
        di
        }
        di as smcl as txt _col(5) "matched" _col(30) as res %16.0fc (`m3'+`m4'+`
> m5')
        di as smcl as txt _col(9) "not updated" _col(30) as res %16.0fc `m3' as 
> txt "  `v3'"
        di as smcl as txt _col(9) "missing updated" _col(30) as res %16.0fc `m4'
>  as txt "  `v4'"
        di as smcl as txt _col(9) "nonmissing conflict" _col(30) as res %16.0fc 
> `m5' as txt "  `v5'"
        }
      - di as smcl as txt _col(5) "{hline 41}"
    -----------------------------------------
      ---------------------------------------------- end merge.present_table ---
    - }
    -------------------------------------------------------------- end merge ---
  - generate category_n = .
(51,035 missing values generated)
  - replace category_n = `N'
  = replace category_n = 6260
(51,035 real changes made)
  - label var category_n "N respondents in income level in post-merge dataset'"
    ------------------------------------------------------------ begin label ---
    - version 10.0
    - local vv : display "version " string(_caller()) ", missing:"
    - gettoken val : 0
    - if (strpos("`val'", "val") > 0 ) {
    = if (strpos("var", "val") > 0 ) {
      gettoken val 0 : 0
      syntax anything [, nofix]
      if "`fix'" != "" {
      local fix ", nofix"
      }
      gettoken var rest : anything
      while `"`rest'"' != "" {
      gettoken lab rest : rest
      local label "`lab'"
      }
      local vlist : list anything - lab
      if "`lab'" == "." {
      local lab ""
      }
      foreach var of varlist `vlist' {
      `vv' _label `val' `var' `lab' `fix'
      }
      }
    - else {
    - `vv' _label `macval(0)'
    = version 16, missing: _label var category_n "N respondents in income level 
> in post-merge dataset'"
    - }
    -------------------------------------------------------------- end label ---
  - di "Merged ASEC values with original Research dataset for inc_level " `inc_l
> evel' " ($`lower_bound'-`upper_bound') and year `y'."
  = di "Merged ASEC values with original Research dataset for inc_level " 5 " ($
> 50000-75000) and year 2019."
Merged ASEC values with original Research dataset for inc_level 5 ($50000-75000)
>  and year 2019.
  - tempfile temp_`inc_level'_`y'
  = tempfile temp_5_2019
  - save `temp_`inc_level'_`y'', replace
  = save /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000d, repla
> ce
(note: file /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000d not
>  found)
file /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000d saved
  - di "Saved REDI data (with continuous data) for inc_level " `inc_level' " ($`
> lower_bound'-`upper_bound') and year `y' in file"
  = di "Saved REDI data (with continuous data) for inc_level " 5 " ($50000-75000
> ) and year 2019 in file"
Saved REDI data (with continuous data) for inc_level 5 ($50000-75000) and year 2
> 019 in file
  - }
  - use `working_regex', clear
  = use /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.000003, clear
(Streamlined ACS data, 2019)
  - keep if `inc_cat_var' == `inc_level'
  = keep if acs_hhinc == 6
(267,103 observations deleted)
  - di "The current inc_level is: " `inc_level'
  = di "The current inc_level is: " 6
The current inc_level is: 6
  - if regexm(inc_decoded, "^[a-z/A-Z]+") == 1 {
    di "The inc_level " `inc_level' " is at the lowest end of the " "original Re
> search dataset income range"
    destring inc_decoded, ignore("Less than LESS THAN Under,$ ") generate(`inc_c
> at_var'_ub)
    gen `inc_cat_var'_lb = -100000
    di "Lower bound of -100,000 created for inc_level " `inc_level'
    }
  - else if regexm(inc_decoded, "[a-z/A-Z]+$") == 1 {
    di "The inc_level " `inc_level' " is at the highest end of the " "original R
> esearch dataset income range"
    destring inc_decoded, ignore("and over or over,$ or more OR MORE") generate(
> `inc_cat_var'_lb)
    gen `inc_cat_var'_ub = 999999
    di "Upper bound of 999999 created for inc_level " `inc_level'
    }
  - else if regexm(inc_decoded, "[.][a-z]") == 1 {
    di "The inc_level " `inc_level' " is all missing"
    gen `inc_cat_var'_lb = .
    gen `inc_cat_var'_ub = .
    di "Lower and upper bound of . created for inc_level " `inc_level'
    }
  - else if regexm(inc_decoded, "[0-9]+$") == 1 {
  - di "The inc_level " `inc_level' " has a lower and an upper level"
  = di "The inc_level " 6 " has a lower and an upper level"
The inc_level 6 has a lower and an upper level
  - split inc_decoded, parse("-" "to" "-" "to under" "to less than" "UP TO" "but
>  less than") ignore(" ,$") destring
    ------------------------------------------------------------ begin split ---
    - version 8
    - syntax varname(str) [if] [in] [, Generate(str) noTrim Parse(str asis) DEST
> RING force float Ignore(string asis) percent Limit(numlist int >0 max=1) ]
    - local verpre : display "version " %4.1f _caller() ":"
    - if "`destring'"=="" {
    = if "destring"=="" {
      foreach option in force float ignore percent {
      if `"``option''"'!="" {
      display as error "may not specify `option' without specifying destring"
      exit 198
      }
      }
      }
    - else {
    - if `"`ignore'"'!="" {
    = if `"" ,$""'!="" {
    - if _caller() >= 14 {
    - if ustrfindfirst(`"`ignore'"',",") & !ustrfindfirst(`"`ignore'"',`"""') {
    = if ustrfindfirst(`"" ,$""',",") & !ustrfindfirst(`"" ,$""',`"""') {
      display as error `"ignore string must be enclosed with quotes to ignore co
> mmas or use options"'
      exit 198
      }
    - }
    - `verpre' _parse_ignore `ignore'
    = version 16.0: _parse_ignore " ,$"
      -------------------------------------------------- begin _parse_ignore ---
      - version 14
      - sreturn clear
      - if _caller() < 14 {
        capture syntax [anything] , [ASChars] [ASBytes] [illegal]
        if !_rc {
        if "`aschars'`asbytes'`illegal'"!="" {
        display as error "may not specify options in the ignore option for Stata
>  version less than 14"
        exit 198
        }
        }
        sreturn local aschars 0
        sreturn local illegal 0
        }
      - else {
      - syntax [anything] , [ASChars] [ASBytes] [illegal]
      - if "`asbytes'"!="" {
      = if ""!="" {
        if "`aschars'"!="" {
        display as error "may specify only one of the ignore options aschars and
>  asbytes"
        exit 198
        }
        if "`illegal'"!="" {
        display as error "may not specify the ignore option illegal when specify
> ing asbytes"
        exit 198
        }
        }
      - if "`asbytes'"=="" {
      = if ""=="" {
      - if ustrinvalidcnt(`"`anything'"') {
      = if ustrinvalidcnt(`"" ,$""') {
        display as error "invalid Unicode characters may not be ignored when rem
> oving aschars"
        exit 198
        }
      - }
      - sreturn local aschars = "`asbytes'"==""
      = sreturn local aschars = ""==""
      - sreturn local illegal = "`illegal'"!=""
      = sreturn local illegal = ""!=""
      - capture sreturn local ignore `anything'
      = capture sreturn local ignore " ,$"
      - if _rc {
        sreturn local ignore `"`anything'"'
        }
      - }
      ---------------------------------------------------- end _parse_ignore ---
    - }
    - }
    - marksample touse, strok
    - qui count if `touse'
    = qui count if __000000
    - if r(N) == 0 {
      error 2000
      }
    - if `"`parse'"' == `""' | `"`parse'"' == `""""' {
    = if `""-" "to" "-" "to under" "to less than" "UP TO" "but less than""' == `
> ""' | `""-" "to" "-" "to under" "to less than" "UP TO" "but less than""' == `"
> """' {
      if "`trim'" != "" {
      di as err "parsing on spaces incompatible with notrim"
      exit 198
      }
      local parse `"" ""'
      local trm "trim"
      }
    - if `"`parse'"' == `""' | `"`parse'"' == `""""' {
    = if `""-" "to" "-" "to under" "to less than" "UP TO" "but less than""' == `
> ""' | `""-" "to" "-" "to under" "to less than" "UP TO" "but less than""' == `"
> """' {
      local parse `"" ""'
      local trm "trim"
      }
    - local nparse : word count `parse'
    = local nparse : word count "-" "to" "-" "to under" "to less than" "UP TO" "
> but less than"
    - tokenize `"`parse'"'
    = tokenize `""-" "to" "-" "to under" "to less than" "UP TO" "but less than""
> '
    - if `"`generate'"' != "" {
    = if `""' != "" {
      confirm name `generate'
      if `: word count `generate'' > 1 {
      di as err "invalid stub `generate'"
      exit 198
      }
      }
    - qui {
    - tempvar vw tp mp pl
    - gen int `tp' = 0
    = gen int __000002 = 0
    - gen int `mp' = 0
    = gen int __000003 = 0
    - gen int `pl' = 0
    = gen int __000004 = 0
    - gen str1 `vw' = ""
    = gen str1 __000001 = ""
    - if "`trim'" == "" {
    = if "" == "" {
    - replace `vw' = trim(`varlist') if `touse'
    = replace __000001 = trim(inc_decoded) if __000000
    - }
    - else {
      replace `vw' = `varlist' if `touse'
      }
    - }
    - if "`generate'" == "" {
    = if "" == "" {
    - local generate "`varlist'"
    = local generate "inc_decoded"
    - }
    - local j = 0
    - local go = 1
    - if "`limit'" == "" {
    = if "" == "" {
    - local limit .
    - }
    - qui while `go' & `j' < `limit' {
    = qui while 1 & 0 < . {
    - replace `mp' = .
    = replace __000003 = .
    - replace `pl' = 0
    = replace __000004 = 0
    - forval i = 1 / `nparse' {
    = forval i = 1 / 7 {
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"-"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"-"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"to"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"to"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"-"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"-"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"to under"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"to under"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"to less than"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"to less than"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"UP TO"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"UP TO"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"but less than"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"but less than"') if __000003 == __000002
    - }
    - local ++j
    - tempvar part`j'
    = tempvar part1
    - gen str1 `part`j'' = ""
    = gen str1 __000005 = ""
    - replace `part`j'' = substr(`vw', 1, `mp'-1) if `mp' < .
    = replace __000005 = substr(__000001, 1, __000003-1) if __000003 < .
    - replace `vw' = `trm'(substr(`vw', `mp'+`pl', .)) if `mp' < .
    = replace __000001 = (substr(__000001, __000003+__000004, .)) if __000003 < 
> .
    - replace `part`j'' = `vw' if `mp' >= .
    = replace __000005 = __000001 if __000003 >= .
    - replace `vw' = "" if `mp' >= .
    = replace __000001 = "" if __000003 >= .
    - local newvars "`newvars'`generate'`j' "
    = local newvars "inc_decoded1 "
    - capture assert `vw' == ""
    = capture assert __000001 == ""
    - local go = _rc
    - }
    - qui while `go' & `j' < `limit' {
    = qui while 9 & 1 < . {
    - replace `mp' = .
    = replace __000003 = .
    - replace `pl' = 0
    = replace __000004 = 0
    - forval i = 1 / `nparse' {
    = forval i = 1 / 7 {
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"-"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"-"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"to"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"to"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"-"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"-"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"to under"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"to under"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"to less than"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"to less than"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"UP TO"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"UP TO"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"but less than"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"but less than"') if __000003 == __000002
    - }
    - local ++j
    - tempvar part`j'
    = tempvar part2
    - gen str1 `part`j'' = ""
    = gen str1 __000006 = ""
    - replace `part`j'' = substr(`vw', 1, `mp'-1) if `mp' < .
    = replace __000006 = substr(__000001, 1, __000003-1) if __000003 < .
    - replace `vw' = `trm'(substr(`vw', `mp'+`pl', .)) if `mp' < .
    = replace __000001 = (substr(__000001, __000003+__000004, .)) if __000003 < 
> .
    - replace `part`j'' = `vw' if `mp' >= .
    = replace __000006 = __000001 if __000003 >= .
    - replace `vw' = "" if `mp' >= .
    = replace __000001 = "" if __000003 >= .
    - local newvars "`newvars'`generate'`j' "
    = local newvars "inc_decoded1 inc_decoded2 "
    - capture assert `vw' == ""
    = capture assert __000001 == ""
    - local go = _rc
    - }
    - qui while `go' & `j' < `limit' {
    = qui while 0 & 2 < . {
      replace `mp' = .
      replace `pl' = 0
      forval i = 1 / `nparse' {
      replace `tp' = index(`vw', `"``i''"')
      replace `mp' = min(`tp', `mp') if `tp'
      replace `pl' = length(`"``i''"') if `mp' == `tp'
      }
      local ++j
      tempvar part`j'
      gen str1 `part`j'' = ""
      replace `part`j'' = substr(`vw', 1, `mp'-1) if `mp' < .
      replace `vw' = `trm'(substr(`vw', `mp'+`pl', .)) if `mp' < .
      replace `part`j'' = `vw' if `mp' >= .
      replace `vw' = "" if `mp' >= .
      local newvars "`newvars'`generate'`j' "
      capture assert `vw' == ""
      local go = _rc
      }
    - capture confirm new var `newvars'
    = capture confirm new var inc_decoded1 inc_decoded2 
    - if _rc {
      di as err "cannot generate new variables using stub `generate'"
      exit _rc
      }
    - qui forval i = 1 / `j' {
    = qui forval i = 1 / 2 {
    - gen str1 `generate'`i' = ""
    = gen str1 inc_decoded1 = ""
    - replace `generate'`i' = `part`i''
    = replace inc_decoded1 = __000005
    - }
    - gen str1 `generate'`i' = ""
    = gen str1 inc_decoded2 = ""
    - replace `generate'`i' = `part`i''
    = replace inc_decoded2 = __000006
    - }
    - return local varlist "`newvars'"
    = return local varlist "inc_decoded1 inc_decoded2 "
    - return local nvars "`j'"
    = return local nvars "2"
    - local s = cond(`j' > 1, "s", "")
    = local s = cond(2 > 1, "s", "")
    - if "`destring'" != "" {
    = if "destring" != "" {
    - di as res "variable`s' born as string: "
    = di as res "variables born as string: "
variables born as string: 
    - }
    - else di as res "variable`s' created as string: "
    = else di as res "variables created as string: "
    - ds `newvars'
    = ds inc_decoded1 inc_decoded2 
      ------------------------------------------------------------- begin ds ---
      - version 9
      - local version : di "version " string(_caller()) ":"
      - if (_caller() <= 4) {
        `version' describe, simple
        exit
        }
      - else {
      - ds_util `0'
      = ds_util inc_decoded1 inc_decoded2 
        ------------------------------------------------------ begin ds_util ---
        - version 8
        - syntax [varlist] [, HAS(str asis) NOT(str asis) NOT2 INSEnsitive Detai
> l Alpha Varwidth(int 12) Skip(int 2) INDENT(int 0)]
        - if "`varlist'" == "" {
        = if "inc_decoded1 inc_decoded2" == "" {
          exit
          }
        - if !inrange(`indent',0,244) {
        = if !inrange(0,0,244) {
          di as err "indent() should be in the range 0..244"
          exit 198
          }
        - if !inrange(`varwidth',5,32) {
        = if !inrange(12,5,32) {
          di as err "varwidth() should be in the range 5..32"
          exit 198
          }
        - if !inrange(`skip',1,10) {
        = if !inrange(2,1,10) {
          di as err "skip() should be in the range 1..10"
          exit 198
          }
        - local nopts = (`"`has'"' != "") + (`"`not'"' != "") + ("`not2'" != "")
        = local nopts = (`""' != "") + (`""' != "") + ("" != "")
        - if `nopts' == 3 {
        = if 0 == 3 {
          di as err "may not combine options has(), not(), and not"
          exit 198
          }
        - else if `nopts' == 2 {
        = else if 0 == 2 {
          if (`"`has'"' == "") {
          di as err "may not combine options not() and not"
          exit 198
          }
          else if (`"`not'"' == "") {
          di as err "may not combine options has() and not"
          exit 198
          }
          else if (`"`not2'"' == "") {
          di as err "may not combine options has() and not()"
          exit 198
          }
          }
        - if `"`not'"' != "" {
        = if `""' != "" {
          local has `"`not'"'
          local opt "not"
          }
        - else if `"`has'"' != "" {
        = else if `""' != "" {
          local opt "has"
          }
        - local inse = "`insensitive'" != ""
        = local inse = "" != ""
        - if `"`has'"' != "" {
        = if `""' != "" {
          CheckHas `"`has'"' "`opt'" "`inse'"
          if "`what'" == "varl" | "`what'" == "vall" {
          VarlVall "`what'" `"`which'"' "`varlist'" "`inse'"
          }
          else if "`what'" == "f" {
          Format `"`which'"' "`varlist'" "`inse'"
          }
          else if "`what'" == "c" {
          Char `"`which'"' "`varlist'" "`inse'"
          }
          else if "`what'" == "t" {
          Type `"`which'"' "`varlist'"
          }
          if `"`not'"' != "" {
          local varlist : list varlist - vlist
          }
          else if `"`has'"' != "" {
          local varlist "`vlist'"
          }
          }
        - if `"`not2'"' != "" {
        = if `""' != "" {
          unab all : *
          local varlist : list all - varlist
          }
        - if "`varlist'" == "" {
        = if "inc_decoded1 inc_decoded2" == "" {
          exit
          }
        - if "`alpha'" != "" {
        = if "" != "" {
          local varlist : list sort varlist
          }
        - if "`detail'" != "" {
        = if "" != "" {
          describe `varlist'
          }
        - else {
        - local nvar : word count `varlist'
        = local nvar : word count inc_decoded1 inc_decoded2
        - local ncol = int((`:set linesize' + `skip') / (`varwidth' + `skip'))
        = local ncol = int((80 + 2) / (12 + 2))
        - local i 0
        - local vlist
        - foreach v of local varlist {
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" inc_decoded1"'
        - }
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" inc_decoded1 inc_decoded2"'
        - }
        - DisplayInCols txt `indent' `skip' 0 `vlist'
        = DisplayInCols txt 0 2 0  inc_decoded1 inc_decoded2
          -------------------------------------- begin ds_util.DisplayInCols ---
          - gettoken sty 0 : 0
          - gettoken indent 0 : 0
          - gettoken pad 0 : 0
          - gettoken wid 0 : 0
          - local indent = cond(`indent'==. | `indent'<0, 0, `indent')
          = local indent = cond(0==. | 0<0, 0, 0)
          - local pad = cond(`pad'==. | `pad'<1, 2, `pad')
          = local pad = cond(2==. | 2<1, 2, 2)
          - local wid = cond(`wid'==. | `wid'<0, 0, `wid')
          = local wid = cond(0==. | 0<0, 0, 0)
          - local n : list sizeof 0
          - if `n'==0 {
          = if 2==0 {
            exit
            }
          - foreach x of local 0 {
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(0, length(`"inc_decoded1"'))
          - }
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"inc_decoded2"'))
          - }
          - local wid = `wid' + `pad'
          = local wid = 12 + 2
          - local cols = int((`c(linesize)'+1-`indent')/`wid')
          = local cols = int((80+1-0)/14)
          - if `cols' < 2 {
          = if 5 < 2 {
            if `indent' {
            local col "_column(`=`indent'+1')"
            }
            foreach x of local 0 {
            di as `sty' `col' `"`x'"'
            }
            exit
            }
          - local lines = `n'/`cols'
          = local lines = 2/5
          - local lines = int(cond(`lines'>int(`lines'), `lines'+1, `lines'))
          = local lines = int(cond(.4>int(.4), .4+1, .4))
          - forvalues i=1(1)`lines' {
          = forvalues i=1(1)1 {
          - local top = min((`cols')*`lines'+`i', `n')
          = local top = min((5)*1+1, 2)
          - local col = `indent' + 1
          = local col = 0 + 1
          - forvalues j=`i'(`lines')`top' {
          = forvalues j=1(1)2 {
          - local x : word `j' of `0'
          = local x : word 1 of   inc_decoded1 inc_decoded2
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(1) "inc_decoded1" _c
inc_decoded1          - local col = `col' + `wid'
          = local col = 1 + 14
          - }
          - local x : word `j' of `0'
          = local x : word 2 of   inc_decoded1 inc_decoded2
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(15) "inc_decoded2" _c
              inc_decoded2          - local col = `col' + `wid'
          = local col = 15 + 14
          - }
          - di as `sty'
          = di as txt

          - }
          ---------------------------------------- end ds_util.DisplayInCols ---
        - }
        - return local varlist `varlist'
        = return local varlist inc_decoded1 inc_decoded2
        -------------------------------------------------------- end ds_util ---
      - exit
      --------------------------------------------------------------- end ds ---
    - if "`destring'" != "" {
    = if "destring" != "" {
    - if `"`ignore'"' != "" {
    = if `"" ,$""' != "" {
    - local ignore `"ignore(`ignore')"'
    = local ignore `"ignore(" ,$")"'
    - }
    - `verpre' destring `newvars', replace `force' `float' `ignore' `percent'
    = version 16.0: destring inc_decoded1 inc_decoded2 , replace   ignore(" ,$")
>  
      ------------------------------------------------------- begin destring ---
      - version 14
      - local cmdargs = `"`0'"'
      = local cmdargs = `"inc_decoded1 inc_decoded2 , replace   ignore(" ,$") "'
      - local verpre : display "version " %4.1f _caller() ":"
      - syntax [varlist], [Generate(string) replace] [force] [float] [Ignore(str
> ing asis)] [percent] [dpcomma]
      - if _caller() >= 14 {
      - if ustrpos(`"`ignore'"',",") & !ustrpos(`"`ignore'"',`"""') {
      = if ustrpos(`"" ,$""',",") & !ustrpos(`"" ,$""',`"""') {
        display as error `"ignore string must be enclosed with quotes to ignore 
> commas or use options"'
        exit 198
        }
      - }
      - `verpre' _parse_ignore `ignore'
      = version 16.0: _parse_ignore " ,$"
        ------------------------------------------------ begin _parse_ignore ---
        - version 14
        - sreturn clear
        - if _caller() < 14 {
          capture syntax [anything] , [ASChars] [ASBytes] [illegal]
          if !_rc {
          if "`aschars'`asbytes'`illegal'"!="" {
          display as error "may not specify options in the ignore option for Sta
> ta version less than 14"
          exit 198
          }
          }
          sreturn local aschars 0
          sreturn local illegal 0
          }
        - else {
        - syntax [anything] , [ASChars] [ASBytes] [illegal]
        - if "`asbytes'"!="" {
        = if ""!="" {
          if "`aschars'"!="" {
          display as error "may specify only one of the ignore options aschars a
> nd asbytes"
          exit 198
          }
          if "`illegal'"!="" {
          display as error "may not specify the ignore option illegal when speci
> fying asbytes"
          exit 198
          }
          }
        - if "`asbytes'"=="" {
        = if ""=="" {
        - if ustrinvalidcnt(`"`anything'"') {
        = if ustrinvalidcnt(`"" ,$""') {
          display as error "invalid Unicode characters may not be ignored when r
> emoving aschars"
          exit 198
          }
        - }
        - sreturn local aschars = "`asbytes'"==""
        = sreturn local aschars = ""==""
        - sreturn local illegal = "`illegal'"!=""
        = sreturn local illegal = ""!=""
        - capture sreturn local ignore `anything'
        = capture sreturn local ignore " ,$"
        - if _rc {
          sreturn local ignore `"`anything'"'
          }
        - }
        -------------------------------------------------- end _parse_ignore ---
      - if _caller() < 14 {
        local aschars 0
        syntax [varlist], [Generate(string) replace] [force] [float] [Ignore(str
> ing)] [percent] [dpcomma]
        }
      - else {
      - if `"`s(ignore)'"'!="" {
      = if `" ,$"'!="" {
      - local ignore `"`s(ignore)'"'
      = local ignore `" ,$"'
      - }
      - local aschars `s(aschars)'
      = local aschars 1
      - if `s(illegal)' {
      = if 0 {
        local illegal = ustrunescape("\ufffd")
        }
      - }
      - if "`percent'" == "percent" {
      = if "" == "percent" {
        if !ustrpos(`"`ignore'"', "%") {
        local ignore `"`ignore'%"'
        }
        }
      - if "`illegal'"!="" {
      = if ""!="" {
        local ignore `"`ignore'`illegal'"'
        }
      - if `"`float'"'!="" {
      = if `""'!="" {
        local gtype "float"
        }
      - else {
      - local gtype "double"
      - }
      - if "`generate'" != "" & "`replace'" != "" {
      = if "" != "" & "replace" != "" {
        di as err "options generate and replace are mutually exclusive"
        exit 198
        }
      - if "`generate'" == "" & "`replace'" == "" {
      = if "" == "" & "replace" == "" {
        di as err "must specify either generate or replace option"
        exit 198
        }
      - if "`generate'" != "" {
      = if "" != "" {
        local ct1: word count `varlist'
        local save "`varlist'"
        local 0 "`generate'"
        capture syntax newvarlist
        if _rc {
        di as err "generate() contains existing variable(s) and/or illegal varia
> ble name(s)"
        exit _rc
        }
        local generate "`varlist'"
        local varlist "`save'"
        local ct2: word count `generate'
        if `ct1' != `ct2' {
        di as err "number of variables in varlist must equal"
        di as err "number of variables in generate(newvarlist)"
        exit 198
        }
        }
      - local m 1
      - if `"`ignore'"' == "" {
      = if `" ,$"' == "" {
        local ignore ""
        }
      - if `aschars' {
      = if 1 {
      - local l = ustrlen(`"`ignore'"')
      = local l = ustrlen(`" ,$"')
      - }
      - else {
        local l = length(`"`ignore'"')
        }
      - while `m' <= `l' {
      = while 1 <= 3 {
      - if `aschars' {
      = if 1 {
      - local char`m' = usubstr(`"`ignore'"', `m', 1)
      = local char1 = usubstr(`" ,$"', 1, 1)
      - }
      - else {
        local char`m' = substr(`"`ignore'"', `m', 1)
        }
      - local m = `m' + 1
      = local m = 1 + 1
      - }
      - while `m' <= `l' {
      = while 2 <= 3 {
      - if `aschars' {
      = if 1 {
      - local char`m' = usubstr(`"`ignore'"', `m', 1)
      = local char2 = usubstr(`" ,$"', 2, 1)
      - }
      - else {
        local char`m' = substr(`"`ignore'"', `m', 1)
        }
      - local m = `m' + 1
      = local m = 2 + 1
      - }
      - while `m' <= `l' {
      = while 3 <= 3 {
      - if `aschars' {
      = if 1 {
      - local char`m' = usubstr(`"`ignore'"', `m', 1)
      = local char3 = usubstr(`" ,$"', 3, 1)
      - }
      - else {
        local char`m' = substr(`"`ignore'"', `m', 1)
        }
      - local m = `m' + 1
      = local m = 3 + 1
      - }
      - while `m' <= `l' {
      = while 4 <= 3 {
        if `aschars' {
        local char`m' = usubstr(`"`ignore'"', `m', 1)
        }
        else {
        local char`m' = substr(`"`ignore'"', `m', 1)
        }
        local m = `m' + 1
        }
      - if `aschars' {
      = if 1 {
      - local aswhat "character"
      - }
      - else {
        local aswhat "byte"
        }
      - if "`generate'"!="" {
      = if ""!="" {
        local genrep "generate"
        }
      - else {
      - local genrep "replace"
      - }
      - local tvars OLDVAR NEWVAR ismissing found topct
      - tempvar `tvars'
      = tempvar OLDVAR NEWVAR ismissing found topct
      - local varno 0
      - foreach var of varlist `varlist' {
      = foreach var of varlist inc_decoded1 inc_decoded2 {
      - local varno = `varno' + 1
      = local varno = 0 + 1
      - if "`generate'"!="" {
      = if ""!="" {
        local finalvarname : word `varno' of `generate'
        local finalprint "`finalvarname' "
        }
      - else {
      - local finalvarname "`var'"
      = local finalvarname "inc_decoded1"
      - local finalprint ""
      - }
      - capture confirm string variable `var'
      = capture confirm string variable inc_decoded1
      - if _rc != 0 {
        di as txt "`var' already numeric; no " as res "`genrep'"
        }
      - else {
      - qui gen `OLDVAR' = `var'
      = qui gen __000007 = inc_decoded1
      - local jj 1
      - local b
      - local bcnt = 0
      - local c
      - local makepct
      - while `"`char`jj''"' != "" {
      = while `" "' != "" {
      - capture drop `found'
      = capture drop __00000A
      - capture drop `topct'
      = capture drop __00000B
      - local t `"`char`jj''"'
      = local t `" "'
      - if `aschars' {
      = if 1 {
      - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
      = qui gen byte __00000A = ustrpos(__000007, `" "') != 0
      - }
      - else {
        qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
        }
      - qui summarize `found', meanonly
      = qui summarize __00000A, meanonly
      - if r(sum) > 0 {
      - if `"`t'"'=="`illegal'" {
      = if `" "'=="" {
        local b `"`b' illegal Unicode"'
        }
      - else if `"`t'"' == " " {
      = else if `" "' == " " {
      - local b `"`b' space"'
      = local b `" space"'
      - }
      - else {
        local b `"`b' `t'"'
        }
      - local ++bcnt
      - }
      - if `aschars' {
      = if 1 {
      - if `"`t'"'=="%" {
      = if `" "'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if ustrpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
      - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
      = qui replace __000007 = usubinstr(__000007, `" "', "", .)
      - }
      - else {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if strpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
        }
      - local jj = `jj' + 1
      = local jj = 1 + 1
      - }
      - while `"`char`jj''"' != "" {
      = while `","' != "" {
      - capture drop `found'
      = capture drop __00000A
      - capture drop `topct'
      = capture drop __00000B
      - local t `"`char`jj''"'
      = local t `","'
      - if `aschars' {
      = if 1 {
      - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
      = qui gen byte __00000A = ustrpos(__000007, `","') != 0
      - }
      - else {
        qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
        }
      - qui summarize `found', meanonly
      = qui summarize __00000A, meanonly
      - if r(sum) > 0 {
        if `"`t'"'=="`illegal'" {
        local b `"`b' illegal Unicode"'
        }
        else if `"`t'"' == " " {
        local b `"`b' space"'
        }
        else {
        local b `"`b' `t'"'
        }
        local ++bcnt
        }
      - if `aschars' {
      = if 1 {
      - if `"`t'"'=="%" {
      = if `","'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if ustrpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
      - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
      = qui replace __000007 = usubinstr(__000007, `","', "", .)
      - }
      - else {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if strpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
        }
      - local jj = `jj' + 1
      = local jj = 2 + 1
      - }
      - while `"`char`jj''"' != "" {
      = while `"$"' != "" {
      - capture drop `found'
      = capture drop __00000A
      - capture drop `topct'
      = capture drop __00000B
      - local t `"`char`jj''"'
      = local t `"$"'
      - if `aschars' {
      = if 1 {
      - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
      = qui gen byte __00000A = ustrpos(__000007, `"$"') != 0
      - }
      - else {
        qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
        }
      - qui summarize `found', meanonly
      = qui summarize __00000A, meanonly
      - if r(sum) > 0 {
        if `"`t'"'=="`illegal'" {
        local b `"`b' illegal Unicode"'
        }
        else if `"`t'"' == " " {
        local b `"`b' space"'
        }
        else {
        local b `"`b' `t'"'
        }
        local ++bcnt
        }
      - if `aschars' {
      = if 1 {
      - if `"`t'"'=="%" {
      = if `"$"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if ustrpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
      - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
      = qui replace __000007 = usubinstr(__000007, `"$"', "", .)
      - }
      - else {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if strpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
        }
      - local jj = `jj' + 1
      = local jj = 3 + 1
      - }
      - while `"`char`jj''"' != "" {
      = while `""' != "" {
        capture drop `found'
        capture drop `topct'
        local t `"`char`jj''"'
        if `aschars' {
        qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
        }
        else {
        qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
        }
        qui summarize `found', meanonly
        if r(sum) > 0 {
        if `"`t'"'=="`illegal'" {
        local b `"`b' illegal Unicode"'
        }
        else if `"`t'"' == " " {
        local b `"`b' space"'
        }
        else {
        local b `"`b' `t'"'
        }
        local ++bcnt
        }
        if `aschars' {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if ustrpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
        }
        else {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if strpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
        }
        local jj = `jj' + 1
        }
      - if _caller() >= 14 {
      - qui replace `OLDVAR' = ustrtrim(`OLDVAR')
      = qui replace __000007 = ustrtrim(__000007)
      - }
      - else {
        qui replace `OLDVAR' = strtrim(`OLDVAR')
        }
      - quietly gen byte `ismissing' = `OLDVAR'=="" | `OLDVAR'=="." | (strlen(`O
> LDVAR')==2 & inrange(`OLDVAR',".a",".z"))
      = quietly gen byte __000009 = __000007=="" | __000007=="." | (strlen(__000
> 007)==2 & inrange(__000007,".a",".z"))
      - if ("`dpcomma'" != "") {
      = if ("" != "") {
        qui replace `OLDVAR' = subinstr(`OLDVAR',".","X",.) if !`ismissing'
        qui replace `OLDVAR' = subinstr(`OLDVAR', ",", ".", 1) if !ustrregexm(`O
> LDVAR',"(,[a-z])|(^,$)")
        }
      - if _caller() >= 14 {
      - qui replace `OLDVAR' = ustrregexrf(`OLDVAR',"^0+","0")
      = qui replace __000007 = ustrregexrf(__000007,"^0+","0")
      - }
      - else {
        qui replace `OLDVAR' = regexr(`OLDVAR',"^0+","0")
        }
      - qui gen `gtype' `NEWVAR' = real(`OLDVAR')
      = qui gen double __000008 = real(__000007)
      - qui summarize `ismissing', meanonly
      = qui summarize __000009, meanonly
      - local oldmiss = r(sum)
      - qui count if missing(`NEWVAR')
      = qui count if missing(__000008)
      - local newmiss = r(N)
      - local flag = `oldmiss'!=`newmiss'
      = local flag = 0!=0
      - if `flag' & ("`force'" == "") {
      = if 0 & ("" == "") {
        if `"`ignore'"' != "" {
        di as txt "`var': contains " "`aswhat's not specified in " as res "ignor
> e()" as txt "; no " as res "`genrep'"
        }
        else {
        di as txt "`var': contains " "nonnumeric `aswhat's; no " as res "`genrep
> '"
        }
        }
      - else {
      - order `NEWVAR', after(`var')
      = order __000008, after(inc_decoded1)
        -------------------------------------------------------- begin order ---
        - version 11
        - if (_caller()<11) {
          _order `macval(0)'
          exit
          }
        - syntax varlist[, Before(varname) After(varname) first last SEQuential 
> ALPHAbetic]
        - if (`"`before'"' == "" & `"`after'"' == "" & "`first'" == "" & "`last'
> " == "" & "`alphabetic'" == "" & "`sequential'" == "") {
        = if (`""' == "" & `"inc_decoded1"' == "" & "" == "" & "" == "" & "" == 
> "" & "" == "") {
          _order `macval(0)'
          exit
          }
        - if (`"`before'"' != "" & `"`after'"' != "") {
        = if (`""' != "" & `"inc_decoded1"' != "") {
          dis as error "before() may not be combined with after()"
          exit 198
          }
        - if (`"`before'"' != "" & `"`first'"' != "") {
        = if (`""' != "" & `""' != "") {
          dis as error "before() may not be combined with first()"
          exit 198
          }
        - if (`"`before'"' != "" & `"`last'"' != "") {
        = if (`""' != "" & `""' != "") {
          dis as error "before() may not be combined with last()"
          exit 198
          }
        - if (`"`after'"' != "" & `"`before'"' != "") {
        = if (`"inc_decoded1"' != "" & `""' != "") {
          dis as error "after() may not be combined with before()"
          exit 198
          }
        - if (`"`after'"' != "" & `"`first'"' != "") {
        = if (`"inc_decoded1"' != "" & `""' != "") {
          dis as error "after() may not be combined with first()"
          exit 198
          }
        - if (`"`after'"' != "" & `"`last'"' != "") {
        = if (`"inc_decoded1"' != "" & `""' != "") {
          dis as error "after() may not be combined with last()"
          exit 198
          }
        - if ("`first'" != "" & "`last'" != "") {
        = if ("" != "" & "" != "") {
          dis as error "first may not be combined with last"
          exit 198
          }
        - if ("`sequential'" != "" & "`alphabetic'" != "") {
        = if ("" != "" & "" != "") {
          dis as error "sequential may not be combined with alphabetic"
          exit 198
          }
        - if ("`first'" != "") {
        = if ("" != "") {
          if "`alphabetic'" != "" {
          local varlist : list sort varlist
          }
          if "`sequential'" != "" {
          aorder `varlist'
          }
          else {
          _order `varlist'
          }
          }
        - if ("`last'" != "") {
        = if ("" != "") {
          unab vlist : _all
          local list : list vlist - varlist
          if "`alphabetic'" != "" {
          local varlist : list sort varlist
          }
          if "`sequential'" != "" {
          preserve
          keep `varlist'
          aorder `varlist'
          unab varlist : _all
          restore
          }
          _order `list' `varlist'
          }
        - if (`"`before'"' != "") {
        = if (`""' != "") {
          local test : list before in varlist
          if `test' {
          dis as err "varname specified in before() may not" " be in varlist"
          exit 198
          }
          if "`alphabetic'" != "" {
          local varlist : list sort varlist
          }
          if "`sequential'" != "" {
          preserve
          keep `varlist'
          aorder `varlist'
          unab varlist : _all
          restore
          }
          unab vlist : _all
          local vlist : list vlist - varlist
          local var_num : list posof "`before'" in vlist
          local var_num = `var_num' - 1
          local fvar : word 1 of `vlist'
          capture local lvar : word `var_num' of `vlist'
          if _rc {
          _order `varlist'
          exit
          }
          unab nlist : `fvar'-`lvar'
          local nlist : list nlist - varlist
          _order `nlist' `varlist'
          }
        - if (`"`after'"' != "") {
        = if (`"inc_decoded1"' != "") {
        - local test : list after in varlist
        - if `test' {
        = if 0 {
          dis as err "varname specified in after() may not" " be in varlist"
          exit 198
          }
        - if "`alphabetic'" != "" {
        = if "" != "" {
          local varlist : list sort varlist
          }
        - if "`sequential'" != "" {
        = if "" != "" {
          preserve
          keep `varlist'
          aorder `varlist'
          unab varlist : _all
          restore
          }
        - unab vlist : _all
          ------------------------------------------------------- begin unab ---
          - version 6
          - gettoken user 0: 0, parse(" :")
          - gettoken colon 0: 0, parse(" :")
          - if `"`colon'"' != ":" { error 198 }
          = if `":"' != ":" { error 198 }
          - syntax [varlist(default=empty)] [, MIN(integer 1) MAX(integer 120000
> ) NAME(string)]
          - c_local `user' `varlist'
          = c_local vlist year hhwt repwt cluster adjust statefip strata hhincom
> e_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 repwt10 r
> epwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 repwt20
>  repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt29 repwt
> 30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repwt39 rep
> wt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 repwt49 r
> epwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 repwt59
>  repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt68 repwt
> 69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repwt78 rep
> wt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp5 repwt
> p6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14 repwtp
> 15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwtp23 rep
> wtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 repwtp32 
> repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40 repwtp
> 41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwtp49 rep
> wtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 repwtp58 
> repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66 repwtp
> 67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwtp75 rep
> wtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __000000 __
> 000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_decoded2 
> __000007 __00000A __000009 __000008
          - local n : word count `varlist'
          = local n : word count year hhwt repwt cluster adjust statefip strata 
> hhincome_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 re
> pwt10 repwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 
> repwt20 repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt2
> 9 repwt30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repw
> t39 repwt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 re
> pwt49 repwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 
> repwt59 repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt6
> 8 repwt69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repw
> t78 repwt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp
> 5 repwtp6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14
>  repwtp15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwt
> p23 repwtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 re
> pwtp32 repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40
>  repwtp41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwt
> p49 repwtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 re
> pwtp58 repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66
>  repwtp67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwt
> p75 repwtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __00
> 0000 __000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_de
> coded2 __000007 __00000A __000009 __000008
          - if `n'>=`min' & `n'<=`max' { exit }
          = if 187>=1 & 187<=120000 { exit }
          --------------------------------------------------------- end unab ---
        - local vlist : list vlist - varlist
        - local var_num : list posof "`after'" in vlist
        = local var_num : list posof "inc_decoded1" in vlist
        - local fvar : word 1 of `vlist'
        = local fvar : word 1 of year hhwt repwt cluster adjust statefip strata 
> hhincome_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 re
> pwt10 repwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 
> repwt20 repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt2
> 9 repwt30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repw
> t39 repwt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 re
> pwt49 repwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 
> repwt59 repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt6
> 8 repwt69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repw
> t78 repwt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp
> 5 repwtp6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14
>  repwtp15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwt
> p23 repwtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 re
> pwtp32 repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40
>  repwtp41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwt
> p49 repwtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 re
> pwtp58 repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66
>  repwtp67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwt
> p75 repwtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __00
> 0000 __000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_de
> coded2 __000007 __00000A __000009
        - local lvar : word `var_num' of `vlist'
        = local lvar : word 182 of year hhwt repwt cluster adjust statefip strat
> a hhincome_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 
> repwt10 repwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt1
> 9 repwt20 repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repw
> t29 repwt30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 re
> pwt39 repwt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 
> repwt49 repwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt5
> 8 repwt59 repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repw
> t68 repwt69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 re
> pwt78 repwt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repw
> tp5 repwtp6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp
> 14 repwtp15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 rep
> wtp23 repwtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 
> repwtp32 repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp
> 40 repwtp41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 rep
> wtp49 repwtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 
> repwtp58 repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp
> 66 repwtp67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 rep
> wtp75 repwtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __
> 000000 __000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_
> decoded2 __000007 __00000A __000009
        - unab nlist : `fvar'-`lvar'
        = unab nlist : year-inc_decoded1
          ------------------------------------------------------- begin unab ---
          - version 6
          - gettoken user 0: 0, parse(" :")
          - gettoken colon 0: 0, parse(" :")
          - if `"`colon'"' != ":" { error 198 }
          = if `":"' != ":" { error 198 }
          - syntax [varlist(default=empty)] [, MIN(integer 1) MAX(integer 120000
> ) NAME(string)]
          - c_local `user' `varlist'
          = c_local nlist year hhwt repwt cluster adjust statefip strata hhincom
> e_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 repwt10 r
> epwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 repwt20
>  repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt29 repwt
> 30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repwt39 rep
> wt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 repwt49 r
> epwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 repwt59
>  repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt68 repwt
> 69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repwt78 rep
> wt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp5 repwt
> p6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14 repwtp
> 15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwtp23 rep
> wtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 repwtp32 
> repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40 repwtp
> 41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwtp49 rep
> wtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 repwtp58 
> repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66 repwtp
> 67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwtp75 rep
> wtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __000000 __
> 000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1
          - local n : word count `varlist'
          = local n : word count year hhwt repwt cluster adjust statefip strata 
> hhincome_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 re
> pwt10 repwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 
> repwt20 repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt2
> 9 repwt30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repw
> t39 repwt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 re
> pwt49 repwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 
> repwt59 repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt6
> 8 repwt69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repw
> t78 repwt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp
> 5 repwtp6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14
>  repwtp15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwt
> p23 repwtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 re
> pwtp32 repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40
>  repwtp41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwt
> p49 repwtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 re
> pwtp58 repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66
>  repwtp67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwt
> p75 repwtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __00
> 0000 __000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1
          - if `n'>=`min' & `n'<=`max' { exit }
          = if 182>=1 & 182<=120000 { exit }
          --------------------------------------------------------- end unab ---
        - local nlist : list nlist - varlist
        - _order `nlist' `varlist'
        = _order year hhwt repwt cluster adjust statefip strata hhincome_acs rep
> wt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 repwt10 repwt11 re
> pwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 repwt20 repwt21 
> repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt29 repwt30 repwt3
> 1 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repwt39 repwt40 repw
> t41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 repwt49 repwt50 re
> pwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 repwt59 repwt60 
> repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt68 repwt69 repwt7
> 0 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repwt78 repwt79 repw
> t80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp5 repwtp6 repwtp
> 7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14 repwtp15 repwtp
> 16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwtp23 repwtp24 rep
> wtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 repwtp32 repwtp33 
> repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40 repwtp41 repwtp
> 42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwtp49 repwtp50 rep
> wtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 repwtp58 repwtp59 
> repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66 repwtp67 repwtp
> 68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwtp75 repwtp76 rep
> wtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __000000 __000002 __
> 000003 __000004 __000001 __000005 __000006 inc_decoded1 __000008
        - }
        - if ("`alphabetic'" != "" & `"`before'"' == "" & `"`after'"' == "" & "`
> first'" == "" & "`last'" == "") {
        = if ("" != "" & `""' == "" & `"inc_decoded1"' == "" & "" == "" & "" == 
> "") {
          local vlist : list sort varlist
          _order `vlist'
          }
        - if ("`sequential'" != "" & `"`before'"' == "" & `"`after'"' == "" & "`
> first'" == "" & "`last'" == "") {
        = if ("" != "" & `""' == "" & `"inc_decoded1"' == "" & "" == "" & "" == 
> "") {
          aorder `varlist'
          }
        ---------------------------------------------------------- end order ---
      - if `aschars' {
      = if 1 {
      - local dispb `"`b'"'
      = local dispb `" space"'
      - }
      - else {
        local dispb = printablebytes(`"`b'"')
        }
      - local c = plural(`bcnt',strproper("`aswhat'")) + " removed " + plural(`b
> cnt',"was","were") + `":`dispb'"'
      = local c = plural(1,strproper("character")) + " removed " + plural(1,"was
> ","were") + `": space"'
      - if "`makepct'" != "" {
      = if "" != "" {
        if `makepct' {
        qui replace `NEWVAR' = `NEWVAR'/100
        }
        }
      - qui compress `NEWVAR'
      = qui compress __000008
      - local type : type `NEWVAR'
      = local type : type __000008
      - if `flag' {
      = if 0 {
        di as txt "`var': contains nonnumeric `aswhat's" _continue
        if `"`ignore'"'!="" {
        display " not specified in " as result "ignore()" _continue
        }
        if `"`b'"'=="" {
        display "; `finalprint'" as res "`genrep'd " as txt "as " as res "`type'
> " _continue
        }
        display
        }
      - if `"`b'"' != "" {
      = if `" space"' != "" {
      - di as txt "`var': " plural(`bcnt',"`aswhat'") as res `"`dispb'"' as txt 
> " removed; `finalprint'" as res "`genrep'd " as txt "as " as res "`type'"
      = di as txt "inc_decoded1: " plural(1,"character") as res `" space"' as tx
> t " removed; " as res "replaced " as txt "as " as res "long"
inc_decoded1: character space removed; replaced as long
      - }
      - else if `"`b'"' == "" & !`flag' {
      = else if `" space"' == "" & !0 {
        di as txt "`var': all characters numeric; " "`finalprint'" as res "`genr
> ep'd " as txt "as " as res "`type'"
        }
      - if `newmiss' != 0 {
      = if 0 != 0 {
        di as txt "(`newmiss' missing " plural(`newmiss',"value") " generated)"
        }
      - label variable `NEWVAR' `"`: variable label `var''"'
      = label variable __000008 `""'
        -------------------------------------------------------- begin label ---
        - version 10.0
        - local vv : display "version " string(_caller()) ", missing:"
        - gettoken val : 0
        - if (strpos("`val'", "val") > 0 ) {
        = if (strpos("variable", "val") > 0 ) {
          gettoken val 0 : 0
          syntax anything [, nofix]
          if "`fix'" != "" {
          local fix ", nofix"
          }
          gettoken var rest : anything
          while `"`rest'"' != "" {
          gettoken lab rest : rest
          local label "`lab'"
          }
          local vlist : list anything - lab
          if "`lab'" == "." {
          local lab ""
          }
          foreach var of varlist `vlist' {
          `vv' _label `val' `var' `lab' `fix'
          }
          }
        - else {
        - `vv' _label `macval(0)'
        = version 14, missing: _label variable __000008 `""'
        - }
        ---------------------------------------------------------- end label ---
      - char `NEWVAR'[destring] `c'
      = char __000008[destring] Character removed was: space
      - char `NEWVAR'[destring_cmd] `"destring `cmdargs'"'
      = char __000008[destring_cmd] `"destring inc_decoded1 inc_decoded2 , repla
> ce   ignore(" ,$") "'
      - char `var'[destring]
      = char inc_decoded1[destring]
      - char `var'[destring_cmd]
      = char inc_decoded1[destring_cmd]
      - if "`genrep'"=="generate" {
      = if "replace"=="generate" {
        Charcopy `var' `NEWVAR'
        rename `NEWVAR' `: word `varno' of `generate''
        }
      - else {
      - char rename `var' `NEWVAR'
      = char rename inc_decoded1 __000008
      - drop `var'
      = drop inc_decoded1
      - rename `NEWVAR' `var'
      = rename __000008 inc_decoded1
        ------------------------------------------------------- begin rename ---
        - version 12
        - mata: rename_cmd("`3'")
        = mata: rename_cmd("")
        --------------------------------------------------------- end rename ---
      - }
      - }
      - foreach varmac of local tvars {
      - capture drop ``varmac''
      = capture drop __000007
      - }
      - capture drop ``varmac''
      = capture drop __000008
      - }
      - capture drop ``varmac''
      = capture drop __000009
      - }
      - capture drop ``varmac''
      = capture drop __00000A
      - }
      - capture drop ``varmac''
      = capture drop __00000B
      - }
      - }
      - }
      - local varno = `varno' + 1
      = local varno = 1 + 1
      - if "`generate'"!="" {
      = if ""!="" {
        local finalvarname : word `varno' of `generate'
        local finalprint "`finalvarname' "
        }
      - else {
      - local finalvarname "`var'"
      = local finalvarname "inc_decoded2"
      - local finalprint ""
      - }
      - capture confirm string variable `var'
      = capture confirm string variable inc_decoded2
      - if _rc != 0 {
        di as txt "`var' already numeric; no " as res "`genrep'"
        }
      - else {
      - qui gen `OLDVAR' = `var'
      = qui gen __000007 = inc_decoded2
      - local jj 1
      - local b
      - local bcnt = 0
      - local c
      - local makepct
      - while `"`char`jj''"' != "" {
      = while `" "' != "" {
      - capture drop `found'
      = capture drop __00000A
      - capture drop `topct'
      = capture drop __00000B
      - local t `"`char`jj''"'
      = local t `" "'
      - if `aschars' {
      = if 1 {
      - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
      = qui gen byte __00000A = ustrpos(__000007, `" "') != 0
      - }
      - else {
        qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
        }
      - qui summarize `found', meanonly
      = qui summarize __00000A, meanonly
      - if r(sum) > 0 {
      - if `"`t'"'=="`illegal'" {
      = if `" "'=="" {
        local b `"`b' illegal Unicode"'
        }
      - else if `"`t'"' == " " {
      = else if `" "' == " " {
      - local b `"`b' space"'
      = local b `" space"'
      - }
      - else {
        local b `"`b' `t'"'
        }
      - local ++bcnt
      - }
      - if `aschars' {
      = if 1 {
      - if `"`t'"'=="%" {
      = if `" "'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if ustrpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
      - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
      = qui replace __000007 = usubinstr(__000007, `" "', "", .)
      - }
      - else {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if strpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
        }
      - local jj = `jj' + 1
      = local jj = 1 + 1
      - }
      - while `"`char`jj''"' != "" {
      = while `","' != "" {
      - capture drop `found'
      = capture drop __00000A
      - capture drop `topct'
      = capture drop __00000B
      - local t `"`char`jj''"'
      = local t `","'
      - if `aschars' {
      = if 1 {
      - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
      = qui gen byte __00000A = ustrpos(__000007, `","') != 0
      - }
      - else {
        qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
        }
      - qui summarize `found', meanonly
      = qui summarize __00000A, meanonly
      - if r(sum) > 0 {
        if `"`t'"'=="`illegal'" {
        local b `"`b' illegal Unicode"'
        }
        else if `"`t'"' == " " {
        local b `"`b' space"'
        }
        else {
        local b `"`b' `t'"'
        }
        local ++bcnt
        }
      - if `aschars' {
      = if 1 {
      - if `"`t'"'=="%" {
      = if `","'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if ustrpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
      - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
      = qui replace __000007 = usubinstr(__000007, `","', "", .)
      - }
      - else {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if strpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
        }
      - local jj = `jj' + 1
      = local jj = 2 + 1
      - }
      - while `"`char`jj''"' != "" {
      = while `"$"' != "" {
      - capture drop `found'
      = capture drop __00000A
      - capture drop `topct'
      = capture drop __00000B
      - local t `"`char`jj''"'
      = local t `"$"'
      - if `aschars' {
      = if 1 {
      - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
      = qui gen byte __00000A = ustrpos(__000007, `"$"') != 0
      - }
      - else {
        qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
        }
      - qui summarize `found', meanonly
      = qui summarize __00000A, meanonly
      - if r(sum) > 0 {
        if `"`t'"'=="`illegal'" {
        local b `"`b' illegal Unicode"'
        }
        else if `"`t'"' == " " {
        local b `"`b' space"'
        }
        else {
        local b `"`b' `t'"'
        }
        local ++bcnt
        }
      - if `aschars' {
      = if 1 {
      - if `"`t'"'=="%" {
      = if `"$"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if ustrpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
      - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
      = qui replace __000007 = usubinstr(__000007, `"$"', "", .)
      - }
      - else {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if strpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
        }
      - local jj = `jj' + 1
      = local jj = 3 + 1
      - }
      - while `"`char`jj''"' != "" {
      = while `""' != "" {
        capture drop `found'
        capture drop `topct'
        local t `"`char`jj''"'
        if `aschars' {
        qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
        }
        else {
        qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
        }
        qui summarize `found', meanonly
        if r(sum) > 0 {
        if `"`t'"'=="`illegal'" {
        local b `"`b' illegal Unicode"'
        }
        else if `"`t'"' == " " {
        local b `"`b' space"'
        }
        else {
        local b `"`b' `t'"'
        }
        local ++bcnt
        }
        if `aschars' {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if ustrpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
        }
        else {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if strpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
        }
        local jj = `jj' + 1
        }
      - if _caller() >= 14 {
      - qui replace `OLDVAR' = ustrtrim(`OLDVAR')
      = qui replace __000007 = ustrtrim(__000007)
      - }
      - else {
        qui replace `OLDVAR' = strtrim(`OLDVAR')
        }
      - quietly gen byte `ismissing' = `OLDVAR'=="" | `OLDVAR'=="." | (strlen(`O
> LDVAR')==2 & inrange(`OLDVAR',".a",".z"))
      = quietly gen byte __000009 = __000007=="" | __000007=="." | (strlen(__000
> 007)==2 & inrange(__000007,".a",".z"))
      - if ("`dpcomma'" != "") {
      = if ("" != "") {
        qui replace `OLDVAR' = subinstr(`OLDVAR',".","X",.) if !`ismissing'
        qui replace `OLDVAR' = subinstr(`OLDVAR', ",", ".", 1) if !ustrregexm(`O
> LDVAR',"(,[a-z])|(^,$)")
        }
      - if _caller() >= 14 {
      - qui replace `OLDVAR' = ustrregexrf(`OLDVAR',"^0+","0")
      = qui replace __000007 = ustrregexrf(__000007,"^0+","0")
      - }
      - else {
        qui replace `OLDVAR' = regexr(`OLDVAR',"^0+","0")
        }
      - qui gen `gtype' `NEWVAR' = real(`OLDVAR')
      = qui gen double __000008 = real(__000007)
      - qui summarize `ismissing', meanonly
      = qui summarize __000009, meanonly
      - local oldmiss = r(sum)
      - qui count if missing(`NEWVAR')
      = qui count if missing(__000008)
      - local newmiss = r(N)
      - local flag = `oldmiss'!=`newmiss'
      = local flag = 0!=0
      - if `flag' & ("`force'" == "") {
      = if 0 & ("" == "") {
        if `"`ignore'"' != "" {
        di as txt "`var': contains " "`aswhat's not specified in " as res "ignor
> e()" as txt "; no " as res "`genrep'"
        }
        else {
        di as txt "`var': contains " "nonnumeric `aswhat's; no " as res "`genrep
> '"
        }
        }
      - else {
      - order `NEWVAR', after(`var')
      = order __000008, after(inc_decoded2)
        -------------------------------------------------------- begin order ---
        - version 11
        - if (_caller()<11) {
          _order `macval(0)'
          exit
          }
        - syntax varlist[, Before(varname) After(varname) first last SEQuential 
> ALPHAbetic]
        - if (`"`before'"' == "" & `"`after'"' == "" & "`first'" == "" & "`last'
> " == "" & "`alphabetic'" == "" & "`sequential'" == "") {
        = if (`""' == "" & `"inc_decoded2"' == "" & "" == "" & "" == "" & "" == 
> "" & "" == "") {
          _order `macval(0)'
          exit
          }
        - if (`"`before'"' != "" & `"`after'"' != "") {
        = if (`""' != "" & `"inc_decoded2"' != "") {
          dis as error "before() may not be combined with after()"
          exit 198
          }
        - if (`"`before'"' != "" & `"`first'"' != "") {
        = if (`""' != "" & `""' != "") {
          dis as error "before() may not be combined with first()"
          exit 198
          }
        - if (`"`before'"' != "" & `"`last'"' != "") {
        = if (`""' != "" & `""' != "") {
          dis as error "before() may not be combined with last()"
          exit 198
          }
        - if (`"`after'"' != "" & `"`before'"' != "") {
        = if (`"inc_decoded2"' != "" & `""' != "") {
          dis as error "after() may not be combined with before()"
          exit 198
          }
        - if (`"`after'"' != "" & `"`first'"' != "") {
        = if (`"inc_decoded2"' != "" & `""' != "") {
          dis as error "after() may not be combined with first()"
          exit 198
          }
        - if (`"`after'"' != "" & `"`last'"' != "") {
        = if (`"inc_decoded2"' != "" & `""' != "") {
          dis as error "after() may not be combined with last()"
          exit 198
          }
        - if ("`first'" != "" & "`last'" != "") {
        = if ("" != "" & "" != "") {
          dis as error "first may not be combined with last"
          exit 198
          }
        - if ("`sequential'" != "" & "`alphabetic'" != "") {
        = if ("" != "" & "" != "") {
          dis as error "sequential may not be combined with alphabetic"
          exit 198
          }
        - if ("`first'" != "") {
        = if ("" != "") {
          if "`alphabetic'" != "" {
          local varlist : list sort varlist
          }
          if "`sequential'" != "" {
          aorder `varlist'
          }
          else {
          _order `varlist'
          }
          }
        - if ("`last'" != "") {
        = if ("" != "") {
          unab vlist : _all
          local list : list vlist - varlist
          if "`alphabetic'" != "" {
          local varlist : list sort varlist
          }
          if "`sequential'" != "" {
          preserve
          keep `varlist'
          aorder `varlist'
          unab varlist : _all
          restore
          }
          _order `list' `varlist'
          }
        - if (`"`before'"' != "") {
        = if (`""' != "") {
          local test : list before in varlist
          if `test' {
          dis as err "varname specified in before() may not" " be in varlist"
          exit 198
          }
          if "`alphabetic'" != "" {
          local varlist : list sort varlist
          }
          if "`sequential'" != "" {
          preserve
          keep `varlist'
          aorder `varlist'
          unab varlist : _all
          restore
          }
          unab vlist : _all
          local vlist : list vlist - varlist
          local var_num : list posof "`before'" in vlist
          local var_num = `var_num' - 1
          local fvar : word 1 of `vlist'
          capture local lvar : word `var_num' of `vlist'
          if _rc {
          _order `varlist'
          exit
          }
          unab nlist : `fvar'-`lvar'
          local nlist : list nlist - varlist
          _order `nlist' `varlist'
          }
        - if (`"`after'"' != "") {
        = if (`"inc_decoded2"' != "") {
        - local test : list after in varlist
        - if `test' {
        = if 0 {
          dis as err "varname specified in after() may not" " be in varlist"
          exit 198
          }
        - if "`alphabetic'" != "" {
        = if "" != "" {
          local varlist : list sort varlist
          }
        - if "`sequential'" != "" {
        = if "" != "" {
          preserve
          keep `varlist'
          aorder `varlist'
          unab varlist : _all
          restore
          }
        - unab vlist : _all
          ------------------------------------------------------- begin unab ---
          - version 6
          - gettoken user 0: 0, parse(" :")
          - gettoken colon 0: 0, parse(" :")
          - if `"`colon'"' != ":" { error 198 }
          = if `":"' != ":" { error 198 }
          - syntax [varlist(default=empty)] [, MIN(integer 1) MAX(integer 120000
> ) NAME(string)]
          - c_local `user' `varlist'
          = c_local vlist year hhwt repwt cluster adjust statefip strata hhincom
> e_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 repwt10 r
> epwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 repwt20
>  repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt29 repwt
> 30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repwt39 rep
> wt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 repwt49 r
> epwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 repwt59
>  repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt68 repwt
> 69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repwt78 rep
> wt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp5 repwt
> p6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14 repwtp
> 15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwtp23 rep
> wtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 repwtp32 
> repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40 repwtp
> 41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwtp49 rep
> wtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 repwtp58 
> repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66 repwtp
> 67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwtp75 rep
> wtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __000000 __
> 000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_decoded2 
> __000007 __00000A __000009 __000008
          - local n : word count `varlist'
          = local n : word count year hhwt repwt cluster adjust statefip strata 
> hhincome_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 re
> pwt10 repwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 
> repwt20 repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt2
> 9 repwt30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repw
> t39 repwt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 re
> pwt49 repwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 
> repwt59 repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt6
> 8 repwt69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repw
> t78 repwt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp
> 5 repwtp6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14
>  repwtp15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwt
> p23 repwtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 re
> pwtp32 repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40
>  repwtp41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwt
> p49 repwtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 re
> pwtp58 repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66
>  repwtp67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwt
> p75 repwtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __00
> 0000 __000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_de
> coded2 __000007 __00000A __000009 __000008
          - if `n'>=`min' & `n'<=`max' { exit }
          = if 187>=1 & 187<=120000 { exit }
          --------------------------------------------------------- end unab ---
        - local vlist : list vlist - varlist
        - local var_num : list posof "`after'" in vlist
        = local var_num : list posof "inc_decoded2" in vlist
        - local fvar : word 1 of `vlist'
        = local fvar : word 1 of year hhwt repwt cluster adjust statefip strata 
> hhincome_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 re
> pwt10 repwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 
> repwt20 repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt2
> 9 repwt30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repw
> t39 repwt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 re
> pwt49 repwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 
> repwt59 repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt6
> 8 repwt69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repw
> t78 repwt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp
> 5 repwtp6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14
>  repwtp15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwt
> p23 repwtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 re
> pwtp32 repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40
>  repwtp41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwt
> p49 repwtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 re
> pwtp58 repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66
>  repwtp67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwt
> p75 repwtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __00
> 0000 __000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_de
> coded2 __000007 __00000A __000009
        - local lvar : word `var_num' of `vlist'
        = local lvar : word 183 of year hhwt repwt cluster adjust statefip strat
> a hhincome_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 
> repwt10 repwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt1
> 9 repwt20 repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repw
> t29 repwt30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 re
> pwt39 repwt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 
> repwt49 repwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt5
> 8 repwt59 repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repw
> t68 repwt69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 re
> pwt78 repwt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repw
> tp5 repwtp6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp
> 14 repwtp15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 rep
> wtp23 repwtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 
> repwtp32 repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp
> 40 repwtp41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 rep
> wtp49 repwtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 
> repwtp58 repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp
> 66 repwtp67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 rep
> wtp75 repwtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __
> 000000 __000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_
> decoded2 __000007 __00000A __000009
        - unab nlist : `fvar'-`lvar'
        = unab nlist : year-inc_decoded2
          ------------------------------------------------------- begin unab ---
          - version 6
          - gettoken user 0: 0, parse(" :")
          - gettoken colon 0: 0, parse(" :")
          - if `"`colon'"' != ":" { error 198 }
          = if `":"' != ":" { error 198 }
          - syntax [varlist(default=empty)] [, MIN(integer 1) MAX(integer 120000
> ) NAME(string)]
          - c_local `user' `varlist'
          = c_local nlist year hhwt repwt cluster adjust statefip strata hhincom
> e_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 repwt10 r
> epwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 repwt20
>  repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt29 repwt
> 30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repwt39 rep
> wt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 repwt49 r
> epwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 repwt59
>  repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt68 repwt
> 69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repwt78 rep
> wt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp5 repwt
> p6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14 repwtp
> 15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwtp23 rep
> wtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 repwtp32 
> repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40 repwtp
> 41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwtp49 rep
> wtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 repwtp58 
> repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66 repwtp
> 67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwtp75 rep
> wtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __000000 __
> 000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_decoded2
          - local n : word count `varlist'
          = local n : word count year hhwt repwt cluster adjust statefip strata 
> hhincome_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 re
> pwt10 repwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 
> repwt20 repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt2
> 9 repwt30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repw
> t39 repwt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 re
> pwt49 repwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 
> repwt59 repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt6
> 8 repwt69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repw
> t78 repwt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp
> 5 repwtp6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14
>  repwtp15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwt
> p23 repwtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 re
> pwtp32 repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40
>  repwtp41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwt
> p49 repwtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 re
> pwtp58 repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66
>  repwtp67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwt
> p75 repwtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __00
> 0000 __000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_de
> coded2
          - if `n'>=`min' & `n'<=`max' { exit }
          = if 183>=1 & 183<=120000 { exit }
          --------------------------------------------------------- end unab ---
        - local nlist : list nlist - varlist
        - _order `nlist' `varlist'
        = _order year hhwt repwt cluster adjust statefip strata hhincome_acs rep
> wt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 repwt10 repwt11 re
> pwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 repwt20 repwt21 
> repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt29 repwt30 repwt3
> 1 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repwt39 repwt40 repw
> t41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 repwt49 repwt50 re
> pwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 repwt59 repwt60 
> repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt68 repwt69 repwt7
> 0 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repwt78 repwt79 repw
> t80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp5 repwtp6 repwtp
> 7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14 repwtp15 repwtp
> 16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwtp23 repwtp24 rep
> wtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 repwtp32 repwtp33 
> repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40 repwtp41 repwtp
> 42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwtp49 repwtp50 rep
> wtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 repwtp58 repwtp59 
> repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66 repwtp67 repwtp
> 68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwtp75 repwtp76 rep
> wtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __000000 __000002 __
> 000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_decoded2 __000008
        - }
        - if ("`alphabetic'" != "" & `"`before'"' == "" & `"`after'"' == "" & "`
> first'" == "" & "`last'" == "") {
        = if ("" != "" & `""' == "" & `"inc_decoded2"' == "" & "" == "" & "" == 
> "") {
          local vlist : list sort varlist
          _order `vlist'
          }
        - if ("`sequential'" != "" & `"`before'"' == "" & `"`after'"' == "" & "`
> first'" == "" & "`last'" == "") {
        = if ("" != "" & `""' == "" & `"inc_decoded2"' == "" & "" == "" & "" == 
> "") {
          aorder `varlist'
          }
        ---------------------------------------------------------- end order ---
      - if `aschars' {
      = if 1 {
      - local dispb `"`b'"'
      = local dispb `" space"'
      - }
      - else {
        local dispb = printablebytes(`"`b'"')
        }
      - local c = plural(`bcnt',strproper("`aswhat'")) + " removed " + plural(`b
> cnt',"was","were") + `":`dispb'"'
      = local c = plural(1,strproper("character")) + " removed " + plural(1,"was
> ","were") + `": space"'
      - if "`makepct'" != "" {
      = if "" != "" {
        if `makepct' {
        qui replace `NEWVAR' = `NEWVAR'/100
        }
        }
      - qui compress `NEWVAR'
      = qui compress __000008
      - local type : type `NEWVAR'
      = local type : type __000008
      - if `flag' {
      = if 0 {
        di as txt "`var': contains nonnumeric `aswhat's" _continue
        if `"`ignore'"'!="" {
        display " not specified in " as result "ignore()" _continue
        }
        if `"`b'"'=="" {
        display "; `finalprint'" as res "`genrep'd " as txt "as " as res "`type'
> " _continue
        }
        display
        }
      - if `"`b'"' != "" {
      = if `" space"' != "" {
      - di as txt "`var': " plural(`bcnt',"`aswhat'") as res `"`dispb'"' as txt 
> " removed; `finalprint'" as res "`genrep'd " as txt "as " as res "`type'"
      = di as txt "inc_decoded2: " plural(1,"character") as res `" space"' as tx
> t " removed; " as res "replaced " as txt "as " as res "long"
inc_decoded2: character space removed; replaced as long
      - }
      - else if `"`b'"' == "" & !`flag' {
      = else if `" space"' == "" & !0 {
        di as txt "`var': all characters numeric; " "`finalprint'" as res "`genr
> ep'd " as txt "as " as res "`type'"
        }
      - if `newmiss' != 0 {
      = if 0 != 0 {
        di as txt "(`newmiss' missing " plural(`newmiss',"value") " generated)"
        }
      - label variable `NEWVAR' `"`: variable label `var''"'
      = label variable __000008 `""'
        -------------------------------------------------------- begin label ---
        - version 10.0
        - local vv : display "version " string(_caller()) ", missing:"
        - gettoken val : 0
        - if (strpos("`val'", "val") > 0 ) {
        = if (strpos("variable", "val") > 0 ) {
          gettoken val 0 : 0
          syntax anything [, nofix]
          if "`fix'" != "" {
          local fix ", nofix"
          }
          gettoken var rest : anything
          while `"`rest'"' != "" {
          gettoken lab rest : rest
          local label "`lab'"
          }
          local vlist : list anything - lab
          if "`lab'" == "." {
          local lab ""
          }
          foreach var of varlist `vlist' {
          `vv' _label `val' `var' `lab' `fix'
          }
          }
        - else {
        - `vv' _label `macval(0)'
        = version 14, missing: _label variable __000008 `""'
        - }
        ---------------------------------------------------------- end label ---
      - char `NEWVAR'[destring] `c'
      = char __000008[destring] Character removed was: space
      - char `NEWVAR'[destring_cmd] `"destring `cmdargs'"'
      = char __000008[destring_cmd] `"destring inc_decoded1 inc_decoded2 , repla
> ce   ignore(" ,$") "'
      - char `var'[destring]
      = char inc_decoded2[destring]
      - char `var'[destring_cmd]
      = char inc_decoded2[destring_cmd]
      - if "`genrep'"=="generate" {
      = if "replace"=="generate" {
        Charcopy `var' `NEWVAR'
        rename `NEWVAR' `: word `varno' of `generate''
        }
      - else {
      - char rename `var' `NEWVAR'
      = char rename inc_decoded2 __000008
      - drop `var'
      = drop inc_decoded2
      - rename `NEWVAR' `var'
      = rename __000008 inc_decoded2
        ------------------------------------------------------- begin rename ---
        - version 12
        - mata: rename_cmd("`3'")
        = mata: rename_cmd("")
        --------------------------------------------------------- end rename ---
      - }
      - }
      - foreach varmac of local tvars {
      - capture drop ``varmac''
      = capture drop __000007
      - }
      - capture drop ``varmac''
      = capture drop __000008
      - }
      - capture drop ``varmac''
      = capture drop __000009
      - }
      - capture drop ``varmac''
      = capture drop __00000A
      - }
      - capture drop ``varmac''
      = capture drop __00000B
      - }
      - }
      - }
      --------------------------------------------------------- end destring ---
    - }
    -------------------------------------------------------------- end split ---
  - gen `inc_cat_var'_lb = inc_decoded1
  = gen acs_hhinc_lb = inc_decoded1
  - gen `inc_cat_var'_ub = inc_decoded2
  = gen acs_hhinc_ub = inc_decoded2
  - di "Lower bound of `inc_cat_var'_lb and upper bound of `inc_cat_var'_ub " "c
> reated for inc_level " `inc_level' "of the original Research " "dataset income
>  range"
  = di "Lower bound of acs_hhinc_lb and upper bound of acs_hhinc_ub " "created f
> or inc_level " 6 "of the original Research " "dataset income range"
Lower bound of acs_hhinc_lb and upper bound of acs_hhinc_ub created for inc_leve
> l 6of the original Research dataset income range
  - }
  - else {
    di as error "Error: The inc_level " `inc_level' " does not fit any of the ex
> isting regular expressions " "designs. Please email the REDI program creator a
> t " "mollymkingphd@gmail.com with information about this " "error and a list o
> f all of your income levels so she " "can update the program. Thank you for yo
> ur help!"
    error 999
    }
  - local upper_bound = `inc_cat_var'_ub
  = local upper_bound = acs_hhinc_ub
  - local lower_bound = `inc_cat_var'_lb
  = local lower_bound = acs_hhinc_lb
  - capture drop inc_decoded1 inc_decoded2
  - quietly summarize if `research_year' == `y' & `inc_cat_var' == `inc_level'
  = quietly summarize if year == 2019 & acs_hhinc == 6
  - local sample_size = r(N)
  - gen `inc_cat_var'_n = `sample_size'
  = gen acs_hhinc_n = 43328
  - label variable `inc_cat_var'_n "N in income level in research dataset"
  = label variable acs_hhinc_n "N in income level in research dataset"
    ------------------------------------------------------------ begin label ---
    - version 10.0
    - local vv : display "version " string(_caller()) ", missing:"
    - gettoken val : 0
    - if (strpos("`val'", "val") > 0 ) {
    = if (strpos("variable", "val") > 0 ) {
      gettoken val 0 : 0
      syntax anything [, nofix]
      if "`fix'" != "" {
      local fix ", nofix"
      }
      gettoken var rest : anything
      while `"`rest'"' != "" {
      gettoken lab rest : rest
      local label "`lab'"
      }
      local vlist : list anything - lab
      if "`lab'" == "." {
      local lab ""
      }
      foreach var of varlist `vlist' {
      `vv' _label `val' `var' `lab' `fix'
      }
      }
    - else {
    - `vv' _label `macval(0)'
    = version 16, missing: _label variable acs_hhinc_n "N in income level in res
> earch dataset"
    - }
    -------------------------------------------------------------- end label ---
  - keep if `research_year' == `y' & `inc_cat_var' == `inc_level'
  = keep if year == 2019 & acs_hhinc == 6
(0 observations deleted)
  - tempfile premerge_`inc_level'_`y'
  = tempfile premerge_6_2019
  - save `premerge_`inc_level'_`y'', replace
  = save /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000e, repla
> ce
(note: file /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000e not
>  found)
file /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000e saved
  - di "Saved tempfile with upper and lower bounds of research data income level
> s"
Saved tempfile with upper and lower bounds of research data income levels
  - use `reference_dataset', clear
  = use ~/Documents/SocResearch/Dissertation/data/data_temp/redi13_cps_state_ca.
> dta, clear
(Streamlined CPS ASEC data, CA 2019)
  - di "Reference data open - Income type set as `inc_cat_var' income"
  = di "Reference data open - Income type set as acs_hhinc income"
Reference data open - Income type set as acs_hhinc income
  - keep if `ref_year' == `y' | `"`ref_year'"' == "nys" & `ref_income_var' >= `l
> ower_bound' & `ref_income_var' <= `upper_bound'
  = keep if year == 2019 | `"year"' == "nys" & hhincome >= 75000 & hhincome <= 1
> 00000
(0 observations deleted)
  - gen obs_no = _n
  - di "Observation number generated"
Observation number generated
  - save $temp/`ASECdata'_`ref_year'_inc`inc_level'.dta, replace
  = save ~/Documents/SocResearch/Dissertation/data/data_temp/_year_inc6.dta, rep
> lace
file ~/Documents/SocResearch/Dissertation/data/data_temp/_year_inc6.dta saved
  - di "Ref to keep income between $`lower_bound' and $`upper_bound' for `y' yea
> r."
  = di "Ref to keep income between $75000 and $100000 for 2019 year."
Ref to keep income between $75000 and $100000 for 2019 year.
  - quietly des
    -------------------------------------------------------------- begin des ---
    - local version : di "version " string(_caller()) ":"
    - `version' describe `0'
    = version 16: describe 
      ------------------------------------------------------- begin describe ---
      - version 9
      - local version : di "version " string(_caller()) ":"
      - syntax [anything] [using] [, SImple REPLACE *]
      - if ("`replace'"!="") {
      = if (""!="") {
        describe_mk `0'
        return add
        exit
        }
      - local varlist `"`anything'"'
      = local varlist `""'
      - if ("`simple'" == "") {
      = if ("" == "") {
      - `version' _describe `0'
      = version 16: _describe 
      - return add
      - }
      - else {
        if (`"`options'"' != "") {
        di as err "simple may not be combined with other options"
        exit 198
        }
        if (`"`using'"' != "") {
        qui `version' describe `varlist' `using', varlist
        if "`varlist'" == "" {
        local vars "`r(varlist)'"
        }
        else {
        local vars "`varlist'"
        }
        local wid = 2
        local n : list sizeof vars
        if `n'==0 {
        exit
        }
        if "`c(hasicu)'" == "1" {
        foreach x of local vars {
        local wid = max(`wid', udstrlen(`"`x'"'))
        }
        }
        else {
        foreach x of local vars {
        local wid = max(`wid', strlen(`"`x'"'))
        }
        }
        local wid = `wid' + 2
        local cols = int((`c(linesize)'+1)/`wid')
        if `cols' < 2 {
        foreach x of local `vars' {
        di as txt `col' `"`x'"'
        }
        exit
        }
        local lines = `n'/`cols'
        local lines = int(cond(`lines'>int(`lines'), `lines'+1, `lines'))
        forvalues i=1(1)`lines' {
        local top = min((`cols')*`lines'+`i', `n')
        local col = 1
        forvalues j=`i'(`lines')`top' {
        local x : word `j' of `vars'
        di as txt _column(`col') "`x'" _c
        local col = `col' + `wid'
        }
        di as txt
        }
        qui `version' describe `varlist' `using', short
        return add
        }
        else {
        ds `varlist'
        qui `version' _describe `varlist', short
        return add
        }
        }
      --------------------------------------------------------- end describe ---
    ---------------------------------------------------------------- end des ---
  - local N = r(N)
  - clear
    ------------------------------------------------------------ begin clear ---
    - if _caller() < 10 {
      _clear_9 `0'
      exit
      }
    - version 10
    - syntax [anything]
    - tokenize `anything'
    = tokenize 
    - if `"`2'"' != "" {
    = if `""' != "" {
      display as err "`2' not allowed"
      exit 198
      }
    - if "`1'"=="" {
    = if ""=="" {
    - drop _all
    - label drop _all
      ---------------------------------------------------------- begin label ---
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {
      = if (strpos("drop", "val") > 0 ) {
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {
        local fix ", nofix"
        }
        gettoken var rest : anything
        while `"`rest'"' != "" {
        gettoken lab rest : rest
        local label "`lab'"
        }
        local vlist : list anything - lab
        if "`lab'" == "." {
        local lab ""
        }
        foreach var of varlist `vlist' {
        `vv' _label `val' `var' `lab' `fix'
        }
        }
      - else {
      - `vv' _label `macval(0)'
      = version 10, missing: _label drop _all
      - }
      ------------------------------------------------------------ end label ---
    - }
    - else if "`1'"=="frames" {
    = else if ""=="frames" {
      frames reset
      }
    - else if "`1'"=="mata" {
    = else if ""=="mata" {
      mata: mata clear
      }
    - else if "`1'"=="python" {
    = else if ""=="python" {
      python clear
      }
    - else if inlist("`1'", "results", "matrix") {
    = else if inlist("", "results", "matrix") {
      return clear
      clearreturn
      ereturn clear
      sreturn clear
      _return drop _all
      if ("`1'" == "matrix") {
      matrix drop _all
      _est drop _all
      }
      }
    - else if "`1'"=="programs" {
    = else if ""=="programs" {
      program drop _all
      }
    - else if "`1'"=="ado" {
    = else if ""=="ado" {
      program drop _allado
      }
    - else if "`1'"=="rngstream" | "`1'"=="rngstreams" {
    = else if ""=="rngstream" | ""=="rngstreams" {
      set rngstream clear
      }
    - else if "`1'"=="*" | "`1'"=="all" {
    = else if ""=="*" | ""=="all" {
      capture mata: st_local("semmods", strofreal(sg__global.hasmodels()))
      capture
      if (0`semmods') {
      display as err "-clear all- not allowed while an SEM Builder is open"
      exit 1
      }
      drop _all
      frames reset
      label drop _all
      matrix drop _all
      scalar drop _all
      constraint drop _all
      eq drop _all
      file close _all
      postutil clear
      _return drop _all
      discard
      program drop _all
      timer clear
      mata: _st__put_cmd_clear()
      mata: mata clear
      python clear
      }
    - else {
      display as err "`1' not allowed"
      exit 198
      }
    -------------------------------------------------------------- end clear ---
  - set obs `sample_size'
  = set obs 43328
number of observations (_N) was 0, now 43,328
  - gen obs_no = runiformint(1, `N')
  = gen obs_no = runiformint(1, 6260)
  - merge m:1 obs_no using $temp/`ASECdata'_`ref_year'_inc`inc_level'.dta, keep(
> match) nogenerate
  = merge m:1 obs_no using ~/Documents/SocResearch/Dissertation/data/data_temp/_
> year_inc6.dta, keep(match) nogenerate
    ------------------------------------------------------------ begin merge ---
    - version 11
    - gettoken mtype 0 : 0, parse(" ,")
    - if (!strpos("`mtype'", ":") & "`mtype'"!="") {
    = if (!strpos("m:1", ":") & "m:1"!="") {
      if (_caller()>=11) {
      di as smcl as txt "{p}"
      di as smcl "(note: you are using old"
      di as smcl "{bf:merge} syntax; see"
      di as smcl "{bf:{help merge:[D] merge}} for new syntax)"
      di as smcl "{p_end}"
      }
      merge_10 `mtype' `0'
      exit
      }
    - local origmtype `"`mtype'"'
    = local origmtype `"m:1"'
    - mata: map_mtype(`"mtype"')
    - gettoken token : 0, parse(" ,")
    - if ("`token'"=="_n") {
    = if ("obs_no"=="_n") {
      if ("`mtype'"!="1:1") {
      error_seq_not11 "`mtype'" "`origmtype'"
      }
      gettoken token 0 : 0, parse(" ,")
      local mtype "_n"
      }
    - syntax [varlist(default=none)] using/ [, ASSERT(string) DEBUG GENerate(nam
> e) FORCE KEEP(string) KEEPUSing(string) noLabels NOGENerate noNOTEs REPLACE no
> REPort SORTED UPDATE ]
    - if ("`mtype'"!="_n") {
    = if ("m:1"!="_n") {
    - local origmtype `"`mtype'"'
    = local origmtype `"m:1"'
    - mata: map_mtype(`"mtype"')
    - if ("`varlist'"=="") {
    = if ("obs_no"=="") {
      error_mat_varlist "`mtype'" "`origmtype'"
      }
    - }
    - else {
      if ("`mtype'"=="_n") {
      if ("`varlist'"!="") {
      error_seq_varlist
      }
      }
      }
    - mata: fullfilename("using", "usingfull", "using")
    - mata: resultlist("assert")
    - mata: resultlist("keep")
    - if ("`generate'"!="") {
    = if (""!="") {
      if ("`nogenerate'"!="") {
      di as smcl err "{p}"
      di as smcl "options -generate()- and -nogenerate-"
      di as smcl "may not be specified together."
      di as smcl err "{p_end}"
      }
      confirm new var `generate'
      }
    - if ("`replace'"!="") {
    = if (""!="") {
      if ("`update'"=="") {
      error_replace
      }
      }
    - if ("`sorted'"=="" & "`mtype'"!="_n") {
    = if (""=="" & "m:1"!="_n") {
    - local sortedby : sortedby
    - checksort "`sortedby'" "`varlist'"
    = checksort "" "obs_no"
      ------------------------------------------------ begin merge.checksort ---
      - args is should
      - local i 0
      - return scalar sorted = 1
      - foreach v1 of local should {
      - local ++i
      - local v2 : word `i' of `is'
      = local v2 : word 1 of 
      - if ("`v1'"!="`v2'") {
      = if ("obs_no"!="") {
      - return scalar sorted = 0
      - continue, break
        }
        }
      -------------------------------------------------- end merge.checksort ---
    - if (!r(sorted)) {
    - sort `varlist'
    = sort obs_no
    - }
    - quietly describe using "`using'", varlist short
    = quietly describe using "~/Documents/SocResearch/Dissertation/data/data_tem
> p/_year_inc6.dta", varlist short
      ------------------------------------------------------- begin describe ---
      - version 9
      - local version : di "version " string(_caller()) ":"
      - syntax [anything] [using] [, SImple REPLACE *]
      - if ("`replace'"!="") {
      = if (""!="") {
        describe_mk `0'
        return add
        exit
        }
      - local varlist `"`anything'"'
      = local varlist `""'
      - if ("`simple'" == "") {
      = if ("" == "") {
      - `version' _describe `0'
      = version 11: _describe using "~/Documents/SocResearch/Dissertation/data/d
> ata_temp/_year_inc6.dta", varlist short
      - return add
      - }
      - else {
        if (`"`options'"' != "") {
        di as err "simple may not be combined with other options"
        exit 198
        }
        if (`"`using'"' != "") {
        qui `version' describe `varlist' `using', varlist
        if "`varlist'" == "" {
        local vars "`r(varlist)'"
        }
        else {
        local vars "`varlist'"
        }
        local wid = 2
        local n : list sizeof vars
        if `n'==0 {
        exit
        }
        if "`c(hasicu)'" == "1" {
        foreach x of local vars {
        local wid = max(`wid', udstrlen(`"`x'"'))
        }
        }
        else {
        foreach x of local vars {
        local wid = max(`wid', strlen(`"`x'"'))
        }
        }
        local wid = `wid' + 2
        local cols = int((`c(linesize)'+1)/`wid')
        if `cols' < 2 {
        foreach x of local `vars' {
        di as txt `col' `"`x'"'
        }
        exit
        }
        local lines = `n'/`cols'
        local lines = int(cond(`lines'>int(`lines'), `lines'+1, `lines'))
        forvalues i=1(1)`lines' {
        local top = min((`cols')*`lines'+`i', `n')
        local col = 1
        forvalues j=`i'(`lines')`top' {
        local x : word `j' of `vars'
        di as txt _column(`col') "`x'" _c
        local col = `col' + `wid'
        }
        di as txt
        }
        qui `version' describe `varlist' `using', short
        return add
        }
        else {
        ds `varlist'
        qui `version' _describe `varlist', short
        return add
        }
        }
      --------------------------------------------------------- end describe ---
    - local sortedby "`r(sortlist)'"
    = local sortedby ""
    - checksort "`sortedby'" "`varlist'"
    = checksort "" "obs_no"
      ------------------------------------------------ begin merge.checksort ---
      - args is should
      - local i 0
      - return scalar sorted = 1
      - foreach v1 of local should {
      - local ++i
      - local v2 : word `i' of `is'
      = local v2 : word 1 of 
      - if ("`v1'"!="`v2'") {
      = if ("obs_no"!="") {
      - return scalar sorted = 0
      - continue, break
        }
        }
      -------------------------------------------------- end merge.checksort ---
    - if (!r(sorted)) {
    - preserve
    - qui use "`using'", clear
    = qui use "~/Documents/SocResearch/Dissertation/data/data_temp/_year_inc6.dt
> a", clear
    - sort `varlist'
    = sort obs_no
    - tempfile using
    - qui save "`using'", replace
    = qui save "/var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000g
> ", replace
    - restore
    - }
    - }
    - if ("`nogenerate'"!="") {
    = if ("nogenerate"!="") {
    - tempvar mergevar
    - local mergevaristemp 1
    - }
    - else {
      local mergevar = cond("`generate'"!="", "`generate'", "_merge")
      local mergevaristemp 0
      }
    - local options `update' `replace' `notes' `labels' _merge(`mergevar') `forc
> e'
    = local options     _merge(__000000) 
    - if (bsubstr("`mtype'", 1, 1)=="1") {
    = if (bsubstr("m:1", 1, 1)=="1") {
      local options `options' uniqmaster
      }
    - if (bsubstr("`mtype'", 3, 1)=="1") {
    = if (bsubstr("m:1", 3, 1)=="1") {
    - local options `options' uniqusing
    = local options _merge(__000000) uniqusing
    - }
    - if ("`keepusing'"!="") {
    = if (""!="") {
      local options `options' keep(`keepusing')
      }
    - if ("`keep'" !="" & !strpos("`keep'" , "2")) {
    = if ("3" !="" & !strpos("3" , "2")) {
    - local options `options' nokeep
    = local options _merge(__000000) uniqusing nokeep
    - }
    - if (_caller() > 15) {
    - local version : di "version " string(_caller()) ": "
    - }
    - local _merge `"`version'_merge `varlist' using "`using'", nowarn"'
    = local _merge `"version 16: _merge obs_no using "/var/folders/rp/96l526kj7y
> bdjr5vs5bqqjw80000gn/T//S_20065.00000g", nowarn"'
    - local _merge `"`_merge' `options' tabulate(mresults)"'
    = local _merge `"version 16: _merge obs_no using "/var/folders/rp/96l526kj7y
> bdjr5vs5bqqjw80000gn/T//S_20065.00000g", nowarn _merge(__000000) uniqusing nok
> eep tabulate(mresults)"'
    - if ("`debug'"!="") {
    = if (""!="") {
      di as txt _n "command is"
      di `"`_merge'"' _n
      }
    - `_merge'
    = version 16: _merge obs_no using "/var/folders/rp/96l526kj7ybdjr5vs5bqqjw80
> 000gn/T//S_20065.00000g", nowarn _merge(__000000) uniqusing nokeep tabulate(mr
> esults)
    - if (!`mergevaristemp') {
    = if (!1) {
      capture label list _merge
      if (_rc) {
      label define _merge 1 "master only (1)" 2 "using only (2)" 3 "matched (3)"
>  4 "missing updated (4)" 5 "nonmissing conflict (5)"
      }
      label values `mergevar' _merge
      }
    - if ("`assert'"!="") {
    = if (""!="") {
      if (_caller() < 13) {
      buildexpr expr : `mergevar' "`assert'"
      capture assert `expr'
      if (_rc) {
      error_assert `mergevar' "`assert'"
      }
      }
      else {
      capture checkmresults "`mresults'" "`assert'"
      if (_rc) {
      error_assert `mergevar' "`assert'"
      }
      }
      }
    - if ("`keep'"!="") {
    = if ("3"!="") {
    - buildexpr expr : `mergevar' "`keep'"
    = buildexpr expr : __000000 "3"
      ------------------------------------------------ begin merge.buildexpr ---
      - args userexpr colon varname numbers
      - gettoken first numbers : numbers
      - local list `varname'==`first'
      = local list __000000==3
      - foreach el of local numbers {
        local list `list' | `varname'==`el'
        }
      - c_local `userexpr' "(`list')"
      = c_local expr "(__000000==3)"
      -------------------------------------------------- end merge.buildexpr ---
    - quietly keep if `expr'
    = quietly keep if (__000000==3)
    - }
    - if ("`mtype'"=="1:1") {
    = if ("m:1"=="1:1") {
      qui count if `mergevar'==2
      if (r(N)==0) {
      sort `varlist'
      }
      }
    - if (c(noisily) & "`report'"=="") {
    = if (c(noisily) & ""=="") {
    - local isupdate = ("`replace'"!="" | "`update'"!="")
    = local isupdate = (""!="" | ""!="")
    - present_table `isupdate' `mergevar' `mergevaristemp'
    = present_table 0 __000000 1
      -------------------------------------------- begin merge.present_table ---
      - args isupdate mergevar mergevaristemp
      - if (!`mergevaristemp') {
      = if (!1) {
        local v1 "(`mergevar'==1)"
        local v2 "(`mergevar'==2)"
        local v3 "(`mergevar'==3)"
        local v4 "(`mergevar'==4)"
        local v5 "(`mergevar'==5)"
        }
      - quietly {
      - count if `mergevar'==1
      = count if __000000==1
      - local m1 = r(N)
      - count if `mergevar'==2
      = count if __000000==2
      - local m2 = r(N)
      - if (`isupdate') {
      = if (0) {
        count if `mergevar'==3
        local m3 = r(N)
        count if `mergevar'==4
        local m4 = r(N)
        local m5 = _N - `m1' - `m2' - `m3' - `m4'
        }
      - else {
      - local m3 = _N - `m1' - `m2'
      = local m3 = _N - 0 - 0
      - }
      - }
      - di

      - di as smcl as txt _col(5) "Result" _col(38) "# of obs."
    Result                           # of obs.
      - di as smcl as txt _col(5) "{hline 41}"
    -----------------------------------------
      - di as smcl as txt _col(5) "not matched" _col(30) as res %16.0fc (`m1'+`m
> 2')
      = di as smcl as txt _col(5) "not matched" _col(30) as res %16.0fc (0+0)
    not matched                             0
      - if (`m1'|`m2') {
      = if (0|0) {
        di as smcl as txt _col(9) "from master" _col(30) as res %16.0fc `m1' as 
> txt "  `v1'"
        di as smcl as txt _col(9) "from using" _col(30) as res %16.0fc `m2' as t
> xt "  `v2'"
        di
        }
      - if (!`isupdate') {
      = if (!0) {
      - di as smcl as txt _col(5) "matched" _col(30) as res %16.0fc `m3' as txt 
> "  `v3'"
      = di as smcl as txt _col(5) "matched" _col(30) as res %16.0fc 43328 as txt
>  "  "
    matched                            43,328  
      - }
      - else {
        if (`m1'==0 & `m2'==0) {
        di
        }
        di as smcl as txt _col(5) "matched" _col(30) as res %16.0fc (`m3'+`m4'+`
> m5')
        di as smcl as txt _col(9) "not updated" _col(30) as res %16.0fc `m3' as 
> txt "  `v3'"
        di as smcl as txt _col(9) "missing updated" _col(30) as res %16.0fc `m4'
>  as txt "  `v4'"
        di as smcl as txt _col(9) "nonmissing conflict" _col(30) as res %16.0fc 
> `m5' as txt "  `v5'"
        }
      - di as smcl as txt _col(5) "{hline 41}"
    -----------------------------------------
      ---------------------------------------------- end merge.present_table ---
    - }
    -------------------------------------------------------------- end merge ---
  - save $temp/`ASECdata'_`ref_year'_inc`inc_level'.dta, replace
  = save ~/Documents/SocResearch/Dissertation/data/data_temp/_year_inc6.dta, rep
> lace
file ~/Documents/SocResearch/Dissertation/data/data_temp/_year_inc6.dta saved
  - gen id = _n
  - merge 1:1 id using `premerge_`inc_level'_`y''
  = merge 1:1 id using /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065
> .00000e
    ------------------------------------------------------------ begin merge ---
    - version 11
    - gettoken mtype 0 : 0, parse(" ,")
    - if (!strpos("`mtype'", ":") & "`mtype'"!="") {
    = if (!strpos("1:1", ":") & "1:1"!="") {
      if (_caller()>=11) {
      di as smcl as txt "{p}"
      di as smcl "(note: you are using old"
      di as smcl "{bf:merge} syntax; see"
      di as smcl "{bf:{help merge:[D] merge}} for new syntax)"
      di as smcl "{p_end}"
      }
      merge_10 `mtype' `0'
      exit
      }
    - local origmtype `"`mtype'"'
    = local origmtype `"1:1"'
    - mata: map_mtype(`"mtype"')
    - gettoken token : 0, parse(" ,")
    - if ("`token'"=="_n") {
    = if ("id"=="_n") {
      if ("`mtype'"!="1:1") {
      error_seq_not11 "`mtype'" "`origmtype'"
      }
      gettoken token 0 : 0, parse(" ,")
      local mtype "_n"
      }
    - syntax [varlist(default=none)] using/ [, ASSERT(string) DEBUG GENerate(nam
> e) FORCE KEEP(string) KEEPUSing(string) noLabels NOGENerate noNOTEs REPLACE no
> REPort SORTED UPDATE ]
    - if ("`mtype'"!="_n") {
    = if ("1:1"!="_n") {
    - local origmtype `"`mtype'"'
    = local origmtype `"1:1"'
    - mata: map_mtype(`"mtype"')
    - if ("`varlist'"=="") {
    = if ("id"=="") {
      error_mat_varlist "`mtype'" "`origmtype'"
      }
    - }
    - else {
      if ("`mtype'"=="_n") {
      if ("`varlist'"!="") {
      error_seq_varlist
      }
      }
      }
    - mata: fullfilename("using", "usingfull", "using")
    - mata: resultlist("assert")
    - mata: resultlist("keep")
    - if ("`generate'"!="") {
    = if (""!="") {
      if ("`nogenerate'"!="") {
      di as smcl err "{p}"
      di as smcl "options -generate()- and -nogenerate-"
      di as smcl "may not be specified together."
      di as smcl err "{p_end}"
      }
      confirm new var `generate'
      }
    - if ("`replace'"!="") {
    = if (""!="") {
      if ("`update'"=="") {
      error_replace
      }
      }
    - if ("`sorted'"=="" & "`mtype'"!="_n") {
    = if (""=="" & "1:1"!="_n") {
    - local sortedby : sortedby
    - checksort "`sortedby'" "`varlist'"
    = checksort "" "id"
      ------------------------------------------------ begin merge.checksort ---
      - args is should
      - local i 0
      - return scalar sorted = 1
      - foreach v1 of local should {
      - local ++i
      - local v2 : word `i' of `is'
      = local v2 : word 1 of 
      - if ("`v1'"!="`v2'") {
      = if ("id"!="") {
      - return scalar sorted = 0
      - continue, break
        }
        }
      -------------------------------------------------- end merge.checksort ---
    - if (!r(sorted)) {
    - sort `varlist'
    = sort id
    - }
    - quietly describe using "`using'", varlist short
    = quietly describe using "/var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//
> S_20065.00000e", varlist short
      ------------------------------------------------------- begin describe ---
      - version 9
      - local version : di "version " string(_caller()) ":"
      - syntax [anything] [using] [, SImple REPLACE *]
      - if ("`replace'"!="") {
      = if (""!="") {
        describe_mk `0'
        return add
        exit
        }
      - local varlist `"`anything'"'
      = local varlist `""'
      - if ("`simple'" == "") {
      = if ("" == "") {
      - `version' _describe `0'
      = version 11: _describe using "/var/folders/rp/96l526kj7ybdjr5vs5bqqjw8000
> 0gn/T//S_20065.00000e", varlist short
      - return add
      - }
      - else {
        if (`"`options'"' != "") {
        di as err "simple may not be combined with other options"
        exit 198
        }
        if (`"`using'"' != "") {
        qui `version' describe `varlist' `using', varlist
        if "`varlist'" == "" {
        local vars "`r(varlist)'"
        }
        else {
        local vars "`varlist'"
        }
        local wid = 2
        local n : list sizeof vars
        if `n'==0 {
        exit
        }
        if "`c(hasicu)'" == "1" {
        foreach x of local vars {
        local wid = max(`wid', udstrlen(`"`x'"'))
        }
        }
        else {
        foreach x of local vars {
        local wid = max(`wid', strlen(`"`x'"'))
        }
        }
        local wid = `wid' + 2
        local cols = int((`c(linesize)'+1)/`wid')
        if `cols' < 2 {
        foreach x of local `vars' {
        di as txt `col' `"`x'"'
        }
        exit
        }
        local lines = `n'/`cols'
        local lines = int(cond(`lines'>int(`lines'), `lines'+1, `lines'))
        forvalues i=1(1)`lines' {
        local top = min((`cols')*`lines'+`i', `n')
        local col = 1
        forvalues j=`i'(`lines')`top' {
        local x : word `j' of `vars'
        di as txt _column(`col') "`x'" _c
        local col = `col' + `wid'
        }
        di as txt
        }
        qui `version' describe `varlist' `using', short
        return add
        }
        else {
        ds `varlist'
        qui `version' _describe `varlist', short
        return add
        }
        }
      --------------------------------------------------------- end describe ---
    - local sortedby "`r(sortlist)'"
    = local sortedby "year acs_hhinc"
    - checksort "`sortedby'" "`varlist'"
    = checksort "year acs_hhinc" "id"
      ------------------------------------------------ begin merge.checksort ---
      - args is should
      - local i 0
      - return scalar sorted = 1
      - foreach v1 of local should {
      - local ++i
      - local v2 : word `i' of `is'
      = local v2 : word 1 of year acs_hhinc
      - if ("`v1'"!="`v2'") {
      = if ("id"!="year") {
      - return scalar sorted = 0
      - continue, break
        }
        }
      -------------------------------------------------- end merge.checksort ---
    - if (!r(sorted)) {
    - preserve
    - qui use "`using'", clear
    = qui use "/var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000e"
> , clear
    - sort `varlist'
    = sort id
    - tempfile using
    - qui save "`using'", replace
    = qui save "/var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000g
> ", replace
    - restore
    - }
    - }
    - if ("`nogenerate'"!="") {
    = if (""!="") {
      tempvar mergevar
      local mergevaristemp 1
      }
    - else {
    - local mergevar = cond("`generate'"!="", "`generate'", "_merge")
    = local mergevar = cond(""!="", "", "_merge")
    - local mergevaristemp 0
    - }
    - local options `update' `replace' `notes' `labels' _merge(`mergevar') `forc
> e'
    = local options     _merge(_merge) 
    - if (bsubstr("`mtype'", 1, 1)=="1") {
    = if (bsubstr("1:1", 1, 1)=="1") {
    - local options `options' uniqmaster
    = local options _merge(_merge) uniqmaster
    - }
    - if (bsubstr("`mtype'", 3, 1)=="1") {
    = if (bsubstr("1:1", 3, 1)=="1") {
    - local options `options' uniqusing
    = local options _merge(_merge) uniqmaster uniqusing
    - }
    - if ("`keepusing'"!="") {
    = if (""!="") {
      local options `options' keep(`keepusing')
      }
    - if ("`keep'" !="" & !strpos("`keep'" , "2")) {
    = if ("" !="" & !strpos("" , "2")) {
      local options `options' nokeep
      }
    - if (_caller() > 15) {
    - local version : di "version " string(_caller()) ": "
    - }
    - local _merge `"`version'_merge `varlist' using "`using'", nowarn"'
    = local _merge `"version 16: _merge id using "/var/folders/rp/96l526kj7ybdjr
> 5vs5bqqjw80000gn/T//S_20065.00000g", nowarn"'
    - local _merge `"`_merge' `options' tabulate(mresults)"'
    = local _merge `"version 16: _merge id using "/var/folders/rp/96l526kj7ybdjr
> 5vs5bqqjw80000gn/T//S_20065.00000g", nowarn _merge(_merge) uniqmaster uniqusin
> g tabulate(mresults)"'
    - if ("`debug'"!="") {
    = if (""!="") {
      di as txt _n "command is"
      di `"`_merge'"' _n
      }
    - `_merge'
    = version 16: _merge id using "/var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000g
> n/T//S_20065.00000g", nowarn _merge(_merge) uniqmaster uniqusing tabulate(mres
> ults)
(label statefip_lbl already defined)
    - if (!`mergevaristemp') {
    = if (!0) {
    - capture label list _merge
      ---------------------------------------------------------- begin label ---
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {
      = if (strpos("list", "val") > 0 ) {
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {
        local fix ", nofix"
        }
        gettoken var rest : anything
        while `"`rest'"' != "" {
        gettoken lab rest : rest
        local label "`lab'"
        }
        local vlist : list anything - lab
        if "`lab'" == "." {
        local lab ""
        }
        foreach var of varlist `vlist' {
        `vv' _label `val' `var' `lab' `fix'
        }
        }
      - else {
      - `vv' _label `macval(0)'
      = version 11, missing: _label list _merge
        }
      ------------------------------------------------------------ end label ---
    - if (_rc) {
    - label define _merge 1 "master only (1)" 2 "using only (2)" 3 "matched (3)"
>  4 "missing updated (4)" 5 "nonmissing conflict (5)"
      ---------------------------------------------------------- begin label ---
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {
      = if (strpos("define", "val") > 0 ) {
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {
        local fix ", nofix"
        }
        gettoken var rest : anything
        while `"`rest'"' != "" {
        gettoken lab rest : rest
        local label "`lab'"
        }
        local vlist : list anything - lab
        if "`lab'" == "." {
        local lab ""
        }
        foreach var of varlist `vlist' {
        `vv' _label `val' `var' `lab' `fix'
        }
        }
      - else {
      - `vv' _label `macval(0)'
      = version 11, missing: _label define _merge 1 "master only (1)" 2 "using o
> nly (2)" 3 "matched (3)" 4 "missing updated (4)" 5 "nonmissing conflict (5)"
      - }
      ------------------------------------------------------------ end label ---
    - }
    - label values `mergevar' _merge
    = label values _merge _merge
      ---------------------------------------------------------- begin label ---
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {
      = if (strpos("values", "val") > 0 ) {
      - gettoken val 0 : 0
      - syntax anything [, nofix]
      - if "`fix'" != "" {
      = if "" != "" {
        local fix ", nofix"
        }
      - gettoken var rest : anything
      - while `"`rest'"' != "" {
      = while `" _merge"' != "" {
      - gettoken lab rest : rest
      - local label "`lab'"
      = local label "_merge"
      - }
      - while `"`rest'"' != "" {
      = while `""' != "" {
        gettoken lab rest : rest
        local label "`lab'"
        }
      - local vlist : list anything - lab
      - if "`lab'" == "." {
      = if "_merge" == "." {
        local lab ""
        }
      - foreach var of varlist `vlist' {
      = foreach var of varlist _merge {
      - `vv' _label `val' `var' `lab' `fix'
      = version 11, missing: _label values _merge _merge 
      - }
      - }
      - else {
        `vv' _label `macval(0)'
        }
      ------------------------------------------------------------ end label ---
    - }
    - if ("`assert'"!="") {
    = if (""!="") {
      if (_caller() < 13) {
      buildexpr expr : `mergevar' "`assert'"
      capture assert `expr'
      if (_rc) {
      error_assert `mergevar' "`assert'"
      }
      }
      else {
      capture checkmresults "`mresults'" "`assert'"
      if (_rc) {
      error_assert `mergevar' "`assert'"
      }
      }
      }
    - if ("`keep'"!="") {
    = if (""!="") {
      buildexpr expr : `mergevar' "`keep'"
      quietly keep if `expr'
      }
    - if ("`mtype'"=="1:1") {
    = if ("1:1"=="1:1") {
    - qui count if `mergevar'==2
    = qui count if _merge==2
    - if (r(N)==0) {
    - sort `varlist'
    = sort id
    - }
    - }
    - if (c(noisily) & "`report'"=="") {
    = if (c(noisily) & ""=="") {
    - local isupdate = ("`replace'"!="" | "`update'"!="")
    = local isupdate = (""!="" | ""!="")
    - present_table `isupdate' `mergevar' `mergevaristemp'
    = present_table 0 _merge 0
      -------------------------------------------- begin merge.present_table ---
      - args isupdate mergevar mergevaristemp
      - if (!`mergevaristemp') {
      = if (!0) {
      - local v1 "(`mergevar'==1)"
      = local v1 "(_merge==1)"
      - local v2 "(`mergevar'==2)"
      = local v2 "(_merge==2)"
      - local v3 "(`mergevar'==3)"
      = local v3 "(_merge==3)"
      - local v4 "(`mergevar'==4)"
      = local v4 "(_merge==4)"
      - local v5 "(`mergevar'==5)"
      = local v5 "(_merge==5)"
      - }
      - quietly {
      - count if `mergevar'==1
      = count if _merge==1
      - local m1 = r(N)
      - count if `mergevar'==2
      = count if _merge==2
      - local m2 = r(N)
      - if (`isupdate') {
      = if (0) {
        count if `mergevar'==3
        local m3 = r(N)
        count if `mergevar'==4
        local m4 = r(N)
        local m5 = _N - `m1' - `m2' - `m3' - `m4'
        }
      - else {
      - local m3 = _N - `m1' - `m2'
      = local m3 = _N - 0 - 0
      - }
      - }
      - di

      - di as smcl as txt _col(5) "Result" _col(38) "# of obs."
    Result                           # of obs.
      - di as smcl as txt _col(5) "{hline 41}"
    -----------------------------------------
      - di as smcl as txt _col(5) "not matched" _col(30) as res %16.0fc (`m1'+`m
> 2')
      = di as smcl as txt _col(5) "not matched" _col(30) as res %16.0fc (0+0)
    not matched                             0
      - if (`m1'|`m2') {
      = if (0|0) {
        di as smcl as txt _col(9) "from master" _col(30) as res %16.0fc `m1' as 
> txt "  `v1'"
        di as smcl as txt _col(9) "from using" _col(30) as res %16.0fc `m2' as t
> xt "  `v2'"
        di
        }
      - if (!`isupdate') {
      = if (!0) {
      - di as smcl as txt _col(5) "matched" _col(30) as res %16.0fc `m3' as txt 
> "  `v3'"
      = di as smcl as txt _col(5) "matched" _col(30) as res %16.0fc 43328 as txt
>  "  (_merge==3)"
    matched                            43,328  (_merge==3)
      - }
      - else {
        if (`m1'==0 & `m2'==0) {
        di
        }
        di as smcl as txt _col(5) "matched" _col(30) as res %16.0fc (`m3'+`m4'+`
> m5')
        di as smcl as txt _col(9) "not updated" _col(30) as res %16.0fc `m3' as 
> txt "  `v3'"
        di as smcl as txt _col(9) "missing updated" _col(30) as res %16.0fc `m4'
>  as txt "  `v4'"
        di as smcl as txt _col(9) "nonmissing conflict" _col(30) as res %16.0fc 
> `m5' as txt "  `v5'"
        }
      - di as smcl as txt _col(5) "{hline 41}"
    -----------------------------------------
      ---------------------------------------------- end merge.present_table ---
    - }
    -------------------------------------------------------------- end merge ---
  - generate category_n = .
(43,328 missing values generated)
  - replace category_n = `N'
  = replace category_n = 6260
(43,328 real changes made)
  - label var category_n "N respondents in income level in post-merge dataset'"
    ------------------------------------------------------------ begin label ---
    - version 10.0
    - local vv : display "version " string(_caller()) ", missing:"
    - gettoken val : 0
    - if (strpos("`val'", "val") > 0 ) {
    = if (strpos("var", "val") > 0 ) {
      gettoken val 0 : 0
      syntax anything [, nofix]
      if "`fix'" != "" {
      local fix ", nofix"
      }
      gettoken var rest : anything
      while `"`rest'"' != "" {
      gettoken lab rest : rest
      local label "`lab'"
      }
      local vlist : list anything - lab
      if "`lab'" == "." {
      local lab ""
      }
      foreach var of varlist `vlist' {
      `vv' _label `val' `var' `lab' `fix'
      }
      }
    - else {
    - `vv' _label `macval(0)'
    = version 16, missing: _label var category_n "N respondents in income level 
> in post-merge dataset'"
    - }
    -------------------------------------------------------------- end label ---
  - di "Merged ASEC values with original Research dataset for inc_level " `inc_l
> evel' " ($`lower_bound'-`upper_bound') and year `y'."
  = di "Merged ASEC values with original Research dataset for inc_level " 6 " ($
> 75000-100000) and year 2019."
Merged ASEC values with original Research dataset for inc_level 6 ($75000-100000
> ) and year 2019.
  - tempfile temp_`inc_level'_`y'
  = tempfile temp_6_2019
  - save `temp_`inc_level'_`y'', replace
  = save /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000f, repla
> ce
(note: file /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000f not
>  found)
file /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000f saved
  - di "Saved REDI data (with continuous data) for inc_level " `inc_level' " ($`
> lower_bound'-`upper_bound') and year `y' in file"
  = di "Saved REDI data (with continuous data) for inc_level " 6 " ($75000-10000
> 0) and year 2019 in file"
Saved REDI data (with continuous data) for inc_level 6 ($75000-100000) and year 
> 2019 in file
  - }
  - use `working_regex', clear
  = use /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.000003, clear
(Streamlined ACS data, 2019)
  - keep if `inc_cat_var' == `inc_level'
  = keep if acs_hhinc == 7
(255,098 observations deleted)
  - di "The current inc_level is: " `inc_level'
  = di "The current inc_level is: " 7
The current inc_level is: 7
  - if regexm(inc_decoded, "^[a-z/A-Z]+") == 1 {
    di "The inc_level " `inc_level' " is at the lowest end of the " "original Re
> search dataset income range"
    destring inc_decoded, ignore("Less than LESS THAN Under,$ ") generate(`inc_c
> at_var'_ub)
    gen `inc_cat_var'_lb = -100000
    di "Lower bound of -100,000 created for inc_level " `inc_level'
    }
  - else if regexm(inc_decoded, "[a-z/A-Z]+$") == 1 {
    di "The inc_level " `inc_level' " is at the highest end of the " "original R
> esearch dataset income range"
    destring inc_decoded, ignore("and over or over,$ or more OR MORE") generate(
> `inc_cat_var'_lb)
    gen `inc_cat_var'_ub = 999999
    di "Upper bound of 999999 created for inc_level " `inc_level'
    }
  - else if regexm(inc_decoded, "[.][a-z]") == 1 {
    di "The inc_level " `inc_level' " is all missing"
    gen `inc_cat_var'_lb = .
    gen `inc_cat_var'_ub = .
    di "Lower and upper bound of . created for inc_level " `inc_level'
    }
  - else if regexm(inc_decoded, "[0-9]+$") == 1 {
  - di "The inc_level " `inc_level' " has a lower and an upper level"
  = di "The inc_level " 7 " has a lower and an upper level"
The inc_level 7 has a lower and an upper level
  - split inc_decoded, parse("-" "to" "-" "to under" "to less than" "UP TO" "but
>  less than") ignore(" ,$") destring
    ------------------------------------------------------------ begin split ---
    - version 8
    - syntax varname(str) [if] [in] [, Generate(str) noTrim Parse(str asis) DEST
> RING force float Ignore(string asis) percent Limit(numlist int >0 max=1) ]
    - local verpre : display "version " %4.1f _caller() ":"
    - if "`destring'"=="" {
    = if "destring"=="" {
      foreach option in force float ignore percent {
      if `"``option''"'!="" {
      display as error "may not specify `option' without specifying destring"
      exit 198
      }
      }
      }
    - else {
    - if `"`ignore'"'!="" {
    = if `"" ,$""'!="" {
    - if _caller() >= 14 {
    - if ustrfindfirst(`"`ignore'"',",") & !ustrfindfirst(`"`ignore'"',`"""') {
    = if ustrfindfirst(`"" ,$""',",") & !ustrfindfirst(`"" ,$""',`"""') {
      display as error `"ignore string must be enclosed with quotes to ignore co
> mmas or use options"'
      exit 198
      }
    - }
    - `verpre' _parse_ignore `ignore'
    = version 16.0: _parse_ignore " ,$"
      -------------------------------------------------- begin _parse_ignore ---
      - version 14
      - sreturn clear
      - if _caller() < 14 {
        capture syntax [anything] , [ASChars] [ASBytes] [illegal]
        if !_rc {
        if "`aschars'`asbytes'`illegal'"!="" {
        display as error "may not specify options in the ignore option for Stata
>  version less than 14"
        exit 198
        }
        }
        sreturn local aschars 0
        sreturn local illegal 0
        }
      - else {
      - syntax [anything] , [ASChars] [ASBytes] [illegal]
      - if "`asbytes'"!="" {
      = if ""!="" {
        if "`aschars'"!="" {
        display as error "may specify only one of the ignore options aschars and
>  asbytes"
        exit 198
        }
        if "`illegal'"!="" {
        display as error "may not specify the ignore option illegal when specify
> ing asbytes"
        exit 198
        }
        }
      - if "`asbytes'"=="" {
      = if ""=="" {
      - if ustrinvalidcnt(`"`anything'"') {
      = if ustrinvalidcnt(`"" ,$""') {
        display as error "invalid Unicode characters may not be ignored when rem
> oving aschars"
        exit 198
        }
      - }
      - sreturn local aschars = "`asbytes'"==""
      = sreturn local aschars = ""==""
      - sreturn local illegal = "`illegal'"!=""
      = sreturn local illegal = ""!=""
      - capture sreturn local ignore `anything'
      = capture sreturn local ignore " ,$"
      - if _rc {
        sreturn local ignore `"`anything'"'
        }
      - }
      ---------------------------------------------------- end _parse_ignore ---
    - }
    - }
    - marksample touse, strok
    - qui count if `touse'
    = qui count if __000000
    - if r(N) == 0 {
      error 2000
      }
    - if `"`parse'"' == `""' | `"`parse'"' == `""""' {
    = if `""-" "to" "-" "to under" "to less than" "UP TO" "but less than""' == `
> ""' | `""-" "to" "-" "to under" "to less than" "UP TO" "but less than""' == `"
> """' {
      if "`trim'" != "" {
      di as err "parsing on spaces incompatible with notrim"
      exit 198
      }
      local parse `"" ""'
      local trm "trim"
      }
    - if `"`parse'"' == `""' | `"`parse'"' == `""""' {
    = if `""-" "to" "-" "to under" "to less than" "UP TO" "but less than""' == `
> ""' | `""-" "to" "-" "to under" "to less than" "UP TO" "but less than""' == `"
> """' {
      local parse `"" ""'
      local trm "trim"
      }
    - local nparse : word count `parse'
    = local nparse : word count "-" "to" "-" "to under" "to less than" "UP TO" "
> but less than"
    - tokenize `"`parse'"'
    = tokenize `""-" "to" "-" "to under" "to less than" "UP TO" "but less than""
> '
    - if `"`generate'"' != "" {
    = if `""' != "" {
      confirm name `generate'
      if `: word count `generate'' > 1 {
      di as err "invalid stub `generate'"
      exit 198
      }
      }
    - qui {
    - tempvar vw tp mp pl
    - gen int `tp' = 0
    = gen int __000002 = 0
    - gen int `mp' = 0
    = gen int __000003 = 0
    - gen int `pl' = 0
    = gen int __000004 = 0
    - gen str1 `vw' = ""
    = gen str1 __000001 = ""
    - if "`trim'" == "" {
    = if "" == "" {
    - replace `vw' = trim(`varlist') if `touse'
    = replace __000001 = trim(inc_decoded) if __000000
    - }
    - else {
      replace `vw' = `varlist' if `touse'
      }
    - }
    - if "`generate'" == "" {
    = if "" == "" {
    - local generate "`varlist'"
    = local generate "inc_decoded"
    - }
    - local j = 0
    - local go = 1
    - if "`limit'" == "" {
    = if "" == "" {
    - local limit .
    - }
    - qui while `go' & `j' < `limit' {
    = qui while 1 & 0 < . {
    - replace `mp' = .
    = replace __000003 = .
    - replace `pl' = 0
    = replace __000004 = 0
    - forval i = 1 / `nparse' {
    = forval i = 1 / 7 {
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"-"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"-"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"to"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"to"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"-"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"-"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"to under"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"to under"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"to less than"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"to less than"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"UP TO"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"UP TO"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"but less than"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"but less than"') if __000003 == __000002
    - }
    - local ++j
    - tempvar part`j'
    = tempvar part1
    - gen str1 `part`j'' = ""
    = gen str1 __000005 = ""
    - replace `part`j'' = substr(`vw', 1, `mp'-1) if `mp' < .
    = replace __000005 = substr(__000001, 1, __000003-1) if __000003 < .
    - replace `vw' = `trm'(substr(`vw', `mp'+`pl', .)) if `mp' < .
    = replace __000001 = (substr(__000001, __000003+__000004, .)) if __000003 < 
> .
    - replace `part`j'' = `vw' if `mp' >= .
    = replace __000005 = __000001 if __000003 >= .
    - replace `vw' = "" if `mp' >= .
    = replace __000001 = "" if __000003 >= .
    - local newvars "`newvars'`generate'`j' "
    = local newvars "inc_decoded1 "
    - capture assert `vw' == ""
    = capture assert __000001 == ""
    - local go = _rc
    - }
    - qui while `go' & `j' < `limit' {
    = qui while 9 & 1 < . {
    - replace `mp' = .
    = replace __000003 = .
    - replace `pl' = 0
    = replace __000004 = 0
    - forval i = 1 / `nparse' {
    = forval i = 1 / 7 {
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"-"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"-"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"to"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"to"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"-"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"-"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"to under"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"to under"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"to less than"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"to less than"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"UP TO"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"UP TO"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"but less than"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"but less than"') if __000003 == __000002
    - }
    - local ++j
    - tempvar part`j'
    = tempvar part2
    - gen str1 `part`j'' = ""
    = gen str1 __000006 = ""
    - replace `part`j'' = substr(`vw', 1, `mp'-1) if `mp' < .
    = replace __000006 = substr(__000001, 1, __000003-1) if __000003 < .
    - replace `vw' = `trm'(substr(`vw', `mp'+`pl', .)) if `mp' < .
    = replace __000001 = (substr(__000001, __000003+__000004, .)) if __000003 < 
> .
    - replace `part`j'' = `vw' if `mp' >= .
    = replace __000006 = __000001 if __000003 >= .
    - replace `vw' = "" if `mp' >= .
    = replace __000001 = "" if __000003 >= .
    - local newvars "`newvars'`generate'`j' "
    = local newvars "inc_decoded1 inc_decoded2 "
    - capture assert `vw' == ""
    = capture assert __000001 == ""
    - local go = _rc
    - }
    - qui while `go' & `j' < `limit' {
    = qui while 0 & 2 < . {
      replace `mp' = .
      replace `pl' = 0
      forval i = 1 / `nparse' {
      replace `tp' = index(`vw', `"``i''"')
      replace `mp' = min(`tp', `mp') if `tp'
      replace `pl' = length(`"``i''"') if `mp' == `tp'
      }
      local ++j
      tempvar part`j'
      gen str1 `part`j'' = ""
      replace `part`j'' = substr(`vw', 1, `mp'-1) if `mp' < .
      replace `vw' = `trm'(substr(`vw', `mp'+`pl', .)) if `mp' < .
      replace `part`j'' = `vw' if `mp' >= .
      replace `vw' = "" if `mp' >= .
      local newvars "`newvars'`generate'`j' "
      capture assert `vw' == ""
      local go = _rc
      }
    - capture confirm new var `newvars'
    = capture confirm new var inc_decoded1 inc_decoded2 
    - if _rc {
      di as err "cannot generate new variables using stub `generate'"
      exit _rc
      }
    - qui forval i = 1 / `j' {
    = qui forval i = 1 / 2 {
    - gen str1 `generate'`i' = ""
    = gen str1 inc_decoded1 = ""
    - replace `generate'`i' = `part`i''
    = replace inc_decoded1 = __000005
    - }
    - gen str1 `generate'`i' = ""
    = gen str1 inc_decoded2 = ""
    - replace `generate'`i' = `part`i''
    = replace inc_decoded2 = __000006
    - }
    - return local varlist "`newvars'"
    = return local varlist "inc_decoded1 inc_decoded2 "
    - return local nvars "`j'"
    = return local nvars "2"
    - local s = cond(`j' > 1, "s", "")
    = local s = cond(2 > 1, "s", "")
    - if "`destring'" != "" {
    = if "destring" != "" {
    - di as res "variable`s' born as string: "
    = di as res "variables born as string: "
variables born as string: 
    - }
    - else di as res "variable`s' created as string: "
    = else di as res "variables created as string: "
    - ds `newvars'
    = ds inc_decoded1 inc_decoded2 
      ------------------------------------------------------------- begin ds ---
      - version 9
      - local version : di "version " string(_caller()) ":"
      - if (_caller() <= 4) {
        `version' describe, simple
        exit
        }
      - else {
      - ds_util `0'
      = ds_util inc_decoded1 inc_decoded2 
        ------------------------------------------------------ begin ds_util ---
        - version 8
        - syntax [varlist] [, HAS(str asis) NOT(str asis) NOT2 INSEnsitive Detai
> l Alpha Varwidth(int 12) Skip(int 2) INDENT(int 0)]
        - if "`varlist'" == "" {
        = if "inc_decoded1 inc_decoded2" == "" {
          exit
          }
        - if !inrange(`indent',0,244) {
        = if !inrange(0,0,244) {
          di as err "indent() should be in the range 0..244"
          exit 198
          }
        - if !inrange(`varwidth',5,32) {
        = if !inrange(12,5,32) {
          di as err "varwidth() should be in the range 5..32"
          exit 198
          }
        - if !inrange(`skip',1,10) {
        = if !inrange(2,1,10) {
          di as err "skip() should be in the range 1..10"
          exit 198
          }
        - local nopts = (`"`has'"' != "") + (`"`not'"' != "") + ("`not2'" != "")
        = local nopts = (`""' != "") + (`""' != "") + ("" != "")
        - if `nopts' == 3 {
        = if 0 == 3 {
          di as err "may not combine options has(), not(), and not"
          exit 198
          }
        - else if `nopts' == 2 {
        = else if 0 == 2 {
          if (`"`has'"' == "") {
          di as err "may not combine options not() and not"
          exit 198
          }
          else if (`"`not'"' == "") {
          di as err "may not combine options has() and not"
          exit 198
          }
          else if (`"`not2'"' == "") {
          di as err "may not combine options has() and not()"
          exit 198
          }
          }
        - if `"`not'"' != "" {
        = if `""' != "" {
          local has `"`not'"'
          local opt "not"
          }
        - else if `"`has'"' != "" {
        = else if `""' != "" {
          local opt "has"
          }
        - local inse = "`insensitive'" != ""
        = local inse = "" != ""
        - if `"`has'"' != "" {
        = if `""' != "" {
          CheckHas `"`has'"' "`opt'" "`inse'"
          if "`what'" == "varl" | "`what'" == "vall" {
          VarlVall "`what'" `"`which'"' "`varlist'" "`inse'"
          }
          else if "`what'" == "f" {
          Format `"`which'"' "`varlist'" "`inse'"
          }
          else if "`what'" == "c" {
          Char `"`which'"' "`varlist'" "`inse'"
          }
          else if "`what'" == "t" {
          Type `"`which'"' "`varlist'"
          }
          if `"`not'"' != "" {
          local varlist : list varlist - vlist
          }
          else if `"`has'"' != "" {
          local varlist "`vlist'"
          }
          }
        - if `"`not2'"' != "" {
        = if `""' != "" {
          unab all : *
          local varlist : list all - varlist
          }
        - if "`varlist'" == "" {
        = if "inc_decoded1 inc_decoded2" == "" {
          exit
          }
        - if "`alpha'" != "" {
        = if "" != "" {
          local varlist : list sort varlist
          }
        - if "`detail'" != "" {
        = if "" != "" {
          describe `varlist'
          }
        - else {
        - local nvar : word count `varlist'
        = local nvar : word count inc_decoded1 inc_decoded2
        - local ncol = int((`:set linesize' + `skip') / (`varwidth' + `skip'))
        = local ncol = int((80 + 2) / (12 + 2))
        - local i 0
        - local vlist
        - foreach v of local varlist {
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" inc_decoded1"'
        - }
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" inc_decoded1 inc_decoded2"'
        - }
        - DisplayInCols txt `indent' `skip' 0 `vlist'
        = DisplayInCols txt 0 2 0  inc_decoded1 inc_decoded2
          -------------------------------------- begin ds_util.DisplayInCols ---
          - gettoken sty 0 : 0
          - gettoken indent 0 : 0
          - gettoken pad 0 : 0
          - gettoken wid 0 : 0
          - local indent = cond(`indent'==. | `indent'<0, 0, `indent')
          = local indent = cond(0==. | 0<0, 0, 0)
          - local pad = cond(`pad'==. | `pad'<1, 2, `pad')
          = local pad = cond(2==. | 2<1, 2, 2)
          - local wid = cond(`wid'==. | `wid'<0, 0, `wid')
          = local wid = cond(0==. | 0<0, 0, 0)
          - local n : list sizeof 0
          - if `n'==0 {
          = if 2==0 {
            exit
            }
          - foreach x of local 0 {
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(0, length(`"inc_decoded1"'))
          - }
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"inc_decoded2"'))
          - }
          - local wid = `wid' + `pad'
          = local wid = 12 + 2
          - local cols = int((`c(linesize)'+1-`indent')/`wid')
          = local cols = int((80+1-0)/14)
          - if `cols' < 2 {
          = if 5 < 2 {
            if `indent' {
            local col "_column(`=`indent'+1')"
            }
            foreach x of local 0 {
            di as `sty' `col' `"`x'"'
            }
            exit
            }
          - local lines = `n'/`cols'
          = local lines = 2/5
          - local lines = int(cond(`lines'>int(`lines'), `lines'+1, `lines'))
          = local lines = int(cond(.4>int(.4), .4+1, .4))
          - forvalues i=1(1)`lines' {
          = forvalues i=1(1)1 {
          - local top = min((`cols')*`lines'+`i', `n')
          = local top = min((5)*1+1, 2)
          - local col = `indent' + 1
          = local col = 0 + 1
          - forvalues j=`i'(`lines')`top' {
          = forvalues j=1(1)2 {
          - local x : word `j' of `0'
          = local x : word 1 of   inc_decoded1 inc_decoded2
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(1) "inc_decoded1" _c
inc_decoded1          - local col = `col' + `wid'
          = local col = 1 + 14
          - }
          - local x : word `j' of `0'
          = local x : word 2 of   inc_decoded1 inc_decoded2
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(15) "inc_decoded2" _c
              inc_decoded2          - local col = `col' + `wid'
          = local col = 15 + 14
          - }
          - di as `sty'
          = di as txt

          - }
          ---------------------------------------- end ds_util.DisplayInCols ---
        - }
        - return local varlist `varlist'
        = return local varlist inc_decoded1 inc_decoded2
        -------------------------------------------------------- end ds_util ---
      - exit
      --------------------------------------------------------------- end ds ---
    - if "`destring'" != "" {
    = if "destring" != "" {
    - if `"`ignore'"' != "" {
    = if `"" ,$""' != "" {
    - local ignore `"ignore(`ignore')"'
    = local ignore `"ignore(" ,$")"'
    - }
    - `verpre' destring `newvars', replace `force' `float' `ignore' `percent'
    = version 16.0: destring inc_decoded1 inc_decoded2 , replace   ignore(" ,$")
>  
      ------------------------------------------------------- begin destring ---
      - version 14
      - local cmdargs = `"`0'"'
      = local cmdargs = `"inc_decoded1 inc_decoded2 , replace   ignore(" ,$") "'
      - local verpre : display "version " %4.1f _caller() ":"
      - syntax [varlist], [Generate(string) replace] [force] [float] [Ignore(str
> ing asis)] [percent] [dpcomma]
      - if _caller() >= 14 {
      - if ustrpos(`"`ignore'"',",") & !ustrpos(`"`ignore'"',`"""') {
      = if ustrpos(`"" ,$""',",") & !ustrpos(`"" ,$""',`"""') {
        display as error `"ignore string must be enclosed with quotes to ignore 
> commas or use options"'
        exit 198
        }
      - }
      - `verpre' _parse_ignore `ignore'
      = version 16.0: _parse_ignore " ,$"
        ------------------------------------------------ begin _parse_ignore ---
        - version 14
        - sreturn clear
        - if _caller() < 14 {
          capture syntax [anything] , [ASChars] [ASBytes] [illegal]
          if !_rc {
          if "`aschars'`asbytes'`illegal'"!="" {
          display as error "may not specify options in the ignore option for Sta
> ta version less than 14"
          exit 198
          }
          }
          sreturn local aschars 0
          sreturn local illegal 0
          }
        - else {
        - syntax [anything] , [ASChars] [ASBytes] [illegal]
        - if "`asbytes'"!="" {
        = if ""!="" {
          if "`aschars'"!="" {
          display as error "may specify only one of the ignore options aschars a
> nd asbytes"
          exit 198
          }
          if "`illegal'"!="" {
          display as error "may not specify the ignore option illegal when speci
> fying asbytes"
          exit 198
          }
          }
        - if "`asbytes'"=="" {
        = if ""=="" {
        - if ustrinvalidcnt(`"`anything'"') {
        = if ustrinvalidcnt(`"" ,$""') {
          display as error "invalid Unicode characters may not be ignored when r
> emoving aschars"
          exit 198
          }
        - }
        - sreturn local aschars = "`asbytes'"==""
        = sreturn local aschars = ""==""
        - sreturn local illegal = "`illegal'"!=""
        = sreturn local illegal = ""!=""
        - capture sreturn local ignore `anything'
        = capture sreturn local ignore " ,$"
        - if _rc {
          sreturn local ignore `"`anything'"'
          }
        - }
        -------------------------------------------------- end _parse_ignore ---
      - if _caller() < 14 {
        local aschars 0
        syntax [varlist], [Generate(string) replace] [force] [float] [Ignore(str
> ing)] [percent] [dpcomma]
        }
      - else {
      - if `"`s(ignore)'"'!="" {
      = if `" ,$"'!="" {
      - local ignore `"`s(ignore)'"'
      = local ignore `" ,$"'
      - }
      - local aschars `s(aschars)'
      = local aschars 1
      - if `s(illegal)' {
      = if 0 {
        local illegal = ustrunescape("\ufffd")
        }
      - }
      - if "`percent'" == "percent" {
      = if "" == "percent" {
        if !ustrpos(`"`ignore'"', "%") {
        local ignore `"`ignore'%"'
        }
        }
      - if "`illegal'"!="" {
      = if ""!="" {
        local ignore `"`ignore'`illegal'"'
        }
      - if `"`float'"'!="" {
      = if `""'!="" {
        local gtype "float"
        }
      - else {
      - local gtype "double"
      - }
      - if "`generate'" != "" & "`replace'" != "" {
      = if "" != "" & "replace" != "" {
        di as err "options generate and replace are mutually exclusive"
        exit 198
        }
      - if "`generate'" == "" & "`replace'" == "" {
      = if "" == "" & "replace" == "" {
        di as err "must specify either generate or replace option"
        exit 198
        }
      - if "`generate'" != "" {
      = if "" != "" {
        local ct1: word count `varlist'
        local save "`varlist'"
        local 0 "`generate'"
        capture syntax newvarlist
        if _rc {
        di as err "generate() contains existing variable(s) and/or illegal varia
> ble name(s)"
        exit _rc
        }
        local generate "`varlist'"
        local varlist "`save'"
        local ct2: word count `generate'
        if `ct1' != `ct2' {
        di as err "number of variables in varlist must equal"
        di as err "number of variables in generate(newvarlist)"
        exit 198
        }
        }
      - local m 1
      - if `"`ignore'"' == "" {
      = if `" ,$"' == "" {
        local ignore ""
        }
      - if `aschars' {
      = if 1 {
      - local l = ustrlen(`"`ignore'"')
      = local l = ustrlen(`" ,$"')
      - }
      - else {
        local l = length(`"`ignore'"')
        }
      - while `m' <= `l' {
      = while 1 <= 3 {
      - if `aschars' {
      = if 1 {
      - local char`m' = usubstr(`"`ignore'"', `m', 1)
      = local char1 = usubstr(`" ,$"', 1, 1)
      - }
      - else {
        local char`m' = substr(`"`ignore'"', `m', 1)
        }
      - local m = `m' + 1
      = local m = 1 + 1
      - }
      - while `m' <= `l' {
      = while 2 <= 3 {
      - if `aschars' {
      = if 1 {
      - local char`m' = usubstr(`"`ignore'"', `m', 1)
      = local char2 = usubstr(`" ,$"', 2, 1)
      - }
      - else {
        local char`m' = substr(`"`ignore'"', `m', 1)
        }
      - local m = `m' + 1
      = local m = 2 + 1
      - }
      - while `m' <= `l' {
      = while 3 <= 3 {
      - if `aschars' {
      = if 1 {
      - local char`m' = usubstr(`"`ignore'"', `m', 1)
      = local char3 = usubstr(`" ,$"', 3, 1)
      - }
      - else {
        local char`m' = substr(`"`ignore'"', `m', 1)
        }
      - local m = `m' + 1
      = local m = 3 + 1
      - }
      - while `m' <= `l' {
      = while 4 <= 3 {
        if `aschars' {
        local char`m' = usubstr(`"`ignore'"', `m', 1)
        }
        else {
        local char`m' = substr(`"`ignore'"', `m', 1)
        }
        local m = `m' + 1
        }
      - if `aschars' {
      = if 1 {
      - local aswhat "character"
      - }
      - else {
        local aswhat "byte"
        }
      - if "`generate'"!="" {
      = if ""!="" {
        local genrep "generate"
        }
      - else {
      - local genrep "replace"
      - }
      - local tvars OLDVAR NEWVAR ismissing found topct
      - tempvar `tvars'
      = tempvar OLDVAR NEWVAR ismissing found topct
      - local varno 0
      - foreach var of varlist `varlist' {
      = foreach var of varlist inc_decoded1 inc_decoded2 {
      - local varno = `varno' + 1
      = local varno = 0 + 1
      - if "`generate'"!="" {
      = if ""!="" {
        local finalvarname : word `varno' of `generate'
        local finalprint "`finalvarname' "
        }
      - else {
      - local finalvarname "`var'"
      = local finalvarname "inc_decoded1"
      - local finalprint ""
      - }
      - capture confirm string variable `var'
      = capture confirm string variable inc_decoded1
      - if _rc != 0 {
        di as txt "`var' already numeric; no " as res "`genrep'"
        }
      - else {
      - qui gen `OLDVAR' = `var'
      = qui gen __000007 = inc_decoded1
      - local jj 1
      - local b
      - local bcnt = 0
      - local c
      - local makepct
      - while `"`char`jj''"' != "" {
      = while `" "' != "" {
      - capture drop `found'
      = capture drop __00000A
      - capture drop `topct'
      = capture drop __00000B
      - local t `"`char`jj''"'
      = local t `" "'
      - if `aschars' {
      = if 1 {
      - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
      = qui gen byte __00000A = ustrpos(__000007, `" "') != 0
      - }
      - else {
        qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
        }
      - qui summarize `found', meanonly
      = qui summarize __00000A, meanonly
      - if r(sum) > 0 {
      - if `"`t'"'=="`illegal'" {
      = if `" "'=="" {
        local b `"`b' illegal Unicode"'
        }
      - else if `"`t'"' == " " {
      = else if `" "' == " " {
      - local b `"`b' space"'
      = local b `" space"'
      - }
      - else {
        local b `"`b' `t'"'
        }
      - local ++bcnt
      - }
      - if `aschars' {
      = if 1 {
      - if `"`t'"'=="%" {
      = if `" "'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if ustrpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
      - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
      = qui replace __000007 = usubinstr(__000007, `" "', "", .)
      - }
      - else {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if strpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
        }
      - local jj = `jj' + 1
      = local jj = 1 + 1
      - }
      - while `"`char`jj''"' != "" {
      = while `","' != "" {
      - capture drop `found'
      = capture drop __00000A
      - capture drop `topct'
      = capture drop __00000B
      - local t `"`char`jj''"'
      = local t `","'
      - if `aschars' {
      = if 1 {
      - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
      = qui gen byte __00000A = ustrpos(__000007, `","') != 0
      - }
      - else {
        qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
        }
      - qui summarize `found', meanonly
      = qui summarize __00000A, meanonly
      - if r(sum) > 0 {
        if `"`t'"'=="`illegal'" {
        local b `"`b' illegal Unicode"'
        }
        else if `"`t'"' == " " {
        local b `"`b' space"'
        }
        else {
        local b `"`b' `t'"'
        }
        local ++bcnt
        }
      - if `aschars' {
      = if 1 {
      - if `"`t'"'=="%" {
      = if `","'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if ustrpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
      - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
      = qui replace __000007 = usubinstr(__000007, `","', "", .)
      - }
      - else {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if strpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
        }
      - local jj = `jj' + 1
      = local jj = 2 + 1
      - }
      - while `"`char`jj''"' != "" {
      = while `"$"' != "" {
      - capture drop `found'
      = capture drop __00000A
      - capture drop `topct'
      = capture drop __00000B
      - local t `"`char`jj''"'
      = local t `"$"'
      - if `aschars' {
      = if 1 {
      - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
      = qui gen byte __00000A = ustrpos(__000007, `"$"') != 0
      - }
      - else {
        qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
        }
      - qui summarize `found', meanonly
      = qui summarize __00000A, meanonly
      - if r(sum) > 0 {
        if `"`t'"'=="`illegal'" {
        local b `"`b' illegal Unicode"'
        }
        else if `"`t'"' == " " {
        local b `"`b' space"'
        }
        else {
        local b `"`b' `t'"'
        }
        local ++bcnt
        }
      - if `aschars' {
      = if 1 {
      - if `"`t'"'=="%" {
      = if `"$"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if ustrpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
      - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
      = qui replace __000007 = usubinstr(__000007, `"$"', "", .)
      - }
      - else {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if strpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
        }
      - local jj = `jj' + 1
      = local jj = 3 + 1
      - }
      - while `"`char`jj''"' != "" {
      = while `""' != "" {
        capture drop `found'
        capture drop `topct'
        local t `"`char`jj''"'
        if `aschars' {
        qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
        }
        else {
        qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
        }
        qui summarize `found', meanonly
        if r(sum) > 0 {
        if `"`t'"'=="`illegal'" {
        local b `"`b' illegal Unicode"'
        }
        else if `"`t'"' == " " {
        local b `"`b' space"'
        }
        else {
        local b `"`b' `t'"'
        }
        local ++bcnt
        }
        if `aschars' {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if ustrpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
        }
        else {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if strpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
        }
        local jj = `jj' + 1
        }
      - if _caller() >= 14 {
      - qui replace `OLDVAR' = ustrtrim(`OLDVAR')
      = qui replace __000007 = ustrtrim(__000007)
      - }
      - else {
        qui replace `OLDVAR' = strtrim(`OLDVAR')
        }
      - quietly gen byte `ismissing' = `OLDVAR'=="" | `OLDVAR'=="." | (strlen(`O
> LDVAR')==2 & inrange(`OLDVAR',".a",".z"))
      = quietly gen byte __000009 = __000007=="" | __000007=="." | (strlen(__000
> 007)==2 & inrange(__000007,".a",".z"))
      - if ("`dpcomma'" != "") {
      = if ("" != "") {
        qui replace `OLDVAR' = subinstr(`OLDVAR',".","X",.) if !`ismissing'
        qui replace `OLDVAR' = subinstr(`OLDVAR', ",", ".", 1) if !ustrregexm(`O
> LDVAR',"(,[a-z])|(^,$)")
        }
      - if _caller() >= 14 {
      - qui replace `OLDVAR' = ustrregexrf(`OLDVAR',"^0+","0")
      = qui replace __000007 = ustrregexrf(__000007,"^0+","0")
      - }
      - else {
        qui replace `OLDVAR' = regexr(`OLDVAR',"^0+","0")
        }
      - qui gen `gtype' `NEWVAR' = real(`OLDVAR')
      = qui gen double __000008 = real(__000007)
      - qui summarize `ismissing', meanonly
      = qui summarize __000009, meanonly
      - local oldmiss = r(sum)
      - qui count if missing(`NEWVAR')
      = qui count if missing(__000008)
      - local newmiss = r(N)
      - local flag = `oldmiss'!=`newmiss'
      = local flag = 0!=0
      - if `flag' & ("`force'" == "") {
      = if 0 & ("" == "") {
        if `"`ignore'"' != "" {
        di as txt "`var': contains " "`aswhat's not specified in " as res "ignor
> e()" as txt "; no " as res "`genrep'"
        }
        else {
        di as txt "`var': contains " "nonnumeric `aswhat's; no " as res "`genrep
> '"
        }
        }
      - else {
      - order `NEWVAR', after(`var')
      = order __000008, after(inc_decoded1)
        -------------------------------------------------------- begin order ---
        - version 11
        - if (_caller()<11) {
          _order `macval(0)'
          exit
          }
        - syntax varlist[, Before(varname) After(varname) first last SEQuential 
> ALPHAbetic]
        - if (`"`before'"' == "" & `"`after'"' == "" & "`first'" == "" & "`last'
> " == "" & "`alphabetic'" == "" & "`sequential'" == "") {
        = if (`""' == "" & `"inc_decoded1"' == "" & "" == "" & "" == "" & "" == 
> "" & "" == "") {
          _order `macval(0)'
          exit
          }
        - if (`"`before'"' != "" & `"`after'"' != "") {
        = if (`""' != "" & `"inc_decoded1"' != "") {
          dis as error "before() may not be combined with after()"
          exit 198
          }
        - if (`"`before'"' != "" & `"`first'"' != "") {
        = if (`""' != "" & `""' != "") {
          dis as error "before() may not be combined with first()"
          exit 198
          }
        - if (`"`before'"' != "" & `"`last'"' != "") {
        = if (`""' != "" & `""' != "") {
          dis as error "before() may not be combined with last()"
          exit 198
          }
        - if (`"`after'"' != "" & `"`before'"' != "") {
        = if (`"inc_decoded1"' != "" & `""' != "") {
          dis as error "after() may not be combined with before()"
          exit 198
          }
        - if (`"`after'"' != "" & `"`first'"' != "") {
        = if (`"inc_decoded1"' != "" & `""' != "") {
          dis as error "after() may not be combined with first()"
          exit 198
          }
        - if (`"`after'"' != "" & `"`last'"' != "") {
        = if (`"inc_decoded1"' != "" & `""' != "") {
          dis as error "after() may not be combined with last()"
          exit 198
          }
        - if ("`first'" != "" & "`last'" != "") {
        = if ("" != "" & "" != "") {
          dis as error "first may not be combined with last"
          exit 198
          }
        - if ("`sequential'" != "" & "`alphabetic'" != "") {
        = if ("" != "" & "" != "") {
          dis as error "sequential may not be combined with alphabetic"
          exit 198
          }
        - if ("`first'" != "") {
        = if ("" != "") {
          if "`alphabetic'" != "" {
          local varlist : list sort varlist
          }
          if "`sequential'" != "" {
          aorder `varlist'
          }
          else {
          _order `varlist'
          }
          }
        - if ("`last'" != "") {
        = if ("" != "") {
          unab vlist : _all
          local list : list vlist - varlist
          if "`alphabetic'" != "" {
          local varlist : list sort varlist
          }
          if "`sequential'" != "" {
          preserve
          keep `varlist'
          aorder `varlist'
          unab varlist : _all
          restore
          }
          _order `list' `varlist'
          }
        - if (`"`before'"' != "") {
        = if (`""' != "") {
          local test : list before in varlist
          if `test' {
          dis as err "varname specified in before() may not" " be in varlist"
          exit 198
          }
          if "`alphabetic'" != "" {
          local varlist : list sort varlist
          }
          if "`sequential'" != "" {
          preserve
          keep `varlist'
          aorder `varlist'
          unab varlist : _all
          restore
          }
          unab vlist : _all
          local vlist : list vlist - varlist
          local var_num : list posof "`before'" in vlist
          local var_num = `var_num' - 1
          local fvar : word 1 of `vlist'
          capture local lvar : word `var_num' of `vlist'
          if _rc {
          _order `varlist'
          exit
          }
          unab nlist : `fvar'-`lvar'
          local nlist : list nlist - varlist
          _order `nlist' `varlist'
          }
        - if (`"`after'"' != "") {
        = if (`"inc_decoded1"' != "") {
        - local test : list after in varlist
        - if `test' {
        = if 0 {
          dis as err "varname specified in after() may not" " be in varlist"
          exit 198
          }
        - if "`alphabetic'" != "" {
        = if "" != "" {
          local varlist : list sort varlist
          }
        - if "`sequential'" != "" {
        = if "" != "" {
          preserve
          keep `varlist'
          aorder `varlist'
          unab varlist : _all
          restore
          }
        - unab vlist : _all
          ------------------------------------------------------- begin unab ---
          - version 6
          - gettoken user 0: 0, parse(" :")
          - gettoken colon 0: 0, parse(" :")
          - if `"`colon'"' != ":" { error 198 }
          = if `":"' != ":" { error 198 }
          - syntax [varlist(default=empty)] [, MIN(integer 1) MAX(integer 120000
> ) NAME(string)]
          - c_local `user' `varlist'
          = c_local vlist year hhwt repwt cluster adjust statefip strata hhincom
> e_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 repwt10 r
> epwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 repwt20
>  repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt29 repwt
> 30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repwt39 rep
> wt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 repwt49 r
> epwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 repwt59
>  repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt68 repwt
> 69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repwt78 rep
> wt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp5 repwt
> p6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14 repwtp
> 15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwtp23 rep
> wtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 repwtp32 
> repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40 repwtp
> 41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwtp49 rep
> wtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 repwtp58 
> repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66 repwtp
> 67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwtp75 rep
> wtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __000000 __
> 000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_decoded2 
> __000007 __00000A __000009 __000008
          - local n : word count `varlist'
          = local n : word count year hhwt repwt cluster adjust statefip strata 
> hhincome_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 re
> pwt10 repwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 
> repwt20 repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt2
> 9 repwt30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repw
> t39 repwt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 re
> pwt49 repwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 
> repwt59 repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt6
> 8 repwt69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repw
> t78 repwt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp
> 5 repwtp6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14
>  repwtp15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwt
> p23 repwtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 re
> pwtp32 repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40
>  repwtp41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwt
> p49 repwtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 re
> pwtp58 repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66
>  repwtp67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwt
> p75 repwtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __00
> 0000 __000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_de
> coded2 __000007 __00000A __000009 __000008
          - if `n'>=`min' & `n'<=`max' { exit }
          = if 187>=1 & 187<=120000 { exit }
          --------------------------------------------------------- end unab ---
        - local vlist : list vlist - varlist
        - local var_num : list posof "`after'" in vlist
        = local var_num : list posof "inc_decoded1" in vlist
        - local fvar : word 1 of `vlist'
        = local fvar : word 1 of year hhwt repwt cluster adjust statefip strata 
> hhincome_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 re
> pwt10 repwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 
> repwt20 repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt2
> 9 repwt30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repw
> t39 repwt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 re
> pwt49 repwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 
> repwt59 repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt6
> 8 repwt69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repw
> t78 repwt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp
> 5 repwtp6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14
>  repwtp15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwt
> p23 repwtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 re
> pwtp32 repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40
>  repwtp41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwt
> p49 repwtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 re
> pwtp58 repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66
>  repwtp67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwt
> p75 repwtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __00
> 0000 __000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_de
> coded2 __000007 __00000A __000009
        - local lvar : word `var_num' of `vlist'
        = local lvar : word 182 of year hhwt repwt cluster adjust statefip strat
> a hhincome_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 
> repwt10 repwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt1
> 9 repwt20 repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repw
> t29 repwt30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 re
> pwt39 repwt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 
> repwt49 repwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt5
> 8 repwt59 repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repw
> t68 repwt69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 re
> pwt78 repwt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repw
> tp5 repwtp6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp
> 14 repwtp15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 rep
> wtp23 repwtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 
> repwtp32 repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp
> 40 repwtp41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 rep
> wtp49 repwtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 
> repwtp58 repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp
> 66 repwtp67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 rep
> wtp75 repwtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __
> 000000 __000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_
> decoded2 __000007 __00000A __000009
        - unab nlist : `fvar'-`lvar'
        = unab nlist : year-inc_decoded1
          ------------------------------------------------------- begin unab ---
          - version 6
          - gettoken user 0: 0, parse(" :")
          - gettoken colon 0: 0, parse(" :")
          - if `"`colon'"' != ":" { error 198 }
          = if `":"' != ":" { error 198 }
          - syntax [varlist(default=empty)] [, MIN(integer 1) MAX(integer 120000
> ) NAME(string)]
          - c_local `user' `varlist'
          = c_local nlist year hhwt repwt cluster adjust statefip strata hhincom
> e_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 repwt10 r
> epwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 repwt20
>  repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt29 repwt
> 30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repwt39 rep
> wt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 repwt49 r
> epwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 repwt59
>  repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt68 repwt
> 69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repwt78 rep
> wt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp5 repwt
> p6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14 repwtp
> 15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwtp23 rep
> wtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 repwtp32 
> repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40 repwtp
> 41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwtp49 rep
> wtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 repwtp58 
> repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66 repwtp
> 67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwtp75 rep
> wtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __000000 __
> 000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1
          - local n : word count `varlist'
          = local n : word count year hhwt repwt cluster adjust statefip strata 
> hhincome_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 re
> pwt10 repwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 
> repwt20 repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt2
> 9 repwt30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repw
> t39 repwt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 re
> pwt49 repwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 
> repwt59 repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt6
> 8 repwt69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repw
> t78 repwt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp
> 5 repwtp6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14
>  repwtp15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwt
> p23 repwtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 re
> pwtp32 repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40
>  repwtp41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwt
> p49 repwtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 re
> pwtp58 repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66
>  repwtp67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwt
> p75 repwtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __00
> 0000 __000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1
          - if `n'>=`min' & `n'<=`max' { exit }
          = if 182>=1 & 182<=120000 { exit }
          --------------------------------------------------------- end unab ---
        - local nlist : list nlist - varlist
        - _order `nlist' `varlist'
        = _order year hhwt repwt cluster adjust statefip strata hhincome_acs rep
> wt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 repwt10 repwt11 re
> pwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 repwt20 repwt21 
> repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt29 repwt30 repwt3
> 1 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repwt39 repwt40 repw
> t41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 repwt49 repwt50 re
> pwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 repwt59 repwt60 
> repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt68 repwt69 repwt7
> 0 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repwt78 repwt79 repw
> t80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp5 repwtp6 repwtp
> 7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14 repwtp15 repwtp
> 16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwtp23 repwtp24 rep
> wtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 repwtp32 repwtp33 
> repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40 repwtp41 repwtp
> 42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwtp49 repwtp50 rep
> wtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 repwtp58 repwtp59 
> repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66 repwtp67 repwtp
> 68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwtp75 repwtp76 rep
> wtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __000000 __000002 __
> 000003 __000004 __000001 __000005 __000006 inc_decoded1 __000008
        - }
        - if ("`alphabetic'" != "" & `"`before'"' == "" & `"`after'"' == "" & "`
> first'" == "" & "`last'" == "") {
        = if ("" != "" & `""' == "" & `"inc_decoded1"' == "" & "" == "" & "" == 
> "") {
          local vlist : list sort varlist
          _order `vlist'
          }
        - if ("`sequential'" != "" & `"`before'"' == "" & `"`after'"' == "" & "`
> first'" == "" & "`last'" == "") {
        = if ("" != "" & `""' == "" & `"inc_decoded1"' == "" & "" == "" & "" == 
> "") {
          aorder `varlist'
          }
        ---------------------------------------------------------- end order ---
      - if `aschars' {
      = if 1 {
      - local dispb `"`b'"'
      = local dispb `" space"'
      - }
      - else {
        local dispb = printablebytes(`"`b'"')
        }
      - local c = plural(`bcnt',strproper("`aswhat'")) + " removed " + plural(`b
> cnt',"was","were") + `":`dispb'"'
      = local c = plural(1,strproper("character")) + " removed " + plural(1,"was
> ","were") + `": space"'
      - if "`makepct'" != "" {
      = if "" != "" {
        if `makepct' {
        qui replace `NEWVAR' = `NEWVAR'/100
        }
        }
      - qui compress `NEWVAR'
      = qui compress __000008
      - local type : type `NEWVAR'
      = local type : type __000008
      - if `flag' {
      = if 0 {
        di as txt "`var': contains nonnumeric `aswhat's" _continue
        if `"`ignore'"'!="" {
        display " not specified in " as result "ignore()" _continue
        }
        if `"`b'"'=="" {
        display "; `finalprint'" as res "`genrep'd " as txt "as " as res "`type'
> " _continue
        }
        display
        }
      - if `"`b'"' != "" {
      = if `" space"' != "" {
      - di as txt "`var': " plural(`bcnt',"`aswhat'") as res `"`dispb'"' as txt 
> " removed; `finalprint'" as res "`genrep'd " as txt "as " as res "`type'"
      = di as txt "inc_decoded1: " plural(1,"character") as res `" space"' as tx
> t " removed; " as res "replaced " as txt "as " as res "long"
inc_decoded1: character space removed; replaced as long
      - }
      - else if `"`b'"' == "" & !`flag' {
      = else if `" space"' == "" & !0 {
        di as txt "`var': all characters numeric; " "`finalprint'" as res "`genr
> ep'd " as txt "as " as res "`type'"
        }
      - if `newmiss' != 0 {
      = if 0 != 0 {
        di as txt "(`newmiss' missing " plural(`newmiss',"value") " generated)"
        }
      - label variable `NEWVAR' `"`: variable label `var''"'
      = label variable __000008 `""'
        -------------------------------------------------------- begin label ---
        - version 10.0
        - local vv : display "version " string(_caller()) ", missing:"
        - gettoken val : 0
        - if (strpos("`val'", "val") > 0 ) {
        = if (strpos("variable", "val") > 0 ) {
          gettoken val 0 : 0
          syntax anything [, nofix]
          if "`fix'" != "" {
          local fix ", nofix"
          }
          gettoken var rest : anything
          while `"`rest'"' != "" {
          gettoken lab rest : rest
          local label "`lab'"
          }
          local vlist : list anything - lab
          if "`lab'" == "." {
          local lab ""
          }
          foreach var of varlist `vlist' {
          `vv' _label `val' `var' `lab' `fix'
          }
          }
        - else {
        - `vv' _label `macval(0)'
        = version 14, missing: _label variable __000008 `""'
        - }
        ---------------------------------------------------------- end label ---
      - char `NEWVAR'[destring] `c'
      = char __000008[destring] Character removed was: space
      - char `NEWVAR'[destring_cmd] `"destring `cmdargs'"'
      = char __000008[destring_cmd] `"destring inc_decoded1 inc_decoded2 , repla
> ce   ignore(" ,$") "'
      - char `var'[destring]
      = char inc_decoded1[destring]
      - char `var'[destring_cmd]
      = char inc_decoded1[destring_cmd]
      - if "`genrep'"=="generate" {
      = if "replace"=="generate" {
        Charcopy `var' `NEWVAR'
        rename `NEWVAR' `: word `varno' of `generate''
        }
      - else {
      - char rename `var' `NEWVAR'
      = char rename inc_decoded1 __000008
      - drop `var'
      = drop inc_decoded1
      - rename `NEWVAR' `var'
      = rename __000008 inc_decoded1
        ------------------------------------------------------- begin rename ---
        - version 12
        - mata: rename_cmd("`3'")
        = mata: rename_cmd("")
        --------------------------------------------------------- end rename ---
      - }
      - }
      - foreach varmac of local tvars {
      - capture drop ``varmac''
      = capture drop __000007
      - }
      - capture drop ``varmac''
      = capture drop __000008
      - }
      - capture drop ``varmac''
      = capture drop __000009
      - }
      - capture drop ``varmac''
      = capture drop __00000A
      - }
      - capture drop ``varmac''
      = capture drop __00000B
      - }
      - }
      - }
      - local varno = `varno' + 1
      = local varno = 1 + 1
      - if "`generate'"!="" {
      = if ""!="" {
        local finalvarname : word `varno' of `generate'
        local finalprint "`finalvarname' "
        }
      - else {
      - local finalvarname "`var'"
      = local finalvarname "inc_decoded2"
      - local finalprint ""
      - }
      - capture confirm string variable `var'
      = capture confirm string variable inc_decoded2
      - if _rc != 0 {
        di as txt "`var' already numeric; no " as res "`genrep'"
        }
      - else {
      - qui gen `OLDVAR' = `var'
      = qui gen __000007 = inc_decoded2
      - local jj 1
      - local b
      - local bcnt = 0
      - local c
      - local makepct
      - while `"`char`jj''"' != "" {
      = while `" "' != "" {
      - capture drop `found'
      = capture drop __00000A
      - capture drop `topct'
      = capture drop __00000B
      - local t `"`char`jj''"'
      = local t `" "'
      - if `aschars' {
      = if 1 {
      - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
      = qui gen byte __00000A = ustrpos(__000007, `" "') != 0
      - }
      - else {
        qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
        }
      - qui summarize `found', meanonly
      = qui summarize __00000A, meanonly
      - if r(sum) > 0 {
      - if `"`t'"'=="`illegal'" {
      = if `" "'=="" {
        local b `"`b' illegal Unicode"'
        }
      - else if `"`t'"' == " " {
      = else if `" "' == " " {
      - local b `"`b' space"'
      = local b `" space"'
      - }
      - else {
        local b `"`b' `t'"'
        }
      - local ++bcnt
      - }
      - if `aschars' {
      = if 1 {
      - if `"`t'"'=="%" {
      = if `" "'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if ustrpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
      - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
      = qui replace __000007 = usubinstr(__000007, `" "', "", .)
      - }
      - else {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if strpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
        }
      - local jj = `jj' + 1
      = local jj = 1 + 1
      - }
      - while `"`char`jj''"' != "" {
      = while `","' != "" {
      - capture drop `found'
      = capture drop __00000A
      - capture drop `topct'
      = capture drop __00000B
      - local t `"`char`jj''"'
      = local t `","'
      - if `aschars' {
      = if 1 {
      - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
      = qui gen byte __00000A = ustrpos(__000007, `","') != 0
      - }
      - else {
        qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
        }
      - qui summarize `found', meanonly
      = qui summarize __00000A, meanonly
      - if r(sum) > 0 {
        if `"`t'"'=="`illegal'" {
        local b `"`b' illegal Unicode"'
        }
        else if `"`t'"' == " " {
        local b `"`b' space"'
        }
        else {
        local b `"`b' `t'"'
        }
        local ++bcnt
        }
      - if `aschars' {
      = if 1 {
      - if `"`t'"'=="%" {
      = if `","'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if ustrpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
      - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
      = qui replace __000007 = usubinstr(__000007, `","', "", .)
      - }
      - else {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if strpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
        }
      - local jj = `jj' + 1
      = local jj = 2 + 1
      - }
      - while `"`char`jj''"' != "" {
      = while `"$"' != "" {
      - capture drop `found'
      = capture drop __00000A
      - capture drop `topct'
      = capture drop __00000B
      - local t `"`char`jj''"'
      = local t `"$"'
      - if `aschars' {
      = if 1 {
      - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
      = qui gen byte __00000A = ustrpos(__000007, `"$"') != 0
      - }
      - else {
        qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
        }
      - qui summarize `found', meanonly
      = qui summarize __00000A, meanonly
      - if r(sum) > 0 {
        if `"`t'"'=="`illegal'" {
        local b `"`b' illegal Unicode"'
        }
        else if `"`t'"' == " " {
        local b `"`b' space"'
        }
        else {
        local b `"`b' `t'"'
        }
        local ++bcnt
        }
      - if `aschars' {
      = if 1 {
      - if `"`t'"'=="%" {
      = if `"$"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if ustrpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
      - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
      = qui replace __000007 = usubinstr(__000007, `"$"', "", .)
      - }
      - else {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if strpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
        }
      - local jj = `jj' + 1
      = local jj = 3 + 1
      - }
      - while `"`char`jj''"' != "" {
      = while `""' != "" {
        capture drop `found'
        capture drop `topct'
        local t `"`char`jj''"'
        if `aschars' {
        qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
        }
        else {
        qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
        }
        qui summarize `found', meanonly
        if r(sum) > 0 {
        if `"`t'"'=="`illegal'" {
        local b `"`b' illegal Unicode"'
        }
        else if `"`t'"' == " " {
        local b `"`b' space"'
        }
        else {
        local b `"`b' `t'"'
        }
        local ++bcnt
        }
        if `aschars' {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if ustrpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
        }
        else {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if strpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
        }
        local jj = `jj' + 1
        }
      - if _caller() >= 14 {
      - qui replace `OLDVAR' = ustrtrim(`OLDVAR')
      = qui replace __000007 = ustrtrim(__000007)
      - }
      - else {
        qui replace `OLDVAR' = strtrim(`OLDVAR')
        }
      - quietly gen byte `ismissing' = `OLDVAR'=="" | `OLDVAR'=="." | (strlen(`O
> LDVAR')==2 & inrange(`OLDVAR',".a",".z"))
      = quietly gen byte __000009 = __000007=="" | __000007=="." | (strlen(__000
> 007)==2 & inrange(__000007,".a",".z"))
      - if ("`dpcomma'" != "") {
      = if ("" != "") {
        qui replace `OLDVAR' = subinstr(`OLDVAR',".","X",.) if !`ismissing'
        qui replace `OLDVAR' = subinstr(`OLDVAR', ",", ".", 1) if !ustrregexm(`O
> LDVAR',"(,[a-z])|(^,$)")
        }
      - if _caller() >= 14 {
      - qui replace `OLDVAR' = ustrregexrf(`OLDVAR',"^0+","0")
      = qui replace __000007 = ustrregexrf(__000007,"^0+","0")
      - }
      - else {
        qui replace `OLDVAR' = regexr(`OLDVAR',"^0+","0")
        }
      - qui gen `gtype' `NEWVAR' = real(`OLDVAR')
      = qui gen double __000008 = real(__000007)
      - qui summarize `ismissing', meanonly
      = qui summarize __000009, meanonly
      - local oldmiss = r(sum)
      - qui count if missing(`NEWVAR')
      = qui count if missing(__000008)
      - local newmiss = r(N)
      - local flag = `oldmiss'!=`newmiss'
      = local flag = 0!=0
      - if `flag' & ("`force'" == "") {
      = if 0 & ("" == "") {
        if `"`ignore'"' != "" {
        di as txt "`var': contains " "`aswhat's not specified in " as res "ignor
> e()" as txt "; no " as res "`genrep'"
        }
        else {
        di as txt "`var': contains " "nonnumeric `aswhat's; no " as res "`genrep
> '"
        }
        }
      - else {
      - order `NEWVAR', after(`var')
      = order __000008, after(inc_decoded2)
        -------------------------------------------------------- begin order ---
        - version 11
        - if (_caller()<11) {
          _order `macval(0)'
          exit
          }
        - syntax varlist[, Before(varname) After(varname) first last SEQuential 
> ALPHAbetic]
        - if (`"`before'"' == "" & `"`after'"' == "" & "`first'" == "" & "`last'
> " == "" & "`alphabetic'" == "" & "`sequential'" == "") {
        = if (`""' == "" & `"inc_decoded2"' == "" & "" == "" & "" == "" & "" == 
> "" & "" == "") {
          _order `macval(0)'
          exit
          }
        - if (`"`before'"' != "" & `"`after'"' != "") {
        = if (`""' != "" & `"inc_decoded2"' != "") {
          dis as error "before() may not be combined with after()"
          exit 198
          }
        - if (`"`before'"' != "" & `"`first'"' != "") {
        = if (`""' != "" & `""' != "") {
          dis as error "before() may not be combined with first()"
          exit 198
          }
        - if (`"`before'"' != "" & `"`last'"' != "") {
        = if (`""' != "" & `""' != "") {
          dis as error "before() may not be combined with last()"
          exit 198
          }
        - if (`"`after'"' != "" & `"`before'"' != "") {
        = if (`"inc_decoded2"' != "" & `""' != "") {
          dis as error "after() may not be combined with before()"
          exit 198
          }
        - if (`"`after'"' != "" & `"`first'"' != "") {
        = if (`"inc_decoded2"' != "" & `""' != "") {
          dis as error "after() may not be combined with first()"
          exit 198
          }
        - if (`"`after'"' != "" & `"`last'"' != "") {
        = if (`"inc_decoded2"' != "" & `""' != "") {
          dis as error "after() may not be combined with last()"
          exit 198
          }
        - if ("`first'" != "" & "`last'" != "") {
        = if ("" != "" & "" != "") {
          dis as error "first may not be combined with last"
          exit 198
          }
        - if ("`sequential'" != "" & "`alphabetic'" != "") {
        = if ("" != "" & "" != "") {
          dis as error "sequential may not be combined with alphabetic"
          exit 198
          }
        - if ("`first'" != "") {
        = if ("" != "") {
          if "`alphabetic'" != "" {
          local varlist : list sort varlist
          }
          if "`sequential'" != "" {
          aorder `varlist'
          }
          else {
          _order `varlist'
          }
          }
        - if ("`last'" != "") {
        = if ("" != "") {
          unab vlist : _all
          local list : list vlist - varlist
          if "`alphabetic'" != "" {
          local varlist : list sort varlist
          }
          if "`sequential'" != "" {
          preserve
          keep `varlist'
          aorder `varlist'
          unab varlist : _all
          restore
          }
          _order `list' `varlist'
          }
        - if (`"`before'"' != "") {
        = if (`""' != "") {
          local test : list before in varlist
          if `test' {
          dis as err "varname specified in before() may not" " be in varlist"
          exit 198
          }
          if "`alphabetic'" != "" {
          local varlist : list sort varlist
          }
          if "`sequential'" != "" {
          preserve
          keep `varlist'
          aorder `varlist'
          unab varlist : _all
          restore
          }
          unab vlist : _all
          local vlist : list vlist - varlist
          local var_num : list posof "`before'" in vlist
          local var_num = `var_num' - 1
          local fvar : word 1 of `vlist'
          capture local lvar : word `var_num' of `vlist'
          if _rc {
          _order `varlist'
          exit
          }
          unab nlist : `fvar'-`lvar'
          local nlist : list nlist - varlist
          _order `nlist' `varlist'
          }
        - if (`"`after'"' != "") {
        = if (`"inc_decoded2"' != "") {
        - local test : list after in varlist
        - if `test' {
        = if 0 {
          dis as err "varname specified in after() may not" " be in varlist"
          exit 198
          }
        - if "`alphabetic'" != "" {
        = if "" != "" {
          local varlist : list sort varlist
          }
        - if "`sequential'" != "" {
        = if "" != "" {
          preserve
          keep `varlist'
          aorder `varlist'
          unab varlist : _all
          restore
          }
        - unab vlist : _all
          ------------------------------------------------------- begin unab ---
          - version 6
          - gettoken user 0: 0, parse(" :")
          - gettoken colon 0: 0, parse(" :")
          - if `"`colon'"' != ":" { error 198 }
          = if `":"' != ":" { error 198 }
          - syntax [varlist(default=empty)] [, MIN(integer 1) MAX(integer 120000
> ) NAME(string)]
          - c_local `user' `varlist'
          = c_local vlist year hhwt repwt cluster adjust statefip strata hhincom
> e_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 repwt10 r
> epwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 repwt20
>  repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt29 repwt
> 30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repwt39 rep
> wt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 repwt49 r
> epwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 repwt59
>  repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt68 repwt
> 69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repwt78 rep
> wt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp5 repwt
> p6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14 repwtp
> 15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwtp23 rep
> wtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 repwtp32 
> repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40 repwtp
> 41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwtp49 rep
> wtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 repwtp58 
> repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66 repwtp
> 67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwtp75 rep
> wtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __000000 __
> 000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_decoded2 
> __000007 __00000A __000009 __000008
          - local n : word count `varlist'
          = local n : word count year hhwt repwt cluster adjust statefip strata 
> hhincome_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 re
> pwt10 repwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 
> repwt20 repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt2
> 9 repwt30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repw
> t39 repwt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 re
> pwt49 repwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 
> repwt59 repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt6
> 8 repwt69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repw
> t78 repwt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp
> 5 repwtp6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14
>  repwtp15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwt
> p23 repwtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 re
> pwtp32 repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40
>  repwtp41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwt
> p49 repwtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 re
> pwtp58 repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66
>  repwtp67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwt
> p75 repwtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __00
> 0000 __000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_de
> coded2 __000007 __00000A __000009 __000008
          - if `n'>=`min' & `n'<=`max' { exit }
          = if 187>=1 & 187<=120000 { exit }
          --------------------------------------------------------- end unab ---
        - local vlist : list vlist - varlist
        - local var_num : list posof "`after'" in vlist
        = local var_num : list posof "inc_decoded2" in vlist
        - local fvar : word 1 of `vlist'
        = local fvar : word 1 of year hhwt repwt cluster adjust statefip strata 
> hhincome_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 re
> pwt10 repwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 
> repwt20 repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt2
> 9 repwt30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repw
> t39 repwt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 re
> pwt49 repwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 
> repwt59 repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt6
> 8 repwt69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repw
> t78 repwt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp
> 5 repwtp6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14
>  repwtp15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwt
> p23 repwtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 re
> pwtp32 repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40
>  repwtp41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwt
> p49 repwtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 re
> pwtp58 repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66
>  repwtp67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwt
> p75 repwtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __00
> 0000 __000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_de
> coded2 __000007 __00000A __000009
        - local lvar : word `var_num' of `vlist'
        = local lvar : word 183 of year hhwt repwt cluster adjust statefip strat
> a hhincome_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 
> repwt10 repwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt1
> 9 repwt20 repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repw
> t29 repwt30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 re
> pwt39 repwt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 
> repwt49 repwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt5
> 8 repwt59 repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repw
> t68 repwt69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 re
> pwt78 repwt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repw
> tp5 repwtp6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp
> 14 repwtp15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 rep
> wtp23 repwtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 
> repwtp32 repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp
> 40 repwtp41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 rep
> wtp49 repwtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 
> repwtp58 repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp
> 66 repwtp67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 rep
> wtp75 repwtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __
> 000000 __000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_
> decoded2 __000007 __00000A __000009
        - unab nlist : `fvar'-`lvar'
        = unab nlist : year-inc_decoded2
          ------------------------------------------------------- begin unab ---
          - version 6
          - gettoken user 0: 0, parse(" :")
          - gettoken colon 0: 0, parse(" :")
          - if `"`colon'"' != ":" { error 198 }
          = if `":"' != ":" { error 198 }
          - syntax [varlist(default=empty)] [, MIN(integer 1) MAX(integer 120000
> ) NAME(string)]
          - c_local `user' `varlist'
          = c_local nlist year hhwt repwt cluster adjust statefip strata hhincom
> e_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 repwt10 r
> epwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 repwt20
>  repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt29 repwt
> 30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repwt39 rep
> wt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 repwt49 r
> epwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 repwt59
>  repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt68 repwt
> 69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repwt78 rep
> wt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp5 repwt
> p6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14 repwtp
> 15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwtp23 rep
> wtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 repwtp32 
> repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40 repwtp
> 41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwtp49 rep
> wtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 repwtp58 
> repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66 repwtp
> 67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwtp75 rep
> wtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __000000 __
> 000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_decoded2
          - local n : word count `varlist'
          = local n : word count year hhwt repwt cluster adjust statefip strata 
> hhincome_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 re
> pwt10 repwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 
> repwt20 repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt2
> 9 repwt30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repw
> t39 repwt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 re
> pwt49 repwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 
> repwt59 repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt6
> 8 repwt69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repw
> t78 repwt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp
> 5 repwtp6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14
>  repwtp15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwt
> p23 repwtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 re
> pwtp32 repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40
>  repwtp41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwt
> p49 repwtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 re
> pwtp58 repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66
>  repwtp67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwt
> p75 repwtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __00
> 0000 __000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_de
> coded2
          - if `n'>=`min' & `n'<=`max' { exit }
          = if 183>=1 & 183<=120000 { exit }
          --------------------------------------------------------- end unab ---
        - local nlist : list nlist - varlist
        - _order `nlist' `varlist'
        = _order year hhwt repwt cluster adjust statefip strata hhincome_acs rep
> wt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 repwt10 repwt11 re
> pwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 repwt20 repwt21 
> repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt29 repwt30 repwt3
> 1 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repwt39 repwt40 repw
> t41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 repwt49 repwt50 re
> pwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 repwt59 repwt60 
> repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt68 repwt69 repwt7
> 0 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repwt78 repwt79 repw
> t80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp5 repwtp6 repwtp
> 7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14 repwtp15 repwtp
> 16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwtp23 repwtp24 rep
> wtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 repwtp32 repwtp33 
> repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40 repwtp41 repwtp
> 42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwtp49 repwtp50 rep
> wtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 repwtp58 repwtp59 
> repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66 repwtp67 repwtp
> 68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwtp75 repwtp76 rep
> wtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __000000 __000002 __
> 000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_decoded2 __000008
        - }
        - if ("`alphabetic'" != "" & `"`before'"' == "" & `"`after'"' == "" & "`
> first'" == "" & "`last'" == "") {
        = if ("" != "" & `""' == "" & `"inc_decoded2"' == "" & "" == "" & "" == 
> "") {
          local vlist : list sort varlist
          _order `vlist'
          }
        - if ("`sequential'" != "" & `"`before'"' == "" & `"`after'"' == "" & "`
> first'" == "" & "`last'" == "") {
        = if ("" != "" & `""' == "" & `"inc_decoded2"' == "" & "" == "" & "" == 
> "") {
          aorder `varlist'
          }
        ---------------------------------------------------------- end order ---
      - if `aschars' {
      = if 1 {
      - local dispb `"`b'"'
      = local dispb `" space"'
      - }
      - else {
        local dispb = printablebytes(`"`b'"')
        }
      - local c = plural(`bcnt',strproper("`aswhat'")) + " removed " + plural(`b
> cnt',"was","were") + `":`dispb'"'
      = local c = plural(1,strproper("character")) + " removed " + plural(1,"was
> ","were") + `": space"'
      - if "`makepct'" != "" {
      = if "" != "" {
        if `makepct' {
        qui replace `NEWVAR' = `NEWVAR'/100
        }
        }
      - qui compress `NEWVAR'
      = qui compress __000008
      - local type : type `NEWVAR'
      = local type : type __000008
      - if `flag' {
      = if 0 {
        di as txt "`var': contains nonnumeric `aswhat's" _continue
        if `"`ignore'"'!="" {
        display " not specified in " as result "ignore()" _continue
        }
        if `"`b'"'=="" {
        display "; `finalprint'" as res "`genrep'd " as txt "as " as res "`type'
> " _continue
        }
        display
        }
      - if `"`b'"' != "" {
      = if `" space"' != "" {
      - di as txt "`var': " plural(`bcnt',"`aswhat'") as res `"`dispb'"' as txt 
> " removed; `finalprint'" as res "`genrep'd " as txt "as " as res "`type'"
      = di as txt "inc_decoded2: " plural(1,"character") as res `" space"' as tx
> t " removed; " as res "replaced " as txt "as " as res "long"
inc_decoded2: character space removed; replaced as long
      - }
      - else if `"`b'"' == "" & !`flag' {
      = else if `" space"' == "" & !0 {
        di as txt "`var': all characters numeric; " "`finalprint'" as res "`genr
> ep'd " as txt "as " as res "`type'"
        }
      - if `newmiss' != 0 {
      = if 0 != 0 {
        di as txt "(`newmiss' missing " plural(`newmiss',"value") " generated)"
        }
      - label variable `NEWVAR' `"`: variable label `var''"'
      = label variable __000008 `""'
        -------------------------------------------------------- begin label ---
        - version 10.0
        - local vv : display "version " string(_caller()) ", missing:"
        - gettoken val : 0
        - if (strpos("`val'", "val") > 0 ) {
        = if (strpos("variable", "val") > 0 ) {
          gettoken val 0 : 0
          syntax anything [, nofix]
          if "`fix'" != "" {
          local fix ", nofix"
          }
          gettoken var rest : anything
          while `"`rest'"' != "" {
          gettoken lab rest : rest
          local label "`lab'"
          }
          local vlist : list anything - lab
          if "`lab'" == "." {
          local lab ""
          }
          foreach var of varlist `vlist' {
          `vv' _label `val' `var' `lab' `fix'
          }
          }
        - else {
        - `vv' _label `macval(0)'
        = version 14, missing: _label variable __000008 `""'
        - }
        ---------------------------------------------------------- end label ---
      - char `NEWVAR'[destring] `c'
      = char __000008[destring] Character removed was: space
      - char `NEWVAR'[destring_cmd] `"destring `cmdargs'"'
      = char __000008[destring_cmd] `"destring inc_decoded1 inc_decoded2 , repla
> ce   ignore(" ,$") "'
      - char `var'[destring]
      = char inc_decoded2[destring]
      - char `var'[destring_cmd]
      = char inc_decoded2[destring_cmd]
      - if "`genrep'"=="generate" {
      = if "replace"=="generate" {
        Charcopy `var' `NEWVAR'
        rename `NEWVAR' `: word `varno' of `generate''
        }
      - else {
      - char rename `var' `NEWVAR'
      = char rename inc_decoded2 __000008
      - drop `var'
      = drop inc_decoded2
      - rename `NEWVAR' `var'
      = rename __000008 inc_decoded2
        ------------------------------------------------------- begin rename ---
        - version 12
        - mata: rename_cmd("`3'")
        = mata: rename_cmd("")
        --------------------------------------------------------- end rename ---
      - }
      - }
      - foreach varmac of local tvars {
      - capture drop ``varmac''
      = capture drop __000007
      - }
      - capture drop ``varmac''
      = capture drop __000008
      - }
      - capture drop ``varmac''
      = capture drop __000009
      - }
      - capture drop ``varmac''
      = capture drop __00000A
      - }
      - capture drop ``varmac''
      = capture drop __00000B
      - }
      - }
      - }
      --------------------------------------------------------- end destring ---
    - }
    -------------------------------------------------------------- end split ---
  - gen `inc_cat_var'_lb = inc_decoded1
  = gen acs_hhinc_lb = inc_decoded1
  - gen `inc_cat_var'_ub = inc_decoded2
  = gen acs_hhinc_ub = inc_decoded2
  - di "Lower bound of `inc_cat_var'_lb and upper bound of `inc_cat_var'_ub " "c
> reated for inc_level " `inc_level' "of the original Research " "dataset income
>  range"
  = di "Lower bound of acs_hhinc_lb and upper bound of acs_hhinc_ub " "created f
> or inc_level " 7 "of the original Research " "dataset income range"
Lower bound of acs_hhinc_lb and upper bound of acs_hhinc_ub created for inc_leve
> l 7of the original Research dataset income range
  - }
  - else {
    di as error "Error: The inc_level " `inc_level' " does not fit any of the ex
> isting regular expressions " "designs. Please email the REDI program creator a
> t " "mollymkingphd@gmail.com with information about this " "error and a list o
> f all of your income levels so she " "can update the program. Thank you for yo
> ur help!"
    error 999
    }
  - local upper_bound = `inc_cat_var'_ub
  = local upper_bound = acs_hhinc_ub
  - local lower_bound = `inc_cat_var'_lb
  = local lower_bound = acs_hhinc_lb
  - capture drop inc_decoded1 inc_decoded2
  - quietly summarize if `research_year' == `y' & `inc_cat_var' == `inc_level'
  = quietly summarize if year == 2019 & acs_hhinc == 7
  - local sample_size = r(N)
  - gen `inc_cat_var'_n = `sample_size'
  = gen acs_hhinc_n = 55333
  - label variable `inc_cat_var'_n "N in income level in research dataset"
  = label variable acs_hhinc_n "N in income level in research dataset"
    ------------------------------------------------------------ begin label ---
    - version 10.0
    - local vv : display "version " string(_caller()) ", missing:"
    - gettoken val : 0
    - if (strpos("`val'", "val") > 0 ) {
    = if (strpos("variable", "val") > 0 ) {
      gettoken val 0 : 0
      syntax anything [, nofix]
      if "`fix'" != "" {
      local fix ", nofix"
      }
      gettoken var rest : anything
      while `"`rest'"' != "" {
      gettoken lab rest : rest
      local label "`lab'"
      }
      local vlist : list anything - lab
      if "`lab'" == "." {
      local lab ""
      }
      foreach var of varlist `vlist' {
      `vv' _label `val' `var' `lab' `fix'
      }
      }
    - else {
    - `vv' _label `macval(0)'
    = version 16, missing: _label variable acs_hhinc_n "N in income level in res
> earch dataset"
    - }
    -------------------------------------------------------------- end label ---
  - keep if `research_year' == `y' & `inc_cat_var' == `inc_level'
  = keep if year == 2019 & acs_hhinc == 7
(0 observations deleted)
  - tempfile premerge_`inc_level'_`y'
  = tempfile premerge_7_2019
  - save `premerge_`inc_level'_`y'', replace
  = save /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000g, repla
> ce
(note: file /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000g not
>  found)
file /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000g saved
  - di "Saved tempfile with upper and lower bounds of research data income level
> s"
Saved tempfile with upper and lower bounds of research data income levels
  - use `reference_dataset', clear
  = use ~/Documents/SocResearch/Dissertation/data/data_temp/redi13_cps_state_ca.
> dta, clear
(Streamlined CPS ASEC data, CA 2019)
  - di "Reference data open - Income type set as `inc_cat_var' income"
  = di "Reference data open - Income type set as acs_hhinc income"
Reference data open - Income type set as acs_hhinc income
  - keep if `ref_year' == `y' | `"`ref_year'"' == "nys" & `ref_income_var' >= `l
> ower_bound' & `ref_income_var' <= `upper_bound'
  = keep if year == 2019 | `"year"' == "nys" & hhincome >= 100000 & hhincome <= 
> 150000
(0 observations deleted)
  - gen obs_no = _n
  - di "Observation number generated"
Observation number generated
  - save $temp/`ASECdata'_`ref_year'_inc`inc_level'.dta, replace
  = save ~/Documents/SocResearch/Dissertation/data/data_temp/_year_inc7.dta, rep
> lace
file ~/Documents/SocResearch/Dissertation/data/data_temp/_year_inc7.dta saved
  - di "Ref to keep income between $`lower_bound' and $`upper_bound' for `y' yea
> r."
  = di "Ref to keep income between $100000 and $150000 for 2019 year."
Ref to keep income between $100000 and $150000 for 2019 year.
  - quietly des
    -------------------------------------------------------------- begin des ---
    - local version : di "version " string(_caller()) ":"
    - `version' describe `0'
    = version 16: describe 
      ------------------------------------------------------- begin describe ---
      - version 9
      - local version : di "version " string(_caller()) ":"
      - syntax [anything] [using] [, SImple REPLACE *]
      - if ("`replace'"!="") {
      = if (""!="") {
        describe_mk `0'
        return add
        exit
        }
      - local varlist `"`anything'"'
      = local varlist `""'
      - if ("`simple'" == "") {
      = if ("" == "") {
      - `version' _describe `0'
      = version 16: _describe 
      - return add
      - }
      - else {
        if (`"`options'"' != "") {
        di as err "simple may not be combined with other options"
        exit 198
        }
        if (`"`using'"' != "") {
        qui `version' describe `varlist' `using', varlist
        if "`varlist'" == "" {
        local vars "`r(varlist)'"
        }
        else {
        local vars "`varlist'"
        }
        local wid = 2
        local n : list sizeof vars
        if `n'==0 {
        exit
        }
        if "`c(hasicu)'" == "1" {
        foreach x of local vars {
        local wid = max(`wid', udstrlen(`"`x'"'))
        }
        }
        else {
        foreach x of local vars {
        local wid = max(`wid', strlen(`"`x'"'))
        }
        }
        local wid = `wid' + 2
        local cols = int((`c(linesize)'+1)/`wid')
        if `cols' < 2 {
        foreach x of local `vars' {
        di as txt `col' `"`x'"'
        }
        exit
        }
        local lines = `n'/`cols'
        local lines = int(cond(`lines'>int(`lines'), `lines'+1, `lines'))
        forvalues i=1(1)`lines' {
        local top = min((`cols')*`lines'+`i', `n')
        local col = 1
        forvalues j=`i'(`lines')`top' {
        local x : word `j' of `vars'
        di as txt _column(`col') "`x'" _c
        local col = `col' + `wid'
        }
        di as txt
        }
        qui `version' describe `varlist' `using', short
        return add
        }
        else {
        ds `varlist'
        qui `version' _describe `varlist', short
        return add
        }
        }
      --------------------------------------------------------- end describe ---
    ---------------------------------------------------------------- end des ---
  - local N = r(N)
  - clear
    ------------------------------------------------------------ begin clear ---
    - if _caller() < 10 {
      _clear_9 `0'
      exit
      }
    - version 10
    - syntax [anything]
    - tokenize `anything'
    = tokenize 
    - if `"`2'"' != "" {
    = if `""' != "" {
      display as err "`2' not allowed"
      exit 198
      }
    - if "`1'"=="" {
    = if ""=="" {
    - drop _all
    - label drop _all
      ---------------------------------------------------------- begin label ---
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {
      = if (strpos("drop", "val") > 0 ) {
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {
        local fix ", nofix"
        }
        gettoken var rest : anything
        while `"`rest'"' != "" {
        gettoken lab rest : rest
        local label "`lab'"
        }
        local vlist : list anything - lab
        if "`lab'" == "." {
        local lab ""
        }
        foreach var of varlist `vlist' {
        `vv' _label `val' `var' `lab' `fix'
        }
        }
      - else {
      - `vv' _label `macval(0)'
      = version 10, missing: _label drop _all
      - }
      ------------------------------------------------------------ end label ---
    - }
    - else if "`1'"=="frames" {
    = else if ""=="frames" {
      frames reset
      }
    - else if "`1'"=="mata" {
    = else if ""=="mata" {
      mata: mata clear
      }
    - else if "`1'"=="python" {
    = else if ""=="python" {
      python clear
      }
    - else if inlist("`1'", "results", "matrix") {
    = else if inlist("", "results", "matrix") {
      return clear
      clearreturn
      ereturn clear
      sreturn clear
      _return drop _all
      if ("`1'" == "matrix") {
      matrix drop _all
      _est drop _all
      }
      }
    - else if "`1'"=="programs" {
    = else if ""=="programs" {
      program drop _all
      }
    - else if "`1'"=="ado" {
    = else if ""=="ado" {
      program drop _allado
      }
    - else if "`1'"=="rngstream" | "`1'"=="rngstreams" {
    = else if ""=="rngstream" | ""=="rngstreams" {
      set rngstream clear
      }
    - else if "`1'"=="*" | "`1'"=="all" {
    = else if ""=="*" | ""=="all" {
      capture mata: st_local("semmods", strofreal(sg__global.hasmodels()))
      capture
      if (0`semmods') {
      display as err "-clear all- not allowed while an SEM Builder is open"
      exit 1
      }
      drop _all
      frames reset
      label drop _all
      matrix drop _all
      scalar drop _all
      constraint drop _all
      eq drop _all
      file close _all
      postutil clear
      _return drop _all
      discard
      program drop _all
      timer clear
      mata: _st__put_cmd_clear()
      mata: mata clear
      python clear
      }
    - else {
      display as err "`1' not allowed"
      exit 198
      }
    -------------------------------------------------------------- end clear ---
  - set obs `sample_size'
  = set obs 55333
number of observations (_N) was 0, now 55,333
  - gen obs_no = runiformint(1, `N')
  = gen obs_no = runiformint(1, 6260)
  - merge m:1 obs_no using $temp/`ASECdata'_`ref_year'_inc`inc_level'.dta, keep(
> match) nogenerate
  = merge m:1 obs_no using ~/Documents/SocResearch/Dissertation/data/data_temp/_
> year_inc7.dta, keep(match) nogenerate
    ------------------------------------------------------------ begin merge ---
    - version 11
    - gettoken mtype 0 : 0, parse(" ,")
    - if (!strpos("`mtype'", ":") & "`mtype'"!="") {
    = if (!strpos("m:1", ":") & "m:1"!="") {
      if (_caller()>=11) {
      di as smcl as txt "{p}"
      di as smcl "(note: you are using old"
      di as smcl "{bf:merge} syntax; see"
      di as smcl "{bf:{help merge:[D] merge}} for new syntax)"
      di as smcl "{p_end}"
      }
      merge_10 `mtype' `0'
      exit
      }
    - local origmtype `"`mtype'"'
    = local origmtype `"m:1"'
    - mata: map_mtype(`"mtype"')
    - gettoken token : 0, parse(" ,")
    - if ("`token'"=="_n") {
    = if ("obs_no"=="_n") {
      if ("`mtype'"!="1:1") {
      error_seq_not11 "`mtype'" "`origmtype'"
      }
      gettoken token 0 : 0, parse(" ,")
      local mtype "_n"
      }
    - syntax [varlist(default=none)] using/ [, ASSERT(string) DEBUG GENerate(nam
> e) FORCE KEEP(string) KEEPUSing(string) noLabels NOGENerate noNOTEs REPLACE no
> REPort SORTED UPDATE ]
    - if ("`mtype'"!="_n") {
    = if ("m:1"!="_n") {
    - local origmtype `"`mtype'"'
    = local origmtype `"m:1"'
    - mata: map_mtype(`"mtype"')
    - if ("`varlist'"=="") {
    = if ("obs_no"=="") {
      error_mat_varlist "`mtype'" "`origmtype'"
      }
    - }
    - else {
      if ("`mtype'"=="_n") {
      if ("`varlist'"!="") {
      error_seq_varlist
      }
      }
      }
    - mata: fullfilename("using", "usingfull", "using")
    - mata: resultlist("assert")
    - mata: resultlist("keep")
    - if ("`generate'"!="") {
    = if (""!="") {
      if ("`nogenerate'"!="") {
      di as smcl err "{p}"
      di as smcl "options -generate()- and -nogenerate-"
      di as smcl "may not be specified together."
      di as smcl err "{p_end}"
      }
      confirm new var `generate'
      }
    - if ("`replace'"!="") {
    = if (""!="") {
      if ("`update'"=="") {
      error_replace
      }
      }
    - if ("`sorted'"=="" & "`mtype'"!="_n") {
    = if (""=="" & "m:1"!="_n") {
    - local sortedby : sortedby
    - checksort "`sortedby'" "`varlist'"
    = checksort "" "obs_no"
      ------------------------------------------------ begin merge.checksort ---
      - args is should
      - local i 0
      - return scalar sorted = 1
      - foreach v1 of local should {
      - local ++i
      - local v2 : word `i' of `is'
      = local v2 : word 1 of 
      - if ("`v1'"!="`v2'") {
      = if ("obs_no"!="") {
      - return scalar sorted = 0
      - continue, break
        }
        }
      -------------------------------------------------- end merge.checksort ---
    - if (!r(sorted)) {
    - sort `varlist'
    = sort obs_no
    - }
    - quietly describe using "`using'", varlist short
    = quietly describe using "~/Documents/SocResearch/Dissertation/data/data_tem
> p/_year_inc7.dta", varlist short
      ------------------------------------------------------- begin describe ---
      - version 9
      - local version : di "version " string(_caller()) ":"
      - syntax [anything] [using] [, SImple REPLACE *]
      - if ("`replace'"!="") {
      = if (""!="") {
        describe_mk `0'
        return add
        exit
        }
      - local varlist `"`anything'"'
      = local varlist `""'
      - if ("`simple'" == "") {
      = if ("" == "") {
      - `version' _describe `0'
      = version 11: _describe using "~/Documents/SocResearch/Dissertation/data/d
> ata_temp/_year_inc7.dta", varlist short
      - return add
      - }
      - else {
        if (`"`options'"' != "") {
        di as err "simple may not be combined with other options"
        exit 198
        }
        if (`"`using'"' != "") {
        qui `version' describe `varlist' `using', varlist
        if "`varlist'" == "" {
        local vars "`r(varlist)'"
        }
        else {
        local vars "`varlist'"
        }
        local wid = 2
        local n : list sizeof vars
        if `n'==0 {
        exit
        }
        if "`c(hasicu)'" == "1" {
        foreach x of local vars {
        local wid = max(`wid', udstrlen(`"`x'"'))
        }
        }
        else {
        foreach x of local vars {
        local wid = max(`wid', strlen(`"`x'"'))
        }
        }
        local wid = `wid' + 2
        local cols = int((`c(linesize)'+1)/`wid')
        if `cols' < 2 {
        foreach x of local `vars' {
        di as txt `col' `"`x'"'
        }
        exit
        }
        local lines = `n'/`cols'
        local lines = int(cond(`lines'>int(`lines'), `lines'+1, `lines'))
        forvalues i=1(1)`lines' {
        local top = min((`cols')*`lines'+`i', `n')
        local col = 1
        forvalues j=`i'(`lines')`top' {
        local x : word `j' of `vars'
        di as txt _column(`col') "`x'" _c
        local col = `col' + `wid'
        }
        di as txt
        }
        qui `version' describe `varlist' `using', short
        return add
        }
        else {
        ds `varlist'
        qui `version' _describe `varlist', short
        return add
        }
        }
      --------------------------------------------------------- end describe ---
    - local sortedby "`r(sortlist)'"
    = local sortedby ""
    - checksort "`sortedby'" "`varlist'"
    = checksort "" "obs_no"
      ------------------------------------------------ begin merge.checksort ---
      - args is should
      - local i 0
      - return scalar sorted = 1
      - foreach v1 of local should {
      - local ++i
      - local v2 : word `i' of `is'
      = local v2 : word 1 of 
      - if ("`v1'"!="`v2'") {
      = if ("obs_no"!="") {
      - return scalar sorted = 0
      - continue, break
        }
        }
      -------------------------------------------------- end merge.checksort ---
    - if (!r(sorted)) {
    - preserve
    - qui use "`using'", clear
    = qui use "~/Documents/SocResearch/Dissertation/data/data_temp/_year_inc7.dt
> a", clear
    - sort `varlist'
    = sort obs_no
    - tempfile using
    - qui save "`using'", replace
    = qui save "/var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000i
> ", replace
    - restore
    - }
    - }
    - if ("`nogenerate'"!="") {
    = if ("nogenerate"!="") {
    - tempvar mergevar
    - local mergevaristemp 1
    - }
    - else {
      local mergevar = cond("`generate'"!="", "`generate'", "_merge")
      local mergevaristemp 0
      }
    - local options `update' `replace' `notes' `labels' _merge(`mergevar') `forc
> e'
    = local options     _merge(__000000) 
    - if (bsubstr("`mtype'", 1, 1)=="1") {
    = if (bsubstr("m:1", 1, 1)=="1") {
      local options `options' uniqmaster
      }
    - if (bsubstr("`mtype'", 3, 1)=="1") {
    = if (bsubstr("m:1", 3, 1)=="1") {
    - local options `options' uniqusing
    = local options _merge(__000000) uniqusing
    - }
    - if ("`keepusing'"!="") {
    = if (""!="") {
      local options `options' keep(`keepusing')
      }
    - if ("`keep'" !="" & !strpos("`keep'" , "2")) {
    = if ("3" !="" & !strpos("3" , "2")) {
    - local options `options' nokeep
    = local options _merge(__000000) uniqusing nokeep
    - }
    - if (_caller() > 15) {
    - local version : di "version " string(_caller()) ": "
    - }
    - local _merge `"`version'_merge `varlist' using "`using'", nowarn"'
    = local _merge `"version 16: _merge obs_no using "/var/folders/rp/96l526kj7y
> bdjr5vs5bqqjw80000gn/T//S_20065.00000i", nowarn"'
    - local _merge `"`_merge' `options' tabulate(mresults)"'
    = local _merge `"version 16: _merge obs_no using "/var/folders/rp/96l526kj7y
> bdjr5vs5bqqjw80000gn/T//S_20065.00000i", nowarn _merge(__000000) uniqusing nok
> eep tabulate(mresults)"'
    - if ("`debug'"!="") {
    = if (""!="") {
      di as txt _n "command is"
      di `"`_merge'"' _n
      }
    - `_merge'
    = version 16: _merge obs_no using "/var/folders/rp/96l526kj7ybdjr5vs5bqqjw80
> 000gn/T//S_20065.00000i", nowarn _merge(__000000) uniqusing nokeep tabulate(mr
> esults)
    - if (!`mergevaristemp') {
    = if (!1) {
      capture label list _merge
      if (_rc) {
      label define _merge 1 "master only (1)" 2 "using only (2)" 3 "matched (3)"
>  4 "missing updated (4)" 5 "nonmissing conflict (5)"
      }
      label values `mergevar' _merge
      }
    - if ("`assert'"!="") {
    = if (""!="") {
      if (_caller() < 13) {
      buildexpr expr : `mergevar' "`assert'"
      capture assert `expr'
      if (_rc) {
      error_assert `mergevar' "`assert'"
      }
      }
      else {
      capture checkmresults "`mresults'" "`assert'"
      if (_rc) {
      error_assert `mergevar' "`assert'"
      }
      }
      }
    - if ("`keep'"!="") {
    = if ("3"!="") {
    - buildexpr expr : `mergevar' "`keep'"
    = buildexpr expr : __000000 "3"
      ------------------------------------------------ begin merge.buildexpr ---
      - args userexpr colon varname numbers
      - gettoken first numbers : numbers
      - local list `varname'==`first'
      = local list __000000==3
      - foreach el of local numbers {
        local list `list' | `varname'==`el'
        }
      - c_local `userexpr' "(`list')"
      = c_local expr "(__000000==3)"
      -------------------------------------------------- end merge.buildexpr ---
    - quietly keep if `expr'
    = quietly keep if (__000000==3)
    - }
    - if ("`mtype'"=="1:1") {
    = if ("m:1"=="1:1") {
      qui count if `mergevar'==2
      if (r(N)==0) {
      sort `varlist'
      }
      }
    - if (c(noisily) & "`report'"=="") {
    = if (c(noisily) & ""=="") {
    - local isupdate = ("`replace'"!="" | "`update'"!="")
    = local isupdate = (""!="" | ""!="")
    - present_table `isupdate' `mergevar' `mergevaristemp'
    = present_table 0 __000000 1
      -------------------------------------------- begin merge.present_table ---
      - args isupdate mergevar mergevaristemp
      - if (!`mergevaristemp') {
      = if (!1) {
        local v1 "(`mergevar'==1)"
        local v2 "(`mergevar'==2)"
        local v3 "(`mergevar'==3)"
        local v4 "(`mergevar'==4)"
        local v5 "(`mergevar'==5)"
        }
      - quietly {
      - count if `mergevar'==1
      = count if __000000==1
      - local m1 = r(N)
      - count if `mergevar'==2
      = count if __000000==2
      - local m2 = r(N)
      - if (`isupdate') {
      = if (0) {
        count if `mergevar'==3
        local m3 = r(N)
        count if `mergevar'==4
        local m4 = r(N)
        local m5 = _N - `m1' - `m2' - `m3' - `m4'
        }
      - else {
      - local m3 = _N - `m1' - `m2'
      = local m3 = _N - 0 - 0
      - }
      - }
      - di

      - di as smcl as txt _col(5) "Result" _col(38) "# of obs."
    Result                           # of obs.
      - di as smcl as txt _col(5) "{hline 41}"
    -----------------------------------------
      - di as smcl as txt _col(5) "not matched" _col(30) as res %16.0fc (`m1'+`m
> 2')
      = di as smcl as txt _col(5) "not matched" _col(30) as res %16.0fc (0+0)
    not matched                             0
      - if (`m1'|`m2') {
      = if (0|0) {
        di as smcl as txt _col(9) "from master" _col(30) as res %16.0fc `m1' as 
> txt "  `v1'"
        di as smcl as txt _col(9) "from using" _col(30) as res %16.0fc `m2' as t
> xt "  `v2'"
        di
        }
      - if (!`isupdate') {
      = if (!0) {
      - di as smcl as txt _col(5) "matched" _col(30) as res %16.0fc `m3' as txt 
> "  `v3'"
      = di as smcl as txt _col(5) "matched" _col(30) as res %16.0fc 55333 as txt
>  "  "
    matched                            55,333  
      - }
      - else {
        if (`m1'==0 & `m2'==0) {
        di
        }
        di as smcl as txt _col(5) "matched" _col(30) as res %16.0fc (`m3'+`m4'+`
> m5')
        di as smcl as txt _col(9) "not updated" _col(30) as res %16.0fc `m3' as 
> txt "  `v3'"
        di as smcl as txt _col(9) "missing updated" _col(30) as res %16.0fc `m4'
>  as txt "  `v4'"
        di as smcl as txt _col(9) "nonmissing conflict" _col(30) as res %16.0fc 
> `m5' as txt "  `v5'"
        }
      - di as smcl as txt _col(5) "{hline 41}"
    -----------------------------------------
      ---------------------------------------------- end merge.present_table ---
    - }
    -------------------------------------------------------------- end merge ---
  - save $temp/`ASECdata'_`ref_year'_inc`inc_level'.dta, replace
  = save ~/Documents/SocResearch/Dissertation/data/data_temp/_year_inc7.dta, rep
> lace
file ~/Documents/SocResearch/Dissertation/data/data_temp/_year_inc7.dta saved
  - gen id = _n
  - merge 1:1 id using `premerge_`inc_level'_`y''
  = merge 1:1 id using /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065
> .00000g
    ------------------------------------------------------------ begin merge ---
    - version 11
    - gettoken mtype 0 : 0, parse(" ,")
    - if (!strpos("`mtype'", ":") & "`mtype'"!="") {
    = if (!strpos("1:1", ":") & "1:1"!="") {
      if (_caller()>=11) {
      di as smcl as txt "{p}"
      di as smcl "(note: you are using old"
      di as smcl "{bf:merge} syntax; see"
      di as smcl "{bf:{help merge:[D] merge}} for new syntax)"
      di as smcl "{p_end}"
      }
      merge_10 `mtype' `0'
      exit
      }
    - local origmtype `"`mtype'"'
    = local origmtype `"1:1"'
    - mata: map_mtype(`"mtype"')
    - gettoken token : 0, parse(" ,")
    - if ("`token'"=="_n") {
    = if ("id"=="_n") {
      if ("`mtype'"!="1:1") {
      error_seq_not11 "`mtype'" "`origmtype'"
      }
      gettoken token 0 : 0, parse(" ,")
      local mtype "_n"
      }
    - syntax [varlist(default=none)] using/ [, ASSERT(string) DEBUG GENerate(nam
> e) FORCE KEEP(string) KEEPUSing(string) noLabels NOGENerate noNOTEs REPLACE no
> REPort SORTED UPDATE ]
    - if ("`mtype'"!="_n") {
    = if ("1:1"!="_n") {
    - local origmtype `"`mtype'"'
    = local origmtype `"1:1"'
    - mata: map_mtype(`"mtype"')
    - if ("`varlist'"=="") {
    = if ("id"=="") {
      error_mat_varlist "`mtype'" "`origmtype'"
      }
    - }
    - else {
      if ("`mtype'"=="_n") {
      if ("`varlist'"!="") {
      error_seq_varlist
      }
      }
      }
    - mata: fullfilename("using", "usingfull", "using")
    - mata: resultlist("assert")
    - mata: resultlist("keep")
    - if ("`generate'"!="") {
    = if (""!="") {
      if ("`nogenerate'"!="") {
      di as smcl err "{p}"
      di as smcl "options -generate()- and -nogenerate-"
      di as smcl "may not be specified together."
      di as smcl err "{p_end}"
      }
      confirm new var `generate'
      }
    - if ("`replace'"!="") {
    = if (""!="") {
      if ("`update'"=="") {
      error_replace
      }
      }
    - if ("`sorted'"=="" & "`mtype'"!="_n") {
    = if (""=="" & "1:1"!="_n") {
    - local sortedby : sortedby
    - checksort "`sortedby'" "`varlist'"
    = checksort "" "id"
      ------------------------------------------------ begin merge.checksort ---
      - args is should
      - local i 0
      - return scalar sorted = 1
      - foreach v1 of local should {
      - local ++i
      - local v2 : word `i' of `is'
      = local v2 : word 1 of 
      - if ("`v1'"!="`v2'") {
      = if ("id"!="") {
      - return scalar sorted = 0
      - continue, break
        }
        }
      -------------------------------------------------- end merge.checksort ---
    - if (!r(sorted)) {
    - sort `varlist'
    = sort id
    - }
    - quietly describe using "`using'", varlist short
    = quietly describe using "/var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//
> S_20065.00000g", varlist short
      ------------------------------------------------------- begin describe ---
      - version 9
      - local version : di "version " string(_caller()) ":"
      - syntax [anything] [using] [, SImple REPLACE *]
      - if ("`replace'"!="") {
      = if (""!="") {
        describe_mk `0'
        return add
        exit
        }
      - local varlist `"`anything'"'
      = local varlist `""'
      - if ("`simple'" == "") {
      = if ("" == "") {
      - `version' _describe `0'
      = version 11: _describe using "/var/folders/rp/96l526kj7ybdjr5vs5bqqjw8000
> 0gn/T//S_20065.00000g", varlist short
      - return add
      - }
      - else {
        if (`"`options'"' != "") {
        di as err "simple may not be combined with other options"
        exit 198
        }
        if (`"`using'"' != "") {
        qui `version' describe `varlist' `using', varlist
        if "`varlist'" == "" {
        local vars "`r(varlist)'"
        }
        else {
        local vars "`varlist'"
        }
        local wid = 2
        local n : list sizeof vars
        if `n'==0 {
        exit
        }
        if "`c(hasicu)'" == "1" {
        foreach x of local vars {
        local wid = max(`wid', udstrlen(`"`x'"'))
        }
        }
        else {
        foreach x of local vars {
        local wid = max(`wid', strlen(`"`x'"'))
        }
        }
        local wid = `wid' + 2
        local cols = int((`c(linesize)'+1)/`wid')
        if `cols' < 2 {
        foreach x of local `vars' {
        di as txt `col' `"`x'"'
        }
        exit
        }
        local lines = `n'/`cols'
        local lines = int(cond(`lines'>int(`lines'), `lines'+1, `lines'))
        forvalues i=1(1)`lines' {
        local top = min((`cols')*`lines'+`i', `n')
        local col = 1
        forvalues j=`i'(`lines')`top' {
        local x : word `j' of `vars'
        di as txt _column(`col') "`x'" _c
        local col = `col' + `wid'
        }
        di as txt
        }
        qui `version' describe `varlist' `using', short
        return add
        }
        else {
        ds `varlist'
        qui `version' _describe `varlist', short
        return add
        }
        }
      --------------------------------------------------------- end describe ---
    - local sortedby "`r(sortlist)'"
    = local sortedby "year acs_hhinc"
    - checksort "`sortedby'" "`varlist'"
    = checksort "year acs_hhinc" "id"
      ------------------------------------------------ begin merge.checksort ---
      - args is should
      - local i 0
      - return scalar sorted = 1
      - foreach v1 of local should {
      - local ++i
      - local v2 : word `i' of `is'
      = local v2 : word 1 of year acs_hhinc
      - if ("`v1'"!="`v2'") {
      = if ("id"!="year") {
      - return scalar sorted = 0
      - continue, break
        }
        }
      -------------------------------------------------- end merge.checksort ---
    - if (!r(sorted)) {
    - preserve
    - qui use "`using'", clear
    = qui use "/var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000g"
> , clear
    - sort `varlist'
    = sort id
    - tempfile using
    - qui save "`using'", replace
    = qui save "/var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000i
> ", replace
    - restore
    - }
    - }
    - if ("`nogenerate'"!="") {
    = if (""!="") {
      tempvar mergevar
      local mergevaristemp 1
      }
    - else {
    - local mergevar = cond("`generate'"!="", "`generate'", "_merge")
    = local mergevar = cond(""!="", "", "_merge")
    - local mergevaristemp 0
    - }
    - local options `update' `replace' `notes' `labels' _merge(`mergevar') `forc
> e'
    = local options     _merge(_merge) 
    - if (bsubstr("`mtype'", 1, 1)=="1") {
    = if (bsubstr("1:1", 1, 1)=="1") {
    - local options `options' uniqmaster
    = local options _merge(_merge) uniqmaster
    - }
    - if (bsubstr("`mtype'", 3, 1)=="1") {
    = if (bsubstr("1:1", 3, 1)=="1") {
    - local options `options' uniqusing
    = local options _merge(_merge) uniqmaster uniqusing
    - }
    - if ("`keepusing'"!="") {
    = if (""!="") {
      local options `options' keep(`keepusing')
      }
    - if ("`keep'" !="" & !strpos("`keep'" , "2")) {
    = if ("" !="" & !strpos("" , "2")) {
      local options `options' nokeep
      }
    - if (_caller() > 15) {
    - local version : di "version " string(_caller()) ": "
    - }
    - local _merge `"`version'_merge `varlist' using "`using'", nowarn"'
    = local _merge `"version 16: _merge id using "/var/folders/rp/96l526kj7ybdjr
> 5vs5bqqjw80000gn/T//S_20065.00000i", nowarn"'
    - local _merge `"`_merge' `options' tabulate(mresults)"'
    = local _merge `"version 16: _merge id using "/var/folders/rp/96l526kj7ybdjr
> 5vs5bqqjw80000gn/T//S_20065.00000i", nowarn _merge(_merge) uniqmaster uniqusin
> g tabulate(mresults)"'
    - if ("`debug'"!="") {
    = if (""!="") {
      di as txt _n "command is"
      di `"`_merge'"' _n
      }
    - `_merge'
    = version 16: _merge id using "/var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000g
> n/T//S_20065.00000i", nowarn _merge(_merge) uniqmaster uniqusing tabulate(mres
> ults)
(label statefip_lbl already defined)
    - if (!`mergevaristemp') {
    = if (!0) {
    - capture label list _merge
      ---------------------------------------------------------- begin label ---
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {
      = if (strpos("list", "val") > 0 ) {
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {
        local fix ", nofix"
        }
        gettoken var rest : anything
        while `"`rest'"' != "" {
        gettoken lab rest : rest
        local label "`lab'"
        }
        local vlist : list anything - lab
        if "`lab'" == "." {
        local lab ""
        }
        foreach var of varlist `vlist' {
        `vv' _label `val' `var' `lab' `fix'
        }
        }
      - else {
      - `vv' _label `macval(0)'
      = version 11, missing: _label list _merge
        }
      ------------------------------------------------------------ end label ---
    - if (_rc) {
    - label define _merge 1 "master only (1)" 2 "using only (2)" 3 "matched (3)"
>  4 "missing updated (4)" 5 "nonmissing conflict (5)"
      ---------------------------------------------------------- begin label ---
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {
      = if (strpos("define", "val") > 0 ) {
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {
        local fix ", nofix"
        }
        gettoken var rest : anything
        while `"`rest'"' != "" {
        gettoken lab rest : rest
        local label "`lab'"
        }
        local vlist : list anything - lab
        if "`lab'" == "." {
        local lab ""
        }
        foreach var of varlist `vlist' {
        `vv' _label `val' `var' `lab' `fix'
        }
        }
      - else {
      - `vv' _label `macval(0)'
      = version 11, missing: _label define _merge 1 "master only (1)" 2 "using o
> nly (2)" 3 "matched (3)" 4 "missing updated (4)" 5 "nonmissing conflict (5)"
      - }
      ------------------------------------------------------------ end label ---
    - }
    - label values `mergevar' _merge
    = label values _merge _merge
      ---------------------------------------------------------- begin label ---
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {
      = if (strpos("values", "val") > 0 ) {
      - gettoken val 0 : 0
      - syntax anything [, nofix]
      - if "`fix'" != "" {
      = if "" != "" {
        local fix ", nofix"
        }
      - gettoken var rest : anything
      - while `"`rest'"' != "" {
      = while `" _merge"' != "" {
      - gettoken lab rest : rest
      - local label "`lab'"
      = local label "_merge"
      - }
      - while `"`rest'"' != "" {
      = while `""' != "" {
        gettoken lab rest : rest
        local label "`lab'"
        }
      - local vlist : list anything - lab
      - if "`lab'" == "." {
      = if "_merge" == "." {
        local lab ""
        }
      - foreach var of varlist `vlist' {
      = foreach var of varlist _merge {
      - `vv' _label `val' `var' `lab' `fix'
      = version 11, missing: _label values _merge _merge 
      - }
      - }
      - else {
        `vv' _label `macval(0)'
        }
      ------------------------------------------------------------ end label ---
    - }
    - if ("`assert'"!="") {
    = if (""!="") {
      if (_caller() < 13) {
      buildexpr expr : `mergevar' "`assert'"
      capture assert `expr'
      if (_rc) {
      error_assert `mergevar' "`assert'"
      }
      }
      else {
      capture checkmresults "`mresults'" "`assert'"
      if (_rc) {
      error_assert `mergevar' "`assert'"
      }
      }
      }
    - if ("`keep'"!="") {
    = if (""!="") {
      buildexpr expr : `mergevar' "`keep'"
      quietly keep if `expr'
      }
    - if ("`mtype'"=="1:1") {
    = if ("1:1"=="1:1") {
    - qui count if `mergevar'==2
    = qui count if _merge==2
    - if (r(N)==0) {
    - sort `varlist'
    = sort id
    - }
    - }
    - if (c(noisily) & "`report'"=="") {
    = if (c(noisily) & ""=="") {
    - local isupdate = ("`replace'"!="" | "`update'"!="")
    = local isupdate = (""!="" | ""!="")
    - present_table `isupdate' `mergevar' `mergevaristemp'
    = present_table 0 _merge 0
      -------------------------------------------- begin merge.present_table ---
      - args isupdate mergevar mergevaristemp
      - if (!`mergevaristemp') {
      = if (!0) {
      - local v1 "(`mergevar'==1)"
      = local v1 "(_merge==1)"
      - local v2 "(`mergevar'==2)"
      = local v2 "(_merge==2)"
      - local v3 "(`mergevar'==3)"
      = local v3 "(_merge==3)"
      - local v4 "(`mergevar'==4)"
      = local v4 "(_merge==4)"
      - local v5 "(`mergevar'==5)"
      = local v5 "(_merge==5)"
      - }
      - quietly {
      - count if `mergevar'==1
      = count if _merge==1
      - local m1 = r(N)
      - count if `mergevar'==2
      = count if _merge==2
      - local m2 = r(N)
      - if (`isupdate') {
      = if (0) {
        count if `mergevar'==3
        local m3 = r(N)
        count if `mergevar'==4
        local m4 = r(N)
        local m5 = _N - `m1' - `m2' - `m3' - `m4'
        }
      - else {
      - local m3 = _N - `m1' - `m2'
      = local m3 = _N - 0 - 0
      - }
      - }
      - di

      - di as smcl as txt _col(5) "Result" _col(38) "# of obs."
    Result                           # of obs.
      - di as smcl as txt _col(5) "{hline 41}"
    -----------------------------------------
      - di as smcl as txt _col(5) "not matched" _col(30) as res %16.0fc (`m1'+`m
> 2')
      = di as smcl as txt _col(5) "not matched" _col(30) as res %16.0fc (0+0)
    not matched                             0
      - if (`m1'|`m2') {
      = if (0|0) {
        di as smcl as txt _col(9) "from master" _col(30) as res %16.0fc `m1' as 
> txt "  `v1'"
        di as smcl as txt _col(9) "from using" _col(30) as res %16.0fc `m2' as t
> xt "  `v2'"
        di
        }
      - if (!`isupdate') {
      = if (!0) {
      - di as smcl as txt _col(5) "matched" _col(30) as res %16.0fc `m3' as txt 
> "  `v3'"
      = di as smcl as txt _col(5) "matched" _col(30) as res %16.0fc 55333 as txt
>  "  (_merge==3)"
    matched                            55,333  (_merge==3)
      - }
      - else {
        if (`m1'==0 & `m2'==0) {
        di
        }
        di as smcl as txt _col(5) "matched" _col(30) as res %16.0fc (`m3'+`m4'+`
> m5')
        di as smcl as txt _col(9) "not updated" _col(30) as res %16.0fc `m3' as 
> txt "  `v3'"
        di as smcl as txt _col(9) "missing updated" _col(30) as res %16.0fc `m4'
>  as txt "  `v4'"
        di as smcl as txt _col(9) "nonmissing conflict" _col(30) as res %16.0fc 
> `m5' as txt "  `v5'"
        }
      - di as smcl as txt _col(5) "{hline 41}"
    -----------------------------------------
      ---------------------------------------------- end merge.present_table ---
    - }
    -------------------------------------------------------------- end merge ---
  - generate category_n = .
(55,333 missing values generated)
  - replace category_n = `N'
  = replace category_n = 6260
(55,333 real changes made)
  - label var category_n "N respondents in income level in post-merge dataset'"
    ------------------------------------------------------------ begin label ---
    - version 10.0
    - local vv : display "version " string(_caller()) ", missing:"
    - gettoken val : 0
    - if (strpos("`val'", "val") > 0 ) {
    = if (strpos("var", "val") > 0 ) {
      gettoken val 0 : 0
      syntax anything [, nofix]
      if "`fix'" != "" {
      local fix ", nofix"
      }
      gettoken var rest : anything
      while `"`rest'"' != "" {
      gettoken lab rest : rest
      local label "`lab'"
      }
      local vlist : list anything - lab
      if "`lab'" == "." {
      local lab ""
      }
      foreach var of varlist `vlist' {
      `vv' _label `val' `var' `lab' `fix'
      }
      }
    - else {
    - `vv' _label `macval(0)'
    = version 16, missing: _label var category_n "N respondents in income level 
> in post-merge dataset'"
    - }
    -------------------------------------------------------------- end label ---
  - di "Merged ASEC values with original Research dataset for inc_level " `inc_l
> evel' " ($`lower_bound'-`upper_bound') and year `y'."
  = di "Merged ASEC values with original Research dataset for inc_level " 7 " ($
> 100000-150000) and year 2019."
Merged ASEC values with original Research dataset for inc_level 7 ($100000-15000
> 0) and year 2019.
  - tempfile temp_`inc_level'_`y'
  = tempfile temp_7_2019
  - save `temp_`inc_level'_`y'', replace
  = save /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000h, repla
> ce
(note: file /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000h not
>  found)
file /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000h saved
  - di "Saved REDI data (with continuous data) for inc_level " `inc_level' " ($`
> lower_bound'-`upper_bound') and year `y' in file"
  = di "Saved REDI data (with continuous data) for inc_level " 7 " ($100000-1500
> 00) and year 2019 in file"
Saved REDI data (with continuous data) for inc_level 7 ($100000-150000) and year
>  2019 in file
  - }
  - use `working_regex', clear
  = use /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.000003, clear
(Streamlined ACS data, 2019)
  - keep if `inc_cat_var' == `inc_level'
  = keep if acs_hhinc == 8
(283,980 observations deleted)
  - di "The current inc_level is: " `inc_level'
  = di "The current inc_level is: " 8
The current inc_level is: 8
  - if regexm(inc_decoded, "^[a-z/A-Z]+") == 1 {
    di "The inc_level " `inc_level' " is at the lowest end of the " "original Re
> search dataset income range"
    destring inc_decoded, ignore("Less than LESS THAN Under,$ ") generate(`inc_c
> at_var'_ub)
    gen `inc_cat_var'_lb = -100000
    di "Lower bound of -100,000 created for inc_level " `inc_level'
    }
  - else if regexm(inc_decoded, "[a-z/A-Z]+$") == 1 {
    di "The inc_level " `inc_level' " is at the highest end of the " "original R
> esearch dataset income range"
    destring inc_decoded, ignore("and over or over,$ or more OR MORE") generate(
> `inc_cat_var'_lb)
    gen `inc_cat_var'_ub = 999999
    di "Upper bound of 999999 created for inc_level " `inc_level'
    }
  - else if regexm(inc_decoded, "[.][a-z]") == 1 {
    di "The inc_level " `inc_level' " is all missing"
    gen `inc_cat_var'_lb = .
    gen `inc_cat_var'_ub = .
    di "Lower and upper bound of . created for inc_level " `inc_level'
    }
  - else if regexm(inc_decoded, "[0-9]+$") == 1 {
  - di "The inc_level " `inc_level' " has a lower and an upper level"
  = di "The inc_level " 8 " has a lower and an upper level"
The inc_level 8 has a lower and an upper level
  - split inc_decoded, parse("-" "to" "-" "to under" "to less than" "UP TO" "but
>  less than") ignore(" ,$") destring
    ------------------------------------------------------------ begin split ---
    - version 8
    - syntax varname(str) [if] [in] [, Generate(str) noTrim Parse(str asis) DEST
> RING force float Ignore(string asis) percent Limit(numlist int >0 max=1) ]
    - local verpre : display "version " %4.1f _caller() ":"
    - if "`destring'"=="" {
    = if "destring"=="" {
      foreach option in force float ignore percent {
      if `"``option''"'!="" {
      display as error "may not specify `option' without specifying destring"
      exit 198
      }
      }
      }
    - else {
    - if `"`ignore'"'!="" {
    = if `"" ,$""'!="" {
    - if _caller() >= 14 {
    - if ustrfindfirst(`"`ignore'"',",") & !ustrfindfirst(`"`ignore'"',`"""') {
    = if ustrfindfirst(`"" ,$""',",") & !ustrfindfirst(`"" ,$""',`"""') {
      display as error `"ignore string must be enclosed with quotes to ignore co
> mmas or use options"'
      exit 198
      }
    - }
    - `verpre' _parse_ignore `ignore'
    = version 16.0: _parse_ignore " ,$"
      -------------------------------------------------- begin _parse_ignore ---
      - version 14
      - sreturn clear
      - if _caller() < 14 {
        capture syntax [anything] , [ASChars] [ASBytes] [illegal]
        if !_rc {
        if "`aschars'`asbytes'`illegal'"!="" {
        display as error "may not specify options in the ignore option for Stata
>  version less than 14"
        exit 198
        }
        }
        sreturn local aschars 0
        sreturn local illegal 0
        }
      - else {
      - syntax [anything] , [ASChars] [ASBytes] [illegal]
      - if "`asbytes'"!="" {
      = if ""!="" {
        if "`aschars'"!="" {
        display as error "may specify only one of the ignore options aschars and
>  asbytes"
        exit 198
        }
        if "`illegal'"!="" {
        display as error "may not specify the ignore option illegal when specify
> ing asbytes"
        exit 198
        }
        }
      - if "`asbytes'"=="" {
      = if ""=="" {
      - if ustrinvalidcnt(`"`anything'"') {
      = if ustrinvalidcnt(`"" ,$""') {
        display as error "invalid Unicode characters may not be ignored when rem
> oving aschars"
        exit 198
        }
      - }
      - sreturn local aschars = "`asbytes'"==""
      = sreturn local aschars = ""==""
      - sreturn local illegal = "`illegal'"!=""
      = sreturn local illegal = ""!=""
      - capture sreturn local ignore `anything'
      = capture sreturn local ignore " ,$"
      - if _rc {
        sreturn local ignore `"`anything'"'
        }
      - }
      ---------------------------------------------------- end _parse_ignore ---
    - }
    - }
    - marksample touse, strok
    - qui count if `touse'
    = qui count if __000000
    - if r(N) == 0 {
      error 2000
      }
    - if `"`parse'"' == `""' | `"`parse'"' == `""""' {
    = if `""-" "to" "-" "to under" "to less than" "UP TO" "but less than""' == `
> ""' | `""-" "to" "-" "to under" "to less than" "UP TO" "but less than""' == `"
> """' {
      if "`trim'" != "" {
      di as err "parsing on spaces incompatible with notrim"
      exit 198
      }
      local parse `"" ""'
      local trm "trim"
      }
    - if `"`parse'"' == `""' | `"`parse'"' == `""""' {
    = if `""-" "to" "-" "to under" "to less than" "UP TO" "but less than""' == `
> ""' | `""-" "to" "-" "to under" "to less than" "UP TO" "but less than""' == `"
> """' {
      local parse `"" ""'
      local trm "trim"
      }
    - local nparse : word count `parse'
    = local nparse : word count "-" "to" "-" "to under" "to less than" "UP TO" "
> but less than"
    - tokenize `"`parse'"'
    = tokenize `""-" "to" "-" "to under" "to less than" "UP TO" "but less than""
> '
    - if `"`generate'"' != "" {
    = if `""' != "" {
      confirm name `generate'
      if `: word count `generate'' > 1 {
      di as err "invalid stub `generate'"
      exit 198
      }
      }
    - qui {
    - tempvar vw tp mp pl
    - gen int `tp' = 0
    = gen int __000002 = 0
    - gen int `mp' = 0
    = gen int __000003 = 0
    - gen int `pl' = 0
    = gen int __000004 = 0
    - gen str1 `vw' = ""
    = gen str1 __000001 = ""
    - if "`trim'" == "" {
    = if "" == "" {
    - replace `vw' = trim(`varlist') if `touse'
    = replace __000001 = trim(inc_decoded) if __000000
    - }
    - else {
      replace `vw' = `varlist' if `touse'
      }
    - }
    - if "`generate'" == "" {
    = if "" == "" {
    - local generate "`varlist'"
    = local generate "inc_decoded"
    - }
    - local j = 0
    - local go = 1
    - if "`limit'" == "" {
    = if "" == "" {
    - local limit .
    - }
    - qui while `go' & `j' < `limit' {
    = qui while 1 & 0 < . {
    - replace `mp' = .
    = replace __000003 = .
    - replace `pl' = 0
    = replace __000004 = 0
    - forval i = 1 / `nparse' {
    = forval i = 1 / 7 {
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"-"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"-"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"to"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"to"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"-"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"-"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"to under"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"to under"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"to less than"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"to less than"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"UP TO"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"UP TO"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"but less than"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"but less than"') if __000003 == __000002
    - }
    - local ++j
    - tempvar part`j'
    = tempvar part1
    - gen str1 `part`j'' = ""
    = gen str1 __000005 = ""
    - replace `part`j'' = substr(`vw', 1, `mp'-1) if `mp' < .
    = replace __000005 = substr(__000001, 1, __000003-1) if __000003 < .
    - replace `vw' = `trm'(substr(`vw', `mp'+`pl', .)) if `mp' < .
    = replace __000001 = (substr(__000001, __000003+__000004, .)) if __000003 < 
> .
    - replace `part`j'' = `vw' if `mp' >= .
    = replace __000005 = __000001 if __000003 >= .
    - replace `vw' = "" if `mp' >= .
    = replace __000001 = "" if __000003 >= .
    - local newvars "`newvars'`generate'`j' "
    = local newvars "inc_decoded1 "
    - capture assert `vw' == ""
    = capture assert __000001 == ""
    - local go = _rc
    - }
    - qui while `go' & `j' < `limit' {
    = qui while 9 & 1 < . {
    - replace `mp' = .
    = replace __000003 = .
    - replace `pl' = 0
    = replace __000004 = 0
    - forval i = 1 / `nparse' {
    = forval i = 1 / 7 {
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"-"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"-"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"to"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"to"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"-"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"-"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"to under"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"to under"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"to less than"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"to less than"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"UP TO"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"UP TO"') if __000003 == __000002
    - }
    - replace `tp' = index(`vw', `"``i''"')
    = replace __000002 = index(__000001, `"but less than"')
    - replace `mp' = min(`tp', `mp') if `tp'
    = replace __000003 = min(__000002, __000003) if __000002
    - replace `pl' = length(`"``i''"') if `mp' == `tp'
    = replace __000004 = length(`"but less than"') if __000003 == __000002
    - }
    - local ++j
    - tempvar part`j'
    = tempvar part2
    - gen str1 `part`j'' = ""
    = gen str1 __000006 = ""
    - replace `part`j'' = substr(`vw', 1, `mp'-1) if `mp' < .
    = replace __000006 = substr(__000001, 1, __000003-1) if __000003 < .
    - replace `vw' = `trm'(substr(`vw', `mp'+`pl', .)) if `mp' < .
    = replace __000001 = (substr(__000001, __000003+__000004, .)) if __000003 < 
> .
    - replace `part`j'' = `vw' if `mp' >= .
    = replace __000006 = __000001 if __000003 >= .
    - replace `vw' = "" if `mp' >= .
    = replace __000001 = "" if __000003 >= .
    - local newvars "`newvars'`generate'`j' "
    = local newvars "inc_decoded1 inc_decoded2 "
    - capture assert `vw' == ""
    = capture assert __000001 == ""
    - local go = _rc
    - }
    - qui while `go' & `j' < `limit' {
    = qui while 0 & 2 < . {
      replace `mp' = .
      replace `pl' = 0
      forval i = 1 / `nparse' {
      replace `tp' = index(`vw', `"``i''"')
      replace `mp' = min(`tp', `mp') if `tp'
      replace `pl' = length(`"``i''"') if `mp' == `tp'
      }
      local ++j
      tempvar part`j'
      gen str1 `part`j'' = ""
      replace `part`j'' = substr(`vw', 1, `mp'-1) if `mp' < .
      replace `vw' = `trm'(substr(`vw', `mp'+`pl', .)) if `mp' < .
      replace `part`j'' = `vw' if `mp' >= .
      replace `vw' = "" if `mp' >= .
      local newvars "`newvars'`generate'`j' "
      capture assert `vw' == ""
      local go = _rc
      }
    - capture confirm new var `newvars'
    = capture confirm new var inc_decoded1 inc_decoded2 
    - if _rc {
      di as err "cannot generate new variables using stub `generate'"
      exit _rc
      }
    - qui forval i = 1 / `j' {
    = qui forval i = 1 / 2 {
    - gen str1 `generate'`i' = ""
    = gen str1 inc_decoded1 = ""
    - replace `generate'`i' = `part`i''
    = replace inc_decoded1 = __000005
    - }
    - gen str1 `generate'`i' = ""
    = gen str1 inc_decoded2 = ""
    - replace `generate'`i' = `part`i''
    = replace inc_decoded2 = __000006
    - }
    - return local varlist "`newvars'"
    = return local varlist "inc_decoded1 inc_decoded2 "
    - return local nvars "`j'"
    = return local nvars "2"
    - local s = cond(`j' > 1, "s", "")
    = local s = cond(2 > 1, "s", "")
    - if "`destring'" != "" {
    = if "destring" != "" {
    - di as res "variable`s' born as string: "
    = di as res "variables born as string: "
variables born as string: 
    - }
    - else di as res "variable`s' created as string: "
    = else di as res "variables created as string: "
    - ds `newvars'
    = ds inc_decoded1 inc_decoded2 
      ------------------------------------------------------------- begin ds ---
      - version 9
      - local version : di "version " string(_caller()) ":"
      - if (_caller() <= 4) {
        `version' describe, simple
        exit
        }
      - else {
      - ds_util `0'
      = ds_util inc_decoded1 inc_decoded2 
        ------------------------------------------------------ begin ds_util ---
        - version 8
        - syntax [varlist] [, HAS(str asis) NOT(str asis) NOT2 INSEnsitive Detai
> l Alpha Varwidth(int 12) Skip(int 2) INDENT(int 0)]
        - if "`varlist'" == "" {
        = if "inc_decoded1 inc_decoded2" == "" {
          exit
          }
        - if !inrange(`indent',0,244) {
        = if !inrange(0,0,244) {
          di as err "indent() should be in the range 0..244"
          exit 198
          }
        - if !inrange(`varwidth',5,32) {
        = if !inrange(12,5,32) {
          di as err "varwidth() should be in the range 5..32"
          exit 198
          }
        - if !inrange(`skip',1,10) {
        = if !inrange(2,1,10) {
          di as err "skip() should be in the range 1..10"
          exit 198
          }
        - local nopts = (`"`has'"' != "") + (`"`not'"' != "") + ("`not2'" != "")
        = local nopts = (`""' != "") + (`""' != "") + ("" != "")
        - if `nopts' == 3 {
        = if 0 == 3 {
          di as err "may not combine options has(), not(), and not"
          exit 198
          }
        - else if `nopts' == 2 {
        = else if 0 == 2 {
          if (`"`has'"' == "") {
          di as err "may not combine options not() and not"
          exit 198
          }
          else if (`"`not'"' == "") {
          di as err "may not combine options has() and not"
          exit 198
          }
          else if (`"`not2'"' == "") {
          di as err "may not combine options has() and not()"
          exit 198
          }
          }
        - if `"`not'"' != "" {
        = if `""' != "" {
          local has `"`not'"'
          local opt "not"
          }
        - else if `"`has'"' != "" {
        = else if `""' != "" {
          local opt "has"
          }
        - local inse = "`insensitive'" != ""
        = local inse = "" != ""
        - if `"`has'"' != "" {
        = if `""' != "" {
          CheckHas `"`has'"' "`opt'" "`inse'"
          if "`what'" == "varl" | "`what'" == "vall" {
          VarlVall "`what'" `"`which'"' "`varlist'" "`inse'"
          }
          else if "`what'" == "f" {
          Format `"`which'"' "`varlist'" "`inse'"
          }
          else if "`what'" == "c" {
          Char `"`which'"' "`varlist'" "`inse'"
          }
          else if "`what'" == "t" {
          Type `"`which'"' "`varlist'"
          }
          if `"`not'"' != "" {
          local varlist : list varlist - vlist
          }
          else if `"`has'"' != "" {
          local varlist "`vlist'"
          }
          }
        - if `"`not2'"' != "" {
        = if `""' != "" {
          unab all : *
          local varlist : list all - varlist
          }
        - if "`varlist'" == "" {
        = if "inc_decoded1 inc_decoded2" == "" {
          exit
          }
        - if "`alpha'" != "" {
        = if "" != "" {
          local varlist : list sort varlist
          }
        - if "`detail'" != "" {
        = if "" != "" {
          describe `varlist'
          }
        - else {
        - local nvar : word count `varlist'
        = local nvar : word count inc_decoded1 inc_decoded2
        - local ncol = int((`:set linesize' + `skip') / (`varwidth' + `skip'))
        = local ncol = int((80 + 2) / (12 + 2))
        - local i 0
        - local vlist
        - foreach v of local varlist {
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" inc_decoded1"'
        - }
        - local vlist `"`vlist' `= abbrev("`v'",`varwidth')'"'
        = local vlist `" inc_decoded1 inc_decoded2"'
        - }
        - DisplayInCols txt `indent' `skip' 0 `vlist'
        = DisplayInCols txt 0 2 0  inc_decoded1 inc_decoded2
          -------------------------------------- begin ds_util.DisplayInCols ---
          - gettoken sty 0 : 0
          - gettoken indent 0 : 0
          - gettoken pad 0 : 0
          - gettoken wid 0 : 0
          - local indent = cond(`indent'==. | `indent'<0, 0, `indent')
          = local indent = cond(0==. | 0<0, 0, 0)
          - local pad = cond(`pad'==. | `pad'<1, 2, `pad')
          = local pad = cond(2==. | 2<1, 2, 2)
          - local wid = cond(`wid'==. | `wid'<0, 0, `wid')
          = local wid = cond(0==. | 0<0, 0, 0)
          - local n : list sizeof 0
          - if `n'==0 {
          = if 2==0 {
            exit
            }
          - foreach x of local 0 {
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(0, length(`"inc_decoded1"'))
          - }
          - local wid = max(`wid', length(`"`x'"'))
          = local wid = max(12, length(`"inc_decoded2"'))
          - }
          - local wid = `wid' + `pad'
          = local wid = 12 + 2
          - local cols = int((`c(linesize)'+1-`indent')/`wid')
          = local cols = int((80+1-0)/14)
          - if `cols' < 2 {
          = if 5 < 2 {
            if `indent' {
            local col "_column(`=`indent'+1')"
            }
            foreach x of local 0 {
            di as `sty' `col' `"`x'"'
            }
            exit
            }
          - local lines = `n'/`cols'
          = local lines = 2/5
          - local lines = int(cond(`lines'>int(`lines'), `lines'+1, `lines'))
          = local lines = int(cond(.4>int(.4), .4+1, .4))
          - forvalues i=1(1)`lines' {
          = forvalues i=1(1)1 {
          - local top = min((`cols')*`lines'+`i', `n')
          = local top = min((5)*1+1, 2)
          - local col = `indent' + 1
          = local col = 0 + 1
          - forvalues j=`i'(`lines')`top' {
          = forvalues j=1(1)2 {
          - local x : word `j' of `0'
          = local x : word 1 of   inc_decoded1 inc_decoded2
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(1) "inc_decoded1" _c
inc_decoded1          - local col = `col' + `wid'
          = local col = 1 + 14
          - }
          - local x : word `j' of `0'
          = local x : word 2 of   inc_decoded1 inc_decoded2
          - di as `sty' _column(`col') "`x'" _c
          = di as txt _column(15) "inc_decoded2" _c
              inc_decoded2          - local col = `col' + `wid'
          = local col = 15 + 14
          - }
          - di as `sty'
          = di as txt

          - }
          ---------------------------------------- end ds_util.DisplayInCols ---
        - }
        - return local varlist `varlist'
        = return local varlist inc_decoded1 inc_decoded2
        -------------------------------------------------------- end ds_util ---
      - exit
      --------------------------------------------------------------- end ds ---
    - if "`destring'" != "" {
    = if "destring" != "" {
    - if `"`ignore'"' != "" {
    = if `"" ,$""' != "" {
    - local ignore `"ignore(`ignore')"'
    = local ignore `"ignore(" ,$")"'
    - }
    - `verpre' destring `newvars', replace `force' `float' `ignore' `percent'
    = version 16.0: destring inc_decoded1 inc_decoded2 , replace   ignore(" ,$")
>  
      ------------------------------------------------------- begin destring ---
      - version 14
      - local cmdargs = `"`0'"'
      = local cmdargs = `"inc_decoded1 inc_decoded2 , replace   ignore(" ,$") "'
      - local verpre : display "version " %4.1f _caller() ":"
      - syntax [varlist], [Generate(string) replace] [force] [float] [Ignore(str
> ing asis)] [percent] [dpcomma]
      - if _caller() >= 14 {
      - if ustrpos(`"`ignore'"',",") & !ustrpos(`"`ignore'"',`"""') {
      = if ustrpos(`"" ,$""',",") & !ustrpos(`"" ,$""',`"""') {
        display as error `"ignore string must be enclosed with quotes to ignore 
> commas or use options"'
        exit 198
        }
      - }
      - `verpre' _parse_ignore `ignore'
      = version 16.0: _parse_ignore " ,$"
        ------------------------------------------------ begin _parse_ignore ---
        - version 14
        - sreturn clear
        - if _caller() < 14 {
          capture syntax [anything] , [ASChars] [ASBytes] [illegal]
          if !_rc {
          if "`aschars'`asbytes'`illegal'"!="" {
          display as error "may not specify options in the ignore option for Sta
> ta version less than 14"
          exit 198
          }
          }
          sreturn local aschars 0
          sreturn local illegal 0
          }
        - else {
        - syntax [anything] , [ASChars] [ASBytes] [illegal]
        - if "`asbytes'"!="" {
        = if ""!="" {
          if "`aschars'"!="" {
          display as error "may specify only one of the ignore options aschars a
> nd asbytes"
          exit 198
          }
          if "`illegal'"!="" {
          display as error "may not specify the ignore option illegal when speci
> fying asbytes"
          exit 198
          }
          }
        - if "`asbytes'"=="" {
        = if ""=="" {
        - if ustrinvalidcnt(`"`anything'"') {
        = if ustrinvalidcnt(`"" ,$""') {
          display as error "invalid Unicode characters may not be ignored when r
> emoving aschars"
          exit 198
          }
        - }
        - sreturn local aschars = "`asbytes'"==""
        = sreturn local aschars = ""==""
        - sreturn local illegal = "`illegal'"!=""
        = sreturn local illegal = ""!=""
        - capture sreturn local ignore `anything'
        = capture sreturn local ignore " ,$"
        - if _rc {
          sreturn local ignore `"`anything'"'
          }
        - }
        -------------------------------------------------- end _parse_ignore ---
      - if _caller() < 14 {
        local aschars 0
        syntax [varlist], [Generate(string) replace] [force] [float] [Ignore(str
> ing)] [percent] [dpcomma]
        }
      - else {
      - if `"`s(ignore)'"'!="" {
      = if `" ,$"'!="" {
      - local ignore `"`s(ignore)'"'
      = local ignore `" ,$"'
      - }
      - local aschars `s(aschars)'
      = local aschars 1
      - if `s(illegal)' {
      = if 0 {
        local illegal = ustrunescape("\ufffd")
        }
      - }
      - if "`percent'" == "percent" {
      = if "" == "percent" {
        if !ustrpos(`"`ignore'"', "%") {
        local ignore `"`ignore'%"'
        }
        }
      - if "`illegal'"!="" {
      = if ""!="" {
        local ignore `"`ignore'`illegal'"'
        }
      - if `"`float'"'!="" {
      = if `""'!="" {
        local gtype "float"
        }
      - else {
      - local gtype "double"
      - }
      - if "`generate'" != "" & "`replace'" != "" {
      = if "" != "" & "replace" != "" {
        di as err "options generate and replace are mutually exclusive"
        exit 198
        }
      - if "`generate'" == "" & "`replace'" == "" {
      = if "" == "" & "replace" == "" {
        di as err "must specify either generate or replace option"
        exit 198
        }
      - if "`generate'" != "" {
      = if "" != "" {
        local ct1: word count `varlist'
        local save "`varlist'"
        local 0 "`generate'"
        capture syntax newvarlist
        if _rc {
        di as err "generate() contains existing variable(s) and/or illegal varia
> ble name(s)"
        exit _rc
        }
        local generate "`varlist'"
        local varlist "`save'"
        local ct2: word count `generate'
        if `ct1' != `ct2' {
        di as err "number of variables in varlist must equal"
        di as err "number of variables in generate(newvarlist)"
        exit 198
        }
        }
      - local m 1
      - if `"`ignore'"' == "" {
      = if `" ,$"' == "" {
        local ignore ""
        }
      - if `aschars' {
      = if 1 {
      - local l = ustrlen(`"`ignore'"')
      = local l = ustrlen(`" ,$"')
      - }
      - else {
        local l = length(`"`ignore'"')
        }
      - while `m' <= `l' {
      = while 1 <= 3 {
      - if `aschars' {
      = if 1 {
      - local char`m' = usubstr(`"`ignore'"', `m', 1)
      = local char1 = usubstr(`" ,$"', 1, 1)
      - }
      - else {
        local char`m' = substr(`"`ignore'"', `m', 1)
        }
      - local m = `m' + 1
      = local m = 1 + 1
      - }
      - while `m' <= `l' {
      = while 2 <= 3 {
      - if `aschars' {
      = if 1 {
      - local char`m' = usubstr(`"`ignore'"', `m', 1)
      = local char2 = usubstr(`" ,$"', 2, 1)
      - }
      - else {
        local char`m' = substr(`"`ignore'"', `m', 1)
        }
      - local m = `m' + 1
      = local m = 2 + 1
      - }
      - while `m' <= `l' {
      = while 3 <= 3 {
      - if `aschars' {
      = if 1 {
      - local char`m' = usubstr(`"`ignore'"', `m', 1)
      = local char3 = usubstr(`" ,$"', 3, 1)
      - }
      - else {
        local char`m' = substr(`"`ignore'"', `m', 1)
        }
      - local m = `m' + 1
      = local m = 3 + 1
      - }
      - while `m' <= `l' {
      = while 4 <= 3 {
        if `aschars' {
        local char`m' = usubstr(`"`ignore'"', `m', 1)
        }
        else {
        local char`m' = substr(`"`ignore'"', `m', 1)
        }
        local m = `m' + 1
        }
      - if `aschars' {
      = if 1 {
      - local aswhat "character"
      - }
      - else {
        local aswhat "byte"
        }
      - if "`generate'"!="" {
      = if ""!="" {
        local genrep "generate"
        }
      - else {
      - local genrep "replace"
      - }
      - local tvars OLDVAR NEWVAR ismissing found topct
      - tempvar `tvars'
      = tempvar OLDVAR NEWVAR ismissing found topct
      - local varno 0
      - foreach var of varlist `varlist' {
      = foreach var of varlist inc_decoded1 inc_decoded2 {
      - local varno = `varno' + 1
      = local varno = 0 + 1
      - if "`generate'"!="" {
      = if ""!="" {
        local finalvarname : word `varno' of `generate'
        local finalprint "`finalvarname' "
        }
      - else {
      - local finalvarname "`var'"
      = local finalvarname "inc_decoded1"
      - local finalprint ""
      - }
      - capture confirm string variable `var'
      = capture confirm string variable inc_decoded1
      - if _rc != 0 {
        di as txt "`var' already numeric; no " as res "`genrep'"
        }
      - else {
      - qui gen `OLDVAR' = `var'
      = qui gen __000007 = inc_decoded1
      - local jj 1
      - local b
      - local bcnt = 0
      - local c
      - local makepct
      - while `"`char`jj''"' != "" {
      = while `" "' != "" {
      - capture drop `found'
      = capture drop __00000A
      - capture drop `topct'
      = capture drop __00000B
      - local t `"`char`jj''"'
      = local t `" "'
      - if `aschars' {
      = if 1 {
      - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
      = qui gen byte __00000A = ustrpos(__000007, `" "') != 0
      - }
      - else {
        qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
        }
      - qui summarize `found', meanonly
      = qui summarize __00000A, meanonly
      - if r(sum) > 0 {
      - if `"`t'"'=="`illegal'" {
      = if `" "'=="" {
        local b `"`b' illegal Unicode"'
        }
      - else if `"`t'"' == " " {
      = else if `" "' == " " {
      - local b `"`b' space"'
      = local b `" space"'
      - }
      - else {
        local b `"`b' `t'"'
        }
      - local ++bcnt
      - }
      - if `aschars' {
      = if 1 {
      - if `"`t'"'=="%" {
      = if `" "'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if ustrpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
      - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
      = qui replace __000007 = usubinstr(__000007, `" "', "", .)
      - }
      - else {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if strpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
        }
      - local jj = `jj' + 1
      = local jj = 1 + 1
      - }
      - while `"`char`jj''"' != "" {
      = while `","' != "" {
      - capture drop `found'
      = capture drop __00000A
      - capture drop `topct'
      = capture drop __00000B
      - local t `"`char`jj''"'
      = local t `","'
      - if `aschars' {
      = if 1 {
      - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
      = qui gen byte __00000A = ustrpos(__000007, `","') != 0
      - }
      - else {
        qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
        }
      - qui summarize `found', meanonly
      = qui summarize __00000A, meanonly
      - if r(sum) > 0 {
        if `"`t'"'=="`illegal'" {
        local b `"`b' illegal Unicode"'
        }
        else if `"`t'"' == " " {
        local b `"`b' space"'
        }
        else {
        local b `"`b' `t'"'
        }
        local ++bcnt
        }
      - if `aschars' {
      = if 1 {
      - if `"`t'"'=="%" {
      = if `","'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if ustrpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
      - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
      = qui replace __000007 = usubinstr(__000007, `","', "", .)
      - }
      - else {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if strpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
        }
      - local jj = `jj' + 1
      = local jj = 2 + 1
      - }
      - while `"`char`jj''"' != "" {
      = while `"$"' != "" {
      - capture drop `found'
      = capture drop __00000A
      - capture drop `topct'
      = capture drop __00000B
      - local t `"`char`jj''"'
      = local t `"$"'
      - if `aschars' {
      = if 1 {
      - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
      = qui gen byte __00000A = ustrpos(__000007, `"$"') != 0
      - }
      - else {
        qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
        }
      - qui summarize `found', meanonly
      = qui summarize __00000A, meanonly
      - if r(sum) > 0 {
        if `"`t'"'=="`illegal'" {
        local b `"`b' illegal Unicode"'
        }
        else if `"`t'"' == " " {
        local b `"`b' space"'
        }
        else {
        local b `"`b' `t'"'
        }
        local ++bcnt
        }
      - if `aschars' {
      = if 1 {
      - if `"`t'"'=="%" {
      = if `"$"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if ustrpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
      - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
      = qui replace __000007 = usubinstr(__000007, `"$"', "", .)
      - }
      - else {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if strpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
        }
      - local jj = `jj' + 1
      = local jj = 3 + 1
      - }
      - while `"`char`jj''"' != "" {
      = while `""' != "" {
        capture drop `found'
        capture drop `topct'
        local t `"`char`jj''"'
        if `aschars' {
        qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
        }
        else {
        qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
        }
        qui summarize `found', meanonly
        if r(sum) > 0 {
        if `"`t'"'=="`illegal'" {
        local b `"`b' illegal Unicode"'
        }
        else if `"`t'"' == " " {
        local b `"`b' space"'
        }
        else {
        local b `"`b' `t'"'
        }
        local ++bcnt
        }
        if `aschars' {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if ustrpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
        }
        else {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if strpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
        }
        local jj = `jj' + 1
        }
      - if _caller() >= 14 {
      - qui replace `OLDVAR' = ustrtrim(`OLDVAR')
      = qui replace __000007 = ustrtrim(__000007)
      - }
      - else {
        qui replace `OLDVAR' = strtrim(`OLDVAR')
        }
      - quietly gen byte `ismissing' = `OLDVAR'=="" | `OLDVAR'=="." | (strlen(`O
> LDVAR')==2 & inrange(`OLDVAR',".a",".z"))
      = quietly gen byte __000009 = __000007=="" | __000007=="." | (strlen(__000
> 007)==2 & inrange(__000007,".a",".z"))
      - if ("`dpcomma'" != "") {
      = if ("" != "") {
        qui replace `OLDVAR' = subinstr(`OLDVAR',".","X",.) if !`ismissing'
        qui replace `OLDVAR' = subinstr(`OLDVAR', ",", ".", 1) if !ustrregexm(`O
> LDVAR',"(,[a-z])|(^,$)")
        }
      - if _caller() >= 14 {
      - qui replace `OLDVAR' = ustrregexrf(`OLDVAR',"^0+","0")
      = qui replace __000007 = ustrregexrf(__000007,"^0+","0")
      - }
      - else {
        qui replace `OLDVAR' = regexr(`OLDVAR',"^0+","0")
        }
      - qui gen `gtype' `NEWVAR' = real(`OLDVAR')
      = qui gen double __000008 = real(__000007)
      - qui summarize `ismissing', meanonly
      = qui summarize __000009, meanonly
      - local oldmiss = r(sum)
      - qui count if missing(`NEWVAR')
      = qui count if missing(__000008)
      - local newmiss = r(N)
      - local flag = `oldmiss'!=`newmiss'
      = local flag = 0!=0
      - if `flag' & ("`force'" == "") {
      = if 0 & ("" == "") {
        if `"`ignore'"' != "" {
        di as txt "`var': contains " "`aswhat's not specified in " as res "ignor
> e()" as txt "; no " as res "`genrep'"
        }
        else {
        di as txt "`var': contains " "nonnumeric `aswhat's; no " as res "`genrep
> '"
        }
        }
      - else {
      - order `NEWVAR', after(`var')
      = order __000008, after(inc_decoded1)
        -------------------------------------------------------- begin order ---
        - version 11
        - if (_caller()<11) {
          _order `macval(0)'
          exit
          }
        - syntax varlist[, Before(varname) After(varname) first last SEQuential 
> ALPHAbetic]
        - if (`"`before'"' == "" & `"`after'"' == "" & "`first'" == "" & "`last'
> " == "" & "`alphabetic'" == "" & "`sequential'" == "") {
        = if (`""' == "" & `"inc_decoded1"' == "" & "" == "" & "" == "" & "" == 
> "" & "" == "") {
          _order `macval(0)'
          exit
          }
        - if (`"`before'"' != "" & `"`after'"' != "") {
        = if (`""' != "" & `"inc_decoded1"' != "") {
          dis as error "before() may not be combined with after()"
          exit 198
          }
        - if (`"`before'"' != "" & `"`first'"' != "") {
        = if (`""' != "" & `""' != "") {
          dis as error "before() may not be combined with first()"
          exit 198
          }
        - if (`"`before'"' != "" & `"`last'"' != "") {
        = if (`""' != "" & `""' != "") {
          dis as error "before() may not be combined with last()"
          exit 198
          }
        - if (`"`after'"' != "" & `"`before'"' != "") {
        = if (`"inc_decoded1"' != "" & `""' != "") {
          dis as error "after() may not be combined with before()"
          exit 198
          }
        - if (`"`after'"' != "" & `"`first'"' != "") {
        = if (`"inc_decoded1"' != "" & `""' != "") {
          dis as error "after() may not be combined with first()"
          exit 198
          }
        - if (`"`after'"' != "" & `"`last'"' != "") {
        = if (`"inc_decoded1"' != "" & `""' != "") {
          dis as error "after() may not be combined with last()"
          exit 198
          }
        - if ("`first'" != "" & "`last'" != "") {
        = if ("" != "" & "" != "") {
          dis as error "first may not be combined with last"
          exit 198
          }
        - if ("`sequential'" != "" & "`alphabetic'" != "") {
        = if ("" != "" & "" != "") {
          dis as error "sequential may not be combined with alphabetic"
          exit 198
          }
        - if ("`first'" != "") {
        = if ("" != "") {
          if "`alphabetic'" != "" {
          local varlist : list sort varlist
          }
          if "`sequential'" != "" {
          aorder `varlist'
          }
          else {
          _order `varlist'
          }
          }
        - if ("`last'" != "") {
        = if ("" != "") {
          unab vlist : _all
          local list : list vlist - varlist
          if "`alphabetic'" != "" {
          local varlist : list sort varlist
          }
          if "`sequential'" != "" {
          preserve
          keep `varlist'
          aorder `varlist'
          unab varlist : _all
          restore
          }
          _order `list' `varlist'
          }
        - if (`"`before'"' != "") {
        = if (`""' != "") {
          local test : list before in varlist
          if `test' {
          dis as err "varname specified in before() may not" " be in varlist"
          exit 198
          }
          if "`alphabetic'" != "" {
          local varlist : list sort varlist
          }
          if "`sequential'" != "" {
          preserve
          keep `varlist'
          aorder `varlist'
          unab varlist : _all
          restore
          }
          unab vlist : _all
          local vlist : list vlist - varlist
          local var_num : list posof "`before'" in vlist
          local var_num = `var_num' - 1
          local fvar : word 1 of `vlist'
          capture local lvar : word `var_num' of `vlist'
          if _rc {
          _order `varlist'
          exit
          }
          unab nlist : `fvar'-`lvar'
          local nlist : list nlist - varlist
          _order `nlist' `varlist'
          }
        - if (`"`after'"' != "") {
        = if (`"inc_decoded1"' != "") {
        - local test : list after in varlist
        - if `test' {
        = if 0 {
          dis as err "varname specified in after() may not" " be in varlist"
          exit 198
          }
        - if "`alphabetic'" != "" {
        = if "" != "" {
          local varlist : list sort varlist
          }
        - if "`sequential'" != "" {
        = if "" != "" {
          preserve
          keep `varlist'
          aorder `varlist'
          unab varlist : _all
          restore
          }
        - unab vlist : _all
          ------------------------------------------------------- begin unab ---
          - version 6
          - gettoken user 0: 0, parse(" :")
          - gettoken colon 0: 0, parse(" :")
          - if `"`colon'"' != ":" { error 198 }
          = if `":"' != ":" { error 198 }
          - syntax [varlist(default=empty)] [, MIN(integer 1) MAX(integer 120000
> ) NAME(string)]
          - c_local `user' `varlist'
          = c_local vlist year hhwt repwt cluster adjust statefip strata hhincom
> e_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 repwt10 r
> epwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 repwt20
>  repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt29 repwt
> 30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repwt39 rep
> wt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 repwt49 r
> epwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 repwt59
>  repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt68 repwt
> 69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repwt78 rep
> wt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp5 repwt
> p6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14 repwtp
> 15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwtp23 rep
> wtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 repwtp32 
> repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40 repwtp
> 41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwtp49 rep
> wtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 repwtp58 
> repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66 repwtp
> 67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwtp75 rep
> wtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __000000 __
> 000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_decoded2 
> __000007 __00000A __000009 __000008
          - local n : word count `varlist'
          = local n : word count year hhwt repwt cluster adjust statefip strata 
> hhincome_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 re
> pwt10 repwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 
> repwt20 repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt2
> 9 repwt30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repw
> t39 repwt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 re
> pwt49 repwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 
> repwt59 repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt6
> 8 repwt69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repw
> t78 repwt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp
> 5 repwtp6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14
>  repwtp15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwt
> p23 repwtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 re
> pwtp32 repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40
>  repwtp41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwt
> p49 repwtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 re
> pwtp58 repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66
>  repwtp67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwt
> p75 repwtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __00
> 0000 __000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_de
> coded2 __000007 __00000A __000009 __000008
          - if `n'>=`min' & `n'<=`max' { exit }
          = if 187>=1 & 187<=120000 { exit }
          --------------------------------------------------------- end unab ---
        - local vlist : list vlist - varlist
        - local var_num : list posof "`after'" in vlist
        = local var_num : list posof "inc_decoded1" in vlist
        - local fvar : word 1 of `vlist'
        = local fvar : word 1 of year hhwt repwt cluster adjust statefip strata 
> hhincome_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 re
> pwt10 repwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 
> repwt20 repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt2
> 9 repwt30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repw
> t39 repwt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 re
> pwt49 repwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 
> repwt59 repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt6
> 8 repwt69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repw
> t78 repwt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp
> 5 repwtp6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14
>  repwtp15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwt
> p23 repwtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 re
> pwtp32 repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40
>  repwtp41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwt
> p49 repwtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 re
> pwtp58 repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66
>  repwtp67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwt
> p75 repwtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __00
> 0000 __000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_de
> coded2 __000007 __00000A __000009
        - local lvar : word `var_num' of `vlist'
        = local lvar : word 182 of year hhwt repwt cluster adjust statefip strat
> a hhincome_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 
> repwt10 repwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt1
> 9 repwt20 repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repw
> t29 repwt30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 re
> pwt39 repwt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 
> repwt49 repwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt5
> 8 repwt59 repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repw
> t68 repwt69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 re
> pwt78 repwt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repw
> tp5 repwtp6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp
> 14 repwtp15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 rep
> wtp23 repwtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 
> repwtp32 repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp
> 40 repwtp41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 rep
> wtp49 repwtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 
> repwtp58 repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp
> 66 repwtp67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 rep
> wtp75 repwtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __
> 000000 __000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_
> decoded2 __000007 __00000A __000009
        - unab nlist : `fvar'-`lvar'
        = unab nlist : year-inc_decoded1
          ------------------------------------------------------- begin unab ---
          - version 6
          - gettoken user 0: 0, parse(" :")
          - gettoken colon 0: 0, parse(" :")
          - if `"`colon'"' != ":" { error 198 }
          = if `":"' != ":" { error 198 }
          - syntax [varlist(default=empty)] [, MIN(integer 1) MAX(integer 120000
> ) NAME(string)]
          - c_local `user' `varlist'
          = c_local nlist year hhwt repwt cluster adjust statefip strata hhincom
> e_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 repwt10 r
> epwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 repwt20
>  repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt29 repwt
> 30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repwt39 rep
> wt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 repwt49 r
> epwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 repwt59
>  repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt68 repwt
> 69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repwt78 rep
> wt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp5 repwt
> p6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14 repwtp
> 15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwtp23 rep
> wtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 repwtp32 
> repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40 repwtp
> 41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwtp49 rep
> wtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 repwtp58 
> repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66 repwtp
> 67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwtp75 rep
> wtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __000000 __
> 000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1
          - local n : word count `varlist'
          = local n : word count year hhwt repwt cluster adjust statefip strata 
> hhincome_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 re
> pwt10 repwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 
> repwt20 repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt2
> 9 repwt30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repw
> t39 repwt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 re
> pwt49 repwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 
> repwt59 repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt6
> 8 repwt69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repw
> t78 repwt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp
> 5 repwtp6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14
>  repwtp15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwt
> p23 repwtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 re
> pwtp32 repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40
>  repwtp41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwt
> p49 repwtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 re
> pwtp58 repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66
>  repwtp67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwt
> p75 repwtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __00
> 0000 __000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1
          - if `n'>=`min' & `n'<=`max' { exit }
          = if 182>=1 & 182<=120000 { exit }
          --------------------------------------------------------- end unab ---
        - local nlist : list nlist - varlist
        - _order `nlist' `varlist'
        = _order year hhwt repwt cluster adjust statefip strata hhincome_acs rep
> wt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 repwt10 repwt11 re
> pwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 repwt20 repwt21 
> repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt29 repwt30 repwt3
> 1 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repwt39 repwt40 repw
> t41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 repwt49 repwt50 re
> pwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 repwt59 repwt60 
> repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt68 repwt69 repwt7
> 0 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repwt78 repwt79 repw
> t80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp5 repwtp6 repwtp
> 7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14 repwtp15 repwtp
> 16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwtp23 repwtp24 rep
> wtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 repwtp32 repwtp33 
> repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40 repwtp41 repwtp
> 42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwtp49 repwtp50 rep
> wtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 repwtp58 repwtp59 
> repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66 repwtp67 repwtp
> 68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwtp75 repwtp76 rep
> wtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __000000 __000002 __
> 000003 __000004 __000001 __000005 __000006 inc_decoded1 __000008
        - }
        - if ("`alphabetic'" != "" & `"`before'"' == "" & `"`after'"' == "" & "`
> first'" == "" & "`last'" == "") {
        = if ("" != "" & `""' == "" & `"inc_decoded1"' == "" & "" == "" & "" == 
> "") {
          local vlist : list sort varlist
          _order `vlist'
          }
        - if ("`sequential'" != "" & `"`before'"' == "" & `"`after'"' == "" & "`
> first'" == "" & "`last'" == "") {
        = if ("" != "" & `""' == "" & `"inc_decoded1"' == "" & "" == "" & "" == 
> "") {
          aorder `varlist'
          }
        ---------------------------------------------------------- end order ---
      - if `aschars' {
      = if 1 {
      - local dispb `"`b'"'
      = local dispb `" space"'
      - }
      - else {
        local dispb = printablebytes(`"`b'"')
        }
      - local c = plural(`bcnt',strproper("`aswhat'")) + " removed " + plural(`b
> cnt',"was","were") + `":`dispb'"'
      = local c = plural(1,strproper("character")) + " removed " + plural(1,"was
> ","were") + `": space"'
      - if "`makepct'" != "" {
      = if "" != "" {
        if `makepct' {
        qui replace `NEWVAR' = `NEWVAR'/100
        }
        }
      - qui compress `NEWVAR'
      = qui compress __000008
      - local type : type `NEWVAR'
      = local type : type __000008
      - if `flag' {
      = if 0 {
        di as txt "`var': contains nonnumeric `aswhat's" _continue
        if `"`ignore'"'!="" {
        display " not specified in " as result "ignore()" _continue
        }
        if `"`b'"'=="" {
        display "; `finalprint'" as res "`genrep'd " as txt "as " as res "`type'
> " _continue
        }
        display
        }
      - if `"`b'"' != "" {
      = if `" space"' != "" {
      - di as txt "`var': " plural(`bcnt',"`aswhat'") as res `"`dispb'"' as txt 
> " removed; `finalprint'" as res "`genrep'd " as txt "as " as res "`type'"
      = di as txt "inc_decoded1: " plural(1,"character") as res `" space"' as tx
> t " removed; " as res "replaced " as txt "as " as res "long"
inc_decoded1: character space removed; replaced as long
      - }
      - else if `"`b'"' == "" & !`flag' {
      = else if `" space"' == "" & !0 {
        di as txt "`var': all characters numeric; " "`finalprint'" as res "`genr
> ep'd " as txt "as " as res "`type'"
        }
      - if `newmiss' != 0 {
      = if 0 != 0 {
        di as txt "(`newmiss' missing " plural(`newmiss',"value") " generated)"
        }
      - label variable `NEWVAR' `"`: variable label `var''"'
      = label variable __000008 `""'
        -------------------------------------------------------- begin label ---
        - version 10.0
        - local vv : display "version " string(_caller()) ", missing:"
        - gettoken val : 0
        - if (strpos("`val'", "val") > 0 ) {
        = if (strpos("variable", "val") > 0 ) {
          gettoken val 0 : 0
          syntax anything [, nofix]
          if "`fix'" != "" {
          local fix ", nofix"
          }
          gettoken var rest : anything
          while `"`rest'"' != "" {
          gettoken lab rest : rest
          local label "`lab'"
          }
          local vlist : list anything - lab
          if "`lab'" == "." {
          local lab ""
          }
          foreach var of varlist `vlist' {
          `vv' _label `val' `var' `lab' `fix'
          }
          }
        - else {
        - `vv' _label `macval(0)'
        = version 14, missing: _label variable __000008 `""'
        - }
        ---------------------------------------------------------- end label ---
      - char `NEWVAR'[destring] `c'
      = char __000008[destring] Character removed was: space
      - char `NEWVAR'[destring_cmd] `"destring `cmdargs'"'
      = char __000008[destring_cmd] `"destring inc_decoded1 inc_decoded2 , repla
> ce   ignore(" ,$") "'
      - char `var'[destring]
      = char inc_decoded1[destring]
      - char `var'[destring_cmd]
      = char inc_decoded1[destring_cmd]
      - if "`genrep'"=="generate" {
      = if "replace"=="generate" {
        Charcopy `var' `NEWVAR'
        rename `NEWVAR' `: word `varno' of `generate''
        }
      - else {
      - char rename `var' `NEWVAR'
      = char rename inc_decoded1 __000008
      - drop `var'
      = drop inc_decoded1
      - rename `NEWVAR' `var'
      = rename __000008 inc_decoded1
        ------------------------------------------------------- begin rename ---
        - version 12
        - mata: rename_cmd("`3'")
        = mata: rename_cmd("")
        --------------------------------------------------------- end rename ---
      - }
      - }
      - foreach varmac of local tvars {
      - capture drop ``varmac''
      = capture drop __000007
      - }
      - capture drop ``varmac''
      = capture drop __000008
      - }
      - capture drop ``varmac''
      = capture drop __000009
      - }
      - capture drop ``varmac''
      = capture drop __00000A
      - }
      - capture drop ``varmac''
      = capture drop __00000B
      - }
      - }
      - }
      - local varno = `varno' + 1
      = local varno = 1 + 1
      - if "`generate'"!="" {
      = if ""!="" {
        local finalvarname : word `varno' of `generate'
        local finalprint "`finalvarname' "
        }
      - else {
      - local finalvarname "`var'"
      = local finalvarname "inc_decoded2"
      - local finalprint ""
      - }
      - capture confirm string variable `var'
      = capture confirm string variable inc_decoded2
      - if _rc != 0 {
        di as txt "`var' already numeric; no " as res "`genrep'"
        }
      - else {
      - qui gen `OLDVAR' = `var'
      = qui gen __000007 = inc_decoded2
      - local jj 1
      - local b
      - local bcnt = 0
      - local c
      - local makepct
      - while `"`char`jj''"' != "" {
      = while `" "' != "" {
      - capture drop `found'
      = capture drop __00000A
      - capture drop `topct'
      = capture drop __00000B
      - local t `"`char`jj''"'
      = local t `" "'
      - if `aschars' {
      = if 1 {
      - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
      = qui gen byte __00000A = ustrpos(__000007, `" "') != 0
      - }
      - else {
        qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
        }
      - qui summarize `found', meanonly
      = qui summarize __00000A, meanonly
      - if r(sum) > 0 {
      - if `"`t'"'=="`illegal'" {
      = if `" "'=="" {
        local b `"`b' illegal Unicode"'
        }
      - else if `"`t'"' == " " {
      = else if `" "' == " " {
      - local b `"`b' space"'
      = local b `" space"'
      - }
      - else {
        local b `"`b' `t'"'
        }
      - local ++bcnt
      - }
      - if `aschars' {
      = if 1 {
      - if `"`t'"'=="%" {
      = if `" "'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if ustrpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
      - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
      = qui replace __000007 = usubinstr(__000007, `" "', "", .)
      - }
      - else {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if strpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
        }
      - local jj = `jj' + 1
      = local jj = 1 + 1
      - }
      - while `"`char`jj''"' != "" {
      = while `","' != "" {
      - capture drop `found'
      = capture drop __00000A
      - capture drop `topct'
      = capture drop __00000B
      - local t `"`char`jj''"'
      = local t `","'
      - if `aschars' {
      = if 1 {
      - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
      = qui gen byte __00000A = ustrpos(__000007, `","') != 0
      - }
      - else {
        qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
        }
      - qui summarize `found', meanonly
      = qui summarize __00000A, meanonly
      - if r(sum) > 0 {
        if `"`t'"'=="`illegal'" {
        local b `"`b' illegal Unicode"'
        }
        else if `"`t'"' == " " {
        local b `"`b' space"'
        }
        else {
        local b `"`b' `t'"'
        }
        local ++bcnt
        }
      - if `aschars' {
      = if 1 {
      - if `"`t'"'=="%" {
      = if `","'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if ustrpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
      - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
      = qui replace __000007 = usubinstr(__000007, `","', "", .)
      - }
      - else {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if strpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
        }
      - local jj = `jj' + 1
      = local jj = 2 + 1
      - }
      - while `"`char`jj''"' != "" {
      = while `"$"' != "" {
      - capture drop `found'
      = capture drop __00000A
      - capture drop `topct'
      = capture drop __00000B
      - local t `"`char`jj''"'
      = local t `"$"'
      - if `aschars' {
      = if 1 {
      - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
      = qui gen byte __00000A = ustrpos(__000007, `"$"') != 0
      - }
      - else {
        qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
        }
      - qui summarize `found', meanonly
      = qui summarize __00000A, meanonly
      - if r(sum) > 0 {
        if `"`t'"'=="`illegal'" {
        local b `"`b' illegal Unicode"'
        }
        else if `"`t'"' == " " {
        local b `"`b' space"'
        }
        else {
        local b `"`b' `t'"'
        }
        local ++bcnt
        }
      - if `aschars' {
      = if 1 {
      - if `"`t'"'=="%" {
      = if `"$"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if ustrpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
      - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
      = qui replace __000007 = usubinstr(__000007, `"$"', "", .)
      - }
      - else {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if strpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
        }
      - local jj = `jj' + 1
      = local jj = 3 + 1
      - }
      - while `"`char`jj''"' != "" {
      = while `""' != "" {
        capture drop `found'
        capture drop `topct'
        local t `"`char`jj''"'
        if `aschars' {
        qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
        }
        else {
        qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
        }
        qui summarize `found', meanonly
        if r(sum) > 0 {
        if `"`t'"'=="`illegal'" {
        local b `"`b' illegal Unicode"'
        }
        else if `"`t'"' == " " {
        local b `"`b' space"'
        }
        else {
        local b `"`b' `t'"'
        }
        local ++bcnt
        }
        if `aschars' {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if ustrpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
        }
        else {
        if `"`t'"'=="%" {
        if "`percent'"!="" {
        if `"`makepct'"'=="" {
        qui count if strpos(`OLDVAR', `"`t'"')
        local makepct = r(N)
        }
        }
        }
        qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
        }
        local jj = `jj' + 1
        }
      - if _caller() >= 14 {
      - qui replace `OLDVAR' = ustrtrim(`OLDVAR')
      = qui replace __000007 = ustrtrim(__000007)
      - }
      - else {
        qui replace `OLDVAR' = strtrim(`OLDVAR')
        }
      - quietly gen byte `ismissing' = `OLDVAR'=="" | `OLDVAR'=="." | (strlen(`O
> LDVAR')==2 & inrange(`OLDVAR',".a",".z"))
      = quietly gen byte __000009 = __000007=="" | __000007=="." | (strlen(__000
> 007)==2 & inrange(__000007,".a",".z"))
      - if ("`dpcomma'" != "") {
      = if ("" != "") {
        qui replace `OLDVAR' = subinstr(`OLDVAR',".","X",.) if !`ismissing'
        qui replace `OLDVAR' = subinstr(`OLDVAR', ",", ".", 1) if !ustrregexm(`O
> LDVAR',"(,[a-z])|(^,$)")
        }
      - if _caller() >= 14 {
      - qui replace `OLDVAR' = ustrregexrf(`OLDVAR',"^0+","0")
      = qui replace __000007 = ustrregexrf(__000007,"^0+","0")
      - }
      - else {
        qui replace `OLDVAR' = regexr(`OLDVAR',"^0+","0")
        }
      - qui gen `gtype' `NEWVAR' = real(`OLDVAR')
      = qui gen double __000008 = real(__000007)
      - qui summarize `ismissing', meanonly
      = qui summarize __000009, meanonly
      - local oldmiss = r(sum)
      - qui count if missing(`NEWVAR')
      = qui count if missing(__000008)
      - local newmiss = r(N)
      - local flag = `oldmiss'!=`newmiss'
      = local flag = 0!=0
      - if `flag' & ("`force'" == "") {
      = if 0 & ("" == "") {
        if `"`ignore'"' != "" {
        di as txt "`var': contains " "`aswhat's not specified in " as res "ignor
> e()" as txt "; no " as res "`genrep'"
        }
        else {
        di as txt "`var': contains " "nonnumeric `aswhat's; no " as res "`genrep
> '"
        }
        }
      - else {
      - order `NEWVAR', after(`var')
      = order __000008, after(inc_decoded2)
        -------------------------------------------------------- begin order ---
        - version 11
        - if (_caller()<11) {
          _order `macval(0)'
          exit
          }
        - syntax varlist[, Before(varname) After(varname) first last SEQuential 
> ALPHAbetic]
        - if (`"`before'"' == "" & `"`after'"' == "" & "`first'" == "" & "`last'
> " == "" & "`alphabetic'" == "" & "`sequential'" == "") {
        = if (`""' == "" & `"inc_decoded2"' == "" & "" == "" & "" == "" & "" == 
> "" & "" == "") {
          _order `macval(0)'
          exit
          }
        - if (`"`before'"' != "" & `"`after'"' != "") {
        = if (`""' != "" & `"inc_decoded2"' != "") {
          dis as error "before() may not be combined with after()"
          exit 198
          }
        - if (`"`before'"' != "" & `"`first'"' != "") {
        = if (`""' != "" & `""' != "") {
          dis as error "before() may not be combined with first()"
          exit 198
          }
        - if (`"`before'"' != "" & `"`last'"' != "") {
        = if (`""' != "" & `""' != "") {
          dis as error "before() may not be combined with last()"
          exit 198
          }
        - if (`"`after'"' != "" & `"`before'"' != "") {
        = if (`"inc_decoded2"' != "" & `""' != "") {
          dis as error "after() may not be combined with before()"
          exit 198
          }
        - if (`"`after'"' != "" & `"`first'"' != "") {
        = if (`"inc_decoded2"' != "" & `""' != "") {
          dis as error "after() may not be combined with first()"
          exit 198
          }
        - if (`"`after'"' != "" & `"`last'"' != "") {
        = if (`"inc_decoded2"' != "" & `""' != "") {
          dis as error "after() may not be combined with last()"
          exit 198
          }
        - if ("`first'" != "" & "`last'" != "") {
        = if ("" != "" & "" != "") {
          dis as error "first may not be combined with last"
          exit 198
          }
        - if ("`sequential'" != "" & "`alphabetic'" != "") {
        = if ("" != "" & "" != "") {
          dis as error "sequential may not be combined with alphabetic"
          exit 198
          }
        - if ("`first'" != "") {
        = if ("" != "") {
          if "`alphabetic'" != "" {
          local varlist : list sort varlist
          }
          if "`sequential'" != "" {
          aorder `varlist'
          }
          else {
          _order `varlist'
          }
          }
        - if ("`last'" != "") {
        = if ("" != "") {
          unab vlist : _all
          local list : list vlist - varlist
          if "`alphabetic'" != "" {
          local varlist : list sort varlist
          }
          if "`sequential'" != "" {
          preserve
          keep `varlist'
          aorder `varlist'
          unab varlist : _all
          restore
          }
          _order `list' `varlist'
          }
        - if (`"`before'"' != "") {
        = if (`""' != "") {
          local test : list before in varlist
          if `test' {
          dis as err "varname specified in before() may not" " be in varlist"
          exit 198
          }
          if "`alphabetic'" != "" {
          local varlist : list sort varlist
          }
          if "`sequential'" != "" {
          preserve
          keep `varlist'
          aorder `varlist'
          unab varlist : _all
          restore
          }
          unab vlist : _all
          local vlist : list vlist - varlist
          local var_num : list posof "`before'" in vlist
          local var_num = `var_num' - 1
          local fvar : word 1 of `vlist'
          capture local lvar : word `var_num' of `vlist'
          if _rc {
          _order `varlist'
          exit
          }
          unab nlist : `fvar'-`lvar'
          local nlist : list nlist - varlist
          _order `nlist' `varlist'
          }
        - if (`"`after'"' != "") {
        = if (`"inc_decoded2"' != "") {
        - local test : list after in varlist
        - if `test' {
        = if 0 {
          dis as err "varname specified in after() may not" " be in varlist"
          exit 198
          }
        - if "`alphabetic'" != "" {
        = if "" != "" {
          local varlist : list sort varlist
          }
        - if "`sequential'" != "" {
        = if "" != "" {
          preserve
          keep `varlist'
          aorder `varlist'
          unab varlist : _all
          restore
          }
        - unab vlist : _all
          ------------------------------------------------------- begin unab ---
          - version 6
          - gettoken user 0: 0, parse(" :")
          - gettoken colon 0: 0, parse(" :")
          - if `"`colon'"' != ":" { error 198 }
          = if `":"' != ":" { error 198 }
          - syntax [varlist(default=empty)] [, MIN(integer 1) MAX(integer 120000
> ) NAME(string)]
          - c_local `user' `varlist'
          = c_local vlist year hhwt repwt cluster adjust statefip strata hhincom
> e_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 repwt10 r
> epwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 repwt20
>  repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt29 repwt
> 30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repwt39 rep
> wt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 repwt49 r
> epwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 repwt59
>  repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt68 repwt
> 69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repwt78 rep
> wt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp5 repwt
> p6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14 repwtp
> 15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwtp23 rep
> wtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 repwtp32 
> repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40 repwtp
> 41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwtp49 rep
> wtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 repwtp58 
> repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66 repwtp
> 67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwtp75 rep
> wtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __000000 __
> 000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_decoded2 
> __000007 __00000A __000009 __000008
          - local n : word count `varlist'
          = local n : word count year hhwt repwt cluster adjust statefip strata 
> hhincome_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 re
> pwt10 repwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 
> repwt20 repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt2
> 9 repwt30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repw
> t39 repwt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 re
> pwt49 repwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 
> repwt59 repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt6
> 8 repwt69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repw
> t78 repwt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp
> 5 repwtp6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14
>  repwtp15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwt
> p23 repwtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 re
> pwtp32 repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40
>  repwtp41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwt
> p49 repwtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 re
> pwtp58 repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66
>  repwtp67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwt
> p75 repwtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __00
> 0000 __000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_de
> coded2 __000007 __00000A __000009 __000008
          - if `n'>=`min' & `n'<=`max' { exit }
          = if 187>=1 & 187<=120000 { exit }
          --------------------------------------------------------- end unab ---
        - local vlist : list vlist - varlist
        - local var_num : list posof "`after'" in vlist
        = local var_num : list posof "inc_decoded2" in vlist
        - local fvar : word 1 of `vlist'
        = local fvar : word 1 of year hhwt repwt cluster adjust statefip strata 
> hhincome_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 re
> pwt10 repwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 
> repwt20 repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt2
> 9 repwt30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repw
> t39 repwt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 re
> pwt49 repwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 
> repwt59 repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt6
> 8 repwt69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repw
> t78 repwt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp
> 5 repwtp6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14
>  repwtp15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwt
> p23 repwtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 re
> pwtp32 repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40
>  repwtp41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwt
> p49 repwtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 re
> pwtp58 repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66
>  repwtp67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwt
> p75 repwtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __00
> 0000 __000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_de
> coded2 __000007 __00000A __000009
        - local lvar : word `var_num' of `vlist'
        = local lvar : word 183 of year hhwt repwt cluster adjust statefip strat
> a hhincome_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 
> repwt10 repwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt1
> 9 repwt20 repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repw
> t29 repwt30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 re
> pwt39 repwt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 
> repwt49 repwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt5
> 8 repwt59 repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repw
> t68 repwt69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 re
> pwt78 repwt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repw
> tp5 repwtp6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp
> 14 repwtp15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 rep
> wtp23 repwtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 
> repwtp32 repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp
> 40 repwtp41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 rep
> wtp49 repwtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 
> repwtp58 repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp
> 66 repwtp67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 rep
> wtp75 repwtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __
> 000000 __000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_
> decoded2 __000007 __00000A __000009
        - unab nlist : `fvar'-`lvar'
        = unab nlist : year-inc_decoded2
          ------------------------------------------------------- begin unab ---
          - version 6
          - gettoken user 0: 0, parse(" :")
          - gettoken colon 0: 0, parse(" :")
          - if `"`colon'"' != ":" { error 198 }
          = if `":"' != ":" { error 198 }
          - syntax [varlist(default=empty)] [, MIN(integer 1) MAX(integer 120000
> ) NAME(string)]
          - c_local `user' `varlist'
          = c_local nlist year hhwt repwt cluster adjust statefip strata hhincom
> e_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 repwt10 r
> epwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 repwt20
>  repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt29 repwt
> 30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repwt39 rep
> wt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 repwt49 r
> epwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 repwt59
>  repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt68 repwt
> 69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repwt78 rep
> wt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp5 repwt
> p6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14 repwtp
> 15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwtp23 rep
> wtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 repwtp32 
> repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40 repwtp
> 41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwtp49 rep
> wtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 repwtp58 
> repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66 repwtp
> 67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwtp75 rep
> wtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __000000 __
> 000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_decoded2
          - local n : word count `varlist'
          = local n : word count year hhwt repwt cluster adjust statefip strata 
> hhincome_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 re
> pwt10 repwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 
> repwt20 repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt2
> 9 repwt30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repw
> t39 repwt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 re
> pwt49 repwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 
> repwt59 repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt6
> 8 repwt69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repw
> t78 repwt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp
> 5 repwtp6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14
>  repwtp15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwt
> p23 repwtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 re
> pwtp32 repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40
>  repwtp41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwt
> p49 repwtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 re
> pwtp58 repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66
>  repwtp67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwt
> p75 repwtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __00
> 0000 __000002 __000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_de
> coded2
          - if `n'>=`min' & `n'<=`max' { exit }
          = if 183>=1 & 183<=120000 { exit }
          --------------------------------------------------------- end unab ---
        - local nlist : list nlist - varlist
        - _order `nlist' `varlist'
        = _order year hhwt repwt cluster adjust statefip strata hhincome_acs rep
> wt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 repwt10 repwt11 re
> pwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 repwt20 repwt21 
> repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt29 repwt30 repwt3
> 1 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repwt39 repwt40 repw
> t41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 repwt49 repwt50 re
> pwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 repwt59 repwt60 
> repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt68 repwt69 repwt7
> 0 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repwt78 repwt79 repw
> t80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp5 repwtp6 repwtp
> 7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14 repwtp15 repwtp
> 16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwtp23 repwtp24 rep
> wtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 repwtp32 repwtp33 
> repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40 repwtp41 repwtp
> 42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwtp49 repwtp50 rep
> wtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 repwtp58 repwtp59 
> repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66 repwtp67 repwtp
> 68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwtp75 repwtp76 rep
> wtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __000000 __000002 __
> 000003 __000004 __000001 __000005 __000006 inc_decoded1 inc_decoded2 __000008
        - }
        - if ("`alphabetic'" != "" & `"`before'"' == "" & `"`after'"' == "" & "`
> first'" == "" & "`last'" == "") {
        = if ("" != "" & `""' == "" & `"inc_decoded2"' == "" & "" == "" & "" == 
> "") {
          local vlist : list sort varlist
          _order `vlist'
          }
        - if ("`sequential'" != "" & `"`before'"' == "" & `"`after'"' == "" & "`
> first'" == "" & "`last'" == "") {
        = if ("" != "" & `""' == "" & `"inc_decoded2"' == "" & "" == "" & "" == 
> "") {
          aorder `varlist'
          }
        ---------------------------------------------------------- end order ---
      - if `aschars' {
      = if 1 {
      - local dispb `"`b'"'
      = local dispb `" space"'
      - }
      - else {
        local dispb = printablebytes(`"`b'"')
        }
      - local c = plural(`bcnt',strproper("`aswhat'")) + " removed " + plural(`b
> cnt',"was","were") + `":`dispb'"'
      = local c = plural(1,strproper("character")) + " removed " + plural(1,"was
> ","were") + `": space"'
      - if "`makepct'" != "" {
      = if "" != "" {
        if `makepct' {
        qui replace `NEWVAR' = `NEWVAR'/100
        }
        }
      - qui compress `NEWVAR'
      = qui compress __000008
      - local type : type `NEWVAR'
      = local type : type __000008
      - if `flag' {
      = if 0 {
        di as txt "`var': contains nonnumeric `aswhat's" _continue
        if `"`ignore'"'!="" {
        display " not specified in " as result "ignore()" _continue
        }
        if `"`b'"'=="" {
        display "; `finalprint'" as res "`genrep'd " as txt "as " as res "`type'
> " _continue
        }
        display
        }
      - if `"`b'"' != "" {
      = if `" space"' != "" {
      - di as txt "`var': " plural(`bcnt',"`aswhat'") as res `"`dispb'"' as txt 
> " removed; `finalprint'" as res "`genrep'd " as txt "as " as res "`type'"
      = di as txt "inc_decoded2: " plural(1,"character") as res `" space"' as tx
> t " removed; " as res "replaced " as txt "as " as res "long"
inc_decoded2: character space removed; replaced as long
      - }
      - else if `"`b'"' == "" & !`flag' {
      = else if `" space"' == "" & !0 {
        di as txt "`var': all characters numeric; " "`finalprint'" as res "`genr
> ep'd " as txt "as " as res "`type'"
        }
      - if `newmiss' != 0 {
      = if 0 != 0 {
        di as txt "(`newmiss' missing " plural(`newmiss',"value") " generated)"
        }
      - label variable `NEWVAR' `"`: variable label `var''"'
      = label variable __000008 `""'
        -------------------------------------------------------- begin label ---
        - version 10.0
        - local vv : display "version " string(_caller()) ", missing:"
        - gettoken val : 0
        - if (strpos("`val'", "val") > 0 ) {
        = if (strpos("variable", "val") > 0 ) {
          gettoken val 0 : 0
          syntax anything [, nofix]
          if "`fix'" != "" {
          local fix ", nofix"
          }
          gettoken var rest : anything
          while `"`rest'"' != "" {
          gettoken lab rest : rest
          local label "`lab'"
          }
          local vlist : list anything - lab
          if "`lab'" == "." {
          local lab ""
          }
          foreach var of varlist `vlist' {
          `vv' _label `val' `var' `lab' `fix'
          }
          }
        - else {
        - `vv' _label `macval(0)'
        = version 14, missing: _label variable __000008 `""'
        - }
        ---------------------------------------------------------- end label ---
      - char `NEWVAR'[destring] `c'
      = char __000008[destring] Character removed was: space
      - char `NEWVAR'[destring_cmd] `"destring `cmdargs'"'
      = char __000008[destring_cmd] `"destring inc_decoded1 inc_decoded2 , repla
> ce   ignore(" ,$") "'
      - char `var'[destring]
      = char inc_decoded2[destring]
      - char `var'[destring_cmd]
      = char inc_decoded2[destring_cmd]
      - if "`genrep'"=="generate" {
      = if "replace"=="generate" {
        Charcopy `var' `NEWVAR'
        rename `NEWVAR' `: word `varno' of `generate''
        }
      - else {
      - char rename `var' `NEWVAR'
      = char rename inc_decoded2 __000008
      - drop `var'
      = drop inc_decoded2
      - rename `NEWVAR' `var'
      = rename __000008 inc_decoded2
        ------------------------------------------------------- begin rename ---
        - version 12
        - mata: rename_cmd("`3'")
        = mata: rename_cmd("")
        --------------------------------------------------------- end rename ---
      - }
      - }
      - foreach varmac of local tvars {
      - capture drop ``varmac''
      = capture drop __000007
      - }
      - capture drop ``varmac''
      = capture drop __000008
      - }
      - capture drop ``varmac''
      = capture drop __000009
      - }
      - capture drop ``varmac''
      = capture drop __00000A
      - }
      - capture drop ``varmac''
      = capture drop __00000B
      - }
      - }
      - }
      --------------------------------------------------------- end destring ---
    - }
    -------------------------------------------------------------- end split ---
  - gen `inc_cat_var'_lb = inc_decoded1
  = gen acs_hhinc_lb = inc_decoded1
  - gen `inc_cat_var'_ub = inc_decoded2
  = gen acs_hhinc_ub = inc_decoded2
  - di "Lower bound of `inc_cat_var'_lb and upper bound of `inc_cat_var'_ub " "c
> reated for inc_level " `inc_level' "of the original Research " "dataset income
>  range"
  = di "Lower bound of acs_hhinc_lb and upper bound of acs_hhinc_ub " "created f
> or inc_level " 8 "of the original Research " "dataset income range"
Lower bound of acs_hhinc_lb and upper bound of acs_hhinc_ub created for inc_leve
> l 8of the original Research dataset income range
  - }
  - else {
    di as error "Error: The inc_level " `inc_level' " does not fit any of the ex
> isting regular expressions " "designs. Please email the REDI program creator a
> t " "mollymkingphd@gmail.com with information about this " "error and a list o
> f all of your income levels so she " "can update the program. Thank you for yo
> ur help!"
    error 999
    }
  - local upper_bound = `inc_cat_var'_ub
  = local upper_bound = acs_hhinc_ub
  - local lower_bound = `inc_cat_var'_lb
  = local lower_bound = acs_hhinc_lb
  - capture drop inc_decoded1 inc_decoded2
  - quietly summarize if `research_year' == `y' & `inc_cat_var' == `inc_level'
  = quietly summarize if year == 2019 & acs_hhinc == 8
  - local sample_size = r(N)
  - gen `inc_cat_var'_n = `sample_size'
  = gen acs_hhinc_n = 26451
  - label variable `inc_cat_var'_n "N in income level in research dataset"
  = label variable acs_hhinc_n "N in income level in research dataset"
    ------------------------------------------------------------ begin label ---
    - version 10.0
    - local vv : display "version " string(_caller()) ", missing:"
    - gettoken val : 0
    - if (strpos("`val'", "val") > 0 ) {
    = if (strpos("variable", "val") > 0 ) {
      gettoken val 0 : 0
      syntax anything [, nofix]
      if "`fix'" != "" {
      local fix ", nofix"
      }
      gettoken var rest : anything
      while `"`rest'"' != "" {
      gettoken lab rest : rest
      local label "`lab'"
      }
      local vlist : list anything - lab
      if "`lab'" == "." {
      local lab ""
      }
      foreach var of varlist `vlist' {
      `vv' _label `val' `var' `lab' `fix'
      }
      }
    - else {
    - `vv' _label `macval(0)'
    = version 16, missing: _label variable acs_hhinc_n "N in income level in res
> earch dataset"
    - }
    -------------------------------------------------------------- end label ---
  - keep if `research_year' == `y' & `inc_cat_var' == `inc_level'
  = keep if year == 2019 & acs_hhinc == 8
(0 observations deleted)
  - tempfile premerge_`inc_level'_`y'
  = tempfile premerge_8_2019
  - save `premerge_`inc_level'_`y'', replace
  = save /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000i, repla
> ce
(note: file /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000i not
>  found)
file /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000i saved
  - di "Saved tempfile with upper and lower bounds of research data income level
> s"
Saved tempfile with upper and lower bounds of research data income levels
  - use `reference_dataset', clear
  = use ~/Documents/SocResearch/Dissertation/data/data_temp/redi13_cps_state_ca.
> dta, clear
(Streamlined CPS ASEC data, CA 2019)
  - di "Reference data open - Income type set as `inc_cat_var' income"
  = di "Reference data open - Income type set as acs_hhinc income"
Reference data open - Income type set as acs_hhinc income
  - keep if `ref_year' == `y' | `"`ref_year'"' == "nys" & `ref_income_var' >= `l
> ower_bound' & `ref_income_var' <= `upper_bound'
  = keep if year == 2019 | `"year"' == "nys" & hhincome >= 150000 & hhincome <= 
> 200000
(0 observations deleted)
  - gen obs_no = _n
  - di "Observation number generated"
Observation number generated
  - save $temp/`ASECdata'_`ref_year'_inc`inc_level'.dta, replace
  = save ~/Documents/SocResearch/Dissertation/data/data_temp/_year_inc8.dta, rep
> lace
file ~/Documents/SocResearch/Dissertation/data/data_temp/_year_inc8.dta saved
  - di "Ref to keep income between $`lower_bound' and $`upper_bound' for `y' yea
> r."
  = di "Ref to keep income between $150000 and $200000 for 2019 year."
Ref to keep income between $150000 and $200000 for 2019 year.
  - quietly des
    -------------------------------------------------------------- begin des ---
    - local version : di "version " string(_caller()) ":"
    - `version' describe `0'
    = version 16: describe 
      ------------------------------------------------------- begin describe ---
      - version 9
      - local version : di "version " string(_caller()) ":"
      - syntax [anything] [using] [, SImple REPLACE *]
      - if ("`replace'"!="") {
      = if (""!="") {
        describe_mk `0'
        return add
        exit
        }
      - local varlist `"`anything'"'
      = local varlist `""'
      - if ("`simple'" == "") {
      = if ("" == "") {
      - `version' _describe `0'
      = version 16: _describe 
      - return add
      - }
      - else {
        if (`"`options'"' != "") {
        di as err "simple may not be combined with other options"
        exit 198
        }
        if (`"`using'"' != "") {
        qui `version' describe `varlist' `using', varlist
        if "`varlist'" == "" {
        local vars "`r(varlist)'"
        }
        else {
        local vars "`varlist'"
        }
        local wid = 2
        local n : list sizeof vars
        if `n'==0 {
        exit
        }
        if "`c(hasicu)'" == "1" {
        foreach x of local vars {
        local wid = max(`wid', udstrlen(`"`x'"'))
        }
        }
        else {
        foreach x of local vars {
        local wid = max(`wid', strlen(`"`x'"'))
        }
        }
        local wid = `wid' + 2
        local cols = int((`c(linesize)'+1)/`wid')
        if `cols' < 2 {
        foreach x of local `vars' {
        di as txt `col' `"`x'"'
        }
        exit
        }
        local lines = `n'/`cols'
        local lines = int(cond(`lines'>int(`lines'), `lines'+1, `lines'))
        forvalues i=1(1)`lines' {
        local top = min((`cols')*`lines'+`i', `n')
        local col = 1
        forvalues j=`i'(`lines')`top' {
        local x : word `j' of `vars'
        di as txt _column(`col') "`x'" _c
        local col = `col' + `wid'
        }
        di as txt
        }
        qui `version' describe `varlist' `using', short
        return add
        }
        else {
        ds `varlist'
        qui `version' _describe `varlist', short
        return add
        }
        }
      --------------------------------------------------------- end describe ---
    ---------------------------------------------------------------- end des ---
  - local N = r(N)
  - clear
    ------------------------------------------------------------ begin clear ---
    - if _caller() < 10 {
      _clear_9 `0'
      exit
      }
    - version 10
    - syntax [anything]
    - tokenize `anything'
    = tokenize 
    - if `"`2'"' != "" {
    = if `""' != "" {
      display as err "`2' not allowed"
      exit 198
      }
    - if "`1'"=="" {
    = if ""=="" {
    - drop _all
    - label drop _all
      ---------------------------------------------------------- begin label ---
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {
      = if (strpos("drop", "val") > 0 ) {
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {
        local fix ", nofix"
        }
        gettoken var rest : anything
        while `"`rest'"' != "" {
        gettoken lab rest : rest
        local label "`lab'"
        }
        local vlist : list anything - lab
        if "`lab'" == "." {
        local lab ""
        }
        foreach var of varlist `vlist' {
        `vv' _label `val' `var' `lab' `fix'
        }
        }
      - else {
      - `vv' _label `macval(0)'
      = version 10, missing: _label drop _all
      - }
      ------------------------------------------------------------ end label ---
    - }
    - else if "`1'"=="frames" {
    = else if ""=="frames" {
      frames reset
      }
    - else if "`1'"=="mata" {
    = else if ""=="mata" {
      mata: mata clear
      }
    - else if "`1'"=="python" {
    = else if ""=="python" {
      python clear
      }
    - else if inlist("`1'", "results", "matrix") {
    = else if inlist("", "results", "matrix") {
      return clear
      clearreturn
      ereturn clear
      sreturn clear
      _return drop _all
      if ("`1'" == "matrix") {
      matrix drop _all
      _est drop _all
      }
      }
    - else if "`1'"=="programs" {
    = else if ""=="programs" {
      program drop _all
      }
    - else if "`1'"=="ado" {
    = else if ""=="ado" {
      program drop _allado
      }
    - else if "`1'"=="rngstream" | "`1'"=="rngstreams" {
    = else if ""=="rngstream" | ""=="rngstreams" {
      set rngstream clear
      }
    - else if "`1'"=="*" | "`1'"=="all" {
    = else if ""=="*" | ""=="all" {
      capture mata: st_local("semmods", strofreal(sg__global.hasmodels()))
      capture
      if (0`semmods') {
      display as err "-clear all- not allowed while an SEM Builder is open"
      exit 1
      }
      drop _all
      frames reset
      label drop _all
      matrix drop _all
      scalar drop _all
      constraint drop _all
      eq drop _all
      file close _all
      postutil clear
      _return drop _all
      discard
      program drop _all
      timer clear
      mata: _st__put_cmd_clear()
      mata: mata clear
      python clear
      }
    - else {
      display as err "`1' not allowed"
      exit 198
      }
    -------------------------------------------------------------- end clear ---
  - set obs `sample_size'
  = set obs 26451
number of observations (_N) was 0, now 26,451
  - gen obs_no = runiformint(1, `N')
  = gen obs_no = runiformint(1, 6260)
  - merge m:1 obs_no using $temp/`ASECdata'_`ref_year'_inc`inc_level'.dta, keep(
> match) nogenerate
  = merge m:1 obs_no using ~/Documents/SocResearch/Dissertation/data/data_temp/_
> year_inc8.dta, keep(match) nogenerate
    ------------------------------------------------------------ begin merge ---
    - version 11
    - gettoken mtype 0 : 0, parse(" ,")
    - if (!strpos("`mtype'", ":") & "`mtype'"!="") {
    = if (!strpos("m:1", ":") & "m:1"!="") {
      if (_caller()>=11) {
      di as smcl as txt "{p}"
      di as smcl "(note: you are using old"
      di as smcl "{bf:merge} syntax; see"
      di as smcl "{bf:{help merge:[D] merge}} for new syntax)"
      di as smcl "{p_end}"
      }
      merge_10 `mtype' `0'
      exit
      }
    - local origmtype `"`mtype'"'
    = local origmtype `"m:1"'
    - mata: map_mtype(`"mtype"')
    - gettoken token : 0, parse(" ,")
    - if ("`token'"=="_n") {
    = if ("obs_no"=="_n") {
      if ("`mtype'"!="1:1") {
      error_seq_not11 "`mtype'" "`origmtype'"
      }
      gettoken token 0 : 0, parse(" ,")
      local mtype "_n"
      }
    - syntax [varlist(default=none)] using/ [, ASSERT(string) DEBUG GENerate(nam
> e) FORCE KEEP(string) KEEPUSing(string) noLabels NOGENerate noNOTEs REPLACE no
> REPort SORTED UPDATE ]
    - if ("`mtype'"!="_n") {
    = if ("m:1"!="_n") {
    - local origmtype `"`mtype'"'
    = local origmtype `"m:1"'
    - mata: map_mtype(`"mtype"')
    - if ("`varlist'"=="") {
    = if ("obs_no"=="") {
      error_mat_varlist "`mtype'" "`origmtype'"
      }
    - }
    - else {
      if ("`mtype'"=="_n") {
      if ("`varlist'"!="") {
      error_seq_varlist
      }
      }
      }
    - mata: fullfilename("using", "usingfull", "using")
    - mata: resultlist("assert")
    - mata: resultlist("keep")
    - if ("`generate'"!="") {
    = if (""!="") {
      if ("`nogenerate'"!="") {
      di as smcl err "{p}"
      di as smcl "options -generate()- and -nogenerate-"
      di as smcl "may not be specified together."
      di as smcl err "{p_end}"
      }
      confirm new var `generate'
      }
    - if ("`replace'"!="") {
    = if (""!="") {
      if ("`update'"=="") {
      error_replace
      }
      }
    - if ("`sorted'"=="" & "`mtype'"!="_n") {
    = if (""=="" & "m:1"!="_n") {
    - local sortedby : sortedby
    - checksort "`sortedby'" "`varlist'"
    = checksort "" "obs_no"
      ------------------------------------------------ begin merge.checksort ---
      - args is should
      - local i 0
      - return scalar sorted = 1
      - foreach v1 of local should {
      - local ++i
      - local v2 : word `i' of `is'
      = local v2 : word 1 of 
      - if ("`v1'"!="`v2'") {
      = if ("obs_no"!="") {
      - return scalar sorted = 0
      - continue, break
        }
        }
      -------------------------------------------------- end merge.checksort ---
    - if (!r(sorted)) {
    - sort `varlist'
    = sort obs_no
    - }
    - quietly describe using "`using'", varlist short
    = quietly describe using "~/Documents/SocResearch/Dissertation/data/data_tem
> p/_year_inc8.dta", varlist short
      ------------------------------------------------------- begin describe ---
      - version 9
      - local version : di "version " string(_caller()) ":"
      - syntax [anything] [using] [, SImple REPLACE *]
      - if ("`replace'"!="") {
      = if (""!="") {
        describe_mk `0'
        return add
        exit
        }
      - local varlist `"`anything'"'
      = local varlist `""'
      - if ("`simple'" == "") {
      = if ("" == "") {
      - `version' _describe `0'
      = version 11: _describe using "~/Documents/SocResearch/Dissertation/data/d
> ata_temp/_year_inc8.dta", varlist short
      - return add
      - }
      - else {
        if (`"`options'"' != "") {
        di as err "simple may not be combined with other options"
        exit 198
        }
        if (`"`using'"' != "") {
        qui `version' describe `varlist' `using', varlist
        if "`varlist'" == "" {
        local vars "`r(varlist)'"
        }
        else {
        local vars "`varlist'"
        }
        local wid = 2
        local n : list sizeof vars
        if `n'==0 {
        exit
        }
        if "`c(hasicu)'" == "1" {
        foreach x of local vars {
        local wid = max(`wid', udstrlen(`"`x'"'))
        }
        }
        else {
        foreach x of local vars {
        local wid = max(`wid', strlen(`"`x'"'))
        }
        }
        local wid = `wid' + 2
        local cols = int((`c(linesize)'+1)/`wid')
        if `cols' < 2 {
        foreach x of local `vars' {
        di as txt `col' `"`x'"'
        }
        exit
        }
        local lines = `n'/`cols'
        local lines = int(cond(`lines'>int(`lines'), `lines'+1, `lines'))
        forvalues i=1(1)`lines' {
        local top = min((`cols')*`lines'+`i', `n')
        local col = 1
        forvalues j=`i'(`lines')`top' {
        local x : word `j' of `vars'
        di as txt _column(`col') "`x'" _c
        local col = `col' + `wid'
        }
        di as txt
        }
        qui `version' describe `varlist' `using', short
        return add
        }
        else {
        ds `varlist'
        qui `version' _describe `varlist', short
        return add
        }
        }
      --------------------------------------------------------- end describe ---
    - local sortedby "`r(sortlist)'"
    = local sortedby ""
    - checksort "`sortedby'" "`varlist'"
    = checksort "" "obs_no"
      ------------------------------------------------ begin merge.checksort ---
      - args is should
      - local i 0
      - return scalar sorted = 1
      - foreach v1 of local should {
      - local ++i
      - local v2 : word `i' of `is'
      = local v2 : word 1 of 
      - if ("`v1'"!="`v2'") {
      = if ("obs_no"!="") {
      - return scalar sorted = 0
      - continue, break
        }
        }
      -------------------------------------------------- end merge.checksort ---
    - if (!r(sorted)) {
    - preserve
    - qui use "`using'", clear
    = qui use "~/Documents/SocResearch/Dissertation/data/data_temp/_year_inc8.dt
> a", clear
    - sort `varlist'
    = sort obs_no
    - tempfile using
    - qui save "`using'", replace
    = qui save "/var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000k
> ", replace
    - restore
    - }
    - }
    - if ("`nogenerate'"!="") {
    = if ("nogenerate"!="") {
    - tempvar mergevar
    - local mergevaristemp 1
    - }
    - else {
      local mergevar = cond("`generate'"!="", "`generate'", "_merge")
      local mergevaristemp 0
      }
    - local options `update' `replace' `notes' `labels' _merge(`mergevar') `forc
> e'
    = local options     _merge(__000000) 
    - if (bsubstr("`mtype'", 1, 1)=="1") {
    = if (bsubstr("m:1", 1, 1)=="1") {
      local options `options' uniqmaster
      }
    - if (bsubstr("`mtype'", 3, 1)=="1") {
    = if (bsubstr("m:1", 3, 1)=="1") {
    - local options `options' uniqusing
    = local options _merge(__000000) uniqusing
    - }
    - if ("`keepusing'"!="") {
    = if (""!="") {
      local options `options' keep(`keepusing')
      }
    - if ("`keep'" !="" & !strpos("`keep'" , "2")) {
    = if ("3" !="" & !strpos("3" , "2")) {
    - local options `options' nokeep
    = local options _merge(__000000) uniqusing nokeep
    - }
    - if (_caller() > 15) {
    - local version : di "version " string(_caller()) ": "
    - }
    - local _merge `"`version'_merge `varlist' using "`using'", nowarn"'
    = local _merge `"version 16: _merge obs_no using "/var/folders/rp/96l526kj7y
> bdjr5vs5bqqjw80000gn/T//S_20065.00000k", nowarn"'
    - local _merge `"`_merge' `options' tabulate(mresults)"'
    = local _merge `"version 16: _merge obs_no using "/var/folders/rp/96l526kj7y
> bdjr5vs5bqqjw80000gn/T//S_20065.00000k", nowarn _merge(__000000) uniqusing nok
> eep tabulate(mresults)"'
    - if ("`debug'"!="") {
    = if (""!="") {
      di as txt _n "command is"
      di `"`_merge'"' _n
      }
    - `_merge'
    = version 16: _merge obs_no using "/var/folders/rp/96l526kj7ybdjr5vs5bqqjw80
> 000gn/T//S_20065.00000k", nowarn _merge(__000000) uniqusing nokeep tabulate(mr
> esults)
    - if (!`mergevaristemp') {
    = if (!1) {
      capture label list _merge
      if (_rc) {
      label define _merge 1 "master only (1)" 2 "using only (2)" 3 "matched (3)"
>  4 "missing updated (4)" 5 "nonmissing conflict (5)"
      }
      label values `mergevar' _merge
      }
    - if ("`assert'"!="") {
    = if (""!="") {
      if (_caller() < 13) {
      buildexpr expr : `mergevar' "`assert'"
      capture assert `expr'
      if (_rc) {
      error_assert `mergevar' "`assert'"
      }
      }
      else {
      capture checkmresults "`mresults'" "`assert'"
      if (_rc) {
      error_assert `mergevar' "`assert'"
      }
      }
      }
    - if ("`keep'"!="") {
    = if ("3"!="") {
    - buildexpr expr : `mergevar' "`keep'"
    = buildexpr expr : __000000 "3"
      ------------------------------------------------ begin merge.buildexpr ---
      - args userexpr colon varname numbers
      - gettoken first numbers : numbers
      - local list `varname'==`first'
      = local list __000000==3
      - foreach el of local numbers {
        local list `list' | `varname'==`el'
        }
      - c_local `userexpr' "(`list')"
      = c_local expr "(__000000==3)"
      -------------------------------------------------- end merge.buildexpr ---
    - quietly keep if `expr'
    = quietly keep if (__000000==3)
    - }
    - if ("`mtype'"=="1:1") {
    = if ("m:1"=="1:1") {
      qui count if `mergevar'==2
      if (r(N)==0) {
      sort `varlist'
      }
      }
    - if (c(noisily) & "`report'"=="") {
    = if (c(noisily) & ""=="") {
    - local isupdate = ("`replace'"!="" | "`update'"!="")
    = local isupdate = (""!="" | ""!="")
    - present_table `isupdate' `mergevar' `mergevaristemp'
    = present_table 0 __000000 1
      -------------------------------------------- begin merge.present_table ---
      - args isupdate mergevar mergevaristemp
      - if (!`mergevaristemp') {
      = if (!1) {
        local v1 "(`mergevar'==1)"
        local v2 "(`mergevar'==2)"
        local v3 "(`mergevar'==3)"
        local v4 "(`mergevar'==4)"
        local v5 "(`mergevar'==5)"
        }
      - quietly {
      - count if `mergevar'==1
      = count if __000000==1
      - local m1 = r(N)
      - count if `mergevar'==2
      = count if __000000==2
      - local m2 = r(N)
      - if (`isupdate') {
      = if (0) {
        count if `mergevar'==3
        local m3 = r(N)
        count if `mergevar'==4
        local m4 = r(N)
        local m5 = _N - `m1' - `m2' - `m3' - `m4'
        }
      - else {
      - local m3 = _N - `m1' - `m2'
      = local m3 = _N - 0 - 0
      - }
      - }
      - di

      - di as smcl as txt _col(5) "Result" _col(38) "# of obs."
    Result                           # of obs.
      - di as smcl as txt _col(5) "{hline 41}"
    -----------------------------------------
      - di as smcl as txt _col(5) "not matched" _col(30) as res %16.0fc (`m1'+`m
> 2')
      = di as smcl as txt _col(5) "not matched" _col(30) as res %16.0fc (0+0)
    not matched                             0
      - if (`m1'|`m2') {
      = if (0|0) {
        di as smcl as txt _col(9) "from master" _col(30) as res %16.0fc `m1' as 
> txt "  `v1'"
        di as smcl as txt _col(9) "from using" _col(30) as res %16.0fc `m2' as t
> xt "  `v2'"
        di
        }
      - if (!`isupdate') {
      = if (!0) {
      - di as smcl as txt _col(5) "matched" _col(30) as res %16.0fc `m3' as txt 
> "  `v3'"
      = di as smcl as txt _col(5) "matched" _col(30) as res %16.0fc 26451 as txt
>  "  "
    matched                            26,451  
      - }
      - else {
        if (`m1'==0 & `m2'==0) {
        di
        }
        di as smcl as txt _col(5) "matched" _col(30) as res %16.0fc (`m3'+`m4'+`
> m5')
        di as smcl as txt _col(9) "not updated" _col(30) as res %16.0fc `m3' as 
> txt "  `v3'"
        di as smcl as txt _col(9) "missing updated" _col(30) as res %16.0fc `m4'
>  as txt "  `v4'"
        di as smcl as txt _col(9) "nonmissing conflict" _col(30) as res %16.0fc 
> `m5' as txt "  `v5'"
        }
      - di as smcl as txt _col(5) "{hline 41}"
    -----------------------------------------
      ---------------------------------------------- end merge.present_table ---
    - }
    -------------------------------------------------------------- end merge ---
  - save $temp/`ASECdata'_`ref_year'_inc`inc_level'.dta, replace
  = save ~/Documents/SocResearch/Dissertation/data/data_temp/_year_inc8.dta, rep
> lace
file ~/Documents/SocResearch/Dissertation/data/data_temp/_year_inc8.dta saved
  - gen id = _n
  - merge 1:1 id using `premerge_`inc_level'_`y''
  = merge 1:1 id using /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065
> .00000i
    ------------------------------------------------------------ begin merge ---
    - version 11
    - gettoken mtype 0 : 0, parse(" ,")
    - if (!strpos("`mtype'", ":") & "`mtype'"!="") {
    = if (!strpos("1:1", ":") & "1:1"!="") {
      if (_caller()>=11) {
      di as smcl as txt "{p}"
      di as smcl "(note: you are using old"
      di as smcl "{bf:merge} syntax; see"
      di as smcl "{bf:{help merge:[D] merge}} for new syntax)"
      di as smcl "{p_end}"
      }
      merge_10 `mtype' `0'
      exit
      }
    - local origmtype `"`mtype'"'
    = local origmtype `"1:1"'
    - mata: map_mtype(`"mtype"')
    - gettoken token : 0, parse(" ,")
    - if ("`token'"=="_n") {
    = if ("id"=="_n") {
      if ("`mtype'"!="1:1") {
      error_seq_not11 "`mtype'" "`origmtype'"
      }
      gettoken token 0 : 0, parse(" ,")
      local mtype "_n"
      }
    - syntax [varlist(default=none)] using/ [, ASSERT(string) DEBUG GENerate(nam
> e) FORCE KEEP(string) KEEPUSing(string) noLabels NOGENerate noNOTEs REPLACE no
> REPort SORTED UPDATE ]
    - if ("`mtype'"!="_n") {
    = if ("1:1"!="_n") {
    - local origmtype `"`mtype'"'
    = local origmtype `"1:1"'
    - mata: map_mtype(`"mtype"')
    - if ("`varlist'"=="") {
    = if ("id"=="") {
      error_mat_varlist "`mtype'" "`origmtype'"
      }
    - }
    - else {
      if ("`mtype'"=="_n") {
      if ("`varlist'"!="") {
      error_seq_varlist
      }
      }
      }
    - mata: fullfilename("using", "usingfull", "using")
    - mata: resultlist("assert")
    - mata: resultlist("keep")
    - if ("`generate'"!="") {
    = if (""!="") {
      if ("`nogenerate'"!="") {
      di as smcl err "{p}"
      di as smcl "options -generate()- and -nogenerate-"
      di as smcl "may not be specified together."
      di as smcl err "{p_end}"
      }
      confirm new var `generate'
      }
    - if ("`replace'"!="") {
    = if (""!="") {
      if ("`update'"=="") {
      error_replace
      }
      }
    - if ("`sorted'"=="" & "`mtype'"!="_n") {
    = if (""=="" & "1:1"!="_n") {
    - local sortedby : sortedby
    - checksort "`sortedby'" "`varlist'"
    = checksort "" "id"
      ------------------------------------------------ begin merge.checksort ---
      - args is should
      - local i 0
      - return scalar sorted = 1
      - foreach v1 of local should {
      - local ++i
      - local v2 : word `i' of `is'
      = local v2 : word 1 of 
      - if ("`v1'"!="`v2'") {
      = if ("id"!="") {
      - return scalar sorted = 0
      - continue, break
        }
        }
      -------------------------------------------------- end merge.checksort ---
    - if (!r(sorted)) {
    - sort `varlist'
    = sort id
    - }
    - quietly describe using "`using'", varlist short
    = quietly describe using "/var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//
> S_20065.00000i", varlist short
      ------------------------------------------------------- begin describe ---
      - version 9
      - local version : di "version " string(_caller()) ":"
      - syntax [anything] [using] [, SImple REPLACE *]
      - if ("`replace'"!="") {
      = if (""!="") {
        describe_mk `0'
        return add
        exit
        }
      - local varlist `"`anything'"'
      = local varlist `""'
      - if ("`simple'" == "") {
      = if ("" == "") {
      - `version' _describe `0'
      = version 11: _describe using "/var/folders/rp/96l526kj7ybdjr5vs5bqqjw8000
> 0gn/T//S_20065.00000i", varlist short
      - return add
      - }
      - else {
        if (`"`options'"' != "") {
        di as err "simple may not be combined with other options"
        exit 198
        }
        if (`"`using'"' != "") {
        qui `version' describe `varlist' `using', varlist
        if "`varlist'" == "" {
        local vars "`r(varlist)'"
        }
        else {
        local vars "`varlist'"
        }
        local wid = 2
        local n : list sizeof vars
        if `n'==0 {
        exit
        }
        if "`c(hasicu)'" == "1" {
        foreach x of local vars {
        local wid = max(`wid', udstrlen(`"`x'"'))
        }
        }
        else {
        foreach x of local vars {
        local wid = max(`wid', strlen(`"`x'"'))
        }
        }
        local wid = `wid' + 2
        local cols = int((`c(linesize)'+1)/`wid')
        if `cols' < 2 {
        foreach x of local `vars' {
        di as txt `col' `"`x'"'
        }
        exit
        }
        local lines = `n'/`cols'
        local lines = int(cond(`lines'>int(`lines'), `lines'+1, `lines'))
        forvalues i=1(1)`lines' {
        local top = min((`cols')*`lines'+`i', `n')
        local col = 1
        forvalues j=`i'(`lines')`top' {
        local x : word `j' of `vars'
        di as txt _column(`col') "`x'" _c
        local col = `col' + `wid'
        }
        di as txt
        }
        qui `version' describe `varlist' `using', short
        return add
        }
        else {
        ds `varlist'
        qui `version' _describe `varlist', short
        return add
        }
        }
      --------------------------------------------------------- end describe ---
    - local sortedby "`r(sortlist)'"
    = local sortedby "year acs_hhinc"
    - checksort "`sortedby'" "`varlist'"
    = checksort "year acs_hhinc" "id"
      ------------------------------------------------ begin merge.checksort ---
      - args is should
      - local i 0
      - return scalar sorted = 1
      - foreach v1 of local should {
      - local ++i
      - local v2 : word `i' of `is'
      = local v2 : word 1 of year acs_hhinc
      - if ("`v1'"!="`v2'") {
      = if ("id"!="year") {
      - return scalar sorted = 0
      - continue, break
        }
        }
      -------------------------------------------------- end merge.checksort ---
    - if (!r(sorted)) {
    - preserve
    - qui use "`using'", clear
    = qui use "/var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000i"
> , clear
    - sort `varlist'
    = sort id
    - tempfile using
    - qui save "`using'", replace
    = qui save "/var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000k
> ", replace
    - restore
    - }
    - }
    - if ("`nogenerate'"!="") {
    = if (""!="") {
      tempvar mergevar
      local mergevaristemp 1
      }
    - else {
    - local mergevar = cond("`generate'"!="", "`generate'", "_merge")
    = local mergevar = cond(""!="", "", "_merge")
    - local mergevaristemp 0
    - }
    - local options `update' `replace' `notes' `labels' _merge(`mergevar') `forc
> e'
    = local options     _merge(_merge) 
    - if (bsubstr("`mtype'", 1, 1)=="1") {
    = if (bsubstr("1:1", 1, 1)=="1") {
    - local options `options' uniqmaster
    = local options _merge(_merge) uniqmaster
    - }
    - if (bsubstr("`mtype'", 3, 1)=="1") {
    = if (bsubstr("1:1", 3, 1)=="1") {
    - local options `options' uniqusing
    = local options _merge(_merge) uniqmaster uniqusing
    - }
    - if ("`keepusing'"!="") {
    = if (""!="") {
      local options `options' keep(`keepusing')
      }
    - if ("`keep'" !="" & !strpos("`keep'" , "2")) {
    = if ("" !="" & !strpos("" , "2")) {
      local options `options' nokeep
      }
    - if (_caller() > 15) {
    - local version : di "version " string(_caller()) ": "
    - }
    - local _merge `"`version'_merge `varlist' using "`using'", nowarn"'
    = local _merge `"version 16: _merge id using "/var/folders/rp/96l526kj7ybdjr
> 5vs5bqqjw80000gn/T//S_20065.00000k", nowarn"'
    - local _merge `"`_merge' `options' tabulate(mresults)"'
    = local _merge `"version 16: _merge id using "/var/folders/rp/96l526kj7ybdjr
> 5vs5bqqjw80000gn/T//S_20065.00000k", nowarn _merge(_merge) uniqmaster uniqusin
> g tabulate(mresults)"'
    - if ("`debug'"!="") {
    = if (""!="") {
      di as txt _n "command is"
      di `"`_merge'"' _n
      }
    - `_merge'
    = version 16: _merge id using "/var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000g
> n/T//S_20065.00000k", nowarn _merge(_merge) uniqmaster uniqusing tabulate(mres
> ults)
(label statefip_lbl already defined)
    - if (!`mergevaristemp') {
    = if (!0) {
    - capture label list _merge
      ---------------------------------------------------------- begin label ---
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {
      = if (strpos("list", "val") > 0 ) {
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {
        local fix ", nofix"
        }
        gettoken var rest : anything
        while `"`rest'"' != "" {
        gettoken lab rest : rest
        local label "`lab'"
        }
        local vlist : list anything - lab
        if "`lab'" == "." {
        local lab ""
        }
        foreach var of varlist `vlist' {
        `vv' _label `val' `var' `lab' `fix'
        }
        }
      - else {
      - `vv' _label `macval(0)'
      = version 11, missing: _label list _merge
        }
      ------------------------------------------------------------ end label ---
    - if (_rc) {
    - label define _merge 1 "master only (1)" 2 "using only (2)" 3 "matched (3)"
>  4 "missing updated (4)" 5 "nonmissing conflict (5)"
      ---------------------------------------------------------- begin label ---
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {
      = if (strpos("define", "val") > 0 ) {
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {
        local fix ", nofix"
        }
        gettoken var rest : anything
        while `"`rest'"' != "" {
        gettoken lab rest : rest
        local label "`lab'"
        }
        local vlist : list anything - lab
        if "`lab'" == "." {
        local lab ""
        }
        foreach var of varlist `vlist' {
        `vv' _label `val' `var' `lab' `fix'
        }
        }
      - else {
      - `vv' _label `macval(0)'
      = version 11, missing: _label define _merge 1 "master only (1)" 2 "using o
> nly (2)" 3 "matched (3)" 4 "missing updated (4)" 5 "nonmissing conflict (5)"
      - }
      ------------------------------------------------------------ end label ---
    - }
    - label values `mergevar' _merge
    = label values _merge _merge
      ---------------------------------------------------------- begin label ---
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {
      = if (strpos("values", "val") > 0 ) {
      - gettoken val 0 : 0
      - syntax anything [, nofix]
      - if "`fix'" != "" {
      = if "" != "" {
        local fix ", nofix"
        }
      - gettoken var rest : anything
      - while `"`rest'"' != "" {
      = while `" _merge"' != "" {
      - gettoken lab rest : rest
      - local label "`lab'"
      = local label "_merge"
      - }
      - while `"`rest'"' != "" {
      = while `""' != "" {
        gettoken lab rest : rest
        local label "`lab'"
        }
      - local vlist : list anything - lab
      - if "`lab'" == "." {
      = if "_merge" == "." {
        local lab ""
        }
      - foreach var of varlist `vlist' {
      = foreach var of varlist _merge {
      - `vv' _label `val' `var' `lab' `fix'
      = version 11, missing: _label values _merge _merge 
      - }
      - }
      - else {
        `vv' _label `macval(0)'
        }
      ------------------------------------------------------------ end label ---
    - }
    - if ("`assert'"!="") {
    = if (""!="") {
      if (_caller() < 13) {
      buildexpr expr : `mergevar' "`assert'"
      capture assert `expr'
      if (_rc) {
      error_assert `mergevar' "`assert'"
      }
      }
      else {
      capture checkmresults "`mresults'" "`assert'"
      if (_rc) {
      error_assert `mergevar' "`assert'"
      }
      }
      }
    - if ("`keep'"!="") {
    = if (""!="") {
      buildexpr expr : `mergevar' "`keep'"
      quietly keep if `expr'
      }
    - if ("`mtype'"=="1:1") {
    = if ("1:1"=="1:1") {
    - qui count if `mergevar'==2
    = qui count if _merge==2
    - if (r(N)==0) {
    - sort `varlist'
    = sort id
    - }
    - }
    - if (c(noisily) & "`report'"=="") {
    = if (c(noisily) & ""=="") {
    - local isupdate = ("`replace'"!="" | "`update'"!="")
    = local isupdate = (""!="" | ""!="")
    - present_table `isupdate' `mergevar' `mergevaristemp'
    = present_table 0 _merge 0
      -------------------------------------------- begin merge.present_table ---
      - args isupdate mergevar mergevaristemp
      - if (!`mergevaristemp') {
      = if (!0) {
      - local v1 "(`mergevar'==1)"
      = local v1 "(_merge==1)"
      - local v2 "(`mergevar'==2)"
      = local v2 "(_merge==2)"
      - local v3 "(`mergevar'==3)"
      = local v3 "(_merge==3)"
      - local v4 "(`mergevar'==4)"
      = local v4 "(_merge==4)"
      - local v5 "(`mergevar'==5)"
      = local v5 "(_merge==5)"
      - }
      - quietly {
      - count if `mergevar'==1
      = count if _merge==1
      - local m1 = r(N)
      - count if `mergevar'==2
      = count if _merge==2
      - local m2 = r(N)
      - if (`isupdate') {
      = if (0) {
        count if `mergevar'==3
        local m3 = r(N)
        count if `mergevar'==4
        local m4 = r(N)
        local m5 = _N - `m1' - `m2' - `m3' - `m4'
        }
      - else {
      - local m3 = _N - `m1' - `m2'
      = local m3 = _N - 0 - 0
      - }
      - }
      - di

      - di as smcl as txt _col(5) "Result" _col(38) "# of obs."
    Result                           # of obs.
      - di as smcl as txt _col(5) "{hline 41}"
    -----------------------------------------
      - di as smcl as txt _col(5) "not matched" _col(30) as res %16.0fc (`m1'+`m
> 2')
      = di as smcl as txt _col(5) "not matched" _col(30) as res %16.0fc (0+0)
    not matched                             0
      - if (`m1'|`m2') {
      = if (0|0) {
        di as smcl as txt _col(9) "from master" _col(30) as res %16.0fc `m1' as 
> txt "  `v1'"
        di as smcl as txt _col(9) "from using" _col(30) as res %16.0fc `m2' as t
> xt "  `v2'"
        di
        }
      - if (!`isupdate') {
      = if (!0) {
      - di as smcl as txt _col(5) "matched" _col(30) as res %16.0fc `m3' as txt 
> "  `v3'"
      = di as smcl as txt _col(5) "matched" _col(30) as res %16.0fc 26451 as txt
>  "  (_merge==3)"
    matched                            26,451  (_merge==3)
      - }
      - else {
        if (`m1'==0 & `m2'==0) {
        di
        }
        di as smcl as txt _col(5) "matched" _col(30) as res %16.0fc (`m3'+`m4'+`
> m5')
        di as smcl as txt _col(9) "not updated" _col(30) as res %16.0fc `m3' as 
> txt "  `v3'"
        di as smcl as txt _col(9) "missing updated" _col(30) as res %16.0fc `m4'
>  as txt "  `v4'"
        di as smcl as txt _col(9) "nonmissing conflict" _col(30) as res %16.0fc 
> `m5' as txt "  `v5'"
        }
      - di as smcl as txt _col(5) "{hline 41}"
    -----------------------------------------
      ---------------------------------------------- end merge.present_table ---
    - }
    -------------------------------------------------------------- end merge ---
  - generate category_n = .
(26,451 missing values generated)
  - replace category_n = `N'
  = replace category_n = 6260
(26,451 real changes made)
  - label var category_n "N respondents in income level in post-merge dataset'"
    ------------------------------------------------------------ begin label ---
    - version 10.0
    - local vv : display "version " string(_caller()) ", missing:"
    - gettoken val : 0
    - if (strpos("`val'", "val") > 0 ) {
    = if (strpos("var", "val") > 0 ) {
      gettoken val 0 : 0
      syntax anything [, nofix]
      if "`fix'" != "" {
      local fix ", nofix"
      }
      gettoken var rest : anything
      while `"`rest'"' != "" {
      gettoken lab rest : rest
      local label "`lab'"
      }
      local vlist : list anything - lab
      if "`lab'" == "." {
      local lab ""
      }
      foreach var of varlist `vlist' {
      `vv' _label `val' `var' `lab' `fix'
      }
      }
    - else {
    - `vv' _label `macval(0)'
    = version 16, missing: _label var category_n "N respondents in income level 
> in post-merge dataset'"
    - }
    -------------------------------------------------------------- end label ---
  - di "Merged ASEC values with original Research dataset for inc_level " `inc_l
> evel' " ($`lower_bound'-`upper_bound') and year `y'."
  = di "Merged ASEC values with original Research dataset for inc_level " 8 " ($
> 150000-200000) and year 2019."
Merged ASEC values with original Research dataset for inc_level 8 ($150000-20000
> 0) and year 2019.
  - tempfile temp_`inc_level'_`y'
  = tempfile temp_8_2019
  - save `temp_`inc_level'_`y'', replace
  = save /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000j, repla
> ce
(note: file /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000j not
>  found)
file /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000j saved
  - di "Saved REDI data (with continuous data) for inc_level " `inc_level' " ($`
> lower_bound'-`upper_bound') and year `y' in file"
  = di "Saved REDI data (with continuous data) for inc_level " 8 " ($150000-2000
> 00) and year 2019 in file"
Saved REDI data (with continuous data) for inc_level 8 ($150000-200000) and year
>  2019 in file
  - }
  - use `working_regex', clear
  = use /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.000003, clear
(Streamlined ACS data, 2019)
  - keep if `inc_cat_var' == `inc_level'
  = keep if acs_hhinc == 9
(279,984 observations deleted)
  - di "The current inc_level is: " `inc_level'
  = di "The current inc_level is: " 9
The current inc_level is: 9
  - if regexm(inc_decoded, "^[a-z/A-Z]+") == 1 {
    di "The inc_level " `inc_level' " is at the lowest end of the " "original Re
> search dataset income range"
    destring inc_decoded, ignore("Less than LESS THAN Under,$ ") generate(`inc_c
> at_var'_ub)
    gen `inc_cat_var'_lb = -100000
    di "Lower bound of -100,000 created for inc_level " `inc_level'
    }
  - else if regexm(inc_decoded, "[a-z/A-Z]+$") == 1 {
  - di "The inc_level " `inc_level' " is at the highest end of the " "original R
> esearch dataset income range"
  = di "The inc_level " 9 " is at the highest end of the " "original Research da
> taset income range"
The inc_level 9 is at the highest end of the original Research dataset income ra
> nge
  - destring inc_decoded, ignore("and over or over,$ or more OR MORE") generate(
> `inc_cat_var'_lb)
  = destring inc_decoded, ignore("and over or over,$ or more OR MORE") generate(
> acs_hhinc_lb)
    --------------------------------------------------------- begin destring ---
    - version 14
    - local cmdargs = `"`0'"'
    = local cmdargs = `"inc_decoded, ignore("and over or over,$ or more OR MORE"
> ) generate(acs_hhinc_lb)"'
    - local verpre : display "version " %4.1f _caller() ":"
    - syntax [varlist], [Generate(string) replace] [force] [float] [Ignore(strin
> g asis)] [percent] [dpcomma]
    - if _caller() >= 14 {
    - if ustrpos(`"`ignore'"',",") & !ustrpos(`"`ignore'"',`"""') {
    = if ustrpos(`""and over or over,$ or more OR MORE""',",") & !ustrpos(`""and
>  over or over,$ or more OR MORE""',`"""') {
      display as error `"ignore string must be enclosed with quotes to ignore co
> mmas or use options"'
      exit 198
      }
    - }
    - `verpre' _parse_ignore `ignore'
    = version 16.0: _parse_ignore "and over or over,$ or more OR MORE"
      -------------------------------------------------- begin _parse_ignore ---
      - version 14
      - sreturn clear
      - if _caller() < 14 {
        capture syntax [anything] , [ASChars] [ASBytes] [illegal]
        if !_rc {
        if "`aschars'`asbytes'`illegal'"!="" {
        display as error "may not specify options in the ignore option for Stata
>  version less than 14"
        exit 198
        }
        }
        sreturn local aschars 0
        sreturn local illegal 0
        }
      - else {
      - syntax [anything] , [ASChars] [ASBytes] [illegal]
      - if "`asbytes'"!="" {
      = if ""!="" {
        if "`aschars'"!="" {
        display as error "may specify only one of the ignore options aschars and
>  asbytes"
        exit 198
        }
        if "`illegal'"!="" {
        display as error "may not specify the ignore option illegal when specify
> ing asbytes"
        exit 198
        }
        }
      - if "`asbytes'"=="" {
      = if ""=="" {
      - if ustrinvalidcnt(`"`anything'"') {
      = if ustrinvalidcnt(`""and over or over,$ or more OR MORE""') {
        display as error "invalid Unicode characters may not be ignored when rem
> oving aschars"
        exit 198
        }
      - }
      - sreturn local aschars = "`asbytes'"==""
      = sreturn local aschars = ""==""
      - sreturn local illegal = "`illegal'"!=""
      = sreturn local illegal = ""!=""
      - capture sreturn local ignore `anything'
      = capture sreturn local ignore "and over or over,$ or more OR MORE"
      - if _rc {
        sreturn local ignore `"`anything'"'
        }
      - }
      ---------------------------------------------------- end _parse_ignore ---
    - if _caller() < 14 {
      local aschars 0
      syntax [varlist], [Generate(string) replace] [force] [float] [Ignore(strin
> g)] [percent] [dpcomma]
      }
    - else {
    - if `"`s(ignore)'"'!="" {
    = if `"and over or over,$ or more OR MORE"'!="" {
    - local ignore `"`s(ignore)'"'
    = local ignore `"and over or over,$ or more OR MORE"'
    - }
    - local aschars `s(aschars)'
    = local aschars 1
    - if `s(illegal)' {
    = if 0 {
      local illegal = ustrunescape("\ufffd")
      }
    - }
    - if "`percent'" == "percent" {
    = if "" == "percent" {
      if !ustrpos(`"`ignore'"', "%") {
      local ignore `"`ignore'%"'
      }
      }
    - if "`illegal'"!="" {
    = if ""!="" {
      local ignore `"`ignore'`illegal'"'
      }
    - if `"`float'"'!="" {
    = if `""'!="" {
      local gtype "float"
      }
    - else {
    - local gtype "double"
    - }
    - if "`generate'" != "" & "`replace'" != "" {
    = if "acs_hhinc_lb" != "" & "" != "" {
      di as err "options generate and replace are mutually exclusive"
      exit 198
      }
    - if "`generate'" == "" & "`replace'" == "" {
    = if "acs_hhinc_lb" == "" & "" == "" {
      di as err "must specify either generate or replace option"
      exit 198
      }
    - if "`generate'" != "" {
    = if "acs_hhinc_lb" != "" {
    - local ct1: word count `varlist'
    = local ct1: word count inc_decoded
    - local save "`varlist'"
    = local save "inc_decoded"
    - local 0 "`generate'"
    = local 0 "acs_hhinc_lb"
    - capture syntax newvarlist
    - if _rc {
      di as err "generate() contains existing variable(s) and/or illegal variabl
> e name(s)"
      exit _rc
      }
    - local generate "`varlist'"
    = local generate "acs_hhinc_lb"
    - local varlist "`save'"
    = local varlist "inc_decoded"
    - local ct2: word count `generate'
    = local ct2: word count acs_hhinc_lb
    - if `ct1' != `ct2' {
    = if 1 != 1 {
      di as err "number of variables in varlist must equal"
      di as err "number of variables in generate(newvarlist)"
      exit 198
      }
    - }
    - local m 1
    - if `"`ignore'"' == "" {
    = if `"and over or over,$ or more OR MORE"' == "" {
      local ignore ""
      }
    - if `aschars' {
    = if 1 {
    - local l = ustrlen(`"`ignore'"')
    = local l = ustrlen(`"and over or over,$ or more OR MORE"')
    - }
    - else {
      local l = length(`"`ignore'"')
      }
    - while `m' <= `l' {
    = while 1 <= 34 {
    - if `aschars' {
    = if 1 {
    - local char`m' = usubstr(`"`ignore'"', `m', 1)
    = local char1 = usubstr(`"and over or over,$ or more OR MORE"', 1, 1)
    - }
    - else {
      local char`m' = substr(`"`ignore'"', `m', 1)
      }
    - local m = `m' + 1
    = local m = 1 + 1
    - }
    - while `m' <= `l' {
    = while 2 <= 34 {
    - if `aschars' {
    = if 1 {
    - local char`m' = usubstr(`"`ignore'"', `m', 1)
    = local char2 = usubstr(`"and over or over,$ or more OR MORE"', 2, 1)
    - }
    - else {
      local char`m' = substr(`"`ignore'"', `m', 1)
      }
    - local m = `m' + 1
    = local m = 2 + 1
    - }
    - while `m' <= `l' {
    = while 3 <= 34 {
    - if `aschars' {
    = if 1 {
    - local char`m' = usubstr(`"`ignore'"', `m', 1)
    = local char3 = usubstr(`"and over or over,$ or more OR MORE"', 3, 1)
    - }
    - else {
      local char`m' = substr(`"`ignore'"', `m', 1)
      }
    - local m = `m' + 1
    = local m = 3 + 1
    - }
    - while `m' <= `l' {
    = while 4 <= 34 {
    - if `aschars' {
    = if 1 {
    - local char`m' = usubstr(`"`ignore'"', `m', 1)
    = local char4 = usubstr(`"and over or over,$ or more OR MORE"', 4, 1)
    - }
    - else {
      local char`m' = substr(`"`ignore'"', `m', 1)
      }
    - local m = `m' + 1
    = local m = 4 + 1
    - }
    - while `m' <= `l' {
    = while 5 <= 34 {
    - if `aschars' {
    = if 1 {
    - local char`m' = usubstr(`"`ignore'"', `m', 1)
    = local char5 = usubstr(`"and over or over,$ or more OR MORE"', 5, 1)
    - }
    - else {
      local char`m' = substr(`"`ignore'"', `m', 1)
      }
    - local m = `m' + 1
    = local m = 5 + 1
    - }
    - while `m' <= `l' {
    = while 6 <= 34 {
    - if `aschars' {
    = if 1 {
    - local char`m' = usubstr(`"`ignore'"', `m', 1)
    = local char6 = usubstr(`"and over or over,$ or more OR MORE"', 6, 1)
    - }
    - else {
      local char`m' = substr(`"`ignore'"', `m', 1)
      }
    - local m = `m' + 1
    = local m = 6 + 1
    - }
    - while `m' <= `l' {
    = while 7 <= 34 {
    - if `aschars' {
    = if 1 {
    - local char`m' = usubstr(`"`ignore'"', `m', 1)
    = local char7 = usubstr(`"and over or over,$ or more OR MORE"', 7, 1)
    - }
    - else {
      local char`m' = substr(`"`ignore'"', `m', 1)
      }
    - local m = `m' + 1
    = local m = 7 + 1
    - }
    - while `m' <= `l' {
    = while 8 <= 34 {
    - if `aschars' {
    = if 1 {
    - local char`m' = usubstr(`"`ignore'"', `m', 1)
    = local char8 = usubstr(`"and over or over,$ or more OR MORE"', 8, 1)
    - }
    - else {
      local char`m' = substr(`"`ignore'"', `m', 1)
      }
    - local m = `m' + 1
    = local m = 8 + 1
    - }
    - while `m' <= `l' {
    = while 9 <= 34 {
    - if `aschars' {
    = if 1 {
    - local char`m' = usubstr(`"`ignore'"', `m', 1)
    = local char9 = usubstr(`"and over or over,$ or more OR MORE"', 9, 1)
    - }
    - else {
      local char`m' = substr(`"`ignore'"', `m', 1)
      }
    - local m = `m' + 1
    = local m = 9 + 1
    - }
    - while `m' <= `l' {
    = while 10 <= 34 {
    - if `aschars' {
    = if 1 {
    - local char`m' = usubstr(`"`ignore'"', `m', 1)
    = local char10 = usubstr(`"and over or over,$ or more OR MORE"', 10, 1)
    - }
    - else {
      local char`m' = substr(`"`ignore'"', `m', 1)
      }
    - local m = `m' + 1
    = local m = 10 + 1
    - }
    - while `m' <= `l' {
    = while 11 <= 34 {
    - if `aschars' {
    = if 1 {
    - local char`m' = usubstr(`"`ignore'"', `m', 1)
    = local char11 = usubstr(`"and over or over,$ or more OR MORE"', 11, 1)
    - }
    - else {
      local char`m' = substr(`"`ignore'"', `m', 1)
      }
    - local m = `m' + 1
    = local m = 11 + 1
    - }
    - while `m' <= `l' {
    = while 12 <= 34 {
    - if `aschars' {
    = if 1 {
    - local char`m' = usubstr(`"`ignore'"', `m', 1)
    = local char12 = usubstr(`"and over or over,$ or more OR MORE"', 12, 1)
    - }
    - else {
      local char`m' = substr(`"`ignore'"', `m', 1)
      }
    - local m = `m' + 1
    = local m = 12 + 1
    - }
    - while `m' <= `l' {
    = while 13 <= 34 {
    - if `aschars' {
    = if 1 {
    - local char`m' = usubstr(`"`ignore'"', `m', 1)
    = local char13 = usubstr(`"and over or over,$ or more OR MORE"', 13, 1)
    - }
    - else {
      local char`m' = substr(`"`ignore'"', `m', 1)
      }
    - local m = `m' + 1
    = local m = 13 + 1
    - }
    - while `m' <= `l' {
    = while 14 <= 34 {
    - if `aschars' {
    = if 1 {
    - local char`m' = usubstr(`"`ignore'"', `m', 1)
    = local char14 = usubstr(`"and over or over,$ or more OR MORE"', 14, 1)
    - }
    - else {
      local char`m' = substr(`"`ignore'"', `m', 1)
      }
    - local m = `m' + 1
    = local m = 14 + 1
    - }
    - while `m' <= `l' {
    = while 15 <= 34 {
    - if `aschars' {
    = if 1 {
    - local char`m' = usubstr(`"`ignore'"', `m', 1)
    = local char15 = usubstr(`"and over or over,$ or more OR MORE"', 15, 1)
    - }
    - else {
      local char`m' = substr(`"`ignore'"', `m', 1)
      }
    - local m = `m' + 1
    = local m = 15 + 1
    - }
    - while `m' <= `l' {
    = while 16 <= 34 {
    - if `aschars' {
    = if 1 {
    - local char`m' = usubstr(`"`ignore'"', `m', 1)
    = local char16 = usubstr(`"and over or over,$ or more OR MORE"', 16, 1)
    - }
    - else {
      local char`m' = substr(`"`ignore'"', `m', 1)
      }
    - local m = `m' + 1
    = local m = 16 + 1
    - }
    - while `m' <= `l' {
    = while 17 <= 34 {
    - if `aschars' {
    = if 1 {
    - local char`m' = usubstr(`"`ignore'"', `m', 1)
    = local char17 = usubstr(`"and over or over,$ or more OR MORE"', 17, 1)
    - }
    - else {
      local char`m' = substr(`"`ignore'"', `m', 1)
      }
    - local m = `m' + 1
    = local m = 17 + 1
    - }
    - while `m' <= `l' {
    = while 18 <= 34 {
    - if `aschars' {
    = if 1 {
    - local char`m' = usubstr(`"`ignore'"', `m', 1)
    = local char18 = usubstr(`"and over or over,$ or more OR MORE"', 18, 1)
    - }
    - else {
      local char`m' = substr(`"`ignore'"', `m', 1)
      }
    - local m = `m' + 1
    = local m = 18 + 1
    - }
    - while `m' <= `l' {
    = while 19 <= 34 {
    - if `aschars' {
    = if 1 {
    - local char`m' = usubstr(`"`ignore'"', `m', 1)
    = local char19 = usubstr(`"and over or over,$ or more OR MORE"', 19, 1)
    - }
    - else {
      local char`m' = substr(`"`ignore'"', `m', 1)
      }
    - local m = `m' + 1
    = local m = 19 + 1
    - }
    - while `m' <= `l' {
    = while 20 <= 34 {
    - if `aschars' {
    = if 1 {
    - local char`m' = usubstr(`"`ignore'"', `m', 1)
    = local char20 = usubstr(`"and over or over,$ or more OR MORE"', 20, 1)
    - }
    - else {
      local char`m' = substr(`"`ignore'"', `m', 1)
      }
    - local m = `m' + 1
    = local m = 20 + 1
    - }
    - while `m' <= `l' {
    = while 21 <= 34 {
    - if `aschars' {
    = if 1 {
    - local char`m' = usubstr(`"`ignore'"', `m', 1)
    = local char21 = usubstr(`"and over or over,$ or more OR MORE"', 21, 1)
    - }
    - else {
      local char`m' = substr(`"`ignore'"', `m', 1)
      }
    - local m = `m' + 1
    = local m = 21 + 1
    - }
    - while `m' <= `l' {
    = while 22 <= 34 {
    - if `aschars' {
    = if 1 {
    - local char`m' = usubstr(`"`ignore'"', `m', 1)
    = local char22 = usubstr(`"and over or over,$ or more OR MORE"', 22, 1)
    - }
    - else {
      local char`m' = substr(`"`ignore'"', `m', 1)
      }
    - local m = `m' + 1
    = local m = 22 + 1
    - }
    - while `m' <= `l' {
    = while 23 <= 34 {
    - if `aschars' {
    = if 1 {
    - local char`m' = usubstr(`"`ignore'"', `m', 1)
    = local char23 = usubstr(`"and over or over,$ or more OR MORE"', 23, 1)
    - }
    - else {
      local char`m' = substr(`"`ignore'"', `m', 1)
      }
    - local m = `m' + 1
    = local m = 23 + 1
    - }
    - while `m' <= `l' {
    = while 24 <= 34 {
    - if `aschars' {
    = if 1 {
    - local char`m' = usubstr(`"`ignore'"', `m', 1)
    = local char24 = usubstr(`"and over or over,$ or more OR MORE"', 24, 1)
    - }
    - else {
      local char`m' = substr(`"`ignore'"', `m', 1)
      }
    - local m = `m' + 1
    = local m = 24 + 1
    - }
    - while `m' <= `l' {
    = while 25 <= 34 {
    - if `aschars' {
    = if 1 {
    - local char`m' = usubstr(`"`ignore'"', `m', 1)
    = local char25 = usubstr(`"and over or over,$ or more OR MORE"', 25, 1)
    - }
    - else {
      local char`m' = substr(`"`ignore'"', `m', 1)
      }
    - local m = `m' + 1
    = local m = 25 + 1
    - }
    - while `m' <= `l' {
    = while 26 <= 34 {
    - if `aschars' {
    = if 1 {
    - local char`m' = usubstr(`"`ignore'"', `m', 1)
    = local char26 = usubstr(`"and over or over,$ or more OR MORE"', 26, 1)
    - }
    - else {
      local char`m' = substr(`"`ignore'"', `m', 1)
      }
    - local m = `m' + 1
    = local m = 26 + 1
    - }
    - while `m' <= `l' {
    = while 27 <= 34 {
    - if `aschars' {
    = if 1 {
    - local char`m' = usubstr(`"`ignore'"', `m', 1)
    = local char27 = usubstr(`"and over or over,$ or more OR MORE"', 27, 1)
    - }
    - else {
      local char`m' = substr(`"`ignore'"', `m', 1)
      }
    - local m = `m' + 1
    = local m = 27 + 1
    - }
    - while `m' <= `l' {
    = while 28 <= 34 {
    - if `aschars' {
    = if 1 {
    - local char`m' = usubstr(`"`ignore'"', `m', 1)
    = local char28 = usubstr(`"and over or over,$ or more OR MORE"', 28, 1)
    - }
    - else {
      local char`m' = substr(`"`ignore'"', `m', 1)
      }
    - local m = `m' + 1
    = local m = 28 + 1
    - }
    - while `m' <= `l' {
    = while 29 <= 34 {
    - if `aschars' {
    = if 1 {
    - local char`m' = usubstr(`"`ignore'"', `m', 1)
    = local char29 = usubstr(`"and over or over,$ or more OR MORE"', 29, 1)
    - }
    - else {
      local char`m' = substr(`"`ignore'"', `m', 1)
      }
    - local m = `m' + 1
    = local m = 29 + 1
    - }
    - while `m' <= `l' {
    = while 30 <= 34 {
    - if `aschars' {
    = if 1 {
    - local char`m' = usubstr(`"`ignore'"', `m', 1)
    = local char30 = usubstr(`"and over or over,$ or more OR MORE"', 30, 1)
    - }
    - else {
      local char`m' = substr(`"`ignore'"', `m', 1)
      }
    - local m = `m' + 1
    = local m = 30 + 1
    - }
    - while `m' <= `l' {
    = while 31 <= 34 {
    - if `aschars' {
    = if 1 {
    - local char`m' = usubstr(`"`ignore'"', `m', 1)
    = local char31 = usubstr(`"and over or over,$ or more OR MORE"', 31, 1)
    - }
    - else {
      local char`m' = substr(`"`ignore'"', `m', 1)
      }
    - local m = `m' + 1
    = local m = 31 + 1
    - }
    - while `m' <= `l' {
    = while 32 <= 34 {
    - if `aschars' {
    = if 1 {
    - local char`m' = usubstr(`"`ignore'"', `m', 1)
    = local char32 = usubstr(`"and over or over,$ or more OR MORE"', 32, 1)
    - }
    - else {
      local char`m' = substr(`"`ignore'"', `m', 1)
      }
    - local m = `m' + 1
    = local m = 32 + 1
    - }
    - while `m' <= `l' {
    = while 33 <= 34 {
    - if `aschars' {
    = if 1 {
    - local char`m' = usubstr(`"`ignore'"', `m', 1)
    = local char33 = usubstr(`"and over or over,$ or more OR MORE"', 33, 1)
    - }
    - else {
      local char`m' = substr(`"`ignore'"', `m', 1)
      }
    - local m = `m' + 1
    = local m = 33 + 1
    - }
    - while `m' <= `l' {
    = while 34 <= 34 {
    - if `aschars' {
    = if 1 {
    - local char`m' = usubstr(`"`ignore'"', `m', 1)
    = local char34 = usubstr(`"and over or over,$ or more OR MORE"', 34, 1)
    - }
    - else {
      local char`m' = substr(`"`ignore'"', `m', 1)
      }
    - local m = `m' + 1
    = local m = 34 + 1
    - }
    - while `m' <= `l' {
    = while 35 <= 34 {
      if `aschars' {
      local char`m' = usubstr(`"`ignore'"', `m', 1)
      }
      else {
      local char`m' = substr(`"`ignore'"', `m', 1)
      }
      local m = `m' + 1
      }
    - if `aschars' {
    = if 1 {
    - local aswhat "character"
    - }
    - else {
      local aswhat "byte"
      }
    - if "`generate'"!="" {
    = if "acs_hhinc_lb"!="" {
    - local genrep "generate"
    - }
    - else {
      local genrep "replace"
      }
    - local tvars OLDVAR NEWVAR ismissing found topct
    - tempvar `tvars'
    = tempvar OLDVAR NEWVAR ismissing found topct
    - local varno 0
    - foreach var of varlist `varlist' {
    = foreach var of varlist inc_decoded {
    - local varno = `varno' + 1
    = local varno = 0 + 1
    - if "`generate'"!="" {
    = if "acs_hhinc_lb"!="" {
    - local finalvarname : word `varno' of `generate'
    = local finalvarname : word 1 of acs_hhinc_lb
    - local finalprint "`finalvarname' "
    = local finalprint "acs_hhinc_lb "
    - }
    - else {
      local finalvarname "`var'"
      local finalprint ""
      }
    - capture confirm string variable `var'
    = capture confirm string variable inc_decoded
    - if _rc != 0 {
      di as txt "`var' already numeric; no " as res "`genrep'"
      }
    - else {
    - qui gen `OLDVAR' = `var'
    = qui gen __000000 = inc_decoded
    - local jj 1
    - local b
    - local bcnt = 0
    - local c
    - local makepct
    - while `"`char`jj''"' != "" {
    = while `"a"' != "" {
    - capture drop `found'
    = capture drop __000003
    - capture drop `topct'
    = capture drop __000004
    - local t `"`char`jj''"'
    = local t `"a"'
    - if `aschars' {
    = if 1 {
    - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
    = qui gen byte __000003 = ustrpos(__000000, `"a"') != 0
    - }
    - else {
      qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
      }
    - qui summarize `found', meanonly
    = qui summarize __000003, meanonly
    - if r(sum) > 0 {
      if `"`t'"'=="`illegal'" {
      local b `"`b' illegal Unicode"'
      }
      else if `"`t'"' == " " {
      local b `"`b' space"'
      }
      else {
      local b `"`b' `t'"'
      }
      local ++bcnt
      }
    - if `aschars' {
    = if 1 {
    - if `"`t'"'=="%" {
    = if `"a"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if ustrpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
    - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
    = qui replace __000000 = usubinstr(__000000, `"a"', "", .)
    - }
    - else {
      if `"`t'"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if strpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
      qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
      }
    - local jj = `jj' + 1
    = local jj = 1 + 1
    - }
    - while `"`char`jj''"' != "" {
    = while `"n"' != "" {
    - capture drop `found'
    = capture drop __000003
    - capture drop `topct'
    = capture drop __000004
    - local t `"`char`jj''"'
    = local t `"n"'
    - if `aschars' {
    = if 1 {
    - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
    = qui gen byte __000003 = ustrpos(__000000, `"n"') != 0
    - }
    - else {
      qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
      }
    - qui summarize `found', meanonly
    = qui summarize __000003, meanonly
    - if r(sum) > 0 {
      if `"`t'"'=="`illegal'" {
      local b `"`b' illegal Unicode"'
      }
      else if `"`t'"' == " " {
      local b `"`b' space"'
      }
      else {
      local b `"`b' `t'"'
      }
      local ++bcnt
      }
    - if `aschars' {
    = if 1 {
    - if `"`t'"'=="%" {
    = if `"n"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if ustrpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
    - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
    = qui replace __000000 = usubinstr(__000000, `"n"', "", .)
    - }
    - else {
      if `"`t'"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if strpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
      qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
      }
    - local jj = `jj' + 1
    = local jj = 2 + 1
    - }
    - while `"`char`jj''"' != "" {
    = while `"d"' != "" {
    - capture drop `found'
    = capture drop __000003
    - capture drop `topct'
    = capture drop __000004
    - local t `"`char`jj''"'
    = local t `"d"'
    - if `aschars' {
    = if 1 {
    - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
    = qui gen byte __000003 = ustrpos(__000000, `"d"') != 0
    - }
    - else {
      qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
      }
    - qui summarize `found', meanonly
    = qui summarize __000003, meanonly
    - if r(sum) > 0 {
      if `"`t'"'=="`illegal'" {
      local b `"`b' illegal Unicode"'
      }
      else if `"`t'"' == " " {
      local b `"`b' space"'
      }
      else {
      local b `"`b' `t'"'
      }
      local ++bcnt
      }
    - if `aschars' {
    = if 1 {
    - if `"`t'"'=="%" {
    = if `"d"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if ustrpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
    - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
    = qui replace __000000 = usubinstr(__000000, `"d"', "", .)
    - }
    - else {
      if `"`t'"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if strpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
      qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
      }
    - local jj = `jj' + 1
    = local jj = 3 + 1
    - }
    - while `"`char`jj''"' != "" {
    = while `" "' != "" {
    - capture drop `found'
    = capture drop __000003
    - capture drop `topct'
    = capture drop __000004
    - local t `"`char`jj''"'
    = local t `" "'
    - if `aschars' {
    = if 1 {
    - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
    = qui gen byte __000003 = ustrpos(__000000, `" "') != 0
    - }
    - else {
      qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
      }
    - qui summarize `found', meanonly
    = qui summarize __000003, meanonly
    - if r(sum) > 0 {
    - if `"`t'"'=="`illegal'" {
    = if `" "'=="" {
      local b `"`b' illegal Unicode"'
      }
    - else if `"`t'"' == " " {
    = else if `" "' == " " {
    - local b `"`b' space"'
    = local b `" space"'
    - }
    - else {
      local b `"`b' `t'"'
      }
    - local ++bcnt
    - }
    - if `aschars' {
    = if 1 {
    - if `"`t'"'=="%" {
    = if `" "'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if ustrpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
    - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
    = qui replace __000000 = usubinstr(__000000, `" "', "", .)
    - }
    - else {
      if `"`t'"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if strpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
      qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
      }
    - local jj = `jj' + 1
    = local jj = 4 + 1
    - }
    - while `"`char`jj''"' != "" {
    = while `"o"' != "" {
    - capture drop `found'
    = capture drop __000003
    - capture drop `topct'
    = capture drop __000004
    - local t `"`char`jj''"'
    = local t `"o"'
    - if `aschars' {
    = if 1 {
    - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
    = qui gen byte __000003 = ustrpos(__000000, `"o"') != 0
    - }
    - else {
      qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
      }
    - qui summarize `found', meanonly
    = qui summarize __000003, meanonly
    - if r(sum) > 0 {
    - if `"`t'"'=="`illegal'" {
    = if `"o"'=="" {
      local b `"`b' illegal Unicode"'
      }
    - else if `"`t'"' == " " {
    = else if `"o"' == " " {
      local b `"`b' space"'
      }
    - else {
    - local b `"`b' `t'"'
    = local b `" space o"'
    - }
    - local ++bcnt
    - }
    - if `aschars' {
    = if 1 {
    - if `"`t'"'=="%" {
    = if `"o"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if ustrpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
    - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
    = qui replace __000000 = usubinstr(__000000, `"o"', "", .)
    - }
    - else {
      if `"`t'"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if strpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
      qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
      }
    - local jj = `jj' + 1
    = local jj = 5 + 1
    - }
    - while `"`char`jj''"' != "" {
    = while `"v"' != "" {
    - capture drop `found'
    = capture drop __000003
    - capture drop `topct'
    = capture drop __000004
    - local t `"`char`jj''"'
    = local t `"v"'
    - if `aschars' {
    = if 1 {
    - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
    = qui gen byte __000003 = ustrpos(__000000, `"v"') != 0
    - }
    - else {
      qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
      }
    - qui summarize `found', meanonly
    = qui summarize __000003, meanonly
    - if r(sum) > 0 {
      if `"`t'"'=="`illegal'" {
      local b `"`b' illegal Unicode"'
      }
      else if `"`t'"' == " " {
      local b `"`b' space"'
      }
      else {
      local b `"`b' `t'"'
      }
      local ++bcnt
      }
    - if `aschars' {
    = if 1 {
    - if `"`t'"'=="%" {
    = if `"v"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if ustrpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
    - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
    = qui replace __000000 = usubinstr(__000000, `"v"', "", .)
    - }
    - else {
      if `"`t'"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if strpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
      qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
      }
    - local jj = `jj' + 1
    = local jj = 6 + 1
    - }
    - while `"`char`jj''"' != "" {
    = while `"e"' != "" {
    - capture drop `found'
    = capture drop __000003
    - capture drop `topct'
    = capture drop __000004
    - local t `"`char`jj''"'
    = local t `"e"'
    - if `aschars' {
    = if 1 {
    - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
    = qui gen byte __000003 = ustrpos(__000000, `"e"') != 0
    - }
    - else {
      qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
      }
    - qui summarize `found', meanonly
    = qui summarize __000003, meanonly
    - if r(sum) > 0 {
    - if `"`t'"'=="`illegal'" {
    = if `"e"'=="" {
      local b `"`b' illegal Unicode"'
      }
    - else if `"`t'"' == " " {
    = else if `"e"' == " " {
      local b `"`b' space"'
      }
    - else {
    - local b `"`b' `t'"'
    = local b `" space o e"'
    - }
    - local ++bcnt
    - }
    - if `aschars' {
    = if 1 {
    - if `"`t'"'=="%" {
    = if `"e"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if ustrpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
    - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
    = qui replace __000000 = usubinstr(__000000, `"e"', "", .)
    - }
    - else {
      if `"`t'"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if strpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
      qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
      }
    - local jj = `jj' + 1
    = local jj = 7 + 1
    - }
    - while `"`char`jj''"' != "" {
    = while `"r"' != "" {
    - capture drop `found'
    = capture drop __000003
    - capture drop `topct'
    = capture drop __000004
    - local t `"`char`jj''"'
    = local t `"r"'
    - if `aschars' {
    = if 1 {
    - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
    = qui gen byte __000003 = ustrpos(__000000, `"r"') != 0
    - }
    - else {
      qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
      }
    - qui summarize `found', meanonly
    = qui summarize __000003, meanonly
    - if r(sum) > 0 {
    - if `"`t'"'=="`illegal'" {
    = if `"r"'=="" {
      local b `"`b' illegal Unicode"'
      }
    - else if `"`t'"' == " " {
    = else if `"r"' == " " {
      local b `"`b' space"'
      }
    - else {
    - local b `"`b' `t'"'
    = local b `" space o e r"'
    - }
    - local ++bcnt
    - }
    - if `aschars' {
    = if 1 {
    - if `"`t'"'=="%" {
    = if `"r"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if ustrpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
    - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
    = qui replace __000000 = usubinstr(__000000, `"r"', "", .)
    - }
    - else {
      if `"`t'"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if strpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
      qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
      }
    - local jj = `jj' + 1
    = local jj = 8 + 1
    - }
    - while `"`char`jj''"' != "" {
    = while `" "' != "" {
    - capture drop `found'
    = capture drop __000003
    - capture drop `topct'
    = capture drop __000004
    - local t `"`char`jj''"'
    = local t `" "'
    - if `aschars' {
    = if 1 {
    - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
    = qui gen byte __000003 = ustrpos(__000000, `" "') != 0
    - }
    - else {
      qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
      }
    - qui summarize `found', meanonly
    = qui summarize __000003, meanonly
    - if r(sum) > 0 {
      if `"`t'"'=="`illegal'" {
      local b `"`b' illegal Unicode"'
      }
      else if `"`t'"' == " " {
      local b `"`b' space"'
      }
      else {
      local b `"`b' `t'"'
      }
      local ++bcnt
      }
    - if `aschars' {
    = if 1 {
    - if `"`t'"'=="%" {
    = if `" "'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if ustrpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
    - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
    = qui replace __000000 = usubinstr(__000000, `" "', "", .)
    - }
    - else {
      if `"`t'"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if strpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
      qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
      }
    - local jj = `jj' + 1
    = local jj = 9 + 1
    - }
    - while `"`char`jj''"' != "" {
    = while `"o"' != "" {
    - capture drop `found'
    = capture drop __000003
    - capture drop `topct'
    = capture drop __000004
    - local t `"`char`jj''"'
    = local t `"o"'
    - if `aschars' {
    = if 1 {
    - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
    = qui gen byte __000003 = ustrpos(__000000, `"o"') != 0
    - }
    - else {
      qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
      }
    - qui summarize `found', meanonly
    = qui summarize __000003, meanonly
    - if r(sum) > 0 {
      if `"`t'"'=="`illegal'" {
      local b `"`b' illegal Unicode"'
      }
      else if `"`t'"' == " " {
      local b `"`b' space"'
      }
      else {
      local b `"`b' `t'"'
      }
      local ++bcnt
      }
    - if `aschars' {
    = if 1 {
    - if `"`t'"'=="%" {
    = if `"o"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if ustrpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
    - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
    = qui replace __000000 = usubinstr(__000000, `"o"', "", .)
    - }
    - else {
      if `"`t'"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if strpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
      qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
      }
    - local jj = `jj' + 1
    = local jj = 10 + 1
    - }
    - while `"`char`jj''"' != "" {
    = while `"r"' != "" {
    - capture drop `found'
    = capture drop __000003
    - capture drop `topct'
    = capture drop __000004
    - local t `"`char`jj''"'
    = local t `"r"'
    - if `aschars' {
    = if 1 {
    - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
    = qui gen byte __000003 = ustrpos(__000000, `"r"') != 0
    - }
    - else {
      qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
      }
    - qui summarize `found', meanonly
    = qui summarize __000003, meanonly
    - if r(sum) > 0 {
      if `"`t'"'=="`illegal'" {
      local b `"`b' illegal Unicode"'
      }
      else if `"`t'"' == " " {
      local b `"`b' space"'
      }
      else {
      local b `"`b' `t'"'
      }
      local ++bcnt
      }
    - if `aschars' {
    = if 1 {
    - if `"`t'"'=="%" {
    = if `"r"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if ustrpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
    - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
    = qui replace __000000 = usubinstr(__000000, `"r"', "", .)
    - }
    - else {
      if `"`t'"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if strpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
      qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
      }
    - local jj = `jj' + 1
    = local jj = 11 + 1
    - }
    - while `"`char`jj''"' != "" {
    = while `" "' != "" {
    - capture drop `found'
    = capture drop __000003
    - capture drop `topct'
    = capture drop __000004
    - local t `"`char`jj''"'
    = local t `" "'
    - if `aschars' {
    = if 1 {
    - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
    = qui gen byte __000003 = ustrpos(__000000, `" "') != 0
    - }
    - else {
      qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
      }
    - qui summarize `found', meanonly
    = qui summarize __000003, meanonly
    - if r(sum) > 0 {
      if `"`t'"'=="`illegal'" {
      local b `"`b' illegal Unicode"'
      }
      else if `"`t'"' == " " {
      local b `"`b' space"'
      }
      else {
      local b `"`b' `t'"'
      }
      local ++bcnt
      }
    - if `aschars' {
    = if 1 {
    - if `"`t'"'=="%" {
    = if `" "'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if ustrpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
    - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
    = qui replace __000000 = usubinstr(__000000, `" "', "", .)
    - }
    - else {
      if `"`t'"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if strpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
      qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
      }
    - local jj = `jj' + 1
    = local jj = 12 + 1
    - }
    - while `"`char`jj''"' != "" {
    = while `"o"' != "" {
    - capture drop `found'
    = capture drop __000003
    - capture drop `topct'
    = capture drop __000004
    - local t `"`char`jj''"'
    = local t `"o"'
    - if `aschars' {
    = if 1 {
    - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
    = qui gen byte __000003 = ustrpos(__000000, `"o"') != 0
    - }
    - else {
      qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
      }
    - qui summarize `found', meanonly
    = qui summarize __000003, meanonly
    - if r(sum) > 0 {
      if `"`t'"'=="`illegal'" {
      local b `"`b' illegal Unicode"'
      }
      else if `"`t'"' == " " {
      local b `"`b' space"'
      }
      else {
      local b `"`b' `t'"'
      }
      local ++bcnt
      }
    - if `aschars' {
    = if 1 {
    - if `"`t'"'=="%" {
    = if `"o"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if ustrpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
    - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
    = qui replace __000000 = usubinstr(__000000, `"o"', "", .)
    - }
    - else {
      if `"`t'"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if strpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
      qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
      }
    - local jj = `jj' + 1
    = local jj = 13 + 1
    - }
    - while `"`char`jj''"' != "" {
    = while `"v"' != "" {
    - capture drop `found'
    = capture drop __000003
    - capture drop `topct'
    = capture drop __000004
    - local t `"`char`jj''"'
    = local t `"v"'
    - if `aschars' {
    = if 1 {
    - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
    = qui gen byte __000003 = ustrpos(__000000, `"v"') != 0
    - }
    - else {
      qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
      }
    - qui summarize `found', meanonly
    = qui summarize __000003, meanonly
    - if r(sum) > 0 {
      if `"`t'"'=="`illegal'" {
      local b `"`b' illegal Unicode"'
      }
      else if `"`t'"' == " " {
      local b `"`b' space"'
      }
      else {
      local b `"`b' `t'"'
      }
      local ++bcnt
      }
    - if `aschars' {
    = if 1 {
    - if `"`t'"'=="%" {
    = if `"v"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if ustrpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
    - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
    = qui replace __000000 = usubinstr(__000000, `"v"', "", .)
    - }
    - else {
      if `"`t'"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if strpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
      qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
      }
    - local jj = `jj' + 1
    = local jj = 14 + 1
    - }
    - while `"`char`jj''"' != "" {
    = while `"e"' != "" {
    - capture drop `found'
    = capture drop __000003
    - capture drop `topct'
    = capture drop __000004
    - local t `"`char`jj''"'
    = local t `"e"'
    - if `aschars' {
    = if 1 {
    - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
    = qui gen byte __000003 = ustrpos(__000000, `"e"') != 0
    - }
    - else {
      qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
      }
    - qui summarize `found', meanonly
    = qui summarize __000003, meanonly
    - if r(sum) > 0 {
      if `"`t'"'=="`illegal'" {
      local b `"`b' illegal Unicode"'
      }
      else if `"`t'"' == " " {
      local b `"`b' space"'
      }
      else {
      local b `"`b' `t'"'
      }
      local ++bcnt
      }
    - if `aschars' {
    = if 1 {
    - if `"`t'"'=="%" {
    = if `"e"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if ustrpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
    - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
    = qui replace __000000 = usubinstr(__000000, `"e"', "", .)
    - }
    - else {
      if `"`t'"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if strpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
      qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
      }
    - local jj = `jj' + 1
    = local jj = 15 + 1
    - }
    - while `"`char`jj''"' != "" {
    = while `"r"' != "" {
    - capture drop `found'
    = capture drop __000003
    - capture drop `topct'
    = capture drop __000004
    - local t `"`char`jj''"'
    = local t `"r"'
    - if `aschars' {
    = if 1 {
    - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
    = qui gen byte __000003 = ustrpos(__000000, `"r"') != 0
    - }
    - else {
      qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
      }
    - qui summarize `found', meanonly
    = qui summarize __000003, meanonly
    - if r(sum) > 0 {
      if `"`t'"'=="`illegal'" {
      local b `"`b' illegal Unicode"'
      }
      else if `"`t'"' == " " {
      local b `"`b' space"'
      }
      else {
      local b `"`b' `t'"'
      }
      local ++bcnt
      }
    - if `aschars' {
    = if 1 {
    - if `"`t'"'=="%" {
    = if `"r"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if ustrpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
    - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
    = qui replace __000000 = usubinstr(__000000, `"r"', "", .)
    - }
    - else {
      if `"`t'"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if strpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
      qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
      }
    - local jj = `jj' + 1
    = local jj = 16 + 1
    - }
    - while `"`char`jj''"' != "" {
    = while `","' != "" {
    - capture drop `found'
    = capture drop __000003
    - capture drop `topct'
    = capture drop __000004
    - local t `"`char`jj''"'
    = local t `","'
    - if `aschars' {
    = if 1 {
    - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
    = qui gen byte __000003 = ustrpos(__000000, `","') != 0
    - }
    - else {
      qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
      }
    - qui summarize `found', meanonly
    = qui summarize __000003, meanonly
    - if r(sum) > 0 {
      if `"`t'"'=="`illegal'" {
      local b `"`b' illegal Unicode"'
      }
      else if `"`t'"' == " " {
      local b `"`b' space"'
      }
      else {
      local b `"`b' `t'"'
      }
      local ++bcnt
      }
    - if `aschars' {
    = if 1 {
    - if `"`t'"'=="%" {
    = if `","'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if ustrpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
    - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
    = qui replace __000000 = usubinstr(__000000, `","', "", .)
    - }
    - else {
      if `"`t'"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if strpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
      qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
      }
    - local jj = `jj' + 1
    = local jj = 17 + 1
    - }
    - while `"`char`jj''"' != "" {
    = while `"$"' != "" {
    - capture drop `found'
    = capture drop __000003
    - capture drop `topct'
    = capture drop __000004
    - local t `"`char`jj''"'
    = local t `"$"'
    - if `aschars' {
    = if 1 {
    - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
    = qui gen byte __000003 = ustrpos(__000000, `"$"') != 0
    - }
    - else {
      qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
      }
    - qui summarize `found', meanonly
    = qui summarize __000003, meanonly
    - if r(sum) > 0 {
      if `"`t'"'=="`illegal'" {
      local b `"`b' illegal Unicode"'
      }
      else if `"`t'"' == " " {
      local b `"`b' space"'
      }
      else {
      local b `"`b' `t'"'
      }
      local ++bcnt
      }
    - if `aschars' {
    = if 1 {
    - if `"`t'"'=="%" {
    = if `"$"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if ustrpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
    - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
    = qui replace __000000 = usubinstr(__000000, `"$"', "", .)
    - }
    - else {
      if `"`t'"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if strpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
      qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
      }
    - local jj = `jj' + 1
    = local jj = 18 + 1
    - }
    - while `"`char`jj''"' != "" {
    = while `" "' != "" {
    - capture drop `found'
    = capture drop __000003
    - capture drop `topct'
    = capture drop __000004
    - local t `"`char`jj''"'
    = local t `" "'
    - if `aschars' {
    = if 1 {
    - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
    = qui gen byte __000003 = ustrpos(__000000, `" "') != 0
    - }
    - else {
      qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
      }
    - qui summarize `found', meanonly
    = qui summarize __000003, meanonly
    - if r(sum) > 0 {
      if `"`t'"'=="`illegal'" {
      local b `"`b' illegal Unicode"'
      }
      else if `"`t'"' == " " {
      local b `"`b' space"'
      }
      else {
      local b `"`b' `t'"'
      }
      local ++bcnt
      }
    - if `aschars' {
    = if 1 {
    - if `"`t'"'=="%" {
    = if `" "'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if ustrpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
    - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
    = qui replace __000000 = usubinstr(__000000, `" "', "", .)
    - }
    - else {
      if `"`t'"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if strpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
      qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
      }
    - local jj = `jj' + 1
    = local jj = 19 + 1
    - }
    - while `"`char`jj''"' != "" {
    = while `"o"' != "" {
    - capture drop `found'
    = capture drop __000003
    - capture drop `topct'
    = capture drop __000004
    - local t `"`char`jj''"'
    = local t `"o"'
    - if `aschars' {
    = if 1 {
    - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
    = qui gen byte __000003 = ustrpos(__000000, `"o"') != 0
    - }
    - else {
      qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
      }
    - qui summarize `found', meanonly
    = qui summarize __000003, meanonly
    - if r(sum) > 0 {
      if `"`t'"'=="`illegal'" {
      local b `"`b' illegal Unicode"'
      }
      else if `"`t'"' == " " {
      local b `"`b' space"'
      }
      else {
      local b `"`b' `t'"'
      }
      local ++bcnt
      }
    - if `aschars' {
    = if 1 {
    - if `"`t'"'=="%" {
    = if `"o"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if ustrpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
    - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
    = qui replace __000000 = usubinstr(__000000, `"o"', "", .)
    - }
    - else {
      if `"`t'"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if strpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
      qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
      }
    - local jj = `jj' + 1
    = local jj = 20 + 1
    - }
    - while `"`char`jj''"' != "" {
    = while `"r"' != "" {
    - capture drop `found'
    = capture drop __000003
    - capture drop `topct'
    = capture drop __000004
    - local t `"`char`jj''"'
    = local t `"r"'
    - if `aschars' {
    = if 1 {
    - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
    = qui gen byte __000003 = ustrpos(__000000, `"r"') != 0
    - }
    - else {
      qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
      }
    - qui summarize `found', meanonly
    = qui summarize __000003, meanonly
    - if r(sum) > 0 {
      if `"`t'"'=="`illegal'" {
      local b `"`b' illegal Unicode"'
      }
      else if `"`t'"' == " " {
      local b `"`b' space"'
      }
      else {
      local b `"`b' `t'"'
      }
      local ++bcnt
      }
    - if `aschars' {
    = if 1 {
    - if `"`t'"'=="%" {
    = if `"r"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if ustrpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
    - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
    = qui replace __000000 = usubinstr(__000000, `"r"', "", .)
    - }
    - else {
      if `"`t'"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if strpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
      qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
      }
    - local jj = `jj' + 1
    = local jj = 21 + 1
    - }
    - while `"`char`jj''"' != "" {
    = while `" "' != "" {
    - capture drop `found'
    = capture drop __000003
    - capture drop `topct'
    = capture drop __000004
    - local t `"`char`jj''"'
    = local t `" "'
    - if `aschars' {
    = if 1 {
    - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
    = qui gen byte __000003 = ustrpos(__000000, `" "') != 0
    - }
    - else {
      qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
      }
    - qui summarize `found', meanonly
    = qui summarize __000003, meanonly
    - if r(sum) > 0 {
      if `"`t'"'=="`illegal'" {
      local b `"`b' illegal Unicode"'
      }
      else if `"`t'"' == " " {
      local b `"`b' space"'
      }
      else {
      local b `"`b' `t'"'
      }
      local ++bcnt
      }
    - if `aschars' {
    = if 1 {
    - if `"`t'"'=="%" {
    = if `" "'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if ustrpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
    - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
    = qui replace __000000 = usubinstr(__000000, `" "', "", .)
    - }
    - else {
      if `"`t'"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if strpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
      qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
      }
    - local jj = `jj' + 1
    = local jj = 22 + 1
    - }
    - while `"`char`jj''"' != "" {
    = while `"m"' != "" {
    - capture drop `found'
    = capture drop __000003
    - capture drop `topct'
    = capture drop __000004
    - local t `"`char`jj''"'
    = local t `"m"'
    - if `aschars' {
    = if 1 {
    - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
    = qui gen byte __000003 = ustrpos(__000000, `"m"') != 0
    - }
    - else {
      qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
      }
    - qui summarize `found', meanonly
    = qui summarize __000003, meanonly
    - if r(sum) > 0 {
    - if `"`t'"'=="`illegal'" {
    = if `"m"'=="" {
      local b `"`b' illegal Unicode"'
      }
    - else if `"`t'"' == " " {
    = else if `"m"' == " " {
      local b `"`b' space"'
      }
    - else {
    - local b `"`b' `t'"'
    = local b `" space o e r m"'
    - }
    - local ++bcnt
    - }
    - if `aschars' {
    = if 1 {
    - if `"`t'"'=="%" {
    = if `"m"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if ustrpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
    - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
    = qui replace __000000 = usubinstr(__000000, `"m"', "", .)
    - }
    - else {
      if `"`t'"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if strpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
      qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
      }
    - local jj = `jj' + 1
    = local jj = 23 + 1
    - }
    - while `"`char`jj''"' != "" {
    = while `"o"' != "" {
    - capture drop `found'
    = capture drop __000003
    - capture drop `topct'
    = capture drop __000004
    - local t `"`char`jj''"'
    = local t `"o"'
    - if `aschars' {
    = if 1 {
    - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
    = qui gen byte __000003 = ustrpos(__000000, `"o"') != 0
    - }
    - else {
      qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
      }
    - qui summarize `found', meanonly
    = qui summarize __000003, meanonly
    - if r(sum) > 0 {
      if `"`t'"'=="`illegal'" {
      local b `"`b' illegal Unicode"'
      }
      else if `"`t'"' == " " {
      local b `"`b' space"'
      }
      else {
      local b `"`b' `t'"'
      }
      local ++bcnt
      }
    - if `aschars' {
    = if 1 {
    - if `"`t'"'=="%" {
    = if `"o"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if ustrpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
    - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
    = qui replace __000000 = usubinstr(__000000, `"o"', "", .)
    - }
    - else {
      if `"`t'"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if strpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
      qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
      }
    - local jj = `jj' + 1
    = local jj = 24 + 1
    - }
    - while `"`char`jj''"' != "" {
    = while `"r"' != "" {
    - capture drop `found'
    = capture drop __000003
    - capture drop `topct'
    = capture drop __000004
    - local t `"`char`jj''"'
    = local t `"r"'
    - if `aschars' {
    = if 1 {
    - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
    = qui gen byte __000003 = ustrpos(__000000, `"r"') != 0
    - }
    - else {
      qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
      }
    - qui summarize `found', meanonly
    = qui summarize __000003, meanonly
    - if r(sum) > 0 {
      if `"`t'"'=="`illegal'" {
      local b `"`b' illegal Unicode"'
      }
      else if `"`t'"' == " " {
      local b `"`b' space"'
      }
      else {
      local b `"`b' `t'"'
      }
      local ++bcnt
      }
    - if `aschars' {
    = if 1 {
    - if `"`t'"'=="%" {
    = if `"r"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if ustrpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
    - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
    = qui replace __000000 = usubinstr(__000000, `"r"', "", .)
    - }
    - else {
      if `"`t'"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if strpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
      qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
      }
    - local jj = `jj' + 1
    = local jj = 25 + 1
    - }
    - while `"`char`jj''"' != "" {
    = while `"e"' != "" {
    - capture drop `found'
    = capture drop __000003
    - capture drop `topct'
    = capture drop __000004
    - local t `"`char`jj''"'
    = local t `"e"'
    - if `aschars' {
    = if 1 {
    - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
    = qui gen byte __000003 = ustrpos(__000000, `"e"') != 0
    - }
    - else {
      qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
      }
    - qui summarize `found', meanonly
    = qui summarize __000003, meanonly
    - if r(sum) > 0 {
      if `"`t'"'=="`illegal'" {
      local b `"`b' illegal Unicode"'
      }
      else if `"`t'"' == " " {
      local b `"`b' space"'
      }
      else {
      local b `"`b' `t'"'
      }
      local ++bcnt
      }
    - if `aschars' {
    = if 1 {
    - if `"`t'"'=="%" {
    = if `"e"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if ustrpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
    - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
    = qui replace __000000 = usubinstr(__000000, `"e"', "", .)
    - }
    - else {
      if `"`t'"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if strpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
      qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
      }
    - local jj = `jj' + 1
    = local jj = 26 + 1
    - }
    - while `"`char`jj''"' != "" {
    = while `" "' != "" {
    - capture drop `found'
    = capture drop __000003
    - capture drop `topct'
    = capture drop __000004
    - local t `"`char`jj''"'
    = local t `" "'
    - if `aschars' {
    = if 1 {
    - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
    = qui gen byte __000003 = ustrpos(__000000, `" "') != 0
    - }
    - else {
      qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
      }
    - qui summarize `found', meanonly
    = qui summarize __000003, meanonly
    - if r(sum) > 0 {
      if `"`t'"'=="`illegal'" {
      local b `"`b' illegal Unicode"'
      }
      else if `"`t'"' == " " {
      local b `"`b' space"'
      }
      else {
      local b `"`b' `t'"'
      }
      local ++bcnt
      }
    - if `aschars' {
    = if 1 {
    - if `"`t'"'=="%" {
    = if `" "'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if ustrpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
    - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
    = qui replace __000000 = usubinstr(__000000, `" "', "", .)
    - }
    - else {
      if `"`t'"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if strpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
      qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
      }
    - local jj = `jj' + 1
    = local jj = 27 + 1
    - }
    - while `"`char`jj''"' != "" {
    = while `"O"' != "" {
    - capture drop `found'
    = capture drop __000003
    - capture drop `topct'
    = capture drop __000004
    - local t `"`char`jj''"'
    = local t `"O"'
    - if `aschars' {
    = if 1 {
    - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
    = qui gen byte __000003 = ustrpos(__000000, `"O"') != 0
    - }
    - else {
      qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
      }
    - qui summarize `found', meanonly
    = qui summarize __000003, meanonly
    - if r(sum) > 0 {
      if `"`t'"'=="`illegal'" {
      local b `"`b' illegal Unicode"'
      }
      else if `"`t'"' == " " {
      local b `"`b' space"'
      }
      else {
      local b `"`b' `t'"'
      }
      local ++bcnt
      }
    - if `aschars' {
    = if 1 {
    - if `"`t'"'=="%" {
    = if `"O"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if ustrpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
    - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
    = qui replace __000000 = usubinstr(__000000, `"O"', "", .)
    - }
    - else {
      if `"`t'"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if strpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
      qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
      }
    - local jj = `jj' + 1
    = local jj = 28 + 1
    - }
    - while `"`char`jj''"' != "" {
    = while `"R"' != "" {
    - capture drop `found'
    = capture drop __000003
    - capture drop `topct'
    = capture drop __000004
    - local t `"`char`jj''"'
    = local t `"R"'
    - if `aschars' {
    = if 1 {
    - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
    = qui gen byte __000003 = ustrpos(__000000, `"R"') != 0
    - }
    - else {
      qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
      }
    - qui summarize `found', meanonly
    = qui summarize __000003, meanonly
    - if r(sum) > 0 {
      if `"`t'"'=="`illegal'" {
      local b `"`b' illegal Unicode"'
      }
      else if `"`t'"' == " " {
      local b `"`b' space"'
      }
      else {
      local b `"`b' `t'"'
      }
      local ++bcnt
      }
    - if `aschars' {
    = if 1 {
    - if `"`t'"'=="%" {
    = if `"R"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if ustrpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
    - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
    = qui replace __000000 = usubinstr(__000000, `"R"', "", .)
    - }
    - else {
      if `"`t'"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if strpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
      qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
      }
    - local jj = `jj' + 1
    = local jj = 29 + 1
    - }
    - while `"`char`jj''"' != "" {
    = while `" "' != "" {
    - capture drop `found'
    = capture drop __000003
    - capture drop `topct'
    = capture drop __000004
    - local t `"`char`jj''"'
    = local t `" "'
    - if `aschars' {
    = if 1 {
    - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
    = qui gen byte __000003 = ustrpos(__000000, `" "') != 0
    - }
    - else {
      qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
      }
    - qui summarize `found', meanonly
    = qui summarize __000003, meanonly
    - if r(sum) > 0 {
      if `"`t'"'=="`illegal'" {
      local b `"`b' illegal Unicode"'
      }
      else if `"`t'"' == " " {
      local b `"`b' space"'
      }
      else {
      local b `"`b' `t'"'
      }
      local ++bcnt
      }
    - if `aschars' {
    = if 1 {
    - if `"`t'"'=="%" {
    = if `" "'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if ustrpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
    - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
    = qui replace __000000 = usubinstr(__000000, `" "', "", .)
    - }
    - else {
      if `"`t'"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if strpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
      qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
      }
    - local jj = `jj' + 1
    = local jj = 30 + 1
    - }
    - while `"`char`jj''"' != "" {
    = while `"M"' != "" {
    - capture drop `found'
    = capture drop __000003
    - capture drop `topct'
    = capture drop __000004
    - local t `"`char`jj''"'
    = local t `"M"'
    - if `aschars' {
    = if 1 {
    - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
    = qui gen byte __000003 = ustrpos(__000000, `"M"') != 0
    - }
    - else {
      qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
      }
    - qui summarize `found', meanonly
    = qui summarize __000003, meanonly
    - if r(sum) > 0 {
      if `"`t'"'=="`illegal'" {
      local b `"`b' illegal Unicode"'
      }
      else if `"`t'"' == " " {
      local b `"`b' space"'
      }
      else {
      local b `"`b' `t'"'
      }
      local ++bcnt
      }
    - if `aschars' {
    = if 1 {
    - if `"`t'"'=="%" {
    = if `"M"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if ustrpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
    - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
    = qui replace __000000 = usubinstr(__000000, `"M"', "", .)
    - }
    - else {
      if `"`t'"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if strpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
      qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
      }
    - local jj = `jj' + 1
    = local jj = 31 + 1
    - }
    - while `"`char`jj''"' != "" {
    = while `"O"' != "" {
    - capture drop `found'
    = capture drop __000003
    - capture drop `topct'
    = capture drop __000004
    - local t `"`char`jj''"'
    = local t `"O"'
    - if `aschars' {
    = if 1 {
    - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
    = qui gen byte __000003 = ustrpos(__000000, `"O"') != 0
    - }
    - else {
      qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
      }
    - qui summarize `found', meanonly
    = qui summarize __000003, meanonly
    - if r(sum) > 0 {
      if `"`t'"'=="`illegal'" {
      local b `"`b' illegal Unicode"'
      }
      else if `"`t'"' == " " {
      local b `"`b' space"'
      }
      else {
      local b `"`b' `t'"'
      }
      local ++bcnt
      }
    - if `aschars' {
    = if 1 {
    - if `"`t'"'=="%" {
    = if `"O"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if ustrpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
    - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
    = qui replace __000000 = usubinstr(__000000, `"O"', "", .)
    - }
    - else {
      if `"`t'"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if strpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
      qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
      }
    - local jj = `jj' + 1
    = local jj = 32 + 1
    - }
    - while `"`char`jj''"' != "" {
    = while `"R"' != "" {
    - capture drop `found'
    = capture drop __000003
    - capture drop `topct'
    = capture drop __000004
    - local t `"`char`jj''"'
    = local t `"R"'
    - if `aschars' {
    = if 1 {
    - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
    = qui gen byte __000003 = ustrpos(__000000, `"R"') != 0
    - }
    - else {
      qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
      }
    - qui summarize `found', meanonly
    = qui summarize __000003, meanonly
    - if r(sum) > 0 {
      if `"`t'"'=="`illegal'" {
      local b `"`b' illegal Unicode"'
      }
      else if `"`t'"' == " " {
      local b `"`b' space"'
      }
      else {
      local b `"`b' `t'"'
      }
      local ++bcnt
      }
    - if `aschars' {
    = if 1 {
    - if `"`t'"'=="%" {
    = if `"R"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if ustrpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
    - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
    = qui replace __000000 = usubinstr(__000000, `"R"', "", .)
    - }
    - else {
      if `"`t'"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if strpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
      qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
      }
    - local jj = `jj' + 1
    = local jj = 33 + 1
    - }
    - while `"`char`jj''"' != "" {
    = while `"E"' != "" {
    - capture drop `found'
    = capture drop __000003
    - capture drop `topct'
    = capture drop __000004
    - local t `"`char`jj''"'
    = local t `"E"'
    - if `aschars' {
    = if 1 {
    - qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
    = qui gen byte __000003 = ustrpos(__000000, `"E"') != 0
    - }
    - else {
      qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
      }
    - qui summarize `found', meanonly
    = qui summarize __000003, meanonly
    - if r(sum) > 0 {
      if `"`t'"'=="`illegal'" {
      local b `"`b' illegal Unicode"'
      }
      else if `"`t'"' == " " {
      local b `"`b' space"'
      }
      else {
      local b `"`b' `t'"'
      }
      local ++bcnt
      }
    - if `aschars' {
    = if 1 {
    - if `"`t'"'=="%" {
    = if `"E"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if ustrpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
    - qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
    = qui replace __000000 = usubinstr(__000000, `"E"', "", .)
    - }
    - else {
      if `"`t'"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if strpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
      qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
      }
    - local jj = `jj' + 1
    = local jj = 34 + 1
    - }
    - while `"`char`jj''"' != "" {
    = while `""' != "" {
      capture drop `found'
      capture drop `topct'
      local t `"`char`jj''"'
      if `aschars' {
      qui gen byte `found' = ustrpos(`OLDVAR', `"`t'"') != 0
      }
      else {
      qui gen byte `found' = strpos(`OLDVAR', `"`t'"') != 0
      }
      qui summarize `found', meanonly
      if r(sum) > 0 {
      if `"`t'"'=="`illegal'" {
      local b `"`b' illegal Unicode"'
      }
      else if `"`t'"' == " " {
      local b `"`b' space"'
      }
      else {
      local b `"`b' `t'"'
      }
      local ++bcnt
      }
      if `aschars' {
      if `"`t'"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if ustrpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
      qui replace `OLDVAR' = usubinstr(`OLDVAR', `"`t'"', "", .)
      }
      else {
      if `"`t'"'=="%" {
      if "`percent'"!="" {
      if `"`makepct'"'=="" {
      qui count if strpos(`OLDVAR', `"`t'"')
      local makepct = r(N)
      }
      }
      }
      qui replace `OLDVAR' = subinstr(`OLDVAR', `"`t'"', "", .)
      }
      local jj = `jj' + 1
      }
    - if _caller() >= 14 {
    - qui replace `OLDVAR' = ustrtrim(`OLDVAR')
    = qui replace __000000 = ustrtrim(__000000)
    - }
    - else {
      qui replace `OLDVAR' = strtrim(`OLDVAR')
      }
    - quietly gen byte `ismissing' = `OLDVAR'=="" | `OLDVAR'=="." | (strlen(`OLD
> VAR')==2 & inrange(`OLDVAR',".a",".z"))
    = quietly gen byte __000002 = __000000=="" | __000000=="." | (strlen(__00000
> 0)==2 & inrange(__000000,".a",".z"))
    - if ("`dpcomma'" != "") {
    = if ("" != "") {
      qui replace `OLDVAR' = subinstr(`OLDVAR',".","X",.) if !`ismissing'
      qui replace `OLDVAR' = subinstr(`OLDVAR', ",", ".", 1) if !ustrregexm(`OLD
> VAR',"(,[a-z])|(^,$)")
      }
    - if _caller() >= 14 {
    - qui replace `OLDVAR' = ustrregexrf(`OLDVAR',"^0+","0")
    = qui replace __000000 = ustrregexrf(__000000,"^0+","0")
    - }
    - else {
      qui replace `OLDVAR' = regexr(`OLDVAR',"^0+","0")
      }
    - qui gen `gtype' `NEWVAR' = real(`OLDVAR')
    = qui gen double __000001 = real(__000000)
    - qui summarize `ismissing', meanonly
    = qui summarize __000002, meanonly
    - local oldmiss = r(sum)
    - qui count if missing(`NEWVAR')
    = qui count if missing(__000001)
    - local newmiss = r(N)
    - local flag = `oldmiss'!=`newmiss'
    = local flag = 0!=0
    - if `flag' & ("`force'" == "") {
    = if 0 & ("" == "") {
      if `"`ignore'"' != "" {
      di as txt "`var': contains " "`aswhat's not specified in " as res "ignore(
> )" as txt "; no " as res "`genrep'"
      }
      else {
      di as txt "`var': contains " "nonnumeric `aswhat's; no " as res "`genrep'"
      }
      }
    - else {
    - order `NEWVAR', after(`var')
    = order __000001, after(inc_decoded)
      ---------------------------------------------------------- begin order ---
      - version 11
      - if (_caller()<11) {
        _order `macval(0)'
        exit
        }
      - syntax varlist[, Before(varname) After(varname) first last SEQuential AL
> PHAbetic]
      - if (`"`before'"' == "" & `"`after'"' == "" & "`first'" == "" & "`last'" 
> == "" & "`alphabetic'" == "" & "`sequential'" == "") {
      = if (`""' == "" & `"inc_decoded"' == "" & "" == "" & "" == "" & "" == "" 
> & "" == "") {
        _order `macval(0)'
        exit
        }
      - if (`"`before'"' != "" & `"`after'"' != "") {
      = if (`""' != "" & `"inc_decoded"' != "") {
        dis as error "before() may not be combined with after()"
        exit 198
        }
      - if (`"`before'"' != "" & `"`first'"' != "") {
      = if (`""' != "" & `""' != "") {
        dis as error "before() may not be combined with first()"
        exit 198
        }
      - if (`"`before'"' != "" & `"`last'"' != "") {
      = if (`""' != "" & `""' != "") {
        dis as error "before() may not be combined with last()"
        exit 198
        }
      - if (`"`after'"' != "" & `"`before'"' != "") {
      = if (`"inc_decoded"' != "" & `""' != "") {
        dis as error "after() may not be combined with before()"
        exit 198
        }
      - if (`"`after'"' != "" & `"`first'"' != "") {
      = if (`"inc_decoded"' != "" & `""' != "") {
        dis as error "after() may not be combined with first()"
        exit 198
        }
      - if (`"`after'"' != "" & `"`last'"' != "") {
      = if (`"inc_decoded"' != "" & `""' != "") {
        dis as error "after() may not be combined with last()"
        exit 198
        }
      - if ("`first'" != "" & "`last'" != "") {
      = if ("" != "" & "" != "") {
        dis as error "first may not be combined with last"
        exit 198
        }
      - if ("`sequential'" != "" & "`alphabetic'" != "") {
      = if ("" != "" & "" != "") {
        dis as error "sequential may not be combined with alphabetic"
        exit 198
        }
      - if ("`first'" != "") {
      = if ("" != "") {
        if "`alphabetic'" != "" {
        local varlist : list sort varlist
        }
        if "`sequential'" != "" {
        aorder `varlist'
        }
        else {
        _order `varlist'
        }
        }
      - if ("`last'" != "") {
      = if ("" != "") {
        unab vlist : _all
        local list : list vlist - varlist
        if "`alphabetic'" != "" {
        local varlist : list sort varlist
        }
        if "`sequential'" != "" {
        preserve
        keep `varlist'
        aorder `varlist'
        unab varlist : _all
        restore
        }
        _order `list' `varlist'
        }
      - if (`"`before'"' != "") {
      = if (`""' != "") {
        local test : list before in varlist
        if `test' {
        dis as err "varname specified in before() may not" " be in varlist"
        exit 198
        }
        if "`alphabetic'" != "" {
        local varlist : list sort varlist
        }
        if "`sequential'" != "" {
        preserve
        keep `varlist'
        aorder `varlist'
        unab varlist : _all
        restore
        }
        unab vlist : _all
        local vlist : list vlist - varlist
        local var_num : list posof "`before'" in vlist
        local var_num = `var_num' - 1
        local fvar : word 1 of `vlist'
        capture local lvar : word `var_num' of `vlist'
        if _rc {
        _order `varlist'
        exit
        }
        unab nlist : `fvar'-`lvar'
        local nlist : list nlist - varlist
        _order `nlist' `varlist'
        }
      - if (`"`after'"' != "") {
      = if (`"inc_decoded"' != "") {
      - local test : list after in varlist
      - if `test' {
      = if 0 {
        dis as err "varname specified in after() may not" " be in varlist"
        exit 198
        }
      - if "`alphabetic'" != "" {
      = if "" != "" {
        local varlist : list sort varlist
        }
      - if "`sequential'" != "" {
      = if "" != "" {
        preserve
        keep `varlist'
        aorder `varlist'
        unab varlist : _all
        restore
        }
      - unab vlist : _all
        --------------------------------------------------------- begin unab ---
        - version 6
        - gettoken user 0: 0, parse(" :")
        - gettoken colon 0: 0, parse(" :")
        - if `"`colon'"' != ":" { error 198 }
        = if `":"' != ":" { error 198 }
        - syntax [varlist(default=empty)] [, MIN(integer 1) MAX(integer 120000) 
> NAME(string)]
        - c_local `user' `varlist'
        = c_local vlist year hhwt repwt cluster adjust statefip strata hhincome_
> acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 repwt10 rep
> wt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 repwt20 r
> epwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt29 repwt30
>  repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repwt39 repwt
> 40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 repwt49 rep
> wt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 repwt59 r
> epwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt68 repwt69
>  repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repwt78 repwt
> 79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp5 repwtp6
>  repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14 repwtp15
>  repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwtp23 repwt
> p24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 repwtp32 re
> pwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40 repwtp41
>  repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwtp49 repwt
> p50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 repwtp58 re
> pwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66 repwtp67
>  repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwtp75 repwt
> p76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __000000 __00
> 0003 __000002 __000001
        - local n : word count `varlist'
        = local n : word count year hhwt repwt cluster adjust statefip strata hh
> income_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 repw
> t10 repwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 re
> pwt20 repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt29 
> repwt30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repwt3
> 9 repwt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 repw
> t49 repwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 re
> pwt59 repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt68 
> repwt69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repwt7
> 8 repwt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp5 
> repwtp6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14 r
> epwtp15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwtp2
> 3 repwtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 repw
> tp32 repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40 r
> epwtp41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwtp4
> 9 repwtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 repw
> tp58 repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66 r
> epwtp67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwtp7
> 5 repwtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __0000
> 00 __000003 __000002 __000001
        - if `n'>=`min' & `n'<=`max' { exit }
        = if 178>=1 & 178<=120000 { exit }
        ----------------------------------------------------------- end unab ---
      - local vlist : list vlist - varlist
      - local var_num : list posof "`after'" in vlist
      = local var_num : list posof "inc_decoded" in vlist
      - local fvar : word 1 of `vlist'
      = local fvar : word 1 of year hhwt repwt cluster adjust statefip strata hh
> income_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 repw
> t10 repwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 re
> pwt20 repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt29 
> repwt30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repwt3
> 9 repwt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 repw
> t49 repwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 re
> pwt59 repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt68 
> repwt69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repwt7
> 8 repwt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp5 
> repwtp6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14 r
> epwtp15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwtp2
> 3 repwtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 repw
> tp32 repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40 r
> epwtp41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwtp4
> 9 repwtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 repw
> tp58 repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66 r
> epwtp67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwtp7
> 5 repwtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __0000
> 00 __000003 __000002
      - local lvar : word `var_num' of `vlist'
      = local lvar : word 174 of year hhwt repwt cluster adjust statefip strata 
> hhincome_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 re
> pwt10 repwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 
> repwt20 repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt2
> 9 repwt30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repw
> t39 repwt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 re
> pwt49 repwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 
> repwt59 repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt6
> 8 repwt69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repw
> t78 repwt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp
> 5 repwtp6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14
>  repwtp15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwt
> p23 repwtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 re
> pwtp32 repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40
>  repwtp41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwt
> p49 repwtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 re
> pwtp58 repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66
>  repwtp67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwt
> p75 repwtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __00
> 0000 __000003 __000002
      - unab nlist : `fvar'-`lvar'
      = unab nlist : year-inc_decoded
        --------------------------------------------------------- begin unab ---
        - version 6
        - gettoken user 0: 0, parse(" :")
        - gettoken colon 0: 0, parse(" :")
        - if `"`colon'"' != ":" { error 198 }
        = if `":"' != ":" { error 198 }
        - syntax [varlist(default=empty)] [, MIN(integer 1) MAX(integer 120000) 
> NAME(string)]
        - c_local `user' `varlist'
        = c_local nlist year hhwt repwt cluster adjust statefip strata hhincome_
> acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 repwt10 rep
> wt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 repwt20 r
> epwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt29 repwt30
>  repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repwt39 repwt
> 40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 repwt49 rep
> wt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 repwt59 r
> epwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt68 repwt69
>  repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repwt78 repwt
> 79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp5 repwtp6
>  repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14 repwtp15
>  repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwtp23 repwt
> p24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 repwtp32 re
> pwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40 repwtp41
>  repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwtp49 repwt
> p50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 repwtp58 re
> pwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66 repwtp67
>  repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwtp75 repwt
> p76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded
        - local n : word count `varlist'
        = local n : word count year hhwt repwt cluster adjust statefip strata hh
> income_acs repwt1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 repw
> t10 repwt11 repwt12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 re
> pwt20 repwt21 repwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt29 
> repwt30 repwt31 repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repwt3
> 9 repwt40 repwt41 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 repw
> t49 repwt50 repwt51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 re
> pwt59 repwt60 repwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt68 
> repwt69 repwt70 repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repwt7
> 8 repwt79 repwt80 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp5 
> repwtp6 repwtp7 repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14 r
> epwtp15 repwtp16 repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwtp2
> 3 repwtp24 repwtp25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 repw
> tp32 repwtp33 repwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40 r
> epwtp41 repwtp42 repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwtp4
> 9 repwtp50 repwtp51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 repw
> tp58 repwtp59 repwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66 r
> epwtp67 repwtp68 repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwtp7
> 5 repwtp76 repwtp77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded
        - if `n'>=`min' & `n'<=`max' { exit }
        = if 174>=1 & 174<=120000 { exit }
        ----------------------------------------------------------- end unab ---
      - local nlist : list nlist - varlist
      - _order `nlist' `varlist'
      = _order year hhwt repwt cluster adjust statefip strata hhincome_acs repwt
> 1 repwt2 repwt3 repwt4 repwt5 repwt6 repwt7 repwt8 repwt9 repwt10 repwt11 repw
> t12 repwt13 repwt14 repwt15 repwt16 repwt17 repwt18 repwt19 repwt20 repwt21 re
> pwt22 repwt23 repwt24 repwt25 repwt26 repwt27 repwt28 repwt29 repwt30 repwt31 
> repwt32 repwt33 repwt34 repwt35 repwt36 repwt37 repwt38 repwt39 repwt40 repwt4
> 1 repwt42 repwt43 repwt44 repwt45 repwt46 repwt47 repwt48 repwt49 repwt50 repw
> t51 repwt52 repwt53 repwt54 repwt55 repwt56 repwt57 repwt58 repwt59 repwt60 re
> pwt61 repwt62 repwt63 repwt64 repwt65 repwt66 repwt67 repwt68 repwt69 repwt70 
> repwt71 repwt72 repwt73 repwt74 repwt75 repwt76 repwt77 repwt78 repwt79 repwt8
> 0 pernum perwt repwtp repwtp1 repwtp2 repwtp3 repwtp4 repwtp5 repwtp6 repwtp7 
> repwtp8 repwtp9 repwtp10 repwtp11 repwtp12 repwtp13 repwtp14 repwtp15 repwtp16
>  repwtp17 repwtp18 repwtp19 repwtp20 repwtp21 repwtp22 repwtp23 repwtp24 repwt
> p25 repwtp26 repwtp27 repwtp28 repwtp29 repwtp30 repwtp31 repwtp32 repwtp33 re
> pwtp34 repwtp35 repwtp36 repwtp37 repwtp38 repwtp39 repwtp40 repwtp41 repwtp42
>  repwtp43 repwtp44 repwtp45 repwtp46 repwtp47 repwtp48 repwtp49 repwtp50 repwt
> p51 repwtp52 repwtp53 repwtp54 repwtp55 repwtp56 repwtp57 repwtp58 repwtp59 re
> pwtp60 repwtp61 repwtp62 repwtp63 repwtp64 repwtp65 repwtp66 repwtp67 repwtp68
>  repwtp69 repwtp70 repwtp71 repwtp72 repwtp73 repwtp74 repwtp75 repwtp76 repwt
> p77 repwtp78 repwtp79 repwtp80 acs_hhinc id inc_decoded __000001
      - }
      - if ("`alphabetic'" != "" & `"`before'"' == "" & `"`after'"' == "" & "`fi
> rst'" == "" & "`last'" == "") {
      = if ("" != "" & `""' == "" & `"inc_decoded"' == "" & "" == "" & "" == "")
>  {
        local vlist : list sort varlist
        _order `vlist'
        }
      - if ("`sequential'" != "" & `"`before'"' == "" & `"`after'"' == "" & "`fi
> rst'" == "" & "`last'" == "") {
      = if ("" != "" & `""' == "" & `"inc_decoded"' == "" & "" == "" & "" == "")
>  {
        aorder `varlist'
        }
      ------------------------------------------------------------ end order ---
    - if `aschars' {
    = if 1 {
    - local dispb `"`b'"'
    = local dispb `" space o e r m"'
    - }
    - else {
      local dispb = printablebytes(`"`b'"')
      }
    - local c = plural(`bcnt',strproper("`aswhat'")) + " removed " + plural(`bcn
> t',"was","were") + `":`dispb'"'
    = local c = plural(5,strproper("character")) + " removed " + plural(5,"was",
> "were") + `": space o e r m"'
    - if "`makepct'" != "" {
    = if "" != "" {
      if `makepct' {
      qui replace `NEWVAR' = `NEWVAR'/100
      }
      }
    - qui compress `NEWVAR'
    = qui compress __000001
    - local type : type `NEWVAR'
    = local type : type __000001
    - if `flag' {
    = if 0 {
      di as txt "`var': contains nonnumeric `aswhat's" _continue
      if `"`ignore'"'!="" {
      display " not specified in " as result "ignore()" _continue
      }
      if `"`b'"'=="" {
      display "; `finalprint'" as res "`genrep'd " as txt "as " as res "`type'" 
> _continue
      }
      display
      }
    - if `"`b'"' != "" {
    = if `" space o e r m"' != "" {
    - di as txt "`var': " plural(`bcnt',"`aswhat'") as res `"`dispb'"' as txt " 
> removed; `finalprint'" as res "`genrep'd " as txt "as " as res "`type'"
    = di as txt "inc_decoded: " plural(5,"character") as res `" space o e r m"' 
> as txt " removed; acs_hhinc_lb " as res "generated " as txt "as " as res "long
> "
inc_decoded: characters space o e r m removed; acs_hhinc_lb generated as long
    - }
    - else if `"`b'"' == "" & !`flag' {
    = else if `" space o e r m"' == "" & !0 {
      di as txt "`var': all characters numeric; " "`finalprint'" as res "`genrep
> 'd " as txt "as " as res "`type'"
      }
    - if `newmiss' != 0 {
    = if 0 != 0 {
      di as txt "(`newmiss' missing " plural(`newmiss',"value") " generated)"
      }
    - label variable `NEWVAR' `"`: variable label `var''"'
    = label variable __000001 `"Household Income (ACS) arbitrary categories base
> d on hhincome_acs"'
      ---------------------------------------------------------- begin label ---
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {
      = if (strpos("variable", "val") > 0 ) {
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {
        local fix ", nofix"
        }
        gettoken var rest : anything
        while `"`rest'"' != "" {
        gettoken lab rest : rest
        local label "`lab'"
        }
        local vlist : list anything - lab
        if "`lab'" == "." {
        local lab ""
        }
        foreach var of varlist `vlist' {
        `vv' _label `val' `var' `lab' `fix'
        }
        }
      - else {
      - `vv' _label `macval(0)'
      = version 14, missing: _label variable __000001 `"Household Income (ACS) a
> rbitrary categories based on hhincome_acs"'
      - }
      ------------------------------------------------------------ end label ---
    - char `NEWVAR'[destring] `c'
    = char __000001[destring] Characters removed were: space o e r m
    - char `NEWVAR'[destring_cmd] `"destring `cmdargs'"'
    = char __000001[destring_cmd] `"destring inc_decoded, ignore("and over or ov
> er,$ or more OR MORE") generate(acs_hhinc_lb)"'
    - char `var'[destring]
    = char inc_decoded[destring]
    - char `var'[destring_cmd]
    = char inc_decoded[destring_cmd]
    - if "`genrep'"=="generate" {
    = if "generate"=="generate" {
    - Charcopy `var' `NEWVAR'
    = Charcopy inc_decoded __000001
      ---------------------------------------------- begin destring.Charcopy ---
      - syntax varlist(min=2 max=2)
      - tokenize `varlist'
      = tokenize inc_decoded __000001
      - args from to
      - local chfrom : char `from'[]
      = local chfrom : char inc_decoded[]
      - if "`chfrom'" == "" {
      = if "" == "" {
      - exit
      ------------------------------------------------ end destring.Charcopy ---
    - rename `NEWVAR' `: word `varno' of `generate''
    = rename __000001 acs_hhinc_lb
      --------------------------------------------------------- begin rename ---
      - version 12
      - mata: rename_cmd("`3'")
      = mata: rename_cmd("")
      ----------------------------------------------------------- end rename ---
    - }
    - else {
      char rename `var' `NEWVAR'
      drop `var'
      rename `NEWVAR' `var'
      }
    - }
    - foreach varmac of local tvars {
    - capture drop ``varmac''
    = capture drop __000000
    - }
    - capture drop ``varmac''
    = capture drop __000001
    - }
    - capture drop ``varmac''
    = capture drop __000002
    - }
    - capture drop ``varmac''
    = capture drop __000003
    - }
    - capture drop ``varmac''
    = capture drop __000004
    - }
    - }
    - }
    ----------------------------------------------------------- end destring ---
  - gen `inc_cat_var'_ub = 999999
  = gen acs_hhinc_ub = 999999
  - di "Upper bound of 999999 created for inc_level " `inc_level'
  = di "Upper bound of 999999 created for inc_level " 9
Upper bound of 999999 created for inc_level 9
  - }
  - else if regexm(inc_decoded, "[.][a-z]") == 1 {
    di "The inc_level " `inc_level' " is all missing"
    gen `inc_cat_var'_lb = .
    gen `inc_cat_var'_ub = .
    di "Lower and upper bound of . created for inc_level " `inc_level'
    }
  - else if regexm(inc_decoded, "[0-9]+$") == 1 {
    di "The inc_level " `inc_level' " has a lower and an upper level"
    split inc_decoded, parse("-" "to" "-" "to under" "to less than" "UP TO" "but
>  less than") ignore(" ,$") destring
    gen `inc_cat_var'_lb = inc_decoded1
    gen `inc_cat_var'_ub = inc_decoded2
    di "Lower bound of `inc_cat_var'_lb and upper bound of `inc_cat_var'_ub " "c
> reated for inc_level " `inc_level' "of the original Research " "dataset income
>  range"
    }
  - else {
    di as error "Error: The inc_level " `inc_level' " does not fit any of the ex
> isting regular expressions " "designs. Please email the REDI program creator a
> t " "mollymkingphd@gmail.com with information about this " "error and a list o
> f all of your income levels so she " "can update the program. Thank you for yo
> ur help!"
    error 999
    }
  - local upper_bound = `inc_cat_var'_ub
  = local upper_bound = acs_hhinc_ub
  - local lower_bound = `inc_cat_var'_lb
  = local lower_bound = acs_hhinc_lb
  - capture drop inc_decoded1 inc_decoded2
  - quietly summarize if `research_year' == `y' & `inc_cat_var' == `inc_level'
  = quietly summarize if year == 2019 & acs_hhinc == 9
  - local sample_size = r(N)
  - gen `inc_cat_var'_n = `sample_size'
  = gen acs_hhinc_n = 30447
  - label variable `inc_cat_var'_n "N in income level in research dataset"
  = label variable acs_hhinc_n "N in income level in research dataset"
    ------------------------------------------------------------ begin label ---
    - version 10.0
    - local vv : display "version " string(_caller()) ", missing:"
    - gettoken val : 0
    - if (strpos("`val'", "val") > 0 ) {
    = if (strpos("variable", "val") > 0 ) {
      gettoken val 0 : 0
      syntax anything [, nofix]
      if "`fix'" != "" {
      local fix ", nofix"
      }
      gettoken var rest : anything
      while `"`rest'"' != "" {
      gettoken lab rest : rest
      local label "`lab'"
      }
      local vlist : list anything - lab
      if "`lab'" == "." {
      local lab ""
      }
      foreach var of varlist `vlist' {
      `vv' _label `val' `var' `lab' `fix'
      }
      }
    - else {
    - `vv' _label `macval(0)'
    = version 16, missing: _label variable acs_hhinc_n "N in income level in res
> earch dataset"
    - }
    -------------------------------------------------------------- end label ---
  - keep if `research_year' == `y' & `inc_cat_var' == `inc_level'
  = keep if year == 2019 & acs_hhinc == 9
(0 observations deleted)
  - tempfile premerge_`inc_level'_`y'
  = tempfile premerge_9_2019
  - save `premerge_`inc_level'_`y'', replace
  = save /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000k, repla
> ce
(note: file /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000k not
>  found)
file /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000k saved
  - di "Saved tempfile with upper and lower bounds of research data income level
> s"
Saved tempfile with upper and lower bounds of research data income levels
  - use `reference_dataset', clear
  = use ~/Documents/SocResearch/Dissertation/data/data_temp/redi13_cps_state_ca.
> dta, clear
(Streamlined CPS ASEC data, CA 2019)
  - di "Reference data open - Income type set as `inc_cat_var' income"
  = di "Reference data open - Income type set as acs_hhinc income"
Reference data open - Income type set as acs_hhinc income
  - keep if `ref_year' == `y' | `"`ref_year'"' == "nys" & `ref_income_var' >= `l
> ower_bound' & `ref_income_var' <= `upper_bound'
  = keep if year == 2019 | `"year"' == "nys" & hhincome >= 200000 & hhincome <= 
> 999999
(0 observations deleted)
  - gen obs_no = _n
  - di "Observation number generated"
Observation number generated
  - save $temp/`ASECdata'_`ref_year'_inc`inc_level'.dta, replace
  = save ~/Documents/SocResearch/Dissertation/data/data_temp/_year_inc9.dta, rep
> lace
file ~/Documents/SocResearch/Dissertation/data/data_temp/_year_inc9.dta saved
  - di "Ref to keep income between $`lower_bound' and $`upper_bound' for `y' yea
> r."
  = di "Ref to keep income between $200000 and $999999 for 2019 year."
Ref to keep income between $200000 and $999999 for 2019 year.
  - quietly des
    -------------------------------------------------------------- begin des ---
    - local version : di "version " string(_caller()) ":"
    - `version' describe `0'
    = version 16: describe 
      ------------------------------------------------------- begin describe ---
      - version 9
      - local version : di "version " string(_caller()) ":"
      - syntax [anything] [using] [, SImple REPLACE *]
      - if ("`replace'"!="") {
      = if (""!="") {
        describe_mk `0'
        return add
        exit
        }
      - local varlist `"`anything'"'
      = local varlist `""'
      - if ("`simple'" == "") {
      = if ("" == "") {
      - `version' _describe `0'
      = version 16: _describe 
      - return add
      - }
      - else {
        if (`"`options'"' != "") {
        di as err "simple may not be combined with other options"
        exit 198
        }
        if (`"`using'"' != "") {
        qui `version' describe `varlist' `using', varlist
        if "`varlist'" == "" {
        local vars "`r(varlist)'"
        }
        else {
        local vars "`varlist'"
        }
        local wid = 2
        local n : list sizeof vars
        if `n'==0 {
        exit
        }
        if "`c(hasicu)'" == "1" {
        foreach x of local vars {
        local wid = max(`wid', udstrlen(`"`x'"'))
        }
        }
        else {
        foreach x of local vars {
        local wid = max(`wid', strlen(`"`x'"'))
        }
        }
        local wid = `wid' + 2
        local cols = int((`c(linesize)'+1)/`wid')
        if `cols' < 2 {
        foreach x of local `vars' {
        di as txt `col' `"`x'"'
        }
        exit
        }
        local lines = `n'/`cols'
        local lines = int(cond(`lines'>int(`lines'), `lines'+1, `lines'))
        forvalues i=1(1)`lines' {
        local top = min((`cols')*`lines'+`i', `n')
        local col = 1
        forvalues j=`i'(`lines')`top' {
        local x : word `j' of `vars'
        di as txt _column(`col') "`x'" _c
        local col = `col' + `wid'
        }
        di as txt
        }
        qui `version' describe `varlist' `using', short
        return add
        }
        else {
        ds `varlist'
        qui `version' _describe `varlist', short
        return add
        }
        }
      --------------------------------------------------------- end describe ---
    ---------------------------------------------------------------- end des ---
  - local N = r(N)
  - clear
    ------------------------------------------------------------ begin clear ---
    - if _caller() < 10 {
      _clear_9 `0'
      exit
      }
    - version 10
    - syntax [anything]
    - tokenize `anything'
    = tokenize 
    - if `"`2'"' != "" {
    = if `""' != "" {
      display as err "`2' not allowed"
      exit 198
      }
    - if "`1'"=="" {
    = if ""=="" {
    - drop _all
    - label drop _all
      ---------------------------------------------------------- begin label ---
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {
      = if (strpos("drop", "val") > 0 ) {
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {
        local fix ", nofix"
        }
        gettoken var rest : anything
        while `"`rest'"' != "" {
        gettoken lab rest : rest
        local label "`lab'"
        }
        local vlist : list anything - lab
        if "`lab'" == "." {
        local lab ""
        }
        foreach var of varlist `vlist' {
        `vv' _label `val' `var' `lab' `fix'
        }
        }
      - else {
      - `vv' _label `macval(0)'
      = version 10, missing: _label drop _all
      - }
      ------------------------------------------------------------ end label ---
    - }
    - else if "`1'"=="frames" {
    = else if ""=="frames" {
      frames reset
      }
    - else if "`1'"=="mata" {
    = else if ""=="mata" {
      mata: mata clear
      }
    - else if "`1'"=="python" {
    = else if ""=="python" {
      python clear
      }
    - else if inlist("`1'", "results", "matrix") {
    = else if inlist("", "results", "matrix") {
      return clear
      clearreturn
      ereturn clear
      sreturn clear
      _return drop _all
      if ("`1'" == "matrix") {
      matrix drop _all
      _est drop _all
      }
      }
    - else if "`1'"=="programs" {
    = else if ""=="programs" {
      program drop _all
      }
    - else if "`1'"=="ado" {
    = else if ""=="ado" {
      program drop _allado
      }
    - else if "`1'"=="rngstream" | "`1'"=="rngstreams" {
    = else if ""=="rngstream" | ""=="rngstreams" {
      set rngstream clear
      }
    - else if "`1'"=="*" | "`1'"=="all" {
    = else if ""=="*" | ""=="all" {
      capture mata: st_local("semmods", strofreal(sg__global.hasmodels()))
      capture
      if (0`semmods') {
      display as err "-clear all- not allowed while an SEM Builder is open"
      exit 1
      }
      drop _all
      frames reset
      label drop _all
      matrix drop _all
      scalar drop _all
      constraint drop _all
      eq drop _all
      file close _all
      postutil clear
      _return drop _all
      discard
      program drop _all
      timer clear
      mata: _st__put_cmd_clear()
      mata: mata clear
      python clear
      }
    - else {
      display as err "`1' not allowed"
      exit 198
      }
    -------------------------------------------------------------- end clear ---
  - set obs `sample_size'
  = set obs 30447
number of observations (_N) was 0, now 30,447
  - gen obs_no = runiformint(1, `N')
  = gen obs_no = runiformint(1, 6260)
  - merge m:1 obs_no using $temp/`ASECdata'_`ref_year'_inc`inc_level'.dta, keep(
> match) nogenerate
  = merge m:1 obs_no using ~/Documents/SocResearch/Dissertation/data/data_temp/_
> year_inc9.dta, keep(match) nogenerate
    ------------------------------------------------------------ begin merge ---
    - version 11
    - gettoken mtype 0 : 0, parse(" ,")
    - if (!strpos("`mtype'", ":") & "`mtype'"!="") {
    = if (!strpos("m:1", ":") & "m:1"!="") {
      if (_caller()>=11) {
      di as smcl as txt "{p}"
      di as smcl "(note: you are using old"
      di as smcl "{bf:merge} syntax; see"
      di as smcl "{bf:{help merge:[D] merge}} for new syntax)"
      di as smcl "{p_end}"
      }
      merge_10 `mtype' `0'
      exit
      }
    - local origmtype `"`mtype'"'
    = local origmtype `"m:1"'
    - mata: map_mtype(`"mtype"')
    - gettoken token : 0, parse(" ,")
    - if ("`token'"=="_n") {
    = if ("obs_no"=="_n") {
      if ("`mtype'"!="1:1") {
      error_seq_not11 "`mtype'" "`origmtype'"
      }
      gettoken token 0 : 0, parse(" ,")
      local mtype "_n"
      }
    - syntax [varlist(default=none)] using/ [, ASSERT(string) DEBUG GENerate(nam
> e) FORCE KEEP(string) KEEPUSing(string) noLabels NOGENerate noNOTEs REPLACE no
> REPort SORTED UPDATE ]
    - if ("`mtype'"!="_n") {
    = if ("m:1"!="_n") {
    - local origmtype `"`mtype'"'
    = local origmtype `"m:1"'
    - mata: map_mtype(`"mtype"')
    - if ("`varlist'"=="") {
    = if ("obs_no"=="") {
      error_mat_varlist "`mtype'" "`origmtype'"
      }
    - }
    - else {
      if ("`mtype'"=="_n") {
      if ("`varlist'"!="") {
      error_seq_varlist
      }
      }
      }
    - mata: fullfilename("using", "usingfull", "using")
    - mata: resultlist("assert")
    - mata: resultlist("keep")
    - if ("`generate'"!="") {
    = if (""!="") {
      if ("`nogenerate'"!="") {
      di as smcl err "{p}"
      di as smcl "options -generate()- and -nogenerate-"
      di as smcl "may not be specified together."
      di as smcl err "{p_end}"
      }
      confirm new var `generate'
      }
    - if ("`replace'"!="") {
    = if (""!="") {
      if ("`update'"=="") {
      error_replace
      }
      }
    - if ("`sorted'"=="" & "`mtype'"!="_n") {
    = if (""=="" & "m:1"!="_n") {
    - local sortedby : sortedby
    - checksort "`sortedby'" "`varlist'"
    = checksort "" "obs_no"
      ------------------------------------------------ begin merge.checksort ---
      - args is should
      - local i 0
      - return scalar sorted = 1
      - foreach v1 of local should {
      - local ++i
      - local v2 : word `i' of `is'
      = local v2 : word 1 of 
      - if ("`v1'"!="`v2'") {
      = if ("obs_no"!="") {
      - return scalar sorted = 0
      - continue, break
        }
        }
      -------------------------------------------------- end merge.checksort ---
    - if (!r(sorted)) {
    - sort `varlist'
    = sort obs_no
    - }
    - quietly describe using "`using'", varlist short
    = quietly describe using "~/Documents/SocResearch/Dissertation/data/data_tem
> p/_year_inc9.dta", varlist short
      ------------------------------------------------------- begin describe ---
      - version 9
      - local version : di "version " string(_caller()) ":"
      - syntax [anything] [using] [, SImple REPLACE *]
      - if ("`replace'"!="") {
      = if (""!="") {
        describe_mk `0'
        return add
        exit
        }
      - local varlist `"`anything'"'
      = local varlist `""'
      - if ("`simple'" == "") {
      = if ("" == "") {
      - `version' _describe `0'
      = version 11: _describe using "~/Documents/SocResearch/Dissertation/data/d
> ata_temp/_year_inc9.dta", varlist short
      - return add
      - }
      - else {
        if (`"`options'"' != "") {
        di as err "simple may not be combined with other options"
        exit 198
        }
        if (`"`using'"' != "") {
        qui `version' describe `varlist' `using', varlist
        if "`varlist'" == "" {
        local vars "`r(varlist)'"
        }
        else {
        local vars "`varlist'"
        }
        local wid = 2
        local n : list sizeof vars
        if `n'==0 {
        exit
        }
        if "`c(hasicu)'" == "1" {
        foreach x of local vars {
        local wid = max(`wid', udstrlen(`"`x'"'))
        }
        }
        else {
        foreach x of local vars {
        local wid = max(`wid', strlen(`"`x'"'))
        }
        }
        local wid = `wid' + 2
        local cols = int((`c(linesize)'+1)/`wid')
        if `cols' < 2 {
        foreach x of local `vars' {
        di as txt `col' `"`x'"'
        }
        exit
        }
        local lines = `n'/`cols'
        local lines = int(cond(`lines'>int(`lines'), `lines'+1, `lines'))
        forvalues i=1(1)`lines' {
        local top = min((`cols')*`lines'+`i', `n')
        local col = 1
        forvalues j=`i'(`lines')`top' {
        local x : word `j' of `vars'
        di as txt _column(`col') "`x'" _c
        local col = `col' + `wid'
        }
        di as txt
        }
        qui `version' describe `varlist' `using', short
        return add
        }
        else {
        ds `varlist'
        qui `version' _describe `varlist', short
        return add
        }
        }
      --------------------------------------------------------- end describe ---
    - local sortedby "`r(sortlist)'"
    = local sortedby ""
    - checksort "`sortedby'" "`varlist'"
    = checksort "" "obs_no"
      ------------------------------------------------ begin merge.checksort ---
      - args is should
      - local i 0
      - return scalar sorted = 1
      - foreach v1 of local should {
      - local ++i
      - local v2 : word `i' of `is'
      = local v2 : word 1 of 
      - if ("`v1'"!="`v2'") {
      = if ("obs_no"!="") {
      - return scalar sorted = 0
      - continue, break
        }
        }
      -------------------------------------------------- end merge.checksort ---
    - if (!r(sorted)) {
    - preserve
    - qui use "`using'", clear
    = qui use "~/Documents/SocResearch/Dissertation/data/data_temp/_year_inc9.dt
> a", clear
    - sort `varlist'
    = sort obs_no
    - tempfile using
    - qui save "`using'", replace
    = qui save "/var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000m
> ", replace
    - restore
    - }
    - }
    - if ("`nogenerate'"!="") {
    = if ("nogenerate"!="") {
    - tempvar mergevar
    - local mergevaristemp 1
    - }
    - else {
      local mergevar = cond("`generate'"!="", "`generate'", "_merge")
      local mergevaristemp 0
      }
    - local options `update' `replace' `notes' `labels' _merge(`mergevar') `forc
> e'
    = local options     _merge(__000000) 
    - if (bsubstr("`mtype'", 1, 1)=="1") {
    = if (bsubstr("m:1", 1, 1)=="1") {
      local options `options' uniqmaster
      }
    - if (bsubstr("`mtype'", 3, 1)=="1") {
    = if (bsubstr("m:1", 3, 1)=="1") {
    - local options `options' uniqusing
    = local options _merge(__000000) uniqusing
    - }
    - if ("`keepusing'"!="") {
    = if (""!="") {
      local options `options' keep(`keepusing')
      }
    - if ("`keep'" !="" & !strpos("`keep'" , "2")) {
    = if ("3" !="" & !strpos("3" , "2")) {
    - local options `options' nokeep
    = local options _merge(__000000) uniqusing nokeep
    - }
    - if (_caller() > 15) {
    - local version : di "version " string(_caller()) ": "
    - }
    - local _merge `"`version'_merge `varlist' using "`using'", nowarn"'
    = local _merge `"version 16: _merge obs_no using "/var/folders/rp/96l526kj7y
> bdjr5vs5bqqjw80000gn/T//S_20065.00000m", nowarn"'
    - local _merge `"`_merge' `options' tabulate(mresults)"'
    = local _merge `"version 16: _merge obs_no using "/var/folders/rp/96l526kj7y
> bdjr5vs5bqqjw80000gn/T//S_20065.00000m", nowarn _merge(__000000) uniqusing nok
> eep tabulate(mresults)"'
    - if ("`debug'"!="") {
    = if (""!="") {
      di as txt _n "command is"
      di `"`_merge'"' _n
      }
    - `_merge'
    = version 16: _merge obs_no using "/var/folders/rp/96l526kj7ybdjr5vs5bqqjw80
> 000gn/T//S_20065.00000m", nowarn _merge(__000000) uniqusing nokeep tabulate(mr
> esults)
    - if (!`mergevaristemp') {
    = if (!1) {
      capture label list _merge
      if (_rc) {
      label define _merge 1 "master only (1)" 2 "using only (2)" 3 "matched (3)"
>  4 "missing updated (4)" 5 "nonmissing conflict (5)"
      }
      label values `mergevar' _merge
      }
    - if ("`assert'"!="") {
    = if (""!="") {
      if (_caller() < 13) {
      buildexpr expr : `mergevar' "`assert'"
      capture assert `expr'
      if (_rc) {
      error_assert `mergevar' "`assert'"
      }
      }
      else {
      capture checkmresults "`mresults'" "`assert'"
      if (_rc) {
      error_assert `mergevar' "`assert'"
      }
      }
      }
    - if ("`keep'"!="") {
    = if ("3"!="") {
    - buildexpr expr : `mergevar' "`keep'"
    = buildexpr expr : __000000 "3"
      ------------------------------------------------ begin merge.buildexpr ---
      - args userexpr colon varname numbers
      - gettoken first numbers : numbers
      - local list `varname'==`first'
      = local list __000000==3
      - foreach el of local numbers {
        local list `list' | `varname'==`el'
        }
      - c_local `userexpr' "(`list')"
      = c_local expr "(__000000==3)"
      -------------------------------------------------- end merge.buildexpr ---
    - quietly keep if `expr'
    = quietly keep if (__000000==3)
    - }
    - if ("`mtype'"=="1:1") {
    = if ("m:1"=="1:1") {
      qui count if `mergevar'==2
      if (r(N)==0) {
      sort `varlist'
      }
      }
    - if (c(noisily) & "`report'"=="") {
    = if (c(noisily) & ""=="") {
    - local isupdate = ("`replace'"!="" | "`update'"!="")
    = local isupdate = (""!="" | ""!="")
    - present_table `isupdate' `mergevar' `mergevaristemp'
    = present_table 0 __000000 1
      -------------------------------------------- begin merge.present_table ---
      - args isupdate mergevar mergevaristemp
      - if (!`mergevaristemp') {
      = if (!1) {
        local v1 "(`mergevar'==1)"
        local v2 "(`mergevar'==2)"
        local v3 "(`mergevar'==3)"
        local v4 "(`mergevar'==4)"
        local v5 "(`mergevar'==5)"
        }
      - quietly {
      - count if `mergevar'==1
      = count if __000000==1
      - local m1 = r(N)
      - count if `mergevar'==2
      = count if __000000==2
      - local m2 = r(N)
      - if (`isupdate') {
      = if (0) {
        count if `mergevar'==3
        local m3 = r(N)
        count if `mergevar'==4
        local m4 = r(N)
        local m5 = _N - `m1' - `m2' - `m3' - `m4'
        }
      - else {
      - local m3 = _N - `m1' - `m2'
      = local m3 = _N - 0 - 0
      - }
      - }
      - di

      - di as smcl as txt _col(5) "Result" _col(38) "# of obs."
    Result                           # of obs.
      - di as smcl as txt _col(5) "{hline 41}"
    -----------------------------------------
      - di as smcl as txt _col(5) "not matched" _col(30) as res %16.0fc (`m1'+`m
> 2')
      = di as smcl as txt _col(5) "not matched" _col(30) as res %16.0fc (0+0)
    not matched                             0
      - if (`m1'|`m2') {
      = if (0|0) {
        di as smcl as txt _col(9) "from master" _col(30) as res %16.0fc `m1' as 
> txt "  `v1'"
        di as smcl as txt _col(9) "from using" _col(30) as res %16.0fc `m2' as t
> xt "  `v2'"
        di
        }
      - if (!`isupdate') {
      = if (!0) {
      - di as smcl as txt _col(5) "matched" _col(30) as res %16.0fc `m3' as txt 
> "  `v3'"
      = di as smcl as txt _col(5) "matched" _col(30) as res %16.0fc 30447 as txt
>  "  "
    matched                            30,447  
      - }
      - else {
        if (`m1'==0 & `m2'==0) {
        di
        }
        di as smcl as txt _col(5) "matched" _col(30) as res %16.0fc (`m3'+`m4'+`
> m5')
        di as smcl as txt _col(9) "not updated" _col(30) as res %16.0fc `m3' as 
> txt "  `v3'"
        di as smcl as txt _col(9) "missing updated" _col(30) as res %16.0fc `m4'
>  as txt "  `v4'"
        di as smcl as txt _col(9) "nonmissing conflict" _col(30) as res %16.0fc 
> `m5' as txt "  `v5'"
        }
      - di as smcl as txt _col(5) "{hline 41}"
    -----------------------------------------
      ---------------------------------------------- end merge.present_table ---
    - }
    -------------------------------------------------------------- end merge ---
  - save $temp/`ASECdata'_`ref_year'_inc`inc_level'.dta, replace
  = save ~/Documents/SocResearch/Dissertation/data/data_temp/_year_inc9.dta, rep
> lace
file ~/Documents/SocResearch/Dissertation/data/data_temp/_year_inc9.dta saved
  - gen id = _n
  - merge 1:1 id using `premerge_`inc_level'_`y''
  = merge 1:1 id using /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065
> .00000k
    ------------------------------------------------------------ begin merge ---
    - version 11
    - gettoken mtype 0 : 0, parse(" ,")
    - if (!strpos("`mtype'", ":") & "`mtype'"!="") {
    = if (!strpos("1:1", ":") & "1:1"!="") {
      if (_caller()>=11) {
      di as smcl as txt "{p}"
      di as smcl "(note: you are using old"
      di as smcl "{bf:merge} syntax; see"
      di as smcl "{bf:{help merge:[D] merge}} for new syntax)"
      di as smcl "{p_end}"
      }
      merge_10 `mtype' `0'
      exit
      }
    - local origmtype `"`mtype'"'
    = local origmtype `"1:1"'
    - mata: map_mtype(`"mtype"')
    - gettoken token : 0, parse(" ,")
    - if ("`token'"=="_n") {
    = if ("id"=="_n") {
      if ("`mtype'"!="1:1") {
      error_seq_not11 "`mtype'" "`origmtype'"
      }
      gettoken token 0 : 0, parse(" ,")
      local mtype "_n"
      }
    - syntax [varlist(default=none)] using/ [, ASSERT(string) DEBUG GENerate(nam
> e) FORCE KEEP(string) KEEPUSing(string) noLabels NOGENerate noNOTEs REPLACE no
> REPort SORTED UPDATE ]
    - if ("`mtype'"!="_n") {
    = if ("1:1"!="_n") {
    - local origmtype `"`mtype'"'
    = local origmtype `"1:1"'
    - mata: map_mtype(`"mtype"')
    - if ("`varlist'"=="") {
    = if ("id"=="") {
      error_mat_varlist "`mtype'" "`origmtype'"
      }
    - }
    - else {
      if ("`mtype'"=="_n") {
      if ("`varlist'"!="") {
      error_seq_varlist
      }
      }
      }
    - mata: fullfilename("using", "usingfull", "using")
    - mata: resultlist("assert")
    - mata: resultlist("keep")
    - if ("`generate'"!="") {
    = if (""!="") {
      if ("`nogenerate'"!="") {
      di as smcl err "{p}"
      di as smcl "options -generate()- and -nogenerate-"
      di as smcl "may not be specified together."
      di as smcl err "{p_end}"
      }
      confirm new var `generate'
      }
    - if ("`replace'"!="") {
    = if (""!="") {
      if ("`update'"=="") {
      error_replace
      }
      }
    - if ("`sorted'"=="" & "`mtype'"!="_n") {
    = if (""=="" & "1:1"!="_n") {
    - local sortedby : sortedby
    - checksort "`sortedby'" "`varlist'"
    = checksort "" "id"
      ------------------------------------------------ begin merge.checksort ---
      - args is should
      - local i 0
      - return scalar sorted = 1
      - foreach v1 of local should {
      - local ++i
      - local v2 : word `i' of `is'
      = local v2 : word 1 of 
      - if ("`v1'"!="`v2'") {
      = if ("id"!="") {
      - return scalar sorted = 0
      - continue, break
        }
        }
      -------------------------------------------------- end merge.checksort ---
    - if (!r(sorted)) {
    - sort `varlist'
    = sort id
    - }
    - quietly describe using "`using'", varlist short
    = quietly describe using "/var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//
> S_20065.00000k", varlist short
      ------------------------------------------------------- begin describe ---
      - version 9
      - local version : di "version " string(_caller()) ":"
      - syntax [anything] [using] [, SImple REPLACE *]
      - if ("`replace'"!="") {
      = if (""!="") {
        describe_mk `0'
        return add
        exit
        }
      - local varlist `"`anything'"'
      = local varlist `""'
      - if ("`simple'" == "") {
      = if ("" == "") {
      - `version' _describe `0'
      = version 11: _describe using "/var/folders/rp/96l526kj7ybdjr5vs5bqqjw8000
> 0gn/T//S_20065.00000k", varlist short
      - return add
      - }
      - else {
        if (`"`options'"' != "") {
        di as err "simple may not be combined with other options"
        exit 198
        }
        if (`"`using'"' != "") {
        qui `version' describe `varlist' `using', varlist
        if "`varlist'" == "" {
        local vars "`r(varlist)'"
        }
        else {
        local vars "`varlist'"
        }
        local wid = 2
        local n : list sizeof vars
        if `n'==0 {
        exit
        }
        if "`c(hasicu)'" == "1" {
        foreach x of local vars {
        local wid = max(`wid', udstrlen(`"`x'"'))
        }
        }
        else {
        foreach x of local vars {
        local wid = max(`wid', strlen(`"`x'"'))
        }
        }
        local wid = `wid' + 2
        local cols = int((`c(linesize)'+1)/`wid')
        if `cols' < 2 {
        foreach x of local `vars' {
        di as txt `col' `"`x'"'
        }
        exit
        }
        local lines = `n'/`cols'
        local lines = int(cond(`lines'>int(`lines'), `lines'+1, `lines'))
        forvalues i=1(1)`lines' {
        local top = min((`cols')*`lines'+`i', `n')
        local col = 1
        forvalues j=`i'(`lines')`top' {
        local x : word `j' of `vars'
        di as txt _column(`col') "`x'" _c
        local col = `col' + `wid'
        }
        di as txt
        }
        qui `version' describe `varlist' `using', short
        return add
        }
        else {
        ds `varlist'
        qui `version' _describe `varlist', short
        return add
        }
        }
      --------------------------------------------------------- end describe ---
    - local sortedby "`r(sortlist)'"
    = local sortedby "year acs_hhinc"
    - checksort "`sortedby'" "`varlist'"
    = checksort "year acs_hhinc" "id"
      ------------------------------------------------ begin merge.checksort ---
      - args is should
      - local i 0
      - return scalar sorted = 1
      - foreach v1 of local should {
      - local ++i
      - local v2 : word `i' of `is'
      = local v2 : word 1 of year acs_hhinc
      - if ("`v1'"!="`v2'") {
      = if ("id"!="year") {
      - return scalar sorted = 0
      - continue, break
        }
        }
      -------------------------------------------------- end merge.checksort ---
    - if (!r(sorted)) {
    - preserve
    - qui use "`using'", clear
    = qui use "/var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000k"
> , clear
    - sort `varlist'
    = sort id
    - tempfile using
    - qui save "`using'", replace
    = qui save "/var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000m
> ", replace
    - restore
    - }
    - }
    - if ("`nogenerate'"!="") {
    = if (""!="") {
      tempvar mergevar
      local mergevaristemp 1
      }
    - else {
    - local mergevar = cond("`generate'"!="", "`generate'", "_merge")
    = local mergevar = cond(""!="", "", "_merge")
    - local mergevaristemp 0
    - }
    - local options `update' `replace' `notes' `labels' _merge(`mergevar') `forc
> e'
    = local options     _merge(_merge) 
    - if (bsubstr("`mtype'", 1, 1)=="1") {
    = if (bsubstr("1:1", 1, 1)=="1") {
    - local options `options' uniqmaster
    = local options _merge(_merge) uniqmaster
    - }
    - if (bsubstr("`mtype'", 3, 1)=="1") {
    = if (bsubstr("1:1", 3, 1)=="1") {
    - local options `options' uniqusing
    = local options _merge(_merge) uniqmaster uniqusing
    - }
    - if ("`keepusing'"!="") {
    = if (""!="") {
      local options `options' keep(`keepusing')
      }
    - if ("`keep'" !="" & !strpos("`keep'" , "2")) {
    = if ("" !="" & !strpos("" , "2")) {
      local options `options' nokeep
      }
    - if (_caller() > 15) {
    - local version : di "version " string(_caller()) ": "
    - }
    - local _merge `"`version'_merge `varlist' using "`using'", nowarn"'
    = local _merge `"version 16: _merge id using "/var/folders/rp/96l526kj7ybdjr
> 5vs5bqqjw80000gn/T//S_20065.00000m", nowarn"'
    - local _merge `"`_merge' `options' tabulate(mresults)"'
    = local _merge `"version 16: _merge id using "/var/folders/rp/96l526kj7ybdjr
> 5vs5bqqjw80000gn/T//S_20065.00000m", nowarn _merge(_merge) uniqmaster uniqusin
> g tabulate(mresults)"'
    - if ("`debug'"!="") {
    = if (""!="") {
      di as txt _n "command is"
      di `"`_merge'"' _n
      }
    - `_merge'
    = version 16: _merge id using "/var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000g
> n/T//S_20065.00000m", nowarn _merge(_merge) uniqmaster uniqusing tabulate(mres
> ults)
(label statefip_lbl already defined)
    - if (!`mergevaristemp') {
    = if (!0) {
    - capture label list _merge
      ---------------------------------------------------------- begin label ---
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {
      = if (strpos("list", "val") > 0 ) {
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {
        local fix ", nofix"
        }
        gettoken var rest : anything
        while `"`rest'"' != "" {
        gettoken lab rest : rest
        local label "`lab'"
        }
        local vlist : list anything - lab
        if "`lab'" == "." {
        local lab ""
        }
        foreach var of varlist `vlist' {
        `vv' _label `val' `var' `lab' `fix'
        }
        }
      - else {
      - `vv' _label `macval(0)'
      = version 11, missing: _label list _merge
        }
      ------------------------------------------------------------ end label ---
    - if (_rc) {
    - label define _merge 1 "master only (1)" 2 "using only (2)" 3 "matched (3)"
>  4 "missing updated (4)" 5 "nonmissing conflict (5)"
      ---------------------------------------------------------- begin label ---
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {
      = if (strpos("define", "val") > 0 ) {
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {
        local fix ", nofix"
        }
        gettoken var rest : anything
        while `"`rest'"' != "" {
        gettoken lab rest : rest
        local label "`lab'"
        }
        local vlist : list anything - lab
        if "`lab'" == "." {
        local lab ""
        }
        foreach var of varlist `vlist' {
        `vv' _label `val' `var' `lab' `fix'
        }
        }
      - else {
      - `vv' _label `macval(0)'
      = version 11, missing: _label define _merge 1 "master only (1)" 2 "using o
> nly (2)" 3 "matched (3)" 4 "missing updated (4)" 5 "nonmissing conflict (5)"
      - }
      ------------------------------------------------------------ end label ---
    - }
    - label values `mergevar' _merge
    = label values _merge _merge
      ---------------------------------------------------------- begin label ---
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {
      = if (strpos("values", "val") > 0 ) {
      - gettoken val 0 : 0
      - syntax anything [, nofix]
      - if "`fix'" != "" {
      = if "" != "" {
        local fix ", nofix"
        }
      - gettoken var rest : anything
      - while `"`rest'"' != "" {
      = while `" _merge"' != "" {
      - gettoken lab rest : rest
      - local label "`lab'"
      = local label "_merge"
      - }
      - while `"`rest'"' != "" {
      = while `""' != "" {
        gettoken lab rest : rest
        local label "`lab'"
        }
      - local vlist : list anything - lab
      - if "`lab'" == "." {
      = if "_merge" == "." {
        local lab ""
        }
      - foreach var of varlist `vlist' {
      = foreach var of varlist _merge {
      - `vv' _label `val' `var' `lab' `fix'
      = version 11, missing: _label values _merge _merge 
      - }
      - }
      - else {
        `vv' _label `macval(0)'
        }
      ------------------------------------------------------------ end label ---
    - }
    - if ("`assert'"!="") {
    = if (""!="") {
      if (_caller() < 13) {
      buildexpr expr : `mergevar' "`assert'"
      capture assert `expr'
      if (_rc) {
      error_assert `mergevar' "`assert'"
      }
      }
      else {
      capture checkmresults "`mresults'" "`assert'"
      if (_rc) {
      error_assert `mergevar' "`assert'"
      }
      }
      }
    - if ("`keep'"!="") {
    = if (""!="") {
      buildexpr expr : `mergevar' "`keep'"
      quietly keep if `expr'
      }
    - if ("`mtype'"=="1:1") {
    = if ("1:1"=="1:1") {
    - qui count if `mergevar'==2
    = qui count if _merge==2
    - if (r(N)==0) {
    - sort `varlist'
    = sort id
    - }
    - }
    - if (c(noisily) & "`report'"=="") {
    = if (c(noisily) & ""=="") {
    - local isupdate = ("`replace'"!="" | "`update'"!="")
    = local isupdate = (""!="" | ""!="")
    - present_table `isupdate' `mergevar' `mergevaristemp'
    = present_table 0 _merge 0
      -------------------------------------------- begin merge.present_table ---
      - args isupdate mergevar mergevaristemp
      - if (!`mergevaristemp') {
      = if (!0) {
      - local v1 "(`mergevar'==1)"
      = local v1 "(_merge==1)"
      - local v2 "(`mergevar'==2)"
      = local v2 "(_merge==2)"
      - local v3 "(`mergevar'==3)"
      = local v3 "(_merge==3)"
      - local v4 "(`mergevar'==4)"
      = local v4 "(_merge==4)"
      - local v5 "(`mergevar'==5)"
      = local v5 "(_merge==5)"
      - }
      - quietly {
      - count if `mergevar'==1
      = count if _merge==1
      - local m1 = r(N)
      - count if `mergevar'==2
      = count if _merge==2
      - local m2 = r(N)
      - if (`isupdate') {
      = if (0) {
        count if `mergevar'==3
        local m3 = r(N)
        count if `mergevar'==4
        local m4 = r(N)
        local m5 = _N - `m1' - `m2' - `m3' - `m4'
        }
      - else {
      - local m3 = _N - `m1' - `m2'
      = local m3 = _N - 0 - 0
      - }
      - }
      - di

      - di as smcl as txt _col(5) "Result" _col(38) "# of obs."
    Result                           # of obs.
      - di as smcl as txt _col(5) "{hline 41}"
    -----------------------------------------
      - di as smcl as txt _col(5) "not matched" _col(30) as res %16.0fc (`m1'+`m
> 2')
      = di as smcl as txt _col(5) "not matched" _col(30) as res %16.0fc (0+0)
    not matched                             0
      - if (`m1'|`m2') {
      = if (0|0) {
        di as smcl as txt _col(9) "from master" _col(30) as res %16.0fc `m1' as 
> txt "  `v1'"
        di as smcl as txt _col(9) "from using" _col(30) as res %16.0fc `m2' as t
> xt "  `v2'"
        di
        }
      - if (!`isupdate') {
      = if (!0) {
      - di as smcl as txt _col(5) "matched" _col(30) as res %16.0fc `m3' as txt 
> "  `v3'"
      = di as smcl as txt _col(5) "matched" _col(30) as res %16.0fc 30447 as txt
>  "  (_merge==3)"
    matched                            30,447  (_merge==3)
      - }
      - else {
        if (`m1'==0 & `m2'==0) {
        di
        }
        di as smcl as txt _col(5) "matched" _col(30) as res %16.0fc (`m3'+`m4'+`
> m5')
        di as smcl as txt _col(9) "not updated" _col(30) as res %16.0fc `m3' as 
> txt "  `v3'"
        di as smcl as txt _col(9) "missing updated" _col(30) as res %16.0fc `m4'
>  as txt "  `v4'"
        di as smcl as txt _col(9) "nonmissing conflict" _col(30) as res %16.0fc 
> `m5' as txt "  `v5'"
        }
      - di as smcl as txt _col(5) "{hline 41}"
    -----------------------------------------
      ---------------------------------------------- end merge.present_table ---
    - }
    -------------------------------------------------------------- end merge ---
  - generate category_n = .
(30,447 missing values generated)
  - replace category_n = `N'
  = replace category_n = 6260
(30,447 real changes made)
  - label var category_n "N respondents in income level in post-merge dataset'"
    ------------------------------------------------------------ begin label ---
    - version 10.0
    - local vv : display "version " string(_caller()) ", missing:"
    - gettoken val : 0
    - if (strpos("`val'", "val") > 0 ) {
    = if (strpos("var", "val") > 0 ) {
      gettoken val 0 : 0
      syntax anything [, nofix]
      if "`fix'" != "" {
      local fix ", nofix"
      }
      gettoken var rest : anything
      while `"`rest'"' != "" {
      gettoken lab rest : rest
      local label "`lab'"
      }
      local vlist : list anything - lab
      if "`lab'" == "." {
      local lab ""
      }
      foreach var of varlist `vlist' {
      `vv' _label `val' `var' `lab' `fix'
      }
      }
    - else {
    - `vv' _label `macval(0)'
    = version 16, missing: _label var category_n "N respondents in income level 
> in post-merge dataset'"
    - }
    -------------------------------------------------------------- end label ---
  - di "Merged ASEC values with original Research dataset for inc_level " `inc_l
> evel' " ($`lower_bound'-`upper_bound') and year `y'."
  = di "Merged ASEC values with original Research dataset for inc_level " 9 " ($
> 200000-999999) and year 2019."
Merged ASEC values with original Research dataset for inc_level 9 ($200000-99999
> 9) and year 2019.
  - tempfile temp_`inc_level'_`y'
  = tempfile temp_9_2019
  - save `temp_`inc_level'_`y'', replace
  = save /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000l, repla
> ce
(note: file /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000l not
>  found)
file /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000l saved
  - di "Saved REDI data (with continuous data) for inc_level " `inc_level' " ($`
> lower_bound'-`upper_bound') and year `y' in file"
  = di "Saved REDI data (with continuous data) for inc_level " 9 " ($200000-9999
> 99) and year 2019 in file"
Saved REDI data (with continuous data) for inc_level 9 ($200000-999999) and year
>  2019 in file
  - }
  - tokenize ``inc_cat_var'_levels'
  = tokenize 1 2 3 4 5 6 7 8 9
  - local first `1'
  = local first 1
  - use `temp_`1'_`y'', clear
  = use /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.000005, clear
  - macro shift
  - local rest `*'
  = local rest 2 3 4 5 6 7 8 9
  - foreach bracket in `*' {
  = foreach bracket in 2 3 4 5 6 7 8 9 {
  - append using `temp_`bracket'_`y''
  = append using /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000
> 7
    ----------------------------------------------------------- begin append ---
    - version 11
    - if (_caller() < 11) {
      local version : di "version " string(_caller()) ":"
      `version' _append `0'
      exit
      }
    - syntax [anything(everything)] [, GENerate(name) * ]
    - gettoken using filenames : anything
    - if (`"`using'"' != "using") {
    = if (`"using"' != "using") {
      di as err "using required"
      exit 100
      }
    - if (`"`filenames'"' == "") {
    = if (`" /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.000007"' 
> == "") {
      di as err "invalid file specification"
      exit 198
      }
    - foreach filename of local filenames {
    - capture quietly describe using `"`filename'"'
    = capture quietly describe using `"/var/folders/rp/96l526kj7ybdjr5vs5bqqjw80
> 000gn/T//S_20065.000007"'
      ------------------------------------------------------- begin describe ---
      - version 9
      - local version : di "version " string(_caller()) ":"
      - syntax [anything] [using] [, SImple REPLACE *]
      - if ("`replace'"!="") {
      = if (""!="") {
        describe_mk `0'
        return add
        exit
        }
      - local varlist `"`anything'"'
      = local varlist `""'
      - if ("`simple'" == "") {
      = if ("" == "") {
      - `version' _describe `0'
      = version 11: _describe using `"/var/folders/rp/96l526kj7ybdjr5vs5bqqjw800
> 00gn/T//S_20065.000007"'
      - return add
      - }
      - else {
        if (`"`options'"' != "") {
        di as err "simple may not be combined with other options"
        exit 198
        }
        if (`"`using'"' != "") {
        qui `version' describe `varlist' `using', varlist
        if "`varlist'" == "" {
        local vars "`r(varlist)'"
        }
        else {
        local vars "`varlist'"
        }
        local wid = 2
        local n : list sizeof vars
        if `n'==0 {
        exit
        }
        if "`c(hasicu)'" == "1" {
        foreach x of local vars {
        local wid = max(`wid', udstrlen(`"`x'"'))
        }
        }
        else {
        foreach x of local vars {
        local wid = max(`wid', strlen(`"`x'"'))
        }
        }
        local wid = `wid' + 2
        local cols = int((`c(linesize)'+1)/`wid')
        if `cols' < 2 {
        foreach x of local `vars' {
        di as txt `col' `"`x'"'
        }
        exit
        }
        local lines = `n'/`cols'
        local lines = int(cond(`lines'>int(`lines'), `lines'+1, `lines'))
        forvalues i=1(1)`lines' {
        local top = min((`cols')*`lines'+`i', `n')
        local col = 1
        forvalues j=`i'(`lines')`top' {
        local x : word `j' of `vars'
        di as txt _column(`col') "`x'" _c
        local col = `col' + `wid'
        }
        di as txt
        }
        qui `version' describe `varlist' `using', short
        return add
        }
        else {
        ds `varlist'
        qui `version' _describe `varlist', short
        return add
        }
        }
      --------------------------------------------------------- end describe ---
    - if (_rc) {
      di as err `"file `filename' not found"'
      exit 601
      }
    - }
    - if ("`generate'" != "") {
    = if ("" != "") {
      confirm new var `generate'
      local filenum 0
      gen byte `generate' = `filenum'
      local ++filenum
      local filenumpos = _N + 1
      }
    - foreach filename of local filenames {
    - capture noisily _append using `"`filename'"', `options'
    = capture noisily _append using `"/var/folders/rp/96l526kj7ybdjr5vs5bqqjw800
> 00gn/T//S_20065.000007"', 
(note: variable acs_hhinc_ub was int, now float to accommodate using data's
       values)
(label _merge already defined)
(label cat_inc already defined)
(label repwtp_lbl already defined)
(label repwt_lbl already defined)
(label statefip_lbl already defined)
    - if _rc {
      if ("`generate'" != "") {
      capture quietly drop if `generate' > 0
      capture quietly drop `generate'
      }
      exit _rc
      }
    - if ("`generate'" != "") {
    = if ("" != "") {
      quietly replace `generate' = `filenum' in `filenumpos'/L
      local ++filenum
      local filenumpos = _N + 1
      }
    - }
    ------------------------------------------------------------- end append ---
  - }
  - append using `temp_`bracket'_`y''
  = append using /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000
> 9
    ----------------------------------------------------------- begin append ---
    - version 11
    - if (_caller() < 11) {
      local version : di "version " string(_caller()) ":"
      `version' _append `0'
      exit
      }
    - syntax [anything(everything)] [, GENerate(name) * ]
    - gettoken using filenames : anything
    - if (`"`using'"' != "using") {
    = if (`"using"' != "using") {
      di as err "using required"
      exit 100
      }
    - if (`"`filenames'"' == "") {
    = if (`" /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.000009"' 
> == "") {
      di as err "invalid file specification"
      exit 198
      }
    - foreach filename of local filenames {
    - capture quietly describe using `"`filename'"'
    = capture quietly describe using `"/var/folders/rp/96l526kj7ybdjr5vs5bqqjw80
> 000gn/T//S_20065.000009"'
      ------------------------------------------------------- begin describe ---
      - version 9
      - local version : di "version " string(_caller()) ":"
      - syntax [anything] [using] [, SImple REPLACE *]
      - if ("`replace'"!="") {
      = if (""!="") {
        describe_mk `0'
        return add
        exit
        }
      - local varlist `"`anything'"'
      = local varlist `""'
      - if ("`simple'" == "") {
      = if ("" == "") {
      - `version' _describe `0'
      = version 11: _describe using `"/var/folders/rp/96l526kj7ybdjr5vs5bqqjw800
> 00gn/T//S_20065.000009"'
      - return add
      - }
      - else {
        if (`"`options'"' != "") {
        di as err "simple may not be combined with other options"
        exit 198
        }
        if (`"`using'"' != "") {
        qui `version' describe `varlist' `using', varlist
        if "`varlist'" == "" {
        local vars "`r(varlist)'"
        }
        else {
        local vars "`varlist'"
        }
        local wid = 2
        local n : list sizeof vars
        if `n'==0 {
        exit
        }
        if "`c(hasicu)'" == "1" {
        foreach x of local vars {
        local wid = max(`wid', udstrlen(`"`x'"'))
        }
        }
        else {
        foreach x of local vars {
        local wid = max(`wid', strlen(`"`x'"'))
        }
        }
        local wid = `wid' + 2
        local cols = int((`c(linesize)'+1)/`wid')
        if `cols' < 2 {
        foreach x of local `vars' {
        di as txt `col' `"`x'"'
        }
        exit
        }
        local lines = `n'/`cols'
        local lines = int(cond(`lines'>int(`lines'), `lines'+1, `lines'))
        forvalues i=1(1)`lines' {
        local top = min((`cols')*`lines'+`i', `n')
        local col = 1
        forvalues j=`i'(`lines')`top' {
        local x : word `j' of `vars'
        di as txt _column(`col') "`x'" _c
        local col = `col' + `wid'
        }
        di as txt
        }
        qui `version' describe `varlist' `using', short
        return add
        }
        else {
        ds `varlist'
        qui `version' _describe `varlist', short
        return add
        }
        }
      --------------------------------------------------------- end describe ---
    - if (_rc) {
      di as err `"file `filename' not found"'
      exit 601
      }
    - }
    - if ("`generate'" != "") {
    = if ("" != "") {
      confirm new var `generate'
      local filenum 0
      gen byte `generate' = `filenum'
      local ++filenum
      local filenumpos = _N + 1
      }
    - foreach filename of local filenames {
    - capture noisily _append using `"`filename'"', `options'
    = capture noisily _append using `"/var/folders/rp/96l526kj7ybdjr5vs5bqqjw800
> 00gn/T//S_20065.000009"', 
(label _merge already defined)
(label cat_inc already defined)
(label repwtp_lbl already defined)
(label repwt_lbl already defined)
(label statefip_lbl already defined)
    - if _rc {
      if ("`generate'" != "") {
      capture quietly drop if `generate' > 0
      capture quietly drop `generate'
      }
      exit _rc
      }
    - if ("`generate'" != "") {
    = if ("" != "") {
      quietly replace `generate' = `filenum' in `filenumpos'/L
      local ++filenum
      local filenumpos = _N + 1
      }
    - }
    ------------------------------------------------------------- end append ---
  - }
  - append using `temp_`bracket'_`y''
  = append using /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000
> b
    ----------------------------------------------------------- begin append ---
    - version 11
    - if (_caller() < 11) {
      local version : di "version " string(_caller()) ":"
      `version' _append `0'
      exit
      }
    - syntax [anything(everything)] [, GENerate(name) * ]
    - gettoken using filenames : anything
    - if (`"`using'"' != "using") {
    = if (`"using"' != "using") {
      di as err "using required"
      exit 100
      }
    - if (`"`filenames'"' == "") {
    = if (`" /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000b"' 
> == "") {
      di as err "invalid file specification"
      exit 198
      }
    - foreach filename of local filenames {
    - capture quietly describe using `"`filename'"'
    = capture quietly describe using `"/var/folders/rp/96l526kj7ybdjr5vs5bqqjw80
> 000gn/T//S_20065.00000b"'
      ------------------------------------------------------- begin describe ---
      - version 9
      - local version : di "version " string(_caller()) ":"
      - syntax [anything] [using] [, SImple REPLACE *]
      - if ("`replace'"!="") {
      = if (""!="") {
        describe_mk `0'
        return add
        exit
        }
      - local varlist `"`anything'"'
      = local varlist `""'
      - if ("`simple'" == "") {
      = if ("" == "") {
      - `version' _describe `0'
      = version 11: _describe using `"/var/folders/rp/96l526kj7ybdjr5vs5bqqjw800
> 00gn/T//S_20065.00000b"'
      - return add
      - }
      - else {
        if (`"`options'"' != "") {
        di as err "simple may not be combined with other options"
        exit 198
        }
        if (`"`using'"' != "") {
        qui `version' describe `varlist' `using', varlist
        if "`varlist'" == "" {
        local vars "`r(varlist)'"
        }
        else {
        local vars "`varlist'"
        }
        local wid = 2
        local n : list sizeof vars
        if `n'==0 {
        exit
        }
        if "`c(hasicu)'" == "1" {
        foreach x of local vars {
        local wid = max(`wid', udstrlen(`"`x'"'))
        }
        }
        else {
        foreach x of local vars {
        local wid = max(`wid', strlen(`"`x'"'))
        }
        }
        local wid = `wid' + 2
        local cols = int((`c(linesize)'+1)/`wid')
        if `cols' < 2 {
        foreach x of local `vars' {
        di as txt `col' `"`x'"'
        }
        exit
        }
        local lines = `n'/`cols'
        local lines = int(cond(`lines'>int(`lines'), `lines'+1, `lines'))
        forvalues i=1(1)`lines' {
        local top = min((`cols')*`lines'+`i', `n')
        local col = 1
        forvalues j=`i'(`lines')`top' {
        local x : word `j' of `vars'
        di as txt _column(`col') "`x'" _c
        local col = `col' + `wid'
        }
        di as txt
        }
        qui `version' describe `varlist' `using', short
        return add
        }
        else {
        ds `varlist'
        qui `version' _describe `varlist', short
        return add
        }
        }
      --------------------------------------------------------- end describe ---
    - if (_rc) {
      di as err `"file `filename' not found"'
      exit 601
      }
    - }
    - if ("`generate'" != "") {
    = if ("" != "") {
      confirm new var `generate'
      local filenum 0
      gen byte `generate' = `filenum'
      local ++filenum
      local filenumpos = _N + 1
      }
    - foreach filename of local filenames {
    - capture noisily _append using `"`filename'"', `options'
    = capture noisily _append using `"/var/folders/rp/96l526kj7ybdjr5vs5bqqjw800
> 00gn/T//S_20065.00000b"', 
(label _merge already defined)
(label cat_inc already defined)
(label repwtp_lbl already defined)
(label repwt_lbl already defined)
(label statefip_lbl already defined)
    - if _rc {
      if ("`generate'" != "") {
      capture quietly drop if `generate' > 0
      capture quietly drop `generate'
      }
      exit _rc
      }
    - if ("`generate'" != "") {
    = if ("" != "") {
      quietly replace `generate' = `filenum' in `filenumpos'/L
      local ++filenum
      local filenumpos = _N + 1
      }
    - }
    ------------------------------------------------------------- end append ---
  - }
  - append using `temp_`bracket'_`y''
  = append using /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000
> d
    ----------------------------------------------------------- begin append ---
    - version 11
    - if (_caller() < 11) {
      local version : di "version " string(_caller()) ":"
      `version' _append `0'
      exit
      }
    - syntax [anything(everything)] [, GENerate(name) * ]
    - gettoken using filenames : anything
    - if (`"`using'"' != "using") {
    = if (`"using"' != "using") {
      di as err "using required"
      exit 100
      }
    - if (`"`filenames'"' == "") {
    = if (`" /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000d"' 
> == "") {
      di as err "invalid file specification"
      exit 198
      }
    - foreach filename of local filenames {
    - capture quietly describe using `"`filename'"'
    = capture quietly describe using `"/var/folders/rp/96l526kj7ybdjr5vs5bqqjw80
> 000gn/T//S_20065.00000d"'
      ------------------------------------------------------- begin describe ---
      - version 9
      - local version : di "version " string(_caller()) ":"
      - syntax [anything] [using] [, SImple REPLACE *]
      - if ("`replace'"!="") {
      = if (""!="") {
        describe_mk `0'
        return add
        exit
        }
      - local varlist `"`anything'"'
      = local varlist `""'
      - if ("`simple'" == "") {
      = if ("" == "") {
      - `version' _describe `0'
      = version 11: _describe using `"/var/folders/rp/96l526kj7ybdjr5vs5bqqjw800
> 00gn/T//S_20065.00000d"'
      - return add
      - }
      - else {
        if (`"`options'"' != "") {
        di as err "simple may not be combined with other options"
        exit 198
        }
        if (`"`using'"' != "") {
        qui `version' describe `varlist' `using', varlist
        if "`varlist'" == "" {
        local vars "`r(varlist)'"
        }
        else {
        local vars "`varlist'"
        }
        local wid = 2
        local n : list sizeof vars
        if `n'==0 {
        exit
        }
        if "`c(hasicu)'" == "1" {
        foreach x of local vars {
        local wid = max(`wid', udstrlen(`"`x'"'))
        }
        }
        else {
        foreach x of local vars {
        local wid = max(`wid', strlen(`"`x'"'))
        }
        }
        local wid = `wid' + 2
        local cols = int((`c(linesize)'+1)/`wid')
        if `cols' < 2 {
        foreach x of local `vars' {
        di as txt `col' `"`x'"'
        }
        exit
        }
        local lines = `n'/`cols'
        local lines = int(cond(`lines'>int(`lines'), `lines'+1, `lines'))
        forvalues i=1(1)`lines' {
        local top = min((`cols')*`lines'+`i', `n')
        local col = 1
        forvalues j=`i'(`lines')`top' {
        local x : word `j' of `vars'
        di as txt _column(`col') "`x'" _c
        local col = `col' + `wid'
        }
        di as txt
        }
        qui `version' describe `varlist' `using', short
        return add
        }
        else {
        ds `varlist'
        qui `version' _describe `varlist', short
        return add
        }
        }
      --------------------------------------------------------- end describe ---
    - if (_rc) {
      di as err `"file `filename' not found"'
      exit 601
      }
    - }
    - if ("`generate'" != "") {
    = if ("" != "") {
      confirm new var `generate'
      local filenum 0
      gen byte `generate' = `filenum'
      local ++filenum
      local filenumpos = _N + 1
      }
    - foreach filename of local filenames {
    - capture noisily _append using `"`filename'"', `options'
    = capture noisily _append using `"/var/folders/rp/96l526kj7ybdjr5vs5bqqjw800
> 00gn/T//S_20065.00000d"', 
(label _merge already defined)
(label cat_inc already defined)
(label repwtp_lbl already defined)
(label repwt_lbl already defined)
(label statefip_lbl already defined)
    - if _rc {
      if ("`generate'" != "") {
      capture quietly drop if `generate' > 0
      capture quietly drop `generate'
      }
      exit _rc
      }
    - if ("`generate'" != "") {
    = if ("" != "") {
      quietly replace `generate' = `filenum' in `filenumpos'/L
      local ++filenum
      local filenumpos = _N + 1
      }
    - }
    ------------------------------------------------------------- end append ---
  - }
  - append using `temp_`bracket'_`y''
  = append using /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000
> f
    ----------------------------------------------------------- begin append ---
    - version 11
    - if (_caller() < 11) {
      local version : di "version " string(_caller()) ":"
      `version' _append `0'
      exit
      }
    - syntax [anything(everything)] [, GENerate(name) * ]
    - gettoken using filenames : anything
    - if (`"`using'"' != "using") {
    = if (`"using"' != "using") {
      di as err "using required"
      exit 100
      }
    - if (`"`filenames'"' == "") {
    = if (`" /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000f"' 
> == "") {
      di as err "invalid file specification"
      exit 198
      }
    - foreach filename of local filenames {
    - capture quietly describe using `"`filename'"'
    = capture quietly describe using `"/var/folders/rp/96l526kj7ybdjr5vs5bqqjw80
> 000gn/T//S_20065.00000f"'
      ------------------------------------------------------- begin describe ---
      - version 9
      - local version : di "version " string(_caller()) ":"
      - syntax [anything] [using] [, SImple REPLACE *]
      - if ("`replace'"!="") {
      = if (""!="") {
        describe_mk `0'
        return add
        exit
        }
      - local varlist `"`anything'"'
      = local varlist `""'
      - if ("`simple'" == "") {
      = if ("" == "") {
      - `version' _describe `0'
      = version 11: _describe using `"/var/folders/rp/96l526kj7ybdjr5vs5bqqjw800
> 00gn/T//S_20065.00000f"'
      - return add
      - }
      - else {
        if (`"`options'"' != "") {
        di as err "simple may not be combined with other options"
        exit 198
        }
        if (`"`using'"' != "") {
        qui `version' describe `varlist' `using', varlist
        if "`varlist'" == "" {
        local vars "`r(varlist)'"
        }
        else {
        local vars "`varlist'"
        }
        local wid = 2
        local n : list sizeof vars
        if `n'==0 {
        exit
        }
        if "`c(hasicu)'" == "1" {
        foreach x of local vars {
        local wid = max(`wid', udstrlen(`"`x'"'))
        }
        }
        else {
        foreach x of local vars {
        local wid = max(`wid', strlen(`"`x'"'))
        }
        }
        local wid = `wid' + 2
        local cols = int((`c(linesize)'+1)/`wid')
        if `cols' < 2 {
        foreach x of local `vars' {
        di as txt `col' `"`x'"'
        }
        exit
        }
        local lines = `n'/`cols'
        local lines = int(cond(`lines'>int(`lines'), `lines'+1, `lines'))
        forvalues i=1(1)`lines' {
        local top = min((`cols')*`lines'+`i', `n')
        local col = 1
        forvalues j=`i'(`lines')`top' {
        local x : word `j' of `vars'
        di as txt _column(`col') "`x'" _c
        local col = `col' + `wid'
        }
        di as txt
        }
        qui `version' describe `varlist' `using', short
        return add
        }
        else {
        ds `varlist'
        qui `version' _describe `varlist', short
        return add
        }
        }
      --------------------------------------------------------- end describe ---
    - if (_rc) {
      di as err `"file `filename' not found"'
      exit 601
      }
    - }
    - if ("`generate'" != "") {
    = if ("" != "") {
      confirm new var `generate'
      local filenum 0
      gen byte `generate' = `filenum'
      local ++filenum
      local filenumpos = _N + 1
      }
    - foreach filename of local filenames {
    - capture noisily _append using `"`filename'"', `options'
    = capture noisily _append using `"/var/folders/rp/96l526kj7ybdjr5vs5bqqjw800
> 00gn/T//S_20065.00000f"', 
(label _merge already defined)
(label cat_inc already defined)
(label repwtp_lbl already defined)
(label repwt_lbl already defined)
(label statefip_lbl already defined)
    - if _rc {
      if ("`generate'" != "") {
      capture quietly drop if `generate' > 0
      capture quietly drop `generate'
      }
      exit _rc
      }
    - if ("`generate'" != "") {
    = if ("" != "") {
      quietly replace `generate' = `filenum' in `filenumpos'/L
      local ++filenum
      local filenumpos = _N + 1
      }
    - }
    ------------------------------------------------------------- end append ---
  - }
  - append using `temp_`bracket'_`y''
  = append using /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000
> h
    ----------------------------------------------------------- begin append ---
    - version 11
    - if (_caller() < 11) {
      local version : di "version " string(_caller()) ":"
      `version' _append `0'
      exit
      }
    - syntax [anything(everything)] [, GENerate(name) * ]
    - gettoken using filenames : anything
    - if (`"`using'"' != "using") {
    = if (`"using"' != "using") {
      di as err "using required"
      exit 100
      }
    - if (`"`filenames'"' == "") {
    = if (`" /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000h"' 
> == "") {
      di as err "invalid file specification"
      exit 198
      }
    - foreach filename of local filenames {
    - capture quietly describe using `"`filename'"'
    = capture quietly describe using `"/var/folders/rp/96l526kj7ybdjr5vs5bqqjw80
> 000gn/T//S_20065.00000h"'
      ------------------------------------------------------- begin describe ---
      - version 9
      - local version : di "version " string(_caller()) ":"
      - syntax [anything] [using] [, SImple REPLACE *]
      - if ("`replace'"!="") {
      = if (""!="") {
        describe_mk `0'
        return add
        exit
        }
      - local varlist `"`anything'"'
      = local varlist `""'
      - if ("`simple'" == "") {
      = if ("" == "") {
      - `version' _describe `0'
      = version 11: _describe using `"/var/folders/rp/96l526kj7ybdjr5vs5bqqjw800
> 00gn/T//S_20065.00000h"'
      - return add
      - }
      - else {
        if (`"`options'"' != "") {
        di as err "simple may not be combined with other options"
        exit 198
        }
        if (`"`using'"' != "") {
        qui `version' describe `varlist' `using', varlist
        if "`varlist'" == "" {
        local vars "`r(varlist)'"
        }
        else {
        local vars "`varlist'"
        }
        local wid = 2
        local n : list sizeof vars
        if `n'==0 {
        exit
        }
        if "`c(hasicu)'" == "1" {
        foreach x of local vars {
        local wid = max(`wid', udstrlen(`"`x'"'))
        }
        }
        else {
        foreach x of local vars {
        local wid = max(`wid', strlen(`"`x'"'))
        }
        }
        local wid = `wid' + 2
        local cols = int((`c(linesize)'+1)/`wid')
        if `cols' < 2 {
        foreach x of local `vars' {
        di as txt `col' `"`x'"'
        }
        exit
        }
        local lines = `n'/`cols'
        local lines = int(cond(`lines'>int(`lines'), `lines'+1, `lines'))
        forvalues i=1(1)`lines' {
        local top = min((`cols')*`lines'+`i', `n')
        local col = 1
        forvalues j=`i'(`lines')`top' {
        local x : word `j' of `vars'
        di as txt _column(`col') "`x'" _c
        local col = `col' + `wid'
        }
        di as txt
        }
        qui `version' describe `varlist' `using', short
        return add
        }
        else {
        ds `varlist'
        qui `version' _describe `varlist', short
        return add
        }
        }
      --------------------------------------------------------- end describe ---
    - if (_rc) {
      di as err `"file `filename' not found"'
      exit 601
      }
    - }
    - if ("`generate'" != "") {
    = if ("" != "") {
      confirm new var `generate'
      local filenum 0
      gen byte `generate' = `filenum'
      local ++filenum
      local filenumpos = _N + 1
      }
    - foreach filename of local filenames {
    - capture noisily _append using `"`filename'"', `options'
    = capture noisily _append using `"/var/folders/rp/96l526kj7ybdjr5vs5bqqjw800
> 00gn/T//S_20065.00000h"', 
(label _merge already defined)
(label cat_inc already defined)
(label repwtp_lbl already defined)
(label repwt_lbl already defined)
(label statefip_lbl already defined)
    - if _rc {
      if ("`generate'" != "") {
      capture quietly drop if `generate' > 0
      capture quietly drop `generate'
      }
      exit _rc
      }
    - if ("`generate'" != "") {
    = if ("" != "") {
      quietly replace `generate' = `filenum' in `filenumpos'/L
      local ++filenum
      local filenumpos = _N + 1
      }
    - }
    ------------------------------------------------------------- end append ---
  - }
  - append using `temp_`bracket'_`y''
  = append using /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000
> j
    ----------------------------------------------------------- begin append ---
    - version 11
    - if (_caller() < 11) {
      local version : di "version " string(_caller()) ":"
      `version' _append `0'
      exit
      }
    - syntax [anything(everything)] [, GENerate(name) * ]
    - gettoken using filenames : anything
    - if (`"`using'"' != "using") {
    = if (`"using"' != "using") {
      di as err "using required"
      exit 100
      }
    - if (`"`filenames'"' == "") {
    = if (`" /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000j"' 
> == "") {
      di as err "invalid file specification"
      exit 198
      }
    - foreach filename of local filenames {
    - capture quietly describe using `"`filename'"'
    = capture quietly describe using `"/var/folders/rp/96l526kj7ybdjr5vs5bqqjw80
> 000gn/T//S_20065.00000j"'
      ------------------------------------------------------- begin describe ---
      - version 9
      - local version : di "version " string(_caller()) ":"
      - syntax [anything] [using] [, SImple REPLACE *]
      - if ("`replace'"!="") {
      = if (""!="") {
        describe_mk `0'
        return add
        exit
        }
      - local varlist `"`anything'"'
      = local varlist `""'
      - if ("`simple'" == "") {
      = if ("" == "") {
      - `version' _describe `0'
      = version 11: _describe using `"/var/folders/rp/96l526kj7ybdjr5vs5bqqjw800
> 00gn/T//S_20065.00000j"'
      - return add
      - }
      - else {
        if (`"`options'"' != "") {
        di as err "simple may not be combined with other options"
        exit 198
        }
        if (`"`using'"' != "") {
        qui `version' describe `varlist' `using', varlist
        if "`varlist'" == "" {
        local vars "`r(varlist)'"
        }
        else {
        local vars "`varlist'"
        }
        local wid = 2
        local n : list sizeof vars
        if `n'==0 {
        exit
        }
        if "`c(hasicu)'" == "1" {
        foreach x of local vars {
        local wid = max(`wid', udstrlen(`"`x'"'))
        }
        }
        else {
        foreach x of local vars {
        local wid = max(`wid', strlen(`"`x'"'))
        }
        }
        local wid = `wid' + 2
        local cols = int((`c(linesize)'+1)/`wid')
        if `cols' < 2 {
        foreach x of local `vars' {
        di as txt `col' `"`x'"'
        }
        exit
        }
        local lines = `n'/`cols'
        local lines = int(cond(`lines'>int(`lines'), `lines'+1, `lines'))
        forvalues i=1(1)`lines' {
        local top = min((`cols')*`lines'+`i', `n')
        local col = 1
        forvalues j=`i'(`lines')`top' {
        local x : word `j' of `vars'
        di as txt _column(`col') "`x'" _c
        local col = `col' + `wid'
        }
        di as txt
        }
        qui `version' describe `varlist' `using', short
        return add
        }
        else {
        ds `varlist'
        qui `version' _describe `varlist', short
        return add
        }
        }
      --------------------------------------------------------- end describe ---
    - if (_rc) {
      di as err `"file `filename' not found"'
      exit 601
      }
    - }
    - if ("`generate'" != "") {
    = if ("" != "") {
      confirm new var `generate'
      local filenum 0
      gen byte `generate' = `filenum'
      local ++filenum
      local filenumpos = _N + 1
      }
    - foreach filename of local filenames {
    - capture noisily _append using `"`filename'"', `options'
    = capture noisily _append using `"/var/folders/rp/96l526kj7ybdjr5vs5bqqjw800
> 00gn/T//S_20065.00000j"', 
(label _merge already defined)
(label cat_inc already defined)
(label repwtp_lbl already defined)
(label repwt_lbl already defined)
(label statefip_lbl already defined)
    - if _rc {
      if ("`generate'" != "") {
      capture quietly drop if `generate' > 0
      capture quietly drop `generate'
      }
      exit _rc
      }
    - if ("`generate'" != "") {
    = if ("" != "") {
      quietly replace `generate' = `filenum' in `filenumpos'/L
      local ++filenum
      local filenumpos = _N + 1
      }
    - }
    ------------------------------------------------------------- end append ---
  - }
  - append using `temp_`bracket'_`y''
  = append using /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000
> l
    ----------------------------------------------------------- begin append ---
    - version 11
    - if (_caller() < 11) {
      local version : di "version " string(_caller()) ":"
      `version' _append `0'
      exit
      }
    - syntax [anything(everything)] [, GENerate(name) * ]
    - gettoken using filenames : anything
    - if (`"`using'"' != "using") {
    = if (`"using"' != "using") {
      di as err "using required"
      exit 100
      }
    - if (`"`filenames'"' == "") {
    = if (`" /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000l"' 
> == "") {
      di as err "invalid file specification"
      exit 198
      }
    - foreach filename of local filenames {
    - capture quietly describe using `"`filename'"'
    = capture quietly describe using `"/var/folders/rp/96l526kj7ybdjr5vs5bqqjw80
> 000gn/T//S_20065.00000l"'
      ------------------------------------------------------- begin describe ---
      - version 9
      - local version : di "version " string(_caller()) ":"
      - syntax [anything] [using] [, SImple REPLACE *]
      - if ("`replace'"!="") {
      = if (""!="") {
        describe_mk `0'
        return add
        exit
        }
      - local varlist `"`anything'"'
      = local varlist `""'
      - if ("`simple'" == "") {
      = if ("" == "") {
      - `version' _describe `0'
      = version 11: _describe using `"/var/folders/rp/96l526kj7ybdjr5vs5bqqjw800
> 00gn/T//S_20065.00000l"'
      - return add
      - }
      - else {
        if (`"`options'"' != "") {
        di as err "simple may not be combined with other options"
        exit 198
        }
        if (`"`using'"' != "") {
        qui `version' describe `varlist' `using', varlist
        if "`varlist'" == "" {
        local vars "`r(varlist)'"
        }
        else {
        local vars "`varlist'"
        }
        local wid = 2
        local n : list sizeof vars
        if `n'==0 {
        exit
        }
        if "`c(hasicu)'" == "1" {
        foreach x of local vars {
        local wid = max(`wid', udstrlen(`"`x'"'))
        }
        }
        else {
        foreach x of local vars {
        local wid = max(`wid', strlen(`"`x'"'))
        }
        }
        local wid = `wid' + 2
        local cols = int((`c(linesize)'+1)/`wid')
        if `cols' < 2 {
        foreach x of local `vars' {
        di as txt `col' `"`x'"'
        }
        exit
        }
        local lines = `n'/`cols'
        local lines = int(cond(`lines'>int(`lines'), `lines'+1, `lines'))
        forvalues i=1(1)`lines' {
        local top = min((`cols')*`lines'+`i', `n')
        local col = 1
        forvalues j=`i'(`lines')`top' {
        local x : word `j' of `vars'
        di as txt _column(`col') "`x'" _c
        local col = `col' + `wid'
        }
        di as txt
        }
        qui `version' describe `varlist' `using', short
        return add
        }
        else {
        ds `varlist'
        qui `version' _describe `varlist', short
        return add
        }
        }
      --------------------------------------------------------- end describe ---
    - if (_rc) {
      di as err `"file `filename' not found"'
      exit 601
      }
    - }
    - if ("`generate'" != "") {
    = if ("" != "") {
      confirm new var `generate'
      local filenum 0
      gen byte `generate' = `filenum'
      local ++filenum
      local filenumpos = _N + 1
      }
    - foreach filename of local filenames {
    - capture noisily _append using `"`filename'"', `options'
    = capture noisily _append using `"/var/folders/rp/96l526kj7ybdjr5vs5bqqjw800
> 00gn/T//S_20065.00000l"', 
(note: variable acs_hhinc_lb was float, now double to accommodate using data's
       values)
(label _merge already defined)
(label cat_inc already defined)
(label repwtp_lbl already defined)
(label repwt_lbl already defined)
(label statefip_lbl already defined)
    - if _rc {
      if ("`generate'" != "") {
      capture quietly drop if `generate' > 0
      capture quietly drop `generate'
      }
      exit _rc
      }
    - if ("`generate'" != "") {
    = if ("" != "") {
      quietly replace `generate' = `filenum' in `filenumpos'/L
      local ++filenum
      local filenumpos = _N + 1
      }
    - }
    ------------------------------------------------------------- end append ---
  - }
  - tempfile temp_`y'
  = tempfile temp_2019
  - save `temp_`y'', replace
  = save /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000m, repla
> ce
(note: file /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000m not
>  found)
file /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000m saved
  - di "Saved new tempfile for year `y' for all REDI  income levels."
  = di "Saved new tempfile for year 2019 for all REDI  income levels."
Saved new tempfile for year 2019 for all REDI  income levels.
  - }
  - tokenize `years'
  = tokenize 2019
  - local first `1'
  = local first 2019
  - use `temp_`1'', clear
  = use /var/folders/rp/96l526kj7ybdjr5vs5bqqjw80000gn/T//S_20065.00000m, clear
  - macro shift
  - local rest `*'
  = local rest 
  - foreach ytemp in `*' {
  = foreach ytemp in  {
    append using `temp_`ytemp''
    }
  - di "Appended all years "
Appended all years 
  - drop obs_no id inc_decoded
  - drop _merge
  - gen `new_variable' = `ref_income_var'
  = gen ca_redi_inc19 = hhincome
  - format `new_variable' %6.0fc
  = format ca_redi_inc19 %6.0fc
  - label var `new_variable' "REDI continuous `inc_cat_var' income"
  = label var ca_redi_inc19 "REDI continuous acs_hhinc income"
    ------------------------------------------------------------ begin label ---
    - version 10.0
    - local vv : display "version " string(_caller()) ", missing:"
    - gettoken val : 0
    - if (strpos("`val'", "val") > 0 ) {
    = if (strpos("var", "val") > 0 ) {
      gettoken val 0 : 0
      syntax anything [, nofix]
      if "`fix'" != "" {
      local fix ", nofix"
      }
      gettoken var rest : anything
      while `"`rest'"' != "" {
      gettoken lab rest : rest
      local label "`lab'"
      }
      local vlist : list anything - lab
      if "`lab'" == "." {
      local lab ""
      }
      foreach var of varlist `vlist' {
      `vv' _label `val' `var' `lab' `fix'
      }
      }
    - else {
    - `vv' _label `macval(0)'
    = version 16, missing: _label var ca_redi_inc19 "REDI continuous acs_hhinc i
> ncome"
    - }
    -------------------------------------------------------------- end label ---
  ----------------------------------------------------------------- end redi ---

. 
. *redi inc_research_dataset year, gen(newvarname) inflation
. *if inflation is not specified, it will be 0, so then
. 
. * want to look something like:
. * redi inc_var(acs_hhinc) year(year), newvar = ca_redi_inc19 inflate(2020)
. * or simply:
. * redi acs_hhinc year, ca_redi_inc19 2020.
. 
. ***--------------------------***
. 
. capture log close redi_to_run_program
